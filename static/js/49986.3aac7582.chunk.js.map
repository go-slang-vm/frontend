{"version":3,"file":"static/js/49986.3aac7582.chunk.js","mappings":"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","sources":["commons/ReactRouterPrompt.tsx","commons/collabEditing/CollabEditingHelper.ts","commons/controlBar/ControlBar.tsx","commons/controlBar/ControlBarClearButton.tsx","commons/controlBar/ControlBarEvalButton.tsx","commons/sourceRecorder/SourceRecorderEditor.tsx","commons/editor/EditorHotkeys.ts","commons/editor/UseHighlighting.tsx","commons/editor/UseNavigation.tsx","commons/editor/UseRefactor.tsx","commons/editor/UseShareAce.tsx","commons/editor/Editor.tsx","commons/editor/tabs/EditorTab.tsx","commons/editor/tabs/utils.ts","commons/editor/tabs/EditorTabContainer.tsx","commons/editor/EditorContainer.tsx","commons/mcqChooser/McqChooser.tsx","commons/sideBar/SideBar.tsx","commons/workspace/Workspace.tsx"],"sourcesContent":["/**\n * Intermediate implementation of deprecated <Prompt /> component\n * from react-router-dom's v5 to v6 upgrade.\n *\n * react-router-dom plans to bring <Prompt /> back in the future. Until then,\n * we can use this suggested implementation.\n *\n * See: https://github.com/remix-run/react-router/issues/8139#issuecomment-1382428200\n */\nimport React from 'react';\nimport { useBeforeUnload, useBlocker } from 'react-router-dom';\n\n// You can abstract `useBlocker` to use the browser's `window.confirm` dialog to\n// determine whether or not the user should navigate within the current origin.\n// `useBlocker` can also be used in conjunction with `useBeforeUnload` to\n// prevent navigation away from the current origin.\n//\n// IMPORTANT: There are edge cases with this behavior in which React Router\n// cannot reliably access the correct location in the history stack. In such\n// cases the user may attempt to stay on the page but the app navigates anyway,\n// or the app may stay on the correct page but the browser's history stack gets\n// out of whack. You should test your own implementation thoroughly to make sure\n// the tradeoffs are right for your users.\nfunction usePrompt(\n  message: string | null | undefined | false,\n  { beforeUnload }: { beforeUnload?: boolean } = {}\n) {\n  const blocker = useBlocker(\n    React.useCallback(\n      () => (typeof message === 'string' ? !window.confirm(message) : false),\n      [message]\n    )\n  );\n  const prevState = React.useRef(blocker.state);\n  React.useEffect(() => {\n    if (blocker.state === 'blocked') {\n      blocker.reset();\n    }\n    prevState.current = blocker.state;\n  }, [blocker]);\n\n  useBeforeUnload(\n    React.useCallback(\n      event => {\n        if (beforeUnload && typeof message === 'string') {\n          event.preventDefault();\n          event.returnValue = message;\n        }\n      },\n      [message, beforeUnload]\n    ),\n    { capture: true }\n  );\n}\n\n// You can also reimplement the v5 <Prompt> component API\nexport function Prompt({ when, message, ...props }: PromptProps) {\n  usePrompt(when ? message : false, props);\n  return null;\n}\n\ninterface PromptProps {\n  when: boolean;\n  message: string;\n  beforeUnload?: boolean;\n}\n","import Constants from '../utils/Constants';\n\nconst protocolMap = {\n  'http:': 'ws:',\n  'https:': 'wss:'\n};\n\nexport function getSessionUrl(sessionId: string, ws?: boolean): string {\n  const url = new URL(sessionId, Constants.sharedbBackendUrl);\n  if (ws) {\n    url.protocol = protocolMap[url.protocol];\n  }\n  return url.toString();\n}\n\nexport async function checkSessionIdExists(sessionId: string): Promise<boolean> {\n  const resp = await fetch(getSessionUrl(sessionId));\n\n  return resp && resp.ok;\n}\n\nexport async function createNewSession(initial: string): Promise<string> {\n  const resp = await fetch(Constants.sharedbBackendUrl, {\n    method: 'POST',\n    body: initial,\n    headers: { 'Content-Type': 'text/plain' }\n  });\n\n  if (!resp || !resp.ok) {\n    throw new Error(\n      resp ? `Could not create new session: ${await resp.text()}` : 'Unknown error creating session'\n    );\n  }\n\n  return resp.text();\n}\n","import { Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\n\nexport type ControlBarProps = {\n  editorButtons: Array<JSX.Element | null>;\n  flowButtons?: Array<JSX.Element | null>;\n  editingWorkspaceButtons?: Array<JSX.Element | null>;\n};\n\nconst ControlBar: React.FC<ControlBarProps> = props => {\n  const editorControl = (\n    <div className={classNames('ControlBar_editor', Classes.BUTTON_GROUP)}>\n      {props.editorButtons}\n    </div>\n  );\n\n  const flowControl = props.flowButtons && (\n    <div className={classNames('ControlBar_flow', Classes.BUTTON_GROUP)}>{props.flowButtons}</div>\n  );\n\n  const editingWorkspaceControl = (\n    <div className={classNames('ControlBar_editingWorkspace', Classes.BUTTON_GROUP)}>\n      {props.editingWorkspaceButtons}\n    </div>\n  );\n\n  return (\n    <div className=\"ControlBar\">\n      {editorControl}\n      {flowControl}\n      {editingWorkspaceControl}\n    </div>\n  );\n};\n\nexport default ControlBar;\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarClearButtonProps = {\n  handleReplOutputClear: () => void;\n};\n\nexport const ControlBarClearButton: React.FC<ControlBarClearButtonProps> = ({\n  handleReplOutputClear\n}) => {\n  return <ControlButton label=\"Clear\" icon={IconNames.REMOVE} onClick={handleReplOutputClear} />;\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarEvalButtonProps = {\n  handleReplEval: () => void;\n  isRunning: boolean;\n};\n\nexport const ControlBarEvalButton: React.FC<ControlBarEvalButtonProps> = ({\n  handleReplEval,\n  isRunning\n}) => {\n  return isRunning ? null : (\n    <Tooltip2 content=\"...or press shift-enter in the REPL\">\n      <ControlButton label=\"Eval\" icon={IconNames.CODE} onClick={handleReplEval} />\n    </Tooltip2>\n  );\n};\n","import 'ace-builds/src-noconflict/ext-searchbox';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport '@seancze/js-slang/dist/editors/ace/theme/source';\n\nimport { Ace } from 'ace-builds';\nimport { isEqual } from 'lodash';\nimport React from 'react';\nimport AceEditor, { IAceEditorProps } from 'react-ace';\nimport { HotKeys } from 'react-hotkeys';\n\nimport {\n  CodeDelta,\n  Input,\n  KeyboardCommand,\n  SelectionRange\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { EditorTabStateProps } from '../editor/Editor';\nimport { Position } from '../editor/EditorTypes';\nimport { EditorBinding } from '../WorkspaceSettingsContext';\n\n/**\n * @property editorValue - The string content of the react-ace editor\n * @property handleEditorChange  - A callback function\n *           for the react-ace editor's `onChange`\n * @property handleEvalEditor  - A callback function for evaluation\n *           of the editor's content, using `slang`\n * @property isEditorReadonly - Used for sourcecast only\n */\nexport type SourceRecorderEditorProps = DispatchProps &\n  EditorStateProps &\n  EditorTabStateProps &\n  OwnProps;\n\ntype DispatchProps = {\n  getTimerDuration?: () => number;\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (newEditorValue: string) => void;\n  handleEditorUpdateBreakpoints: (newBreakpoints: string[]) => void;\n  handleRecordInput?: (input: Input) => void;\n  handleUpdateHasUnsavedChanges?: (hasUnsavedChanges: boolean) => void;\n  onFocus?: (event: any, editor?: Ace.Editor) => void;\n  onBlur?: (event: any, editor?: Ace.Editor) => void;\n};\n\ntype EditorStateProps = {\n  codeDeltasToApply?: CodeDelta[] | null;\n  editorSessionId: string;\n  isEditorAutorun: boolean;\n  isEditorReadonly: boolean;\n  inputToApply?: Input | null;\n  isPlaying?: boolean;\n  isRecording?: boolean;\n  editorBinding?: EditorBinding;\n};\n\ntype OwnProps = {\n  setDraggableReplPosition?: () => void; // for the mobile Sourcecast Workspace\n};\n\nclass SourcecastEditor extends React.PureComponent<SourceRecorderEditorProps, {}> {\n  public ShareAce: any;\n  public AceEditor: React.RefObject<AceEditor>;\n  private onChangeMethod: (newCode: string, delta: CodeDelta) => void;\n  private onCursorChange: (selecction: any) => void;\n  private onSelectionChange: (selection: any) => void;\n\n  constructor(props: SourceRecorderEditorProps) {\n    super(props);\n    this.AceEditor = React.createRef();\n    this.ShareAce = null;\n    this.onChangeMethod = (newCode: string, delta: CodeDelta) => {\n      if (this.props.handleUpdateHasUnsavedChanges) {\n        this.props.handleUpdateHasUnsavedChanges(true);\n      }\n      this.props.handleEditorValueChange(newCode);\n      if (this.props.isRecording) {\n        this.props.handleRecordInput!({\n          type: 'codeDelta',\n          time: this.props.getTimerDuration!(),\n          data: delta\n        });\n      }\n      const annotations = this.AceEditor.current!.editor.getSession().getAnnotations();\n      if (this.props.isEditorAutorun && annotations.length === 0) {\n        this.props.handleEditorEval();\n      }\n    };\n    this.onCursorChange = (selection: any) => {\n      if (!this.props.isRecording) {\n        return;\n      }\n      const editorCursorPositionToBeApplied: Position = selection.getCursor();\n      this.props.handleRecordInput!({\n        type: 'cursorPositionChange',\n        time: this.props.getTimerDuration!(),\n        data: editorCursorPositionToBeApplied\n      });\n    };\n    this.onSelectionChange = (selection: any) => {\n      if (!this.props.isRecording) {\n        return;\n      }\n      const range: SelectionRange = selection.getRange();\n      const isBackwards: boolean = selection.isBackwards();\n      if (!isEqual(range.start, range.end)) {\n        this.props.handleRecordInput!({\n          type: 'selectionRangeData',\n          time: this.props.getTimerDuration!(),\n          data: { range, isBackwards }\n        });\n      }\n    };\n  }\n\n  public componentDidUpdate(prevProps: SourceRecorderEditorProps) {\n    const { codeDeltasToApply, inputToApply, newCursorPosition } = this.props;\n\n    if (codeDeltasToApply && codeDeltasToApply !== prevProps.codeDeltasToApply) {\n      this.AceEditor.current!.editor.session.getDocument().applyDeltas(codeDeltasToApply);\n      this.AceEditor.current!.editor.selection.clearSelection();\n    }\n\n    if (newCursorPosition && newCursorPosition !== prevProps.newCursorPosition) {\n      this.moveCursor(newCursorPosition);\n    }\n\n    if (!inputToApply || inputToApply === prevProps.inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'codeDelta':\n        this.AceEditor.current!.editor.session.getDocument().applyDelta(inputToApply.data);\n        this.AceEditor.current!.editor.selection.clearSelection();\n        break;\n      case 'cursorPositionChange':\n        this.moveCursor(inputToApply.data);\n        break;\n      case 'selectionRangeData':\n        const { range, isBackwards } = inputToApply.data;\n        this.AceEditor.current!.editor.selection.setRange(range, isBackwards);\n        break;\n      case 'keyboardCommand':\n        const keyboardCommand = inputToApply.data;\n        switch (keyboardCommand) {\n          case 'run':\n            this.props.handleEditorEval();\n            // Popup mobile draggable repl when there is a recorded 'run' evaluation\n            if (this.props.setDraggableReplPosition) {\n              this.props.setDraggableReplPosition();\n            }\n            break;\n        }\n        break;\n    }\n  }\n\n  public getBreakpoints() {\n    return this.AceEditor.current!.editor.session.getBreakpoints().filter(x => x != null);\n  }\n\n  public componentDidMount() {\n    if (!this.AceEditor || !this.AceEditor.current || !this.AceEditor.current.editor) {\n      return;\n    }\n    const editor = this.AceEditor.current!.editor;\n    const session = editor.getSession();\n\n    editor.on('gutterclick' as any, this.handleGutterClick);\n\n    // Change all info annotations to error annotations\n    session.on('changeAnnotation' as any, this.handleAnnotationChange(session));\n\n    const { onFocus, onBlur } = this.props;\n    if (onFocus) {\n      editor.on('focus', (event: Event) => onFocus(event, editor));\n    }\n    if (onBlur) {\n      editor.on('blur', (event: Event) => onBlur(event, editor));\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.ShareAce !== null) {\n      // Umounting... Closing websocket\n      this.ShareAce.WS.close();\n    }\n    this.ShareAce = null;\n  }\n\n  public getMarkers = () => {\n    const markerProps: IAceEditorProps['markers'] = [];\n    for (const lineNum of this.props.highlightedLines) {\n      markerProps.push({\n        startRow: lineNum[0],\n        startCol: 0,\n        endRow: lineNum[1],\n        endCol: 1,\n        className: 'myMarker',\n        type: 'fullLine'\n      });\n    }\n    return markerProps;\n  };\n\n  public render() {\n    return (\n      <HotKeys className=\"Editor bp4-card bp4-elevation-0\" handlers={handlers}>\n        <div className=\"row editor-react-ace\">\n          <AceEditor\n            className=\"react-ace\"\n            commands={[\n              {\n                name: 'evaluate',\n                bindKey: {\n                  win: 'Shift-Enter',\n                  mac: 'Shift-Enter'\n                },\n                exec: this.handleEvaluate\n              },\n              {\n                name: 'navigate',\n                bindKey: {\n                  win: 'Ctrl-B',\n                  mac: 'Command-B'\n                },\n                exec: this.handleDeclarationNavigate\n              }\n            ]}\n            editorProps={{\n              $blockScrolling: Infinity\n            }}\n            ref={this.AceEditor}\n            markers={this.getMarkers()}\n            fontSize={17}\n            height=\"100%\"\n            highlightActiveLine={false}\n            mode=\"javascript\"\n            onChange={this.onChangeMethod}\n            onCursorChange={this.onCursorChange}\n            onSelectionChange={this.onSelectionChange}\n            readOnly={this.props.isEditorReadonly}\n            theme=\"source\"\n            value={this.props.editorValue}\n            width=\"100%\"\n            setOptions={{\n              fontFamily: \"'Inconsolata', 'Consolas', monospace\"\n            }}\n            keyboardHandler={this.props.editorBinding}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  private handleGutterClick = (e: any) => {\n    const target = e.domEvent.target;\n    if (\n      target.className.indexOf('ace_gutter-cell') === -1 ||\n      !e.editor.isFocused() ||\n      e.clientX > 35 + target.getBoundingClientRect().left\n    ) {\n      return;\n    }\n\n    const row = e.getDocumentPosition().row;\n    const content = e.editor.session.getLine(row);\n    const breakpoints = e.editor.session.getBreakpoints(row, 0);\n    if (\n      breakpoints[row] === undefined &&\n      content.length !== 0 &&\n      !content.includes('//') &&\n      !content.includes('debugger;')\n    ) {\n      e.editor.session.setBreakpoint(row);\n    } else {\n      e.editor.session.clearBreakpoint(row);\n    }\n    e.stop();\n    this.props.handleEditorUpdateBreakpoints(e.editor.session.$breakpoints);\n  };\n\n  private handleAnnotationChange = (session: any) => () => {\n    const annotations = session.getAnnotations();\n    let count = 0;\n    for (const anno of annotations) {\n      if (anno.type === 'info') {\n        anno.type = 'error';\n        anno.className = 'ace_error';\n        count++;\n      }\n    }\n    if (count !== 0) {\n      session.setAnnotations(annotations);\n    }\n  };\n\n  private handleEvaluate = () => {\n    this.props.handleEditorEval();\n    if (!this.props.isRecording) {\n      return;\n    }\n    this.props.handleRecordInput!({\n      type: 'keyboardCommand',\n      time: this.props.getTimerDuration!(),\n      data: KeyboardCommand.run\n    });\n  };\n\n  // Used in navigating from occurence to navigation\n  private moveCursor = (position: Position) => {\n    this.AceEditor.current!.editor.selection.clearSelection();\n    this.AceEditor.current!.editor.moveCursorToPosition(position);\n    this.AceEditor.current!.editor.renderer.showCursor();\n    this.AceEditor.current!.editor.renderer.scrollCursorIntoView(position, 0.5);\n  };\n\n  private handleDeclarationNavigate = () => {\n    this.props.handleDeclarationNavigate(this.AceEditor.current!.editor.getCursorPosition());\n  };\n}\n\n/* Override handler, so does not trigger when focus is in editor */\nconst handlers = {\n  goGreen: () => {}\n};\n\nexport default SourcecastEditor;\n","export const keyBindings = {\n  evaluate: {\n    win: 'Shift-Enter',\n    mac: 'Shift-Enter'\n  },\n  navigate: {\n    win: 'Ctrl-B',\n    mac: 'Command-B'\n  },\n  refactor: {\n    win: 'Ctrl-M',\n    mac: 'Command-M'\n  },\n  highlightScope: {\n    win: 'Ctrl-Shift-H',\n    mac: 'Command-Shift-H'\n  }\n};\n\nexport type KeyFunction = keyof typeof keyBindings;\n","import { createContext, getAllOccurrencesInScope, getScope } from '@seancze/js-slang';\nimport { Ace, Range as AceRange } from 'ace-builds';\nimport React from 'react';\n\nimport { EditorHook } from './Editor';\n\nconst useHighlighting: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  const propsRef = React.useRef(inProps);\n  propsRef.current = inProps;\n  const markerIdsRef = React.useRef<Array<number>>([]);\n\n  const handleVariableHighlighting = React.useCallback(() => {\n    // using Ace Editor's way of highlighting as seen here: https://github.com/ajaxorg/ace/blob/master/lib/ace/editor.js#L497\n    // We use async blocks so we don't block the browser during editing\n\n    setTimeout(() => {\n      if (!reactAceRef.current) {\n        return;\n      }\n      const editor = reactAceRef.current.editor;\n      const session: Ace.EditSession = editor.session;\n      const code = session.getValue();\n      const chapterNumber = propsRef.current.sourceChapter;\n      const position = editor.getCursorPosition();\n      if (!session || !(session as any).bgTokenizer) {\n        return;\n      }\n      markerIdsRef.current.forEach(id => {\n        session.removeMarker(id);\n      });\n      const ranges = getAllOccurrencesInScope(code, createContext(chapterNumber), {\n        line: position.row + 1,\n        column: position.column\n      }).map(\n        loc => new AceRange(loc.start.line - 1, loc.start.column, loc.end.line - 1, loc.end.column)\n      );\n\n      const markerType = 'ace_variable_highlighting';\n      markerIdsRef.current = ranges.map(range => {\n        // returns the marker ID for removal later\n        return session.addMarker(range, markerType, 'text');\n      });\n    }, 10);\n  }, [reactAceRef]);\n\n  const handleHighlightScope = React.useCallback(() => {\n    if (!reactAceRef.current) {\n      return;\n    }\n    const editor = reactAceRef.current.editor;\n    const code = editor.getValue();\n    const chapter = propsRef.current.sourceChapter;\n    const position = editor.getCursorPosition();\n\n    const ranges = getScope(code, createContext(chapter), {\n      line: position.row + 1,\n      column: position.column\n    });\n\n    if (ranges.length !== 0) {\n      ranges.forEach(range => {\n        // Highlight the scope ranges\n        markerIdsRef.current.push(\n          editor.session.addMarker(\n            new AceRange(\n              range.start.line - 1,\n              range.start.column,\n              range.end.line - 1,\n              range.end.column\n            ),\n            'ace_selection',\n            'text'\n          )\n        );\n      });\n    }\n  }, [reactAceRef]);\n\n  const { onChange: prevOnChange, onCursorChange: prevOnCursorChange } = outProps;\n  outProps.onChange = React.useCallback(\n    (value: string, event?: any) => {\n      handleVariableHighlighting();\n      prevOnChange && prevOnChange(value, event);\n    },\n    [handleVariableHighlighting, prevOnChange]\n  );\n  outProps.onCursorChange = React.useCallback(\n    (value: any, event?: any) => {\n      handleVariableHighlighting();\n      prevOnCursorChange && prevOnCursorChange(value, event);\n    },\n    [handleVariableHighlighting, prevOnCursorChange]\n  );\n  keyBindings.highlightScope = handleHighlightScope;\n};\n\nexport default useHighlighting;\n","import { createContext, hasDeclaration } from '@seancze/js-slang';\nimport { Variant } from '@seancze/js-slang/dist/types';\nimport React from 'react';\n\nimport { Documentation } from '../documentation/Documentation';\nimport { Links } from '../utils/Constants';\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useNavigation: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  const propsRef = React.useRef(inProps);\n  propsRef.current = inProps;\n\n  const handleNavigate = React.useCallback(() => {\n    const editor = reactAceRef.current!.editor;\n    const pos = editor.selection.getCursor();\n    const token = editor.session.getTokenAt(pos.row, pos.column);\n    const { sourceChapter, handleDeclarationNavigate } = propsRef.current;\n\n    handleDeclarationNavigate(editor.getCursorPosition());\n\n    const newPos = editor.selection.getCursor();\n    if (newPos.row !== pos.row || newPos.column !== pos.column) {\n      return;\n    }\n\n    if (\n      hasDeclaration(editor.getValue(), createContext(sourceChapter), {\n        line: newPos.row + 1, // getCursorPosition returns 0-indexed row, function here takes in 1-indexed row\n        column: newPos.column\n      })\n    ) {\n      return;\n    }\n\n    const url = Links.sourceDocs;\n    const sourceVariant =\n      propsRef.current.sourceVariant === Variant.DEFAULT\n        ? ''\n        : `_${propsRef.current.sourceVariant}`;\n    const external =\n      propsRef.current.externalLibraryName === undefined\n        ? 'NONE'\n        : propsRef.current.externalLibraryName;\n    const externalUrl =\n      propsRef.current.externalLibraryName === 'ALL' ? `External%20libraries` : external;\n    const ext = Documentation.externalLibraries[external];\n\n    if (ext.some((node: { caption: string }) => node.caption === (token && token.value))) {\n      if (\n        token !== null &&\n        (/\\bsupport.function\\b/.test(token.type) || /\\bbuiltinconsts\\b/.test(token.type))\n      ) {\n        window.open(`${url}${externalUrl}/global.html#${token.value}`); // opens external library link\n      }\n    } else if (\n      token !== null &&\n      (/\\bsupport.function\\b/.test(token.type) || /\\bbuiltinconsts\\b/.test(token.type))\n    ) {\n      window.open(`${url}source_${sourceChapter}${sourceVariant}/global.html#${token.value}`); // opens builtn library link\n    }\n    if (token !== null && /\\bstorage.type\\b/.test(token.type)) {\n      window.open(`${url}source_${sourceChapter}.pdf`);\n    }\n  }, [reactAceRef]);\n\n  keyBindings.navigate = handleNavigate;\n};\n\nexport default useNavigation;\n","import { createContext, getAllOccurrencesInScope } from '@seancze/js-slang';\nimport { Range } from 'ace-builds';\nimport React from 'react';\n\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useRefactor: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  const { sourceChapter } = inProps;\n\n  const refactor = React.useCallback(() => {\n    const editor = reactAceRef.current!.editor;\n    if (!editor) {\n      return;\n    }\n    const code = editor.getValue();\n    const position = editor.getCursorPosition();\n    const sourceLocations = getAllOccurrencesInScope(code, createContext(sourceChapter), {\n      line: position.row + 1, // getCursorPosition returns 0-indexed row, function here takes in 1-indexed row\n      column: position.column\n    });\n\n    const selection = editor.getSelection();\n    const ranges = sourceLocations.map(\n      loc => new Range(loc.start.line - 1, loc.start.column, loc.end.line - 1, loc.end.column)\n    );\n    ranges.forEach(range => selection.addRange(range));\n  }, [reactAceRef, sourceChapter]);\n\n  keyBindings.refactor = refactor;\n};\n\nexport default useRefactor;\n","import * as Sentry from '@sentry/browser';\nimport sharedbAce from '@sourceacademy/sharedb-ace';\nimport React from 'react';\n\nimport { checkSessionIdExists, getSessionUrl } from '../collabEditing/CollabEditingHelper';\nimport { EditorHook } from './Editor';\n\n// EditorHook structure:\n// EditorHooks grant access to 4 things:\n// inProps are provided by the parent component\n// outProps go into the underlying React-Ace\n// keyBindings allow exporting new hotkeys\n// reactAceRef is the underlying reactAce instance for hooking.\n\nconst useShareAce: EditorHook = (inProps, outProps, keyBindings, reactAceRef) => {\n  // use a ref to refer to any other props so that we run the effect below\n  // *only* when the editorSessionId changes\n  const propsRef = React.useRef(inProps);\n  propsRef.current = inProps;\n\n  const { editorSessionId } = inProps;\n\n  React.useEffect(() => {\n    if (!editorSessionId) {\n      return;\n    }\n\n    const editor = reactAceRef.current!.editor;\n    const ShareAce = new sharedbAce(editorSessionId, {\n      WsUrl: getSessionUrl(editorSessionId, true),\n      pluginWsUrl: null,\n      namespace: 'sa'\n    });\n    ShareAce.on('ready', () => {\n      ShareAce.add(editor, [], []);\n      propsRef.current.handleSetSharedbConnected!(true);\n    });\n    ShareAce.on('error', (path: string, error: any) => {\n      console.error('ShareAce error', error);\n      Sentry.captureException(error);\n    });\n\n    // WebSocket connection status detection logic\n    const WS = ShareAce.WS;\n    // Since interval is used as a closure.\n    // eslint-disable-next-line prefer-const\n    let interval: any;\n    const checkStatus = async () => {\n      if (ShareAce === null) {\n        return;\n      }\n      try {\n        const exists = await checkSessionIdExists(editorSessionId);\n        if (!exists) {\n          clearInterval(interval);\n          WS.close();\n        }\n      } catch {\n        WS.reconnect();\n      }\n    };\n    // Checks connection status every 5sec\n    interval = setInterval(checkStatus, 5000);\n\n    WS.addEventListener('open', () => {\n      propsRef.current.handleSetSharedbConnected!(true);\n    });\n    WS.addEventListener('close', () => {\n      propsRef.current.handleSetSharedbConnected!(false);\n    });\n\n    return () => {\n      clearInterval(interval);\n      for (const connection of Object.values<any>(ShareAce.connections)) {\n        connection.unlisten();\n      }\n      ShareAce.WS.close();\n    };\n  }, [editorSessionId, reactAceRef]);\n};\n\nexport default useShareAce;\n","/* eslint-disable simple-import-sort/imports */\nimport { Ace, require as acequire, createEditSession } from 'ace-builds';\nimport 'ace-builds/src-noconflict/ext-language_tools';\nimport 'ace-builds/src-noconflict/ext-searchbox';\nimport 'ace-builds/src-noconflict/ext-settings_menu';\nimport 'ace-builds/src-noconflict/mode-golang';\nimport '@seancze/js-slang/dist/editors/ace/theme/source';\n\nimport * as AceBuilds from 'ace-builds';\nimport { Chapter, Variant } from '@seancze/js-slang/dist/types';\nimport React from 'react';\nimport AceEditor, { IAceEditorProps, IEditorProps } from 'react-ace';\nimport { HotKeys } from 'react-hotkeys';\n\nimport { keyBindings, KeyFunction } from './EditorHotkeys';\nimport { AceMouseEvent, HighlightedLines, Position } from './EditorTypes';\n\n// =============== Hooks ===============\n// TODO: Should further refactor into EditorBase + different variants.\n// Ideally, hooks should be specified by the parent component instead.\nimport { IAceEditor } from 'react-ace/lib/types';\nimport { getModeString, selectMode } from '../utils/AceHelper';\nimport { EditorBinding } from '../WorkspaceSettingsContext';\nimport useHighlighting from './UseHighlighting';\nimport useNavigation from './UseNavigation';\nimport useRefactor from './UseRefactor';\nimport useShareAce from './UseShareAce';\n\nexport type EditorKeyBindingHandlers = { [name in KeyFunction]?: () => void };\nexport type EditorHook = (\n  inProps: Readonly<EditorProps>,\n  outProps: IAceEditorProps,\n  keyBindings: EditorKeyBindingHandlers,\n  reactAceRef: React.MutableRefObject<AceEditor | null>\n) => void;\n\nexport type EditorProps = DispatchProps & EditorStateProps & EditorTabStateProps & OnEvent;\n\ntype DispatchProps = {\n  handleDeclarationNavigate: (cursorPosition: Position) => void;\n  handleEditorEval: () => void;\n  handleEditorValueChange: (editorTabIndex: number, newEditorValue: string) => void;\n  handleEditorUpdateBreakpoints: (editorTabIndex: number, newBreakpoints: string[]) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n  handleSendReplInputToOutput?: (newOutput: string) => void;\n  handleSetSharedbConnected?: (connected: boolean) => void;\n  handleUpdateHasUnsavedChanges?: (hasUnsavedChanges: boolean) => void;\n};\n\ntype EditorStateProps = {\n  editorSessionId: string;\n  isEditorAutorun: boolean;\n  sourceChapter?: Chapter;\n  externalLibraryName?: string;\n  sourceVariant?: Variant;\n  hooks?: EditorHook[];\n  editorBinding?: EditorBinding;\n};\n\nexport type EditorTabStateProps = {\n  editorTabIndex: number;\n  filePath?: string;\n  editorValue: string;\n  highlightedLines: HighlightedLines[];\n  breakpoints: string[];\n  newCursorPosition?: Position;\n};\n\ntype LocalStateProps = {\n  session: Ace.EditSession;\n};\n\ntype OnEvent = {\n  onSelectionChange?: (value: any, event?: any) => void;\n  onCursorChange?: (value: any, event?: any) => void;\n  onInput?: (event?: any) => void;\n  onLoad?: (editor: Ace.Editor) => void;\n  onValidate?: (annotations: Ace.Annotation[]) => void;\n  onBeforeLoad?: (ace: typeof AceBuilds) => void;\n  onChange?: (value: string, event?: any) => void;\n  onSelection?: (selectedText: string, event?: any) => void;\n  onCopy?: (value: string) => void;\n  onPaste?: (value: string) => void;\n  onFocus?: (event: any, editor?: Ace.Editor) => void;\n  onBlur?: (event: any, editor?: Ace.Editor) => void;\n  onScroll?: (editor: IEditorProps) => void;\n};\n\nconst EventT: Array<keyof OnEvent> = [\n  'onSelectionChange',\n  'onCursorChange',\n  'onInput',\n  'onLoad',\n  'onValidate',\n  'onBeforeLoad',\n  'onChange',\n  'onSelection',\n  'onCopy',\n  'onPaste',\n  'onFocus',\n  'onBlur',\n  'onScroll'\n];\n\nconst getMarkers = (\n  highlightedLines: EditorTabStateProps['highlightedLines']\n): IAceEditorProps['markers'] => {\n  return highlightedLines.map(lineNums => ({\n    startRow: lineNums[0],\n    startCol: 0,\n    endRow: lineNums[1],\n    endCol: 1,\n    className: 'myMarker',\n    type: 'fullLine'\n  }));\n};\n\nconst makeHandleGutterClick =\n  (\n    handleEditorUpdateBreakpoints: DispatchProps['handleEditorUpdateBreakpoints'],\n    editorTabIndex: number\n  ) =>\n  (e: AceMouseEvent) => {\n    const target = e.domEvent.target! as HTMLDivElement;\n    if (\n      target.className.indexOf('ace_gutter-cell') === -1 ||\n      !e.editor.isFocused() ||\n      e.clientX > 35 + target.getBoundingClientRect().left\n    ) {\n      return;\n    }\n\n    // Breakpoint related.\n    const row = e.getDocumentPosition().row;\n    const content = e.editor.session.getLine(row);\n    const breakpoints = e.editor.session.getBreakpoints();\n    if (\n      breakpoints[row] === undefined &&\n      content.length !== 0 &&\n      !content.includes('//') &&\n      !content.includes('debugger;')\n    ) {\n      e.editor.session.setBreakpoint(row, undefined!);\n    } else {\n      e.editor.session.clearBreakpoint(row);\n    }\n    e.stop();\n    handleEditorUpdateBreakpoints(editorTabIndex, e.editor.session.getBreakpoints());\n  };\n\n/**\n * Returns an array of breakpoint line numbers from the Ace Editor's breakpoint\n * array representation.\n *\n * Breakpoints are elements in the array with the value 'ace_breakpoint' where\n * the associated line number is the index of the element in the array.\n *\n * @param breakpoints The Ace Editor's breakpoint representation.\n */\nconst getBreakpointLineNumbers = (breakpoints: string[]): number[] => {\n  const breakpointLineNumbers: number[] = [];\n  breakpoints.forEach((value: string, index: number) => {\n    if (value !== 'ace_breakpoint') {\n      return;\n    }\n    breakpointLineNumbers.push(index);\n  });\n  return breakpointLineNumbers;\n};\n\n/**\n * Shifts breakpoints in accordance to changes in the code. This is a quality-of-life\n * feature that attempts to shift breakpoints together with changes made to the code\n * so as to provide a smoother debugging experience for the user. It is modelled after\n * the breakpoint shifting behaviour of popular code editors & IDEs such as Visual\n * Studio Code and JetBrains IDEs.\n *\n * @param editor The Ace Editor instance.\n * @param delta  An object representing the changes made to the code.\n */\nconst shiftBreakpointsWithCode = (editor: IAceEditor, delta: Ace.Delta) => {\n  const getIndexOfFirstNonWhitespaceChar = (s: string): number => s.length - s.trimStart().length;\n  const isWhitespace = (s: string): boolean => s.trim().length === 0;\n\n  const oldBreakpoints = editor.session.getBreakpoints();\n  const oldBreakpointLineNumbers = getBreakpointLineNumbers(oldBreakpoints);\n  const newBreakpointLineNumbers: number[] = [];\n\n  const deltaStartLineNumber = delta.start.row;\n  const deltaStartColumnNumber = delta.start.column;\n  const deltaEndLineNumber = delta.end.row;\n  // Subtract 1 because one line of every change modifies an existing line.\n  const deltaNumOfLinesModified = delta.lines.length - 1;\n\n  for (const oldBreakpointLineNumber of oldBreakpointLineNumbers) {\n    switch (delta.action) {\n      case 'insert': {\n        let shouldIncreaseBreakpointLineNumber: boolean;\n        if (oldBreakpointLineNumber < deltaStartLineNumber) {\n          // Line number of the breakpoint is unaffected since the changes happen on a later line.\n          shouldIncreaseBreakpointLineNumber = false;\n        } else if (oldBreakpointLineNumber === deltaStartLineNumber) {\n          // Line number of the breakpoint is unaffected if the changes happen before the first\n          // non-whitespace character on the same line. Otherwise, the line number of breakpoint\n          // is increased by the number of lines added.\n          const firstModifiedLine = editor.session.getLine(oldBreakpointLineNumber);\n          const firstNonWhitespaceCharIndex = getIndexOfFirstNonWhitespaceChar(firstModifiedLine);\n          shouldIncreaseBreakpointLineNumber =\n            firstNonWhitespaceCharIndex >= deltaStartColumnNumber;\n        } else {\n          // Line number of the breakpoint is increased by the number of lines added since the changes\n          // happen on an earlier line.\n          shouldIncreaseBreakpointLineNumber = true;\n        }\n        const newBreakpointLineNumber =\n          oldBreakpointLineNumber +\n          (shouldIncreaseBreakpointLineNumber ? deltaNumOfLinesModified : 0);\n        newBreakpointLineNumbers.push(newBreakpointLineNumber);\n        break;\n      }\n      case 'remove': {\n        let shouldDecreaseBreakpointLineNumber: boolean;\n        if (oldBreakpointLineNumber < deltaStartLineNumber) {\n          // Line number of the breakpoint is unaffected since the changes happen on a later line.\n          shouldDecreaseBreakpointLineNumber = false;\n        } else if (\n          oldBreakpointLineNumber > deltaStartLineNumber &&\n          oldBreakpointLineNumber < deltaEndLineNumber\n        ) {\n          // Breakpoint should be removed as the line it is on is deleted.\n          break;\n        } else if (oldBreakpointLineNumber === deltaStartLineNumber) {\n          // Breakpoint should be removed if the first (partially) deleted line only has whitespace\n          // characters remaining. Otherwise, the line number of the breakpoint should remain unchanged.\n          const firstModifiedLine = editor.session.getLine(oldBreakpointLineNumber);\n          const firstModifiedLineIsWhitespace = isWhitespace(firstModifiedLine);\n          if (firstModifiedLineIsWhitespace) {\n            break;\n          }\n          shouldDecreaseBreakpointLineNumber = false;\n        } else if (oldBreakpointLineNumber === deltaEndLineNumber) {\n          // Breakpoint should be removed if the last (partially) deleted line only has whitespace\n          // characters remaining. Otherwise, the line number of the breakpoint should decrease by\n          // the number of lines removed.\n          const lastModifiedLine = editor.session\n            .getLine(oldBreakpointLineNumber - deltaNumOfLinesModified)\n            .substring(deltaStartColumnNumber);\n          const lastModifiedLineIsWhitespace = isWhitespace(lastModifiedLine);\n          if (lastModifiedLineIsWhitespace) {\n            break;\n          }\n          shouldDecreaseBreakpointLineNumber = true;\n        } else {\n          // Line number of the breakpoint is decreased by the number of lines removed since the changes\n          // happen on an earlier line.\n          shouldDecreaseBreakpointLineNumber = true;\n        }\n        const newBreakpointLineNumber =\n          oldBreakpointLineNumber -\n          (shouldDecreaseBreakpointLineNumber ? deltaNumOfLinesModified : 0);\n        newBreakpointLineNumbers.push(newBreakpointLineNumber);\n        break;\n      }\n    }\n  }\n\n  editor.session.setBreakpoints(newBreakpointLineNumbers);\n};\n\n/**\n * Displays breakpoints on the Ace Editor instance.\n *\n * This is necessary for when the Ace Editor instance is first loaded and\n * there are breakpoints which should be displayed in the gutter.\n *\n * @param editor      The Ace Editor instance.\n * @param breakpoints The breakpoints to be set on the Ace Editor instance.\n */\nconst displayBreakpoints = (editor: IAceEditor, breakpoints: string[]) => {\n  const breakpointLineNumbers = getBreakpointLineNumbers(breakpoints);\n  editor.session.setBreakpoints(breakpointLineNumbers);\n};\n\n// Note: This is untestable/unused because JS-hint has been removed.\nconst makeHandleAnnotationChange = (session: Ace.EditSession) => () => {\n  const annotations = session.getAnnotations();\n  let count = 0;\n  for (const anno of annotations) {\n    if (anno.type === 'info') {\n      anno.type = 'error';\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore // Probably some undocumented type\n      anno.className = 'ace_error';\n      count++;\n    }\n  }\n  if (count !== 0) {\n    session.setAnnotations(annotations);\n  }\n};\n\nconst makeCompleter = (handlePromptAutocomplete: DispatchProps['handlePromptAutocomplete']) => ({\n  getCompletions: (\n    editor: Ace.Editor,\n    session: Ace.EditSession,\n    pos: Ace.Point,\n    prefix: string,\n    callback: () => void\n  ) => {\n    // Don't prompt if prefix starts with number\n    if (prefix && /\\d/.test(prefix.charAt(0))) {\n      callback();\n      return;\n    }\n\n    // Cursor col is insertion location i.e. last char col + 1\n    handlePromptAutocomplete(pos.row + 1, pos.column, callback);\n  }\n});\n\nconst moveCursor = (editor: AceEditor['editor'], position: Position) => {\n  editor.selection.clearSelection();\n  editor.moveCursorToPosition(position);\n  editor.renderer.showCursor();\n  editor.renderer.scrollCursorIntoView(position, 0.5);\n};\n\n/* Override handler, so does not trigger when focus is in editor */\nconst handlers = {\n  goGreen: () => {}\n};\n\nconst EditorBase = React.memo((props: EditorProps & LocalStateProps) => {\n  const reactAceRef: React.MutableRefObject<AceEditor | null> = React.useRef(null);\n  const [filePath, setFilePath] = React.useState<string | undefined>(undefined);\n\n  // Refs for things that technically shouldn't change... but just in case.\n  const handleEditorUpdateBreakpointsRef = React.useRef(props.handleEditorUpdateBreakpoints);\n  const handlePromptAutocompleteRef = React.useRef(props.handlePromptAutocomplete);\n\n  const editor = reactAceRef.current?.editor;\n  // Set edit session history when switching to another editor tab.\n  if (editor !== undefined) {\n    if (filePath !== props.filePath) {\n      // Unfortunately, the current editor sets the mode globally.\n      // The side effects make it very hard to ensure that the correct\n      // mode is set for every EditSession. As such, we add this one\n      // line to always propagate the mode whenever we set a new session.\n      // See AceHelper#selectMode for more information.\n      props.session.setMode(editor.getSession().getMode());\n      editor.setSession(props.session);\n      /* eslint-disable */\n\n      // Add changeCursor event listener onto the current session.\n      // In ReactAce, this event listener is only bound on component\n      // mounting/creation, and hence changing sessions will need rebinding.\n      // See react-ace/src/ace.tsx#263,#460 for more details. We also need to\n      // ensure that event listener is only bound once to prevent memory leaks.\n      // We also need to check non-documented property _eventRegistry to\n      // see if the changeCursor listener event has been added yet.\n\n      // @ts-ignore\n      if (editor.getSession().selection._eventRegistry.changeCursor.length < 2) {\n        editor.getSession().selection.on('changeCursor', reactAceRef.current!.onCursorChange);\n      }\n\n      /* eslint-enable */\n      // Give focus to the editor tab only after switching from another tab.\n      // This is necessary to prevent 'unstable_flushDiscreteUpdates' warnings.\n      if (filePath !== undefined) {\n        editor.focus();\n      }\n      setFilePath(props.filePath);\n    }\n  }\n\n  React.useEffect(() => {\n    handleEditorUpdateBreakpointsRef.current = props.handleEditorUpdateBreakpoints;\n    handlePromptAutocompleteRef.current = props.handlePromptAutocomplete;\n  }, [props.handleEditorUpdateBreakpoints, props.handlePromptAutocomplete]);\n\n  React.useEffect(() => {\n    if (editor === undefined) {\n      return;\n    }\n    displayBreakpoints(editor, props.breakpoints);\n  }, [editor, props.breakpoints]);\n\n  // Handles input into AceEditor causing app to scroll to the top on iOS Safari\n  React.useEffect(() => {\n    const isIOS = /iPhone|iPad|iPod/.test(navigator.userAgent);\n    if (isIOS) {\n      document.body.style.position = 'fixed';\n      document.body.style.width = '100%';\n    }\n\n    return () => {\n      document.body.style.position = '';\n      document.body.style.width = '';\n    };\n  }, []);\n\n  const [sourceChapter, sourceVariant, externalLibraryName] = [\n    props.sourceChapter || Chapter.SOURCE_1,\n    props.sourceVariant || Variant.DEFAULT,\n    props.externalLibraryName || 'NONE'\n  ];\n\n  // this function defines the Ace language and highlighting mode for the\n  // given combination of chapter, variant and external library. it CANNOT be\n  // put in useEffect as it MUST be called before the mode is set on the Ace\n  // editor, and use(Layout)Effect runs after that happens.\n  //\n  // this used to be in useMemo, but selectMode now checks if the mode is\n  // already defined and doesn't do it, so it is now OK to keep calling this\n  // unconditionally.\n  selectMode(sourceChapter, sourceVariant, externalLibraryName);\n\n  React.useLayoutEffect(() => {\n    if (editor === undefined) {\n      return;\n    }\n    const session = editor.getSession();\n    // NOTE: Everything in this function is designed to run exactly ONCE per instance of react-ace.\n    // The () => ref.current() are designed to use the latest instance only.\n\n    // NOTE: the two `any`s below are because the Ace editor typedefs are\n    // hopelessly incomplete\n    editor.on(\n      'gutterclick' as any,\n      makeHandleGutterClick(handleEditorUpdateBreakpointsRef.current, props.editorTabIndex)\n    );\n\n    // Change all info annotations to error annotations\n    session.on('changeAnnotation' as any, makeHandleAnnotationChange(session));\n\n    // Start autocompletion\n    acequire('ace/ext/language_tools').setCompleters([\n      makeCompleter((...args) => handlePromptAutocompleteRef.current(...args))\n    ]);\n  }, [editor, props.editorTabIndex]);\n\n  React.useLayoutEffect(() => {\n    if (editor === undefined) {\n      return;\n    }\n    const newCursorPosition = props.newCursorPosition;\n    if (newCursorPosition) {\n      moveCursor(editor, newCursorPosition);\n    }\n  }, [editor, props.newCursorPosition]);\n\n  const {\n    handleUpdateHasUnsavedChanges,\n    handleEditorValueChange,\n    isEditorAutorun,\n    handleEditorEval\n  } = props;\n  const keyHandlers: EditorKeyBindingHandlers = {\n    evaluate: handleEditorEval\n  };\n\n  const aceEditorProps: IAceEditorProps = {\n    className: 'react-ace',\n    editorProps: {\n      $blockScrolling: Infinity\n    },\n    markers: React.useMemo(() => getMarkers(props.highlightedLines), [props.highlightedLines]),\n    fontSize: 17,\n    height: '100%',\n    highlightActiveLine: false,\n    mode: getModeString(sourceChapter, sourceVariant, externalLibraryName),\n    theme: 'source',\n    value: props.editorValue,\n    width: '100%',\n    setOptions: {\n      enableBasicAutocompletion: true,\n      enableLiveAutocompletion: true,\n      fontFamily: \"'Inconsolata', 'Consolas', monospace\"\n    },\n    keyboardHandler: props.editorBinding\n  };\n\n  // Hooks must not change after an editor is instantiated, so to prevent that\n  // we store the original value and always use that only\n  const [hooks] = React.useState(props.hooks);\n  if (hooks) {\n    // Note: the following is extremely non-standard use of hooks\n    // DO NOT refactor this into any form where the hook is called from a lambda\n    for (const hook of hooks) {\n      hook(props, aceEditorProps, keyHandlers, reactAceRef);\n    }\n  }\n\n  const { onChange } = aceEditorProps;\n\n  aceEditorProps.onChange = React.useCallback(\n    (newCode: string, delta: Ace.Delta) => {\n      if (!reactAceRef.current) {\n        return;\n      }\n\n      shiftBreakpointsWithCode(reactAceRef.current.editor, delta);\n\n      // Write editor state for the active editor tab to the store.\n      handleEditorValueChange(props.editorTabIndex, newCode);\n      handleEditorUpdateBreakpointsRef.current(\n        props.editorTabIndex,\n        reactAceRef.current.editor.session.getBreakpoints()\n      );\n\n      if (handleUpdateHasUnsavedChanges) {\n        handleUpdateHasUnsavedChanges(true);\n      }\n      const annotations = reactAceRef.current.editor.getSession().getAnnotations();\n      if (isEditorAutorun && annotations.length === 0) {\n        handleEditorEval();\n      }\n      if (onChange !== undefined) {\n        onChange(newCode, delta);\n      }\n    },\n    [\n      handleEditorValueChange,\n      props.editorTabIndex,\n      handleUpdateHasUnsavedChanges,\n      isEditorAutorun,\n      onChange,\n      handleEditorEval\n    ]\n  );\n\n  aceEditorProps.commands = Object.entries(keyHandlers)\n    .filter(([_, exec]) => exec)\n    .map(([name, exec]) => ({ name, bindKey: keyBindings[name], exec: exec! }));\n\n  // Merge in .onEvent ace editor props\n  // This prevents user errors such as\n  // TRYING TO ADD AN ONCHANGE PROP WHICH KILLS THE ABOVE ONCHANGE.\n  // **triggered**\n  EventT.forEach(eventT => {\n    const propFn = props[eventT];\n    if (propFn) {\n      /* eslint-disable */\n\n      const currFn = aceEditorProps[eventT];\n      if (!currFn) {\n        // Typescript isn't smart enough to know that the types of both LHS/RHS are the same.\n        // @ts-ignore\n        aceEditorProps[eventT] = propFn;\n      } else {\n        aceEditorProps[eventT] = function (...args: any[]) {\n          // Impossible to define a function which takes in the arbitrary number of correct arguments...\n          // @ts-ignore\n          currFn(...args);\n          // @ts-ignore\n          propFn(...args);\n        };\n      }\n      /* eslint-enable */\n    }\n  });\n\n  // Override the overlayPage function to add an id to the overlay div.\n  // This allows the overlay div to be referenced and removed when the editor is unmounted.\n  // See https://github.com/source-academy/frontend/pull/2832\n  acequire('ace/ext/menu_tools/overlay_page').overlayPage = function (\n    editor: any,\n    contentElement: HTMLElement,\n    callback: any\n  ) {\n    let closer: HTMLElement | null = document.createElement('div');\n    // Add id to the overlay div\n    closer.id = 'overlay';\n    let ignoreFocusOut = false;\n\n    function documentEscListener(e: KeyboardEvent) {\n      if (e.keyCode === 27) {\n        close();\n      }\n    }\n\n    function close() {\n      if (!closer) return;\n      document.removeEventListener('keydown', documentEscListener);\n      closer?.parentNode?.removeChild(closer);\n      if (editor) {\n        editor.focus();\n      }\n      closer = null;\n      callback && callback();\n    }\n\n    /**\n     * Defines whether overlay is closed when user clicks outside of it.\n     *\n     * @param {Boolean} ignore      If set to true overlay stays open when focus moves to another part of the editor.\n     */\n    function setIgnoreFocusOut(ignore: boolean) {\n      ignoreFocusOut = ignore;\n      if (ignore) {\n        closer!.style.pointerEvents = 'none';\n        contentElement.style.pointerEvents = 'auto';\n      }\n    }\n\n    closer.style.cssText =\n      'margin: 0; padding: 0; ' +\n      'position: fixed; top:0; bottom:0; left:0; right:0;' +\n      'z-index: 9990; ' +\n      (editor ? 'background-color: rgba(0, 0, 0, 0.3);' : '');\n    closer.addEventListener('click', function (e: Event) {\n      if (!ignoreFocusOut) {\n        close();\n      }\n    });\n\n    // click closer if esc key is pressed\n    document.addEventListener('keydown', documentEscListener);\n\n    contentElement.addEventListener('click', function (e: Event) {\n      e.stopPropagation();\n    });\n\n    closer.appendChild(contentElement);\n    document.body.appendChild(closer);\n    if (editor) {\n      editor.blur();\n    }\n    return {\n      close: close,\n      setIgnoreFocusOut: setIgnoreFocusOut\n    };\n  };\n\n  // Remove the overlay div when the editor is unmounted\n  React.useEffect(() => {\n    return () => {\n      const div = document.getElementById('overlay');\n      if (div) {\n        div.parentNode?.removeChild(div);\n      }\n    };\n  }, []);\n\n  return (\n    <HotKeys className=\"Editor bp4-card bp4-elevation-0\" handlers={handlers}>\n      <div className=\"row editor-react-ace\" data-testid=\"Editor\">\n        <AceEditor {...aceEditorProps} ref={reactAceRef} />\n      </div>\n    </HotKeys>\n  );\n});\n\n// don't create a new list every render.\nconst hooks = [useHighlighting, useNavigation, useShareAce, useRefactor];\n\nconst Editor: React.FC<EditorProps> = (props: EditorProps) => {\n  const [sessions, setSessions] = React.useState<Record<string, Ace.EditSession>>({});\n\n  // Create new edit session.\n  const defaultMode = acequire('ace/mode/golang').Mode();\n  const defaultEditSession = createEditSession(props.editorValue, defaultMode);\n\n  // Initialise edit session if file path has not been seen before.\n  if (props.filePath !== undefined && sessions[props.filePath] === undefined) {\n    setSessions({\n      ...sessions,\n      [props.filePath]: defaultEditSession\n    });\n  }\n\n  return (\n    <EditorBase\n      {...props}\n      session={props.filePath ? sessions[props.filePath] : defaultEditSession}\n      hooks={hooks}\n    />\n  );\n};\n\nexport default Editor;\n","import { Card, Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport React from 'react';\n\nexport type EditorTabProps = {\n  filePath: string;\n  isActive: boolean;\n  setActive: () => void;\n  remove: () => void;\n};\n\nconst EditorTab: React.FC<EditorTabProps> = (props: EditorTabProps) => {\n  const { filePath, isActive, setActive, remove } = props;\n\n  const onClick = (e: React.MouseEvent<HTMLElement>) => {\n    // Stop the click event from propagating to the parent component.\n    e.stopPropagation();\n    remove();\n  };\n\n  return (\n    <Card\n      className={classNames('editor-tab', {\n        selected: isActive\n      })}\n      onClick={setActive}\n    >\n      {filePath}\n      <Icon className=\"remove-button\" icon={IconNames.SMALL_CROSS} onClick={onClick} />\n    </Card>\n  );\n};\n\nexport default EditorTab;\n","import { posix as pathlib } from 'path';\n\n/**\n * Returns the shortest file paths that is uniquely identifiable among\n * all open editor tabs. This is similar to how most code editors available\n * handle the displaying of file names.\n *\n * For example, if there are 3 open editor tabs where the file names are\n * exactly the same, we would need to display more of the file path to be\n * able to distinguish which editor tab corresponds to which file. Given\n * the following absolute file paths:\n * - /a.js\n * - /dir1/a.js\n * - /dir1/dir2/a.js\n * The shortest unique file paths will be:\n * - /a.js\n * - /dir1/a.js\n * - /dir2/a.js\n *\n * @param originalFilePaths The file paths to be shortened.\n */\nexport const getShortestUniqueFilePaths = (originalFilePaths: string[]): string[] => {\n  // Store the unique shortened file paths as a mapping from the original file paths\n  // to the shortened file paths. This is necessary because the output of this function\n  // must preserve the original ordering of file paths.\n  const originalToUniqueShortenedFilePaths: Record<string, string> = {};\n  // Split each original file path into path segments and store the mapping from file\n  // path to path segments for O(1) lookup. Since we only deal with the BrowserFS file\n  // system, the path separator will always be '/'.\n  const filePathSegments: Record<string, string[]> = originalFilePaths.reduce(\n    (segments, filePath) => ({\n      ...segments,\n      // It is necessary to remove empty segments to deal with the very first '/' in\n      // file paths.\n      [filePath]: filePath.split(pathlib.sep).filter(segment => segment !== '')\n    }),\n    {}\n  );\n\n  for (\n    let numOfPathSegments = 1;\n    // Keep looping while some original file paths have yet to be shortened.\n    Object.keys(originalToUniqueShortenedFilePaths).length < originalFilePaths.length;\n    numOfPathSegments++\n  ) {\n    // Based on the number of path segments for the iteration, we construct the\n    // shortened file path. We then store the mapping from the shortened file path\n    // to any original file path which transforms into it.\n    const shortenedToOriginalFilePaths: Record<string, string[]> = Object.entries(\n      filePathSegments\n    ).reduce((filePaths, [originalFilePath, filePathSegments]) => {\n      // Note that if there are fewer path segments than the number being sliced,\n      // all of the path segments will be returned without error.\n      const shortenedFilePath = '/' + filePathSegments.slice(-numOfPathSegments).join('/');\n      return {\n        ...filePaths,\n        [shortenedFilePath]: (filePaths[shortenedFilePath] ?? []).concat(originalFilePath)\n      };\n    }, {});\n    // Each shortened file path that only has a single corresponding original file\n    // path is added to the unique shortened file paths record and their entry in\n    // the file path segments record is removed to prevent further processing.\n    Object.entries(shortenedToOriginalFilePaths).forEach(\n      ([shortenedFilePath, originalFilePaths]) => {\n        if (originalFilePaths.length > 1) {\n          return;\n        }\n\n        const originalFilePath = originalFilePaths[0];\n        originalToUniqueShortenedFilePaths[originalFilePath] = shortenedFilePath;\n        // Remove the file path's segments from the next iteration.\n        delete filePathSegments[originalFilePath];\n      }\n    );\n  }\n\n  // Finally, we retrieve the unique shortened file paths while preserving the ordering\n  // of file paths.\n  return originalFilePaths.map(filePath => originalToUniqueShortenedFilePaths[filePath]);\n};\n","import React from 'react';\n\nimport EditorTab from './EditorTab';\nimport { getShortestUniqueFilePaths } from './utils';\n\nexport type EditorTabContainerProps = {\n  baseFilePath: string;\n  filePaths: string[];\n  activeEditorTabIndex: number;\n  setActiveEditorTabIndex: (activeEditorTabIndex: number | null) => void;\n  removeEditorTabByIndex: (editorTabIndex: number) => void;\n};\n\nconst EditorTabContainer: React.FC<EditorTabContainerProps> = (props: EditorTabContainerProps) => {\n  const {\n    baseFilePath,\n    filePaths,\n    activeEditorTabIndex,\n    setActiveEditorTabIndex,\n    removeEditorTabByIndex\n  } = props;\n\n  const handleHorizontalScroll = (e: React.WheelEvent<HTMLDivElement>) => {\n    e.currentTarget.scrollTo({\n      left: e.currentTarget.scrollLeft + e.deltaY\n    });\n  };\n\n  const relativeFilePaths = filePaths.map(filePath => filePath.replace(baseFilePath, ''));\n  const shortenedFilePaths = getShortestUniqueFilePaths(relativeFilePaths);\n\n  return (\n    <div className=\"editor-tab-container\" onWheel={handleHorizontalScroll}>\n      {shortenedFilePaths.map((filePath, index) => (\n        <EditorTab\n          key={index}\n          filePath={filePath}\n          isActive={index === activeEditorTabIndex}\n          setActive={() => setActiveEditorTabIndex(index)}\n          remove={() => removeEditorTabByIndex(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default EditorTabContainer;\n","// Necessary to prevent \"ReferenceError: ace is not defined\" error.\n// See https://github.com/securingsincity/react-ace/issues/1233 (although there is no explanation).\nimport 'ace-builds/src-noconflict/ace';\n// For webpack to resolve properly during lazy loading (see https://github.com/source-academy/frontend/issues/2543)\nimport 'ace-builds/webpack-resolver';\n\nimport _ from 'lodash';\nimport React from 'react';\n\nimport SourcecastEditor, {\n  SourceRecorderEditorProps\n} from '../sourceRecorder/SourceRecorderEditor';\nimport { EditorTabState } from '../workspace/WorkspaceTypes';\nimport { WorkspaceSettingsContext } from '../WorkspaceSettingsContext';\nimport Editor, { EditorProps, EditorTabStateProps } from './Editor';\nimport EditorTabContainer from './tabs/EditorTabContainer';\n\ntype OwnProps = {\n  baseFilePath?: string;\n  isFolderModeEnabled: boolean;\n  activeEditorTabIndex: number | null;\n  setActiveEditorTabIndex: (activeEditorTabIndex: number | null) => void;\n  removeEditorTabByIndex: (editorTabIndex: number) => void;\n  editorTabs: EditorTabStateProps[];\n};\n\nexport type NormalEditorContainerProps = Omit<EditorProps, keyof EditorTabStateProps> &\n  OwnProps & {\n    editorVariant: 'normal';\n  };\n\nexport type SourcecastEditorContainerProps = Omit<\n  SourceRecorderEditorProps,\n  keyof EditorTabStateProps\n> &\n  OwnProps & {\n    editorVariant: 'sourcecast';\n  };\n\nexport type EditorContainerProps = NormalEditorContainerProps | SourcecastEditorContainerProps;\n\nexport const convertEditorTabStateToProps = (\n  editorTab: EditorTabState,\n  editorTabIndex: number\n): EditorTabStateProps => {\n  return {\n    editorTabIndex,\n    editorValue: editorTab.value,\n    ..._.pick(editorTab, 'filePath', 'highlightedLines', 'breakpoints', 'newCursorPosition')\n  };\n};\n\nconst createNormalEditorTab =\n  (editorProps: Omit<EditorProps, keyof EditorTabStateProps>) =>\n  (editorTabStateProps: EditorTabStateProps) => {\n    return <Editor {...editorProps} {...editorTabStateProps} />;\n  };\n\nconst createSourcecastEditorTab =\n  (editorProps: Omit<SourceRecorderEditorProps, keyof EditorTabStateProps>) =>\n  (editorTabStateProps: EditorTabStateProps) => {\n    return <SourcecastEditor {...editorProps} {...editorTabStateProps} />;\n  };\n\nconst EditorContainer: React.FC<EditorContainerProps> = (props: EditorContainerProps) => {\n  const [workspaceSettings] = React.useContext(WorkspaceSettingsContext)!;\n  const {\n    baseFilePath,\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    setActiveEditorTabIndex,\n    removeEditorTabByIndex,\n    editorTabs,\n    ...editorProps\n  } = props;\n  editorProps.editorBinding = workspaceSettings.editorBinding;\n\n  const createEditorTab =\n    editorProps.editorVariant === 'sourcecast'\n      ? createSourcecastEditorTab(editorProps)\n      : createNormalEditorTab(editorProps);\n\n  if (activeEditorTabIndex === null) {\n    return (\n      <div className=\"editor-container\">\n        <h1>Double click on a file in the sidebar to start editing!</h1>\n      </div>\n    );\n  }\n\n  // Editor tabs in workspaces which do not support Folder mode will not have associated file paths.\n  const filePaths = editorTabs.map(editorTabState => editorTabState.filePath ?? 'UNKNOWN');\n\n  return (\n    <div className=\"editor-container\">\n      {isFolderModeEnabled && (\n        <EditorTabContainer\n          baseFilePath={baseFilePath ?? ''}\n          activeEditorTabIndex={activeEditorTabIndex}\n          filePaths={filePaths}\n          setActiveEditorTabIndex={setActiveEditorTabIndex}\n          removeEditorTabByIndex={removeEditorTabByIndex}\n        />\n      )}\n      {createEditorTab(editorTabs[activeEditorTabIndex])}\n    </div>\n  );\n};\n\nexport default EditorContainer;\n","import { Button, Card, Intent } from '@blueprintjs/core';\nimport React from 'react';\n\nimport { IMCQQuestion } from '../assessment/AssessmentTypes';\nimport Markdown from '../Markdown';\nimport { showSuccessMessage, showWarningMessage } from '../utils/notifications/NotificationsHelper';\n\nexport type McqChooserProps = {\n  mcq: IMCQQuestion;\n  handleMCQSubmit: (choiceId: number) => void;\n};\n\nconst McqChooser: React.FC<McqChooserProps> = ({ mcq, handleMCQSubmit }) => {\n  const options = mcq.choices.map((choice, i) => {\n    const isActive = i === mcq.answer;\n    const hasSolution = mcq.solution !== undefined;\n    const isSolution = i === mcq.solution;\n\n    /**\n     * Post-condition: the local state will be updated to store the\n     * MCQ option selected, and a notification will be displayed with\n     * a hint, if the question is ungraded.\n     */\n    const handleClick = () => {\n      if (!isActive) {\n        handleMCQSubmit(i);\n      }\n      if (!choice.hint || !hasSolution) {\n        return;\n      }\n\n      const hintElement = <Markdown className=\"markdown-notification\" content={choice.hint} />;\n      if (isSolution) {\n        showSuccessMessage(hintElement, 4000);\n      } else {\n        showWarningMessage(hintElement, 4000);\n      }\n    };\n\n    return (\n      <Button\n        key={i}\n        className=\"mcq-option col-xs-12\"\n        active={isActive}\n        intent={\n          isActive && hasSolution ? (isSolution ? Intent.SUCCESS : Intent.DANGER) : Intent.NONE\n        }\n        onClick={handleClick}\n        minimal\n      >\n        <Markdown content={choice.content} />\n      </Button>\n    );\n  });\n  return (\n    <div className=\"MCQChooser row\" data-testid=\"MCQChooser\">\n      <Card className=\"mcq-content-parent col-xs-12 middle-xs\">\n        <div className=\"row mcq-options-parent between-xs\">{options}</div>\n      </Card>\n    </div>\n  );\n};\n\nexport default McqChooser;\n","import { Card, Icon, IconName } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { SideContentType } from '../sideContent/SideContentTypes';\n\n/**\n * @property label The displayed name of the tab.\n * @property body The element to be rendered inside the sidebar tab.\n * @property iconName The name of the displayed icon.\n * @property id The ID of the tab when displayed as a side content on the mobile view.\n *              Omit if the tab should only be shown in the sidebar on the desktop view.\n */\nexport type SideBarTab = {\n  label: string;\n  body: JSX.Element;\n  iconName: IconName;\n  id?: SideContentType;\n};\n\nexport type SideBarProps = {\n  tabs: SideBarTab[];\n  isExpanded: boolean;\n  expandSideBar: () => void;\n  collapseSideBar: () => void;\n};\n\nconst SideBar: React.FC<SideBarProps> = (props: SideBarProps) => {\n  const { tabs, isExpanded, expandSideBar, collapseSideBar } = props;\n\n  const [selectedTabIndex, setSelectedTabIndex] = React.useState<number>(0);\n\n  const handleTabSelection = (tabIndex: number) => {\n    if (selectedTabIndex === tabIndex) {\n      if (isExpanded) {\n        collapseSideBar();\n      } else {\n        expandSideBar();\n      }\n      return;\n    }\n    setSelectedTabIndex(tabIndex);\n    expandSideBar();\n  };\n\n  // Do not render the sidebar if there are no tabs.\n  if (tabs.length === 0) {\n    return <div className=\"sidebar-container\" />;\n  }\n\n  return (\n    <div className=\"sidebar-container\">\n      <div className=\"sidebar-tab-container\">\n        {tabs.map((tab, index) => (\n          <Card\n            key={index}\n            className={classNames('sidebar-tab', {\n              selected: isExpanded && selectedTabIndex === index\n            })}\n            onClick={() => handleTabSelection(index)}\n          >\n            <Icon className=\"sidebar-tab-icon\" icon={tab.iconName} size={14} />\n            {tab.label}\n          </Card>\n        ))}\n      </div>\n      {selectedTabIndex !== null && (\n        <Card className=\"sidebar-panel\">{tabs[selectedTabIndex].body}</Card>\n      )}\n    </div>\n  );\n};\n\nexport default SideBar;\n","import { FocusStyleManager } from '@blueprintjs/core';\nimport { Enable, NumberSize, Resizable, ResizableProps, ResizeCallback } from 're-resizable';\nimport { Direction } from 're-resizable/lib/resizer';\nimport React from 'react';\n\nimport ControlBar, { ControlBarProps } from '../controlBar/ControlBar';\nimport EditorContainer, { EditorContainerProps } from '../editor/EditorContainer';\nimport McqChooser, { McqChooserProps } from '../mcqChooser/McqChooser';\nimport { Prompt } from '../ReactRouterPrompt';\nimport Repl, { ReplProps } from '../repl/Repl';\nimport SideBar, { SideBarTab } from '../sideBar/SideBar';\nimport SideContent, { SideContentProps } from '../sideContent/SideContent';\nimport { useDimensions } from '../utils/Hooks';\n\nexport type WorkspaceProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleSideContentHeightChange: (height: number) => void;\n};\n\ntype StateProps = {\n  // Either editorProps or mcqProps must be provided\n  controlBarProps: ControlBarProps;\n  editorContainerProps?: EditorContainerProps;\n  hasUnsavedChanges?: boolean;\n  mcqProps?: McqChooserProps;\n  replProps: ReplProps;\n  sideBarProps: {\n    tabs: SideBarTab[];\n  };\n  sideContentProps: SideContentProps;\n  sideContentIsResizeable?: boolean;\n};\n\nconst Workspace: React.FC<WorkspaceProps> = props => {\n  const sideBarResizable = React.useRef<Resizable | null>(null);\n  const contentContainerDiv = React.useRef<HTMLDivElement | null>(null);\n  const editorDividerDiv = React.useRef<HTMLDivElement | null>(null);\n  const leftParentResizable = React.useRef<Resizable | null>(null);\n  const maxDividerHeight = React.useRef<number | null>(null);\n  const sideDividerDiv = React.useRef<HTMLDivElement | null>(null);\n  const [contentContainerWidth] = useDimensions(contentContainerDiv);\n  const [expandedSideBarWidth, setExpandedSideBarWidth] = React.useState<number>(200);\n  const [isSideBarExpanded, setIsSideBarExpanded] = React.useState<boolean>(true);\n\n  const sideBarCollapsedWidth = 40;\n\n  const expandSideBar = () => setIsSideBarExpanded(true);\n  const collapseSideBar = () => setIsSideBarExpanded(false);\n\n  FocusStyleManager.onlyShowFocusOnTabs();\n\n  React.useEffect(() => {\n    if (props.sideContentIsResizeable && maxDividerHeight.current === null) {\n      maxDividerHeight.current = sideDividerDiv.current!.clientHeight;\n    }\n  });\n\n  const sideBarResizableProps = (): ResizableProps & {\n    ref: React.MutableRefObject<Resizable | null>;\n  } => {\n    const onResizeStop: ResizeCallback = (\n      event: MouseEvent | TouchEvent,\n      direction: Direction,\n      elementRef: HTMLElement,\n      delta: NumberSize\n    ) => {\n      const sideBarWidth = elementRef.clientWidth;\n      if (sideBarWidth !== sideBarCollapsedWidth) {\n        setExpandedSideBarWidth(sideBarWidth);\n      }\n    };\n    const isSideBarRendered = props.sideBarProps.tabs.length !== 0;\n    const minWidth = isSideBarRendered ? sideBarCollapsedWidth : 'auto';\n    return {\n      enable: isSideBarRendered ? rightResizeOnly : noResize,\n      minWidth,\n      maxWidth: '50%',\n      onResize: toggleSideBarDividerDisplay,\n      onResizeStop,\n      ref: sideBarResizable,\n      size: {\n        width: isSideBarRendered && isSideBarExpanded ? expandedSideBarWidth : minWidth,\n        height: '100%'\n      },\n      defaultSize: { width: minWidth, height: '100%' }\n    };\n  };\n\n  const editorResizableProps = () => {\n    return {\n      className: 'resize-editor left-parent',\n      enable: rightResizeOnly,\n      minWidth: 0,\n      onResize: toggleEditorDividerDisplay,\n      ref: leftParentResizable,\n      defaultSize: { width: '50%', height: '100%' },\n      as: undefined as any // re-resizable bug - wrong typedef\n    } as ResizableProps;\n  };\n\n  const sideContentResizableProps = () => {\n    const onResizeStop: ResizeCallback = (_a, _b, ref) =>\n      props.handleSideContentHeightChange(ref.clientHeight);\n    return {\n      bounds: 'parent',\n      className: 'resize-side-content',\n      enable: bottomResizeOnly,\n      onResize: toggleDividerDisplay,\n      onResizeStop\n    } as ResizableProps;\n  };\n\n  const toggleSideBarDividerDisplay: ResizeCallback = (\n    event: MouseEvent | TouchEvent,\n    direction: Direction,\n    elementRef: HTMLElement,\n    delta: NumberSize\n  ) => {\n    const minWidthThreshold = 100;\n    const sideBarWidth = elementRef.clientWidth;\n    if (sideBarWidth < minWidthThreshold) {\n      const sideBar = sideBarResizable.current;\n      if (sideBar === null) {\n        throw Error('Reference to SideBar not found when resizing.');\n      }\n      sideBar.updateSize({ width: sideBarCollapsedWidth, height: '100%' });\n      setIsSideBarExpanded(false);\n    } else {\n      setIsSideBarExpanded(true);\n    }\n  };\n\n  /**\n   * Snaps the left-parent resizable to 100% or 0% when percentage width goes\n   * above 95% or below 5% respectively. Also changes the editor divider width\n   * in the case of < 5%.\n   */\n  const toggleEditorDividerDisplay: ResizeCallback = (_a, _b, ref) => {\n    const leftThreshold = 5;\n    const rightThreshold = 95;\n    const editorWidthPercentage =\n      ((ref as HTMLDivElement).clientWidth / contentContainerWidth) * 100;\n    // update resizable size\n    if (editorWidthPercentage > rightThreshold) {\n      leftParentResizable.current!.updateSize({ width: '100%', height: '100%' });\n    } else if (editorWidthPercentage < leftThreshold) {\n      leftParentResizable.current!.updateSize({ width: '0%', height: '100%' });\n    }\n  };\n\n  /**\n   * Hides the side-content-divider div when side-content is resized downwards\n   * so that it's bottom border snaps flush with editor's bottom border\n   */\n  const toggleDividerDisplay: ResizeCallback = (_a, _b, ref) => {\n    maxDividerHeight.current =\n      sideDividerDiv.current!.clientHeight > maxDividerHeight.current!\n        ? sideDividerDiv.current!.clientHeight\n        : maxDividerHeight.current;\n    const resizableHeight = (ref as HTMLDivElement).clientHeight;\n    const rightParentHeight = (ref.parentNode as HTMLDivElement).clientHeight;\n    if (resizableHeight + maxDividerHeight.current! + 2 > rightParentHeight) {\n      sideDividerDiv.current!.style.display = 'none';\n    } else {\n      sideDividerDiv.current!.style.display = 'initial';\n    }\n  };\n\n  /**\n   * Pre-condition: `props.editorProps`\n   * XOR `props.mcq` are defined.\n   */\n  const createWorkspaceInput = (props: WorkspaceProps) => {\n    if (props.editorContainerProps) {\n      return <EditorContainer {...props.editorContainerProps} />;\n    } else {\n      return <McqChooser {...props.mcqProps!} />;\n    }\n  };\n\n  const sideContent = <SideContent {...props.sideContentProps} />;\n  const resizableSideContent = (\n    <Resizable {...sideContentResizableProps()}>\n      {sideContent}\n      <div className=\"side-content-divider\" ref={sideDividerDiv} />\n    </Resizable>\n  );\n\n  return (\n    <div className=\"workspace\">\n      <Prompt\n        when={!!props.hasUnsavedChanges}\n        message={'You have changes that may not be saved. Are you sure you want to leave?'}\n      />\n      <ControlBar {...props.controlBarProps} />\n      <div className=\"workspace-parent\">\n        <Resizable {...sideBarResizableProps()}>\n          <SideBar\n            {...props.sideBarProps}\n            isExpanded={isSideBarExpanded}\n            expandSideBar={expandSideBar}\n            collapseSideBar={collapseSideBar}\n          />\n        </Resizable>\n        <div className=\"row content-parent\" ref={contentContainerDiv}>\n          <div className=\"editor-divider\" ref={editorDividerDiv} />\n          <Resizable {...editorResizableProps()}>{createWorkspaceInput(props)}</Resizable>\n          <div className=\"right-parent\">\n            {props.sideContentIsResizeable === undefined || props.sideContentIsResizeable\n              ? resizableSideContent\n              : sideContent}\n            <Repl {...props.replProps} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst rightResizeOnly: Enable = { right: true };\nconst bottomResizeOnly: Enable = { bottom: true };\nconst noResize: Enable = {};\n\nexport default Workspace;\n"],"names":["Prompt","when","message","props","beforeUnload","blocker","useBlocker","React","window","confirm","prevState","state","reset","current","useBeforeUnload","event","preventDefault","returnValue","capture","usePrompt","protocolMap","getSessionUrl","sessionId","ws","url","URL","Constants","protocol","toString","async","checkSessionIdExists","resp","fetch","ok","createNewSession","initial","method","body","headers","Error","text","editorControl","_jsx","className","classNames","Classes","children","editorButtons","flowControl","flowButtons","editingWorkspaceControl","editingWorkspaceButtons","_jsxs","ControlBarClearButton","handleReplOutputClear","ControlButton","label","icon","IconNames","onClick","ControlBarEvalButton","handleReplEval","isRunning","Tooltip2","content","SourcecastEditor","constructor","super","getMarkers","markerProps","lineNum","this","highlightedLines","push","startRow","startCol","endRow","endCol","type","handleGutterClick","e","target","domEvent","indexOf","editor","isFocused","clientX","getBoundingClientRect","left","row","getDocumentPosition","session","getLine","undefined","getBreakpoints","length","includes","clearBreakpoint","setBreakpoint","stop","handleEditorUpdateBreakpoints","$breakpoints","handleAnnotationChange","annotations","getAnnotations","count","anno","setAnnotations","handleEvaluate","handleEditorEval","isRecording","handleRecordInput","time","getTimerDuration","data","KeyboardCommand","moveCursor","position","AceEditor","selection","clearSelection","moveCursorToPosition","renderer","showCursor","scrollCursorIntoView","handleDeclarationNavigate","getCursorPosition","ShareAce","onChangeMethod","newCode","delta","handleUpdateHasUnsavedChanges","handleEditorValueChange","getSession","isEditorAutorun","onCursorChange","editorCursorPositionToBeApplied","getCursor","onSelectionChange","range","getRange","isBackwards","isEqual","start","end","componentDidUpdate","prevProps","codeDeltasToApply","inputToApply","newCursorPosition","getDocument","applyDeltas","applyDelta","setRange","setDraggableReplPosition","filter","x","componentDidMount","on","onFocus","onBlur","componentWillUnmount","WS","close","render","HotKeys","handlers","commands","name","bindKey","win","mac","exec","editorProps","$blockScrolling","Infinity","ref","markers","fontSize","height","highlightActiveLine","mode","onChange","readOnly","isEditorReadonly","theme","value","editorValue","width","setOptions","fontFamily","keyboardHandler","editorBinding","goGreen","keyBindings","evaluate","navigate","refactor","highlightScope","useHighlighting","inProps","outProps","reactAceRef","propsRef","markerIdsRef","handleVariableHighlighting","setTimeout","code","getValue","chapterNumber","sourceChapter","bgTokenizer","forEach","id","removeMarker","ranges","getAllOccurrencesInScope","createContext","line","column","map","loc","AceRange","addMarker","handleHighlightScope","chapter","getScope","prevOnChange","prevOnCursorChange","useNavigation","handleNavigate","pos","token","getTokenAt","newPos","hasDeclaration","Links","sourceVariant","Variant","external","externalLibraryName","externalUrl","Documentation","some","node","caption","test","open","useRefactor","sourceLocations","getSelection","Range","addRange","useShareAce","editorSessionId","sharedbAce","WsUrl","pluginWsUrl","namespace","add","handleSetSharedbConnected","path","error","console","Sentry","interval","setInterval","clearInterval","reconnect","addEventListener","connection","Object","values","connections","unlisten","EventT","getBreakpointLineNumbers","breakpoints","breakpointLineNumbers","index","EditorBase","_reactAceRef$current","filePath","setFilePath","handleEditorUpdateBreakpointsRef","handlePromptAutocompleteRef","handlePromptAutocomplete","setMode","getMode","setSession","_eventRegistry","changeCursor","focus","displayBreakpoints","setBreakpoints","navigator","userAgent","document","style","Chapter","selectMode","makeHandleGutterClick","editorTabIndex","makeHandleAnnotationChange","acequire","setCompleters","args","getCompletions","prefix","callback","charAt","keyHandlers","aceEditorProps","lineNums","getModeString","enableBasicAutocompletion","enableLiveAutocompletion","hooks","hook","shiftBreakpointsWithCode","isWhitespace","s","trim","oldBreakpoints","oldBreakpointLineNumbers","newBreakpointLineNumbers","deltaStartLineNumber","deltaStartColumnNumber","deltaEndLineNumber","deltaNumOfLinesModified","lines","oldBreakpointLineNumber","action","shouldIncreaseBreakpointLineNumber","trimStart","newBreakpointLineNumber","shouldDecreaseBreakpointLineNumber","substring","entries","_","eventT","propFn","currFn","overlayPage","contentElement","closer","createElement","ignoreFocusOut","documentEscListener","keyCode","_closer","_closer$parentNode","removeEventListener","parentNode","removeChild","cssText","stopPropagation","appendChild","blur","setIgnoreFocusOut","ignore","pointerEvents","div","getElementById","_div$parentNode","sessions","setSessions","defaultMode","Mode","defaultEditSession","createEditSession","isActive","setActive","remove","Card","selected","Icon","baseFilePath","filePaths","activeEditorTabIndex","setActiveEditorTabIndex","removeEditorTabByIndex","shortenedFilePaths","originalFilePaths","originalToUniqueShortenedFilePaths","filePathSegments","reduce","segments","split","pathlib","segment","numOfPathSegments","keys","shortenedToOriginalFilePaths","originalFilePath","_filePaths$shortenedF","shortenedFilePath","slice","join","concat","getShortestUniqueFilePaths","replace","onWheel","currentTarget","scrollTo","scrollLeft","deltaY","EditorTab","convertEditorTabStateToProps","editorTab","workspaceSettings","WorkspaceSettingsContext","isFolderModeEnabled","editorTabs","createEditorTab","editorVariant","editorTabStateProps","createSourcecastEditorTab","Editor","createNormalEditorTab","editorTabState","_editorTabState$fileP","EditorTabContainer","McqChooser","mcq","handleMCQSubmit","options","choices","choice","i","answer","hasSolution","solution","isSolution","Button","active","intent","Intent","handleClick","hint","hintElement","Markdown","showSuccessMessage","showWarningMessage","minimal","tabs","isExpanded","expandSideBar","collapseSideBar","selectedTabIndex","setSelectedTabIndex","tab","tabIndex","iconName","size","rightResizeOnly","right","bottomResizeOnly","bottom","noResize","sideBarResizable","contentContainerDiv","editorDividerDiv","leftParentResizable","maxDividerHeight","sideDividerDiv","contentContainerWidth","useDimensions","expandedSideBarWidth","setExpandedSideBarWidth","isSideBarExpanded","setIsSideBarExpanded","FocusStyleManager","sideContentIsResizeable","clientHeight","toggleSideBarDividerDisplay","direction","elementRef","clientWidth","sideBar","updateSize","toggleEditorDividerDisplay","_a","_b","editorWidthPercentage","toggleDividerDisplay","resizableHeight","rightParentHeight","display","sideContent","SideContent","sideContentProps","resizableSideContent","Resizable","bounds","enable","onResize","onResizeStop","handleSideContentHeightChange","hasUnsavedChanges","ControlBar","controlBarProps","sideBarResizableProps","isSideBarRendered","sideBarProps","minWidth","maxWidth","sideBarWidth","defaultSize","SideBar","as","editorContainerProps","EditorContainer","mcqProps","createWorkspaceInput","Repl","replProps"],"sourceRoot":""}