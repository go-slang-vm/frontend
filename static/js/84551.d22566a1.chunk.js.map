{"version":3,"file":"static/js/84551.d22566a1.chunk.js","mappings":"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","sources":["commons/controlBar/ControlBar.tsx","commons/controlBar/ControlBarSaveButton.tsx","pages/stories/Story.tsx"],"sourcesContent":["import { Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\n\nexport type ControlBarProps = {\n  editorButtons: Array<JSX.Element | null>;\n  flowButtons?: Array<JSX.Element | null>;\n  editingWorkspaceButtons?: Array<JSX.Element | null>;\n};\n\nconst ControlBar: React.FC<ControlBarProps> = props => {\n  const editorControl = (\n    <div className={classNames('ControlBar_editor', Classes.BUTTON_GROUP)}>\n      {props.editorButtons}\n    </div>\n  );\n\n  const flowControl = props.flowButtons && (\n    <div className={classNames('ControlBar_flow', Classes.BUTTON_GROUP)}>{props.flowButtons}</div>\n  );\n\n  const editingWorkspaceControl = (\n    <div className={classNames('ControlBar_editingWorkspace', Classes.BUTTON_GROUP)}>\n      {props.editingWorkspaceButtons}\n    </div>\n  );\n\n  return (\n    <div className=\"ControlBar\">\n      {editorControl}\n      {flowControl}\n      {editingWorkspaceControl}\n    </div>\n  );\n};\n\nexport default ControlBar;\n","import { Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarSaveButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickSave?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  hasUnsavedChanges?: boolean;\n};\n\nexport const ControlButtonSaveButton: React.FC<ControlBarSaveButtonProps> = props => {\n  const saveButtonOpts = props.hasUnsavedChanges ? { intent: Intent.WARNING, minimal: false } : {};\n\n  return (\n    <ControlButton\n      label=\"Save\"\n      icon={IconNames.FLOPPY_DISK}\n      onClick={props.onClickSave}\n      options={saveButtonOpts}\n    />\n  );\n};\n","import 'js-slang/dist/editors/ace/theme/source';\n\nimport { Classes } from '@blueprintjs/core';\nimport { TextInput } from '@tremor/react';\nimport classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport AceEditor, { IEditorProps } from 'react-ace';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport ControlBar, { ControlBarProps } from 'src/commons/controlBar/ControlBar';\nimport { ControlButtonSaveButton } from 'src/commons/controlBar/ControlBarSaveButton';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport { scrollSync } from 'src/commons/utils/StoriesHelper';\nimport {\n  createStory,\n  saveStory,\n  setCurrentStory,\n  setCurrentStoryId\n} from 'src/features/stories/StoriesActions';\n\nimport UserBlogContent from '../../features/stories/storiesComponents/UserBlogContent';\n\ntype Props = {\n  isViewOnly?: boolean;\n};\n\nconst Story: React.FC<Props> = ({ isViewOnly = false }) => {\n  const dispatch = useDispatch();\n  const [isDirty, setIsDirty] = useState(false);\n\n  const { currentStory: story, currentStoryId: storyId } = useTypedSelector(store => store.stories);\n  const { id: idToSet } = useParams<{ id: string }>();\n  useEffect(() => {\n    // Clear screen on first load\n    dispatch(setCurrentStory(null));\n    // Either a new story (idToSet is null) or an existing story\n    // If existing story, setting it will automatically fetch the new story\n    dispatch(setCurrentStoryId(idToSet ? parseInt(idToSet) : null));\n  }, [dispatch, idToSet]);\n\n  // Loading state, show empty screen\n  if (!story) {\n    return <></>;\n  }\n\n  const onEditorScroll = (e: IEditorProps) => {\n    const userblogContainer = document.getElementById('userblogContainer');\n    if (userblogContainer) {\n      scrollSync(e, userblogContainer);\n    }\n  };\n\n  const onEditorValueChange = (val: string) => {\n    setIsDirty(true);\n    dispatch(setCurrentStory({ ...story, content: val }));\n  };\n\n  const { title, content } = story;\n\n  const controlBarProps: ControlBarProps = {\n    editorButtons: [\n      isViewOnly ? (\n        <>{title}</>\n      ) : (\n        <TextInput\n          maxWidth=\"max-w-xl\"\n          placeholder=\"Enter story title\"\n          value={title}\n          onChange={e => {\n            const newTitle = e.target.value;\n            dispatch(setCurrentStory({ ...story, title: newTitle }));\n            setIsDirty(true);\n          }}\n        />\n      ),\n      isViewOnly ? null : (\n        <ControlButtonSaveButton\n          key=\"save_story\"\n          onClickSave={() => {\n            if (storyId) {\n              // Update story\n              dispatch(saveStory(story, storyId));\n            } else {\n              // Create story\n              dispatch(createStory(story));\n            }\n            // TODO: Set isDirty to false\n          }}\n          hasUnsavedChanges={isDirty}\n        />\n      )\n    ]\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }} className={classNames(Classes.DARK)}>\n      <ControlBar {...controlBarProps} />\n      <div style={{ width: '100vw', height: '100%', display: 'flex' }}>\n        {!isViewOnly && (\n          <AceEditor\n            className=\"repl-react-ace react-ace\"\n            width=\"100%\"\n            height=\"100%\"\n            theme=\"source\"\n            value={content}\n            onChange={onEditorValueChange}\n            onScroll={onEditorScroll}\n            fontSize={17}\n            highlightActiveLine={false}\n            showPrintMargin={false}\n            wrapEnabled={true}\n            setOptions={{ fontFamily: \"'Inconsolata', 'Consolas', monospace\" }}\n          />\n        )}\n        <div className=\"newUserblog\" id=\"userblogContainer\">\n          <UserBlogContent fileContent={content} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const EditStoryComponent = () => <Story isViewOnly={false} />;\nEditStoryComponent.displayName = 'EditStory';\n\nexport const ViewStoryComponent = () => <Story isViewOnly />;\nViewStoryComponent.displayName = 'ViewStory';\n\nexport default Story;\n"],"names":["props","editorControl","_jsx","className","classNames","Classes","children","editorButtons","flowControl","flowButtons","editingWorkspaceControl","editingWorkspaceButtons","_jsxs","ControlButtonSaveButton","saveButtonOpts","hasUnsavedChanges","intent","Intent","minimal","ControlButton","label","icon","IconNames","onClick","onClickSave","options","Story","isViewOnly","dispatch","useDispatch","isDirty","setIsDirty","useState","currentStory","story","currentStoryId","storyId","useTypedSelector","store","stories","id","idToSet","useParams","useEffect","setCurrentStory","setCurrentStoryId","parseInt","_Fragment","title","content","controlBarProps","TextInput","maxWidth","placeholder","value","onChange","e","newTitle","target","saveStory","createStory","style","display","flexDirection","ControlBar","width","height","AceEditor","theme","val","onScroll","userblogContainer","document","getElementById","scrollSync","fontSize","highlightActiveLine","showPrintMargin","wrapEnabled","setOptions","fontFamily","UserBlogContent","fileContent","EditStoryComponent","displayName","ViewStoryComponent"],"sourceRoot":""}