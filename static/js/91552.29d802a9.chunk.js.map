{"version":3,"file":"static/js/91552.29d802a9.chunk.js","mappings":"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","sources":["commons/ContentDisplay.tsx","pages/stories/StoriesTable.tsx","pages/stories/StoryActions.tsx","pages/stories/Stories.tsx"],"sourcesContent":["import { Card, Elevation } from '@blueprintjs/core';\nimport React, { useEffect } from 'react';\n\nexport type ContentDisplayProps = {\n  fullWidth?: boolean;\n  display: JSX.Element;\n  loadContentDispatch?: () => void;\n};\n\nconst ContentDisplay: React.FC<ContentDisplayProps> = props => {\n  useEffect(() => {\n    props.loadContentDispatch?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"ContentDisplay row center-xs\">\n      <div\n        className={`${\n          props.fullWidth ? 'col-md-12' : 'col-md-10 col-xs-11'\n        } contentdisplay-content-parent`}\n      >\n        <Card className=\"contentdisplay-content\" elevation={Elevation.THREE}>\n          {props.display}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentDisplay;\n","import { Icon as BpIcon } from '@blueprintjs/core/lib/esm/components/icon/icon';\nimport { IconNames } from '@blueprintjs/icons';\nimport {\n  Flex,\n  Icon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeaderCell,\n  TableRow,\n  Text\n} from '@tremor/react';\nimport React from 'react';\nimport { StoryListView } from 'src/features/stories/StoriesTypes';\n\ntype Props = {\n  headers: Array<{ id: string; header: string }>;\n  stories: StoryListView[];\n  storyActions: (stor: StoryListView) => React.ReactNode;\n};\n\nconst MAX_EXCERPT_LENGTH = 35;\n\nconst StoriesTable: React.FC<Props> = ({ headers, stories, storyActions }) => {\n  return (\n    <Table marginTop=\"mt-10\">\n      <TableHead>\n        <TableRow>\n          {headers.map(({ id, header }) => (\n            <TableHeaderCell key={id}>{header}</TableHeaderCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {stories.map(story => {\n          const { id, authorName, isPinned, title, content } = story;\n          return (\n            <TableRow key={id}>\n              <TableCell>{authorName}</TableCell>\n              <TableCell>\n                <Flex justifyContent=\"justify-start\">\n                  {isPinned && <Icon icon={() => <BpIcon icon={IconNames.PIN} />} />}\n                  <Text>{title}</Text>\n                </Flex>\n              </TableCell>\n              <TableCell>\n                <Text>\n                  {content.replaceAll(/\\s+/g, ' ').length <= MAX_EXCERPT_LENGTH\n                    ? content.replaceAll(/\\s+/g, ' ')\n                    : content.split(/\\s+/).reduce((acc, cur) => {\n                        return acc.length + cur.length <= MAX_EXCERPT_LENGTH\n                          ? acc + ' ' + cur\n                          : acc;\n                      }, '') + 'â€¦'}\n                </Text>\n              </TableCell>\n              <TableCell>{storyActions(story)}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default StoriesTable;\n","import { Icon as BpIcon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Flex, Icon } from '@tremor/react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  storyId: number;\n  handleDeleteStory: (id: number) => void;\n  canView?: boolean;\n  canEdit?: boolean;\n  canDelete?: boolean;\n  canPin?: boolean;\n  isPinned?: boolean;\n  handleTogglePin?: (id: number) => void;\n  handleMovePinUp?: (id: number) => void;\n  handleMovePinDown?: (id: number) => void;\n};\n\nconst StoryActions: React.FC<Props> = ({\n  storyId,\n  handleDeleteStory,\n  canView = false,\n  canEdit = false,\n  canDelete = false,\n  canPin = false,\n  isPinned = false,\n  handleTogglePin = () => {},\n  handleMovePinUp = () => {},\n  handleMovePinDown = () => {}\n}) => {\n  return (\n    <Flex justifyContent=\"justify-start\" spaceX=\"space-x-2\">\n      {canView && (\n        <Link to={`./view/${storyId}`}>\n          <Icon\n            tooltip=\"View\"\n            icon={() => <BpIcon icon={IconNames.EyeOpen} />}\n            variant=\"light\"\n            color=\"green\"\n          />\n        </Link>\n      )}\n      {canEdit && (\n        <Link to={`./edit/${storyId}`}>\n          <Icon\n            tooltip=\"Edit\"\n            icon={() => <BpIcon icon={IconNames.EDIT} />}\n            variant=\"light\"\n            color=\"sky\"\n          />\n        </Link>\n      )}\n      {canPin && isPinned && (\n        <>\n          <button style={{ padding: 0 }} onClick={() => handleMovePinUp(storyId)}>\n            <Icon\n              tooltip=\"Reorder up\"\n              icon={() => <BpIcon icon={IconNames.ARROW_UP} />}\n              variant=\"light\"\n              color=\"pink\"\n            />\n          </button>\n          <button style={{ padding: 0 }} onClick={() => handleMovePinDown(storyId)}>\n            <Icon\n              tooltip=\"Reorder down\"\n              icon={() => <BpIcon icon={IconNames.ARROW_DOWN} />}\n              variant=\"light\"\n              color=\"pink\"\n            />\n          </button>\n        </>\n      )}\n      {canPin && (\n        <button style={{ padding: 0 }} onClick={() => handleTogglePin(storyId)}>\n          <Icon\n            tooltip={isPinned ? 'Unpin' : 'Pin'}\n            icon={() => <BpIcon icon={isPinned ? IconNames.EXCLUDE_ROW : IconNames.PIN} />}\n            variant=\"light\"\n            color=\"indigo\"\n          />\n        </button>\n      )}\n      {canDelete && (\n        <button style={{ padding: 0 }} onClick={() => handleDeleteStory(storyId)}>\n          <Icon\n            tooltip=\"Delete\"\n            icon={() => <BpIcon icon={IconNames.TRASH} />}\n            variant=\"light\"\n            color=\"red\"\n          />\n        </button>\n      )}\n    </Flex>\n  );\n};\n\nexport default StoryActions;\n","import '@tremor/react/dist/esm/tremor.css';\n\nimport { Button as BpButton, Icon as BpIcon, NonIdealState } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Card, Flex, TextInput, Title } from '@tremor/react';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { StoriesRole } from 'src/commons/application/ApplicationTypes';\nimport ContentDisplay from 'src/commons/ContentDisplay';\nimport { showSimpleConfirmDialog } from 'src/commons/utils/DialogHelper';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport { deleteStory, getStoriesList, saveStory } from 'src/features/stories/StoriesActions';\nimport { getYamlHeader } from 'src/features/stories/storiesComponents/UserBlogContent';\n\nimport StoriesTable from './StoriesTable';\nimport StoryActions from './StoryActions';\n\nconst columns = [\n  { id: 'author', header: 'Author' },\n  { id: 'title', header: 'Title' },\n  { id: 'content', header: 'Content' },\n  { id: 'actions', header: 'Actions' }\n];\n\nconst Stories: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const { userId: storiesUserId, role: storiesRole } = useTypedSelector(state => state.stories);\n  const isStoriesDisabled = useTypedSelector(state => !state.stories.groupId);\n  const isLoggedIn = !!storiesUserId;\n\n  const handleNewStory = useCallback(() => navigate('./new'), [navigate]);\n  const handleDeleteStory = useCallback(\n    async (id: number) => {\n      const confirm = await showSimpleConfirmDialog({\n        contents: <p>Are you sure you want to delete this story?</p>,\n        positiveIntent: 'danger',\n        positiveLabel: 'Delete'\n      });\n      if (confirm) {\n        dispatch(deleteStory(id));\n        // deleteStory will auto-refresh the list of stories after\n      }\n    },\n    [dispatch]\n  );\n\n  const storyList = useTypedSelector(state => state.stories.storyList);\n\n  const handleTogglePinStory = useCallback(\n    (id: number) => {\n      // Safe to use ! as the story ID comes a story in storyList\n      const story = storyList.find(story => story.id === id)!;\n      const pinnedLength = storyList.filter(story => story.isPinned).length;\n      const newStory = {\n        ...story,\n        isPinned: !story.isPinned,\n        // Pinning a story appends to the end of the pinned list\n        pinOrder: story.isPinned ? null : pinnedLength\n      };\n      dispatch(saveStory(newStory, id));\n    },\n    [dispatch, storyList]\n  );\n\n  const handleMovePinUp = useCallback(\n    (id: number) => {\n      // Safe to use ! as the story ID comes a story in storyList\n      const oldIndex = storyList.findIndex(story => story.id === id)!;\n      if (oldIndex === 0) {\n        return;\n      }\n\n      const toMoveUp = storyList[oldIndex];\n      const toMoveDown = storyList[oldIndex - 1];\n\n      const storiesToUpdate = [\n        { ...toMoveUp, pinOrder: oldIndex - 1 },\n        { ...toMoveDown, pinOrder: oldIndex }\n      ];\n      storiesToUpdate.forEach(story => dispatch(saveStory(story, story.id)));\n    },\n    [dispatch, storyList]\n  );\n\n  const handleMovePinDown = useCallback(\n    (id: number) => {\n      // Safe to use ! as the story ID comes a story in storyList\n      const oldIndex = storyList.findIndex(story => story.id === id)!;\n      const pinnedLength = storyList.filter(story => story.isPinned).length;\n      if (oldIndex === pinnedLength - 1) {\n        return;\n      }\n      const toMoveDown = storyList[oldIndex];\n      const toMoveUp = storyList[oldIndex + 1];\n\n      const storiesToUpdate = [\n        { ...toMoveDown, pinOrder: oldIndex + 1 },\n        { ...toMoveUp, pinOrder: oldIndex }\n      ];\n      storiesToUpdate.forEach(story => dispatch(saveStory(story, story.id)));\n    },\n    [dispatch, storyList]\n  );\n\n  return isStoriesDisabled ? (\n    <ContentDisplay\n      display={\n        <NonIdealState\n          icon={IconNames.ERROR}\n          title=\"Disabled\"\n          description=\"Stories has been disabled for this course.\"\n        />\n      }\n    />\n  ) : (\n    <ContentDisplay\n      loadContentDispatch={() => dispatch(getStoriesList())}\n      display={\n        <Card>\n          <Flex justifyContent=\"justify-between\">\n            <Flex justifyContent=\"justify-start\" spaceX=\"space-x-6\">\n              <Title>All Stories</Title>\n              {isLoggedIn && (\n                <BpButton onClick={handleNewStory} icon={IconNames.PLUS}>\n                  Add Story\n                </BpButton>\n              )}\n            </Flex>\n            <TextInput\n              maxWidth=\"max-w-xl\"\n              icon={() => <BpIcon icon={IconNames.SEARCH} style={{ marginLeft: '0.75rem' }} />}\n              placeholder=\"Search for author...\"\n              onChange={e => setQuery(e.target.value)}\n            />\n          </Flex>\n\n          <StoriesTable\n            headers={columns}\n            stories={storyList\n              // Filter out the YAML header from the content\n              .map(story => ({ ...story, content: getYamlHeader(story.content).content }))\n              .filter(\n                story =>\n                  // Always show pinned stories\n                  story.isPinned || story.authorName.toLowerCase().includes(query.toLowerCase())\n              )}\n            storyActions={story => {\n              const isAuthor = storiesUserId === story.authorId;\n              const hasWritePermissions =\n                storiesRole === StoriesRole.Moderator || storiesRole === StoriesRole.Admin;\n              return (\n                <StoryActions\n                  storyId={story.id}\n                  handleDeleteStory={handleDeleteStory}\n                  handleTogglePin={handleTogglePinStory}\n                  handleMovePinUp={handleMovePinUp}\n                  handleMovePinDown={handleMovePinDown}\n                  canView // everyone has view permissions, even anonymous users\n                  canEdit={isAuthor || hasWritePermissions}\n                  canDelete={isAuthor || hasWritePermissions}\n                  canPin={hasWritePermissions}\n                  isPinned={story.isPinned}\n                />\n              );\n            }}\n          />\n        </Card>\n      }\n    />\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = Stories;\nComponent.displayName = 'Stories';\n\nexport default Stories;\n"],"names":["props","useEffect","_props$loadContentDis","loadContentDispatch","call","_jsx","className","children","fullWidth","Card","elevation","Elevation","display","StoriesTable","headers","stories","storyActions","_jsxs","Table","marginTop","TableHead","TableRow","map","id","header","TableHeaderCell","TableBody","story","authorName","isPinned","title","content","TableCell","Flex","justifyContent","Icon","icon","BpIcon","IconNames","Text","replaceAll","length","split","reduce","acc","cur","StoryActions","storyId","handleDeleteStory","canView","canEdit","canDelete","canPin","handleTogglePin","handleMovePinUp","handleMovePinDown","spaceX","Link","to","tooltip","variant","color","_Fragment","style","padding","onClick","columns","Stories","query","setQuery","useState","navigate","useNavigate","dispatch","useDispatch","userId","storiesUserId","role","storiesRole","useTypedSelector","state","isStoriesDisabled","groupId","isLoggedIn","handleNewStory","useCallback","async","showSimpleConfirmDialog","contents","positiveIntent","positiveLabel","deleteStory","storyList","handleTogglePinStory","find","pinnedLength","filter","newStory","pinOrder","saveStory","oldIndex","findIndex","forEach","ContentDisplay","NonIdealState","description","getStoriesList","Title","BpButton","TextInput","maxWidth","marginLeft","placeholder","onChange","e","target","value","getYamlHeader","toLowerCase","includes","isAuthor","authorId","hasWritePermissions","StoriesRole","Component","displayName"],"sourceRoot":""}