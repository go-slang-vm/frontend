{"version":3,"file":"static/js/93347.8a216444.chunk.js","mappings":"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CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,uCAAwC,CACvC,KACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,MAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,MAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,KACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,KACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,KACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,2CAA4C,CAC3C,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,2CAA4C,CAC3C,MACA,EACA,MACA,OAED,qCAAsC,CACrC,MACA,EACA,OAED,kCAAmC,CAClC,MACA,EACA,OAED,uBAAwB,CACvB,MACA,EACA,MACA,OAED,oCAAqC,CACpC,MACA,EACA,KAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,KAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,OAED,iCAAkC,CACjC,KACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,MAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,mBAAoB,CACnB,KACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,MAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,GAED,mCAAoC,CACnC,MACA,GAED,uCAAwC,CACvC,MACA,GAED,iCAAkC,CACjC,MACA,GAED,8BAA+B,CAC9B,MACA,GAED,mBAAoB,CACnB,MACA,GAED,mCAAoC,CACnC,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,KACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,MAED,gBAAiB,CAChB,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,KACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,KACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,KAED,gBAAiB,CAChB,MACA,EACA,MAED,mCAAoC,CACnC,MACA,EACA,MAED,mBAAoB,CACnB,MACA,EACA,MAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,KACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,KACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,KACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,mCAAoC,CACnC,KACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,OAED,yCAA0C,CACzC,MACA,EACA,OAED,qCAAsC,CACrC,KACA,EACA,OAED,yCAA0C,CACzC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,qBAAsB,CACrB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,IACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,KAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,MAED,gBAAiB,CAChB,MACA,EACA,MAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,GACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,KACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,KACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,KAED,gBAAiB,CAChB,MACA,EACA,OAED,yCAA0C,CACzC,IACA,EACA,OAED,qCAAsC,CACrC,MACA,EACA,OAED,yCAA0C,CACzC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,qBAAsB,CACrB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,MAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,KACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,MAED,8BAA+B,CAC9B,MACA,EACA,MAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,KACA,EACA,MAED,oCAAqC,CACpC,MACA,EACA,MACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,KACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,MACA,OAED,yCAA0C,CACzC,MACA,EACA,OAED,qCAAsC,CACrC,MACA,EACA,MAED,yCAA0C,CACzC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,qBAAsB,CACrB,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,MAED,gBAAiB,CAChB,KACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,gCAAiC,CAChC,MACA,EACA,OAED,oCAAqC,CACpC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,2BAA4B,CAC3B,MACA,EACA,OAED,gBAAiB,CAChB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,IACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,MAED,iCAAkC,CACjC,MACA,EACA,OAED,8BAA+B,CAC9B,MACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,mCAAoC,CACnC,MACA,EACA,OAED,uCAAwC,CACvC,MACA,EACA,OAED,iCAAkC,CACjC,MACA,EACA,MAED,8BAA+B,CAC9B,KACA,EACA,OAED,mBAAoB,CACnB,MACA,EACA,MAGF,SAAS0nH,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE7nH,EAAK2nH,GAC9B,OAAOztF,QAAQmlB,UAAUmC,MAAK,KAC7B,IAAI98C,EAAI,IAAIq7C,MAAM,uBAAyB4nE,EAAM,KAEjD,MADAjjH,EAAElC,KAAO,mBACHkC,CAAC,IAIT,IAAIojH,EAAM9nH,EAAI2nH,GAAMrqH,EAAKwqH,EAAI,GAC7B,OAAO5tF,QAAQo5B,IAAIw0D,EAAIrzE,MAAM,GAAGz0C,IAAI4nH,EAAoBljH,IAAI88C,MAAK,IACzDomE,EAAoBtiH,EAAEhI,EAAa,GAATwqH,EAAI,KAEvC,CACAJ,EAAoBhlG,KAAO,IAAOmT,OAAOnT,KAAK1iB,GAC9C0nH,EAAoBpqH,GAAK,MACzByqH,EAAOC,QAAUN,C,gDChjFjB,SAAgB,kBAAoB,mCAAmC,gBAAkB,iCAAiC,UAAU,yBAAyB,MAAQ,uBAAuB,cAAc,6BAA6B,sBAAsB,qCAAqC,YAAY,2BAA2B,QAAU,yBAAyB,4BAA4B,2C","sources":["commons/ContentDisplay.tsx","commons/controlBar/ControlBarReturnToAcademyButton.tsx","commons/controlBar/ControlBarNextButton.tsx","commons/controlBar/ControlBarPreviousButton.tsx","commons/controlBar/ControlBarQuestionViewButton.tsx","commons/controlBar/ControlBarResetButton.tsx","commons/controlBar/ControlBarSaveButton.tsx","commons/sideContent/content/SideContentTestcaseCard.tsx","commons/sideContent/content/SideContentToneMatrix.tsx","commons/utils/DateHelper.ts","commons/researchAgreementPrompt/ResearchAgreementPrompt.tsx","features/assessments/AssessmentUtils.ts","commons/sideContent/content/SideContentResultCard.tsx","commons/sideContent/content/SideContentAutograder.tsx","commons/sideContent/content/SideContentLeaderboardCard.tsx","commons/sideContent/content/SideContentContestLeaderboard.tsx","commons/sideContent/content/SideContentContestVoting.tsx","commons/sideContent/content/SideContentContestVotingContainer.tsx","commons/assessmentWorkspace/AssessmentWorkspaceGradingResult.tsx","commons/assessmentWorkspace/AssessmentWorkspace.tsx","commons/assessment/AssessmentNotFound.tsx","commons/assessment/Assessment.tsx","commons/achievement/control/achievementEditor/AchievementTemplate.ts","commons/achievement/control/achievementEditor/AchievementAdder.tsx","commons/achievement/control/common/ItemDeleter.tsx","commons/achievement/control/common/ItemSaver.tsx","commons/achievement/control/achievementEditor/achievementSettings/EditableGoalUuids.tsx","commons/achievement/control/achievementEditor/achievementSettings/EditablePosition.tsx","commons/achievement/control/achievementEditor/achievementSettings/EditablePrerequisiteUuids.tsx","commons/achievement/control/achievementEditor/AchievementSettings.tsx","commons/achievement/control/achievementEditor/AchievementUuidCopier.tsx","commons/achievement/control/achievementEditor/EditableCardTypes.ts","commons/achievement/control/achievementEditor/EditableDate.tsx","commons/achievement/control/achievementEditor/EditableView.tsx","commons/achievement/control/achievementEditor/EditableCard.tsx","commons/achievement/control/AchievementEditor.tsx","commons/achievement/AchievementFilter.tsx","commons/achievement/overview/AchievementMilestone.tsx","commons/achievement/overview/AchievementLevel.tsx","commons/achievement/AchievementOverview.tsx","commons/achievement/card/AchievementDeadline.tsx","commons/achievement/card/AchievementXp.tsx","commons/achievement/AchievementCard.tsx","commons/achievement/AchievementTask.tsx","webpack://frontend/./src/styles/AchievementCommentCard.module.scss?d089","commons/achievement/AchievementCommentCard.tsx","commons/achievement/view/AchievementViewCompletion.tsx","commons/achievement/view/AchievementViewGoal.tsx","commons/achievement/AchievementView.tsx","commons/achievement/utils/InsertFakeAchievements.ts","pages/achievement/subcomponents/AchievementDashboard.tsx","commons/achievement/control/AchievementPreview.tsx","commons/achievement/control/goalEditor/EditableGoalTypes.ts","commons/achievement/control/goalEditor/GoalTemplate.ts","commons/achievement/control/goalEditor/metaDetails/EditableAssessmentMeta.tsx","features/achievement/ExpressionTypes.ts","commons/achievement/control/goalEditor/metaDetails/EditableBinaryMeta.tsx","commons/achievement/control/goalEditor/EditableDate.tsx","commons/achievement/control/goalEditor/EditableTime.tsx","commons/achievement/control/goalEditor/metaDetails/EditableEventMeta.tsx","commons/achievement/control/goalEditor/metaDetails/EditableManualMeta.tsx","commons/achievement/control/goalEditor/EditableMeta.tsx","commons/achievement/control/goalEditor/EditableGoal.tsx","commons/achievement/control/goalEditor/GoalAdder.tsx","commons/achievement/control/GoalEditor.tsx","pages/achievement/control/AchievementControl.tsx","pages/achievement/Achievement.tsx","commons/sourceRecorder/SourceRecorderControlBar.tsx","commons/sourceRecorder/SourceRecorderDeleteCell.tsx","commons/sourceRecorder/SourceRecorderSelectCell.tsx","commons/sourceRecorder/SourceRecorderShareCell.tsx","commons/sourceRecorder/SourceRecorderTable.tsx","pages/sourcecast/Sourcecast.tsx","pages/academy/adminPanel/subcomponents/AddStoriesUserPanel.tsx","pages/academy/adminPanel/subcomponents/AddUserPanel.tsx","pages/academy/adminPanel/subcomponents/assessmentConfigPanel/BooleanCell.tsx","pages/academy/adminPanel/subcomponents/assessmentConfigPanel/DeleteRowCell.tsx","pages/academy/adminPanel/subcomponents/assessmentConfigPanel/NumericCell.tsx","pages/academy/adminPanel/subcomponents/assessmentConfigPanel/AssessmentConfigPanel.tsx","pages/academy/adminPanel/subcomponents/notificationConfigPanel/SelectCell.tsx","pages/academy/adminPanel/subcomponents/notificationConfigPanel/TimeOptionCell.tsx","pages/academy/adminPanel/subcomponents/NotificationConfigPanel.tsx","pages/academy/adminPanel/subcomponents/userConfigPanel/RolesCell.tsx","pages/academy/adminPanel/subcomponents/userConfigPanel/UserActionsCell.tsx","pages/academy/adminPanel/subcomponents/userConfigPanel/UserConfigPanel.tsx","pages/academy/adminPanel/AdminPanel.tsx","pages/academy/dashboard/Dashboard.tsx","features/game/assets/FontAssets.ts","features/game/commons/CommonConstants.ts","features/game/utils/StyleUtils.ts","features/game/commons/CommonTextHover.ts","features/game/utils/TextUtils.ts","features/game/awards/GameAwardsConstants.ts","features/game/awards/GameAwardsHelper.ts","features/game/assets/AssetsTypes.ts","features/game/assets/ImageAssets.ts","features/game/sound/GameSoundTypes.ts","features/game/assets/SoundAssets.ts","features/game/layer/GameLayerTypes.ts","features/game/utils/GameUtils.ts","features/game/effects/FadeEffect.ts","features/game/effects/FlyEffect.ts","features/game/effects/MiniMessage.ts","features/game/dialogue/GameDialogueConstants.ts","features/game/effects/Typewriter.ts","features/game/dialogue/GameDialogueRenderer.ts","features/game/dialogue/GameDialogueHelper.ts","features/game/input/GameInputConstants.ts","features/game/input/GameInputManager.ts","features/game/effects/Notification.ts","features/game/utils/ButtonUtils.ts","features/game/effects/Prompt.ts","features/game/phase/GamePhaseTypes.ts","features/game/scenes/gameManager/GameGlobalAPI.ts","features/game/state/GameStateTypes.ts","features/game/action/GameActionConditionChecker.ts","features/game/action/GameActionTypes.ts","features/game/action/GameActionExecuter.ts","features/game/action/GameActionManager.ts","features/game/location/GameMapTypes.ts","features/game/animations/GameAnimationManager.ts","features/game/utils/SpriteUtils.ts","features/game/awards/GameAwardsManager.ts","features/game/background/GameBackgroundManager.ts","features/game/boundingBoxes/GameBoundingBoxManager.ts","features/game/character/GameCharacterConstants.ts","features/game/character/GameCharacterManager.ts","features/game/dashboard/GameDashboardConstants.ts","features/game/dashboard/GameDashboardTypes.ts","features/game/dashboard/GameDashboardManager.ts","features/game/dialogue/GameDialogueGenerator.ts","features/game/commons/CommonTypes.ts","features/game/utils/StringUtils.ts","features/game/dialogue/GameDialogueSpeakerRenderer.ts","features/game/dialogue/GameDialogueManager.ts","features/game/dialogue/GameDialogueStorageManager.ts","features/game/effects/LoadingScreen.ts","features/game/commons/CommonRadioButton.ts","features/game/scenes/settings/SettingsConstants.ts","features/game/escape/GameEscapeConstants.ts","features/game/escape/GameEscapeManager.ts","features/game/layer/GameLayerManager.ts","features/game/log/GameLogConstants.ts","features/game/log/GameLogManager.ts","features/game/mode/GameModeTypes.ts","features/game/effects/GlowingObject.ts","features/game/objects/GameObjectManager.ts","features/game/phase/GamePhaseManager.ts","features/game/effects/ScrollEffect.ts","features/game/popUp/GamePopUpConstants.ts","features/game/popUp/GamePopUpManager.ts","features/game/save/GameSaveHelper.ts","features/game/state/GameStateManager.ts","features/game/task/GameTaskLogConstants.ts","features/game/task/GameTaskLogManager.ts","features/game/toolbar/GameToolbarConstants.ts","features/game/toolbar/GameToolbarManager.ts","features/game/commons/CommonBackButton.ts","features/game/mode/explore/GameModeExploreConstants.ts","features/game/mode/explore/GameModeExplore.ts","features/game/mode/menu/GameModeMenuConstants.ts","features/game/mode/menu/GameModeMenu.ts","features/game/mode/move/GameModeMoveConstants.ts","features/game/mode/move/GameModeMove.ts","features/game/mode/sequence/GameModeSequence.ts","features/game/mode/talk/GameModeTalkConstants.ts","features/game/mode/talk/GameModeTalk.ts","features/game/scenes/gameManager/GameManager.ts","features/game/scenes/gameManager/GameManagerHelper.ts","features/game/save/GameSaveManager.ts","features/game/save/GameSaveRequests.ts","features/game/effects/Glitch.ts","features/game/effects/WorkerMessage.ts","features/game/scenes/awardsHall/AwardsHallConstants.ts","features/game/scenes/awardsHall/AwardsHall.ts","features/game/scenes/awardsHall/AwardsHallHelper.ts","features/game/scenes/bindings/BindingsConstants.ts","features/game/scenes/bindings/Bindings.ts","features/game/utils/LoaderUtils.ts","features/game/scenes/chapterSelect/ChapterSelectConstants.ts","features/game/assets/TextAssets.ts","features/game/location/GameMap.ts","features/game/objective/GameObjective.ts","features/game/task/GameTask.ts","features/game/parser/ParserConverter.ts","features/game/parser/ParserValidator.ts","features/game/parser/ConditionParser.ts","features/game/parser/ActionParser.ts","features/game/parser/PromptParser.ts","features/game/parser/CharacterParser.ts","features/game/parser/SpeakerParser.ts","features/game/parser/DialogueParser.ts","features/game/parser/LocationDetailsParser.ts","features/game/location/GameMapHelper.ts","features/game/parser/BoundingBoxParser.ts","features/game/parser/MusicParser.ts","features/game/parser/ObjectParser.ts","features/game/parser/LocationParser.ts","features/game/parser/TasksParser.ts","features/game/parser/Parser.ts","features/game/utils/TxtLoaderUtils.ts","features/game/scenes/chapterSelect/ChapterSelectHelper.ts","features/game/scenes/chapterSelect/ChapterSelect.ts","features/game/scenes/checkpointTransition/CheckpointTransitionConstants.ts","features/game/scenes/checkpointTransition/CheckpointTransition.ts","features/game/scenes/mainMenu/MainMenuConstants.ts","features/game/scenes/mainMenu/MainMenu.ts","features/game/scenes/roomPreview/RoomPreviewConstants.ts","features/game/scenes/roomPreview/RoomPreviewHelper.ts","features/game/scenes/roomPreview/RoomPreview.ts","features/game/scenes/settings/Settings.ts","features/game/sound/GameSoundManager.ts","features/game/chapter/GameChapterMocks.ts","features/game/parser/AwardParser.ts","features/game/parser/RoomPreviewParser.ts","features/game/scenes/entry/Entry.ts","features/game/state/GameUserStateManager.ts","features/game/SourceAcademyGame.ts","features/game/chapter/GameChapterHelpers.ts","pages/academy/game/Game.tsx","features/gameSimulator/GameSimulatorTypes.ts","features/gameSimulator/GameSimulatorRequest.ts","features/gameSimulator/GameSimulatorService.ts","pages/academy/gameSimulator/subcomponents/GameSimulatorAssetFileUploader.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorAssetSelectionHelper.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorAssetViewer.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorAssetSelection.tsx","commons/utils/SortableList.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorChapterEditor.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorChapterSim.tsx","features/gameSimulator/scenes/MainMenuConstants.ts","pages/academy/gameSimulator/subcomponents/GameSimulatorCheckpointTxtLoader.tsx","pages/academy/gameSimulator/subcomponents/GameSimulatorCheckpointSim.tsx","features/gameSimulator/assets/ImageAssets.ts","features/gameSimulator/scenes/MainMenu.ts","pages/academy/gameSimulator/subcomponents/GameSimulatorGame.ts","pages/academy/gameSimulator/GameSimulator.tsx","pages/academy/grading/subcomponents/GradingActions.tsx","pages/academy/grading/subcomponents/GradingBadges.tsx","pages/academy/grading/subcomponents/GradingSubmissionFilters.tsx","pages/academy/grading/subcomponents/GradingSubmissionsTable.tsx","pages/academy/grading/subcomponents/GradingEditor.tsx","pages/academy/grading/subcomponents/GradingWorkspace.tsx","pages/academy/grading/Grading.tsx","pages/academy/groundControl/subcomponents/DefaultChapterSelect.tsx","pages/academy/groundControl/subcomponents/GroundControlDeleteCell.tsx","pages/academy/groundControl/subcomponents/GroundControlDropzone.tsx","pages/academy/groundControl/subcomponents/GroundControlEditCell.tsx","pages/academy/groundControl/subcomponents/GroundControlPublishCell.tsx","pages/academy/groundControl/GroundControl.tsx","pages/academy/groundControl/GroundControlContainer.ts","pages/academy/notiPreference/subcomponents/BooleanCell.tsx","pages/academy/notiPreference/subcomponents/SelectCell.tsx","pages/academy/notiPreference/NotiPreference.tsx","pages/academy/sourcereel/subcomponents/SourcereelControlbar.tsx","pages/academy/sourcereel/Sourcereel.tsx","pages/academy/Academy.tsx","pages/notFound/NotFound.tsx","../node_modules/date-fns/locale|/Users/Sean/Desktop/Work/SUTD/Projects/frontend/node_modules/date-fns/locale|lazy|/^/.//.*//index/.js$/|chunkName: date-fns-locale-[request]|groupOptions: {}|namespace object","webpack://frontend/./src/styles/Academy.module.scss?bc46"],"sourcesContent":["import { Card, Elevation } from '@blueprintjs/core';\nimport React, { useEffect } from 'react';\n\nexport type ContentDisplayProps = {\n  fullWidth?: boolean;\n  display: JSX.Element;\n  loadContentDispatch?: () => void;\n};\n\nconst ContentDisplay: React.FC<ContentDisplayProps> = props => {\n  useEffect(() => {\n    props.loadContentDispatch?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"ContentDisplay row center-xs\">\n      <div\n        className={`${\n          props.fullWidth ? 'col-md-12' : 'col-md-10 col-xs-11'\n        } contentdisplay-content-parent`}\n      >\n        <Card className=\"contentdisplay-content\" elevation={Elevation.THREE}>\n          {props.display}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentDisplay;\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarReturnToAcademyButtonProps = {\n  onClick?(): any;\n};\n\nexport const ControlBarReturnToAcademyButton: React.FC<ControlBarReturnToAcademyButtonProps> = ({\n  onClick\n}) => {\n  return (\n    <ControlButton\n      label=\"Return to Academy\"\n      icon={IconNames.ARROW_RIGHT}\n      onClick={onClick}\n      options={{ iconOnRight: true }}\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\nimport { ControlBarReturnToAcademyButton } from './ControlBarReturnToAcademyButton';\n\ntype ControlBarNextButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickNext?(): any;\n  onClickReturn?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarNextButton: React.FC<ControlBarNextButtonProps> = props => {\n  return props.questionProgress![0] === props.questionProgress![1] ? (\n    <ControlBarReturnToAcademyButton onClick={props.onClickReturn} key=\"return_to_academy\" />\n  ) : (\n    <ControlButton\n      label=\"Next\"\n      icon={IconNames.ARROW_RIGHT}\n      onClick={props.onClickNext}\n      options={{ iconOnRight: true }}\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarPreviousButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClick?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarPreviousButton: React.FC<ControlBarPreviousButtonProps> = props => {\n  return props.questionProgress![0] <= 1 ? null : (\n    <ControlButton label=\"Previous\" icon={IconNames.ARROW_LEFT} onClick={props.onClick} />\n  );\n};\n","import React from 'react';\n\nimport ControlButton from '../ControlButton';\n\n/**\n * @prop questionProgress a tuple of (current question number, question length) where\n *   the current question number is 1-based.\n */\ntype ControlBarQuestionViewButtonProps = {\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarQuestionViewButton: React.FC<ControlBarQuestionViewButtonProps> = ({\n  questionProgress\n}) => {\n  return (\n    <ControlButton\n      label={`Question ${questionProgress![0]} of ${questionProgress![1]}  `}\n      isDisabled\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarResetButtonProps = {\n  onClick?(): any;\n};\n\nexport const ControlBarResetButton: React.FC<ControlBarResetButtonProps> = ({ onClick }) => {\n  return <ControlButton label=\"Reset\" icon={IconNames.REPEAT} onClick={onClick} />;\n};\n","import { Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarSaveButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickSave?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  hasUnsavedChanges?: boolean;\n};\n\nexport const ControlButtonSaveButton: React.FC<ControlBarSaveButtonProps> = props => {\n  const saveButtonOpts = props.hasUnsavedChanges ? { intent: Intent.WARNING, minimal: false } : {};\n\n  return (\n    <ControlButton\n      label=\"Save\"\n      icon={IconNames.FLOPPY_DISK}\n      onClick={props.onClickSave}\n      options={saveButtonOpts}\n    />\n  );\n};\n","import { Card, Classes, Elevation, Pre } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport { parseError } from 'js-slang';\nimport { stringify } from 'js-slang/dist/utils/stringify';\nimport React from 'react';\n\nimport { Testcase, TestcaseTypes } from '../../assessment/AssessmentTypes';\nimport { WorkspaceLocation } from '../../workspace/WorkspaceTypes';\n\ntype SideContentTestcaseCardProps = DispatchProps & StateProps & OwnProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcaseId: number) => void;\n};\n\ntype StateProps = {\n  index: number;\n  testcase: Testcase;\n};\n\ntype OwnProps = {\n  workspaceLocation: WorkspaceLocation;\n};\n\nconst SideContentTestcaseCard: React.FunctionComponent<SideContentTestcaseCardProps> = props => {\n  const { index, testcase, handleTestcaseEval } = props;\n\n  const extraClasses = React.useMemo(() => {\n    const isEvaluated = testcase.result !== undefined || testcase.errors;\n    const isEqual = stringify(testcase.result) === testcase.answer;\n\n    return {\n      correct: isEvaluated && isEqual,\n      wrong: isEvaluated && !isEqual,\n      // opaque and secret testcases will be greyed in the GradingWorkspace\n      secret: testcase.type === TestcaseTypes.secret || testcase.type === TestcaseTypes.opaque\n    };\n  }, [testcase]);\n\n  const handleRunTestcase = React.useCallback(() => {\n    handleTestcaseEval(index);\n  }, [index, handleTestcaseEval]);\n\n  /**\n   * Note: There are 3 testcase types in the backend: public, opaque, secret\n   *\n   * Public testcases are always sent from the backend, and displayed for both\n   * students and staff/ admin in the AssessmentWorkspace and/ or GradingWorkspace.\n   *\n   * Opaque testcases are always sent from the backend, and are 'hidden' with a\n   * placeholder cell in the AssessmentWorkspace, but displayed in the\n   * GradingWorkspace albeit with grey CSS styling.\n   *\n   * Secret testcases are only sent from the backend when the grading endpoint is\n   * accessed (i.e. NOT sent in the AssessmentWorkspace). Thus they are only seen\n   * in the GradingWorkspace albeit with grey CSS styling, which is only accessible\n   * by staff/ admin.\n   *\n   * Extra info: The GitHubAssessmentWorkspace uses this testcase card component even\n   * though they only have public testcases (as of July 2021). Thus all testcases will\n   * be rendered in the GitHubAssessmentWorkspace for students.\n   */\n  return (\n    <div className={classNames('AutograderCard', extraClasses)} data-testid=\"AutograderCard\">\n      <Card className={Classes.INTERACTIVE} elevation={Elevation.ONE} onClick={handleRunTestcase}>\n        {testcase.type === TestcaseTypes.opaque && props.workspaceLocation === 'assessment' ? (\n          // Render a placeholder cell in place of the actual testcase data for opaque testcases\n          <Pre className=\"testcase-placeholder\" data-testid=\"testcase-placeholder\">\n            Hidden testcase\n          </Pre>\n        ) : (\n          <>\n            <Pre className=\"testcase-program\">{testcase.program}</Pre>\n            <Pre className=\"testcase-expected\">{testcase.answer}</Pre>\n            <Pre className=\"testcase-actual\" data-testid=\"testcase-actual\">\n              {testcase.errors\n                ? parseError(testcase.errors)\n                : testcase.result !== undefined\n                ? stringify(testcase.result)\n                : 'No Answer'}\n            </Pre>\n          </>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default SideContentTestcaseCard;\n","import { Button, Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React, { useEffect, useRef } from 'react';\n\nconst SideContentToneMatrix: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if ((window as any).ToneMatrix) {\n      (window as any).ToneMatrix.initialise_matrix(containerRef.current!);\n    }\n  }, []);\n\n  const handleClear = () => {\n    (window as any).ToneMatrix.clear_matrix();\n  };\n\n  const handleRandomise = () => {\n    (window as any).ToneMatrix.randomise_matrix();\n  };\n\n  return (\n    <div className=\"sa-tone-matrix\">\n      <div className=\"row\">\n        <div className={classNames('controls', 'col-xs-12', Classes.DARK, Classes.BUTTON_GROUP)}>\n          <Button id=\"clear-matrix\" onClick={handleClear}>\n            Clear\n          </Button>\n          <Button id=\"randomise-matrix\" onClick={handleRandomise}>\n            Randomise\n          </Button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\" ref={containerRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(SideContentToneMatrix, () => true);\n","import moment from 'moment';\n\n/**\n * Checks if a date is before or at the current time.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {boolean} true if the date specified by the paramter\n *   is before the time of execution of this function.\n */\nexport const beforeNow = (dateString: string): boolean => {\n  const date = moment(dateString);\n  const now = moment();\n  return date.isBefore(now);\n};\n\n/**\n * Return a string representation of a date that is\n * nice to look at. To be used for displaying the date,\n * e.g when showing the assessment overview.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {string} A user-friendly readable date string,\n *   e.g 7th June, 20:09\n */\nexport const getPrettyDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('Do MMMM, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDateTime = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY');\n  return prettyDate;\n};\n","import { Button, Classes, Dialog, H4, Intent } from '@blueprintjs/core';\nimport { useDispatch } from 'react-redux';\n\nimport { updateCourseResearchAgreement } from '../application/actions/SessionActions';\nimport Constants from '../utils/Constants';\n\nconst ResearchAgreementPrompt: React.FC = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"research-prompt\">\n      <Dialog\n        className={Classes.DARK}\n        title=\"Agreement to Participate in Educational Research\"\n        canOutsideClickClose={false}\n        canEscapeKeyClose={false}\n        isCloseButtonShown={false}\n        isOpen\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <H4>Welcome to your new {Constants.sourceAcademyDeploymentName} course!</H4>\n          <div>\n            Here at {Constants.sourceAcademyDeploymentName}, our mission is to bring out the beauty\n            and fun in programming and the ideas behind programming, and to make these ideas\n            universally accessible. This includes educational research!\n          </div>\n          <br />\n          <div>\n            We collect programs that students run in {Constants.sourceAcademyDeploymentName} and\n            store them anonymously for our research. You are free to opt out of this collection,\n            with no penalty for you whatsoever. Contact your course instructor if you have questions\n            or concerns about this research.\n          </div>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button\n              text=\"I would like to opt out\"\n              onClick={() => dispatch(updateCourseResearchAgreement(false))}\n            />\n            <Button\n              text=\"I consent!\"\n              intent={Intent.SUCCESS}\n              onClick={() => dispatch(updateCourseResearchAgreement(true))}\n            />\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default ResearchAgreementPrompt;\n","import { stringify } from 'js-slang/dist/utils/stringify';\n\nimport {\n  IMCQQuestion,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../../commons/assessment/AssessmentTypes';\nimport { showWarningMessage } from '../../commons/utils/notifications/NotificationsHelper';\n\n/**\n * Returns a nullary function that defers the navigation of the browser window, until the\n * student's answer passes some checks - presently only used for assessments types with blocking = true\n * (previously used for the 'Path' assessment type in SA Knight)\n */\nexport const onClickProgress = (\n  deferredNavigate: () => void,\n  question: Question,\n  testcases: Testcase[],\n  isBlocked: boolean\n) => {\n  return () => {\n    if (!isBlocked) {\n      return deferredNavigate();\n    }\n    // Else evaluate its correctness - proceed iff the answer to the current question is correct\n    if (question.type === QuestionTypes.mcq) {\n      // Note that 0 is a falsy value!\n      if (question.answer === null) {\n        return showWarningMessage('Please select an option!', 750);\n      }\n      // If the question is 'blocking', but there is no MCQ solution provided (i.e. assessment uploader's\n      // mistake), allow the student to proceed after selecting an option\n      if ((question as IMCQQuestion).solution === undefined) {\n        return deferredNavigate();\n      }\n      if (question.answer !== (question as IMCQQuestion).solution) {\n        return showWarningMessage('Your MCQ solution is incorrect!', 750);\n      }\n    } else if (question.type === QuestionTypes.programming) {\n      const isCorrect = testcases.reduce((acc, testcase) => {\n        return acc && stringify(testcase.result) === testcase.answer;\n      }, true);\n      if (!isCorrect) {\n        return showWarningMessage('Your solution has not passed all testcases!', 750);\n      }\n    }\n    return deferredNavigate();\n  };\n};\n","import { Card, Elevation, Pre } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { AutogradingError, AutogradingResult } from '../../assessment/AssessmentTypes';\n\ntype SideContentResultCardProps = StateProps;\n\ntype StateProps = {\n  index: number;\n  result: AutogradingResult;\n};\n\nconst buildErrorString = (errors: AutogradingError[]) =>\n  errors\n    .map(error => {\n      switch (error.errorType) {\n        case 'timeout':\n          return '[TIMEOUT] Submission exceeded time limit for this test case.';\n        case 'syntax':\n          return `[SYNTAX] Line ${error.line}: ${error.errorExplanation}`;\n        case 'runtime':\n          return `[RUNTIME] Line ${error.line}: ${error.errorExplanation}`;\n        case 'systemError':\n          return `[SYSTEM] ${error.errorMessage}`;\n        default:\n          return `[UNKNOWN] Autograder error: type ${error.errorType}`;\n      }\n    })\n    .join('\\n\\n');\n\nconst SideContentResultCard: React.FunctionComponent<SideContentResultCardProps> = props => {\n  const { index, result } = props;\n\n  return (\n    <div\n      className={classNames('ResultCard', result.resultType === 'pass' ? 'correct' : 'wrong')}\n      data-testid=\"ResultCard\"\n    >\n      <Card elevation={Elevation.ONE}>\n        <div className=\"result-data\">\n          <div className=\"result-idx\" data-testid=\"result-idx\">\n            {index + 1}\n          </div>\n          <div className=\"result-status\" data-testid=\"result-status\">\n            {result.resultType.toUpperCase()}\n          </div>\n        </div>\n        <Pre className=\"result-expected\" data-testid=\"result-expected\">\n          {result.expected!}\n        </Pre>\n        <Pre className=\"result-actual\" data-testid=\"result-actual\">\n          {result.resultType === 'error' ? buildErrorString(result.errors!) : result.actual!}\n        </Pre>\n      </Card>\n    </div>\n  );\n};\n\nexport default SideContentResultCard;\n","import { Button, Collapse, Icon, PopoverPosition } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport { AutogradingResult, Testcase } from '../../assessment/AssessmentTypes';\nimport ControlButton from '../../ControlButton';\nimport { WorkspaceLocation } from '../../workspace/WorkspaceTypes';\nimport SideContentResultCard from './SideContentResultCard';\nimport SideContentTestcaseCard from './SideContentTestcaseCard';\n\nexport type SideContentAutograderProps = DispatchProps & StateProps & OwnProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcaseId: number) => void;\n};\n\ntype StateProps = {\n  autogradingResults: AutogradingResult[];\n  testcases: Testcase[];\n};\n\ntype OwnProps = {\n  /**\n   * We need to know the workspace location to hide 'opaque' testcases\n   * in AssessmentsWorkspace, but show them in GradingWorkspace.\n   */\n  workspaceLocation: WorkspaceLocation;\n};\n\nconst SideContentAutograder: React.FunctionComponent<SideContentAutograderProps> = props => {\n  const [showsTestcases, setTestcasesShown] = React.useState<boolean>(true);\n  const [showsResults, setResultsShown] = React.useState<boolean>(true);\n\n  const { testcases, autogradingResults, handleTestcaseEval, workspaceLocation } = props;\n\n  const testcaseCards = React.useMemo(\n    () =>\n      testcases.length > 0 ? (\n        <div className=\"testcaseCards\">\n          {testcasesHeader}\n          {testcases.map((testcase, index) => (\n            <SideContentTestcaseCard\n              key={index}\n              index={index}\n              testcase={testcase}\n              handleTestcaseEval={handleTestcaseEval}\n              workspaceLocation={workspaceLocation}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"noResults\" data-testid=\"noResults\">\n          There are no testcases provided for this question.\n        </div>\n      ),\n    [testcases, handleTestcaseEval, workspaceLocation]\n  );\n\n  const resultCards = React.useMemo(\n    () =>\n      autogradingResults.length > 0 ? (\n        <div>\n          {resultsHeader}\n          {autogradingResults.map((result, index) => (\n            <SideContentResultCard key={index} index={index} result={result} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"noResults\" data-testid=\"noResults\">\n          There are no results to show.\n        </div>\n      ),\n    [autogradingResults]\n  );\n\n  const toggleTestcases = React.useCallback(() => {\n    setTestcasesShown(!showsTestcases);\n  }, [showsTestcases]);\n\n  const toggleResults = React.useCallback(() => setResultsShown(!showsResults), [showsResults]);\n\n  return (\n    <div className=\"Autograder\">\n      <Button\n        className=\"collapse-button\"\n        icon={showsTestcases ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT}\n        minimal={true}\n        onClick={toggleTestcases}\n      >\n        <span>Testcases</span>\n        <Tooltip2 content={autograderTooltip} placement={PopoverPosition.LEFT}>\n          <Icon icon={IconNames.HELP} />\n        </Tooltip2>\n      </Button>\n      <Collapse isOpen={showsTestcases} keepChildrenMounted={true}>\n        {testcaseCards}\n      </Collapse>\n      {collapseButton('Autograder Results', showsResults, toggleResults)}\n      <Collapse isOpen={showsResults} keepChildrenMounted={true}>\n        {resultCards}\n      </Collapse>\n    </div>\n  );\n};\n\nconst autograderTooltip = (\n  <div className=\"autograder-help-tooltip\">\n    <p>Click on each testcase below to execute it with the program in the editor.</p>\n    <p>\n      To execute all testcases at once, evaluate the program in the editor with this tab active.\n    </p>\n    <p>A green or red background indicates a passed or failed testcase respectively.</p>\n    <p>Private testcases (only visible to staff when grading) have a grey background.</p>\n  </div>\n);\n\nconst columnHeader = (colClass: string, colTitle: string) => (\n  <div className={colClass}>\n    {colTitle}\n    <Icon icon={IconNames.CARET_DOWN} />\n  </div>\n);\n\nconst testcasesHeader = (\n  <div className=\"testcases-header\" data-testid=\"testcases-header\">\n    {columnHeader('header-fn', 'Testcase')}\n    {columnHeader('header-expected', 'Expected result')}\n    {columnHeader('header-actual', 'Actual result')}\n  </div>\n);\n\nconst resultsHeader = (\n  <div className=\"results-header\" data-testid=\"results-header\">\n    <div className=\"header-data\">\n      {columnHeader('header-sn', 'S/N')}\n      {columnHeader('header-status', 'Testcase status')}\n    </div>\n    {columnHeader('header-expected', 'Expected result')}\n    {columnHeader('header-actual', 'Actual result')}\n  </div>\n);\n\nconst collapseButton = (label: string, isOpen: boolean, toggleFunc: () => void) => (\n  <ControlButton\n    label={label}\n    icon={isOpen ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT}\n    onClick={toggleFunc}\n    options={{ className: 'collapse-button', minimal: true }}\n  />\n);\n\nexport default SideContentAutograder;\n","import { Card, Classes, Elevation, Pre } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { ContestEntry } from '../../assessment/AssessmentTypes';\n\ntype SideContentLeaderboardCardProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleContestEntryClick: (submissionId: number, answer: string) => void;\n};\n\ntype StateProps = {\n  contestEntry: ContestEntry;\n  rank: number;\n};\n\nconst SideContentLeaderboardCard: React.FunctionComponent<\n  SideContentLeaderboardCardProps\n> = props => {\n  const { handleContestEntryClick, contestEntry, rank } = props;\n\n  return (\n    <div className={classNames('LeaderboardCard')}>\n      <Card\n        className={Classes.INTERACTIVE}\n        elevation={Elevation.ONE}\n        onClick={() =>\n          handleContestEntryClick(contestEntry.submission_id, contestEntry.answer.code ?? '')\n        }\n        data-testid=\"SideContentLeaderboardCard\"\n      >\n        <Pre className=\"contestentry-entryid\">{contestEntry.student_name}</Pre>\n        <Pre className=\"contestentry-rank\">{rank}</Pre>\n        <Pre className=\"contestentry-score\" data-testid=\"contestentry-score\">\n          {contestEntry.final_score}\n        </Pre>\n      </Card>\n    </div>\n  );\n};\n\nexport default SideContentLeaderboardCard;\n","import { Button, Collapse, Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useMemo, useState } from 'react';\n\nimport { ContestEntry } from '../../assessment/AssessmentTypes';\nimport { SideContentType } from '../SideContentTypes';\nimport SideContentLeaderboardCard from './SideContentLeaderboardCard';\n\nexport type SideContentContestLeaderboardProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleContestEntryClick: (submissionId: number, answer: string) => void;\n};\n\ntype StateProps = {\n  orderedContestEntries: ContestEntry[];\n  leaderboardType: SideContentType;\n};\n\n/**\n * Renders the contest leaderboard entries as a SideContentTab for Contest Voting questions.\n * Note that the prop is named 'orderedContestEntries' as the responsibility to sort\n * in desc score order is left to the backend.\n *\n * @param props {orderedContestEntries: an ordered list by desc score of leaderboard entries to display,\n *  handleContestEntryClick: displays contest entry answer in assessment workspace editor}\n */\nconst SideContentContestLeaderboard: React.FunctionComponent<\n  SideContentContestLeaderboardProps\n> = props => {\n  const { orderedContestEntries, handleContestEntryClick, leaderboardType } = props;\n  const [showLeaderboard, setShowLeaderboard] = useState<boolean>(true);\n\n  /**\n   * Contest Leaderboard inner components\n   */\n\n  const leaderboardTitle = useMemo(() => {\n    return leaderboardType === SideContentType.scoreLeaderboard\n      ? 'Score Leaderboard'\n      : leaderboardType === SideContentType.popularVoteLeaderboard\n      ? 'Popular Vote Leaderboard'\n      : 'Contest Leaderboard';\n  }, [leaderboardType]);\n\n  const contestLeaderboardTooltipContent = useMemo(() => {\n    return leaderboardType === SideContentType.scoreLeaderboard\n      ? 'View the highest scoring contest entries!'\n      : leaderboardType === SideContentType.popularVoteLeaderboard\n      ? 'View the most popular contest entries!'\n      : 'View the top-rated contest entries!';\n  }, [leaderboardType]);\n\n  const columnHeader = (colClass: string, colTitle: string) => (\n    <div className={colClass}>\n      {colTitle}\n      <Icon icon={IconNames.CARET_DOWN} />\n    </div>\n  );\n\n  const contestEntryHeader = useMemo(() => {\n    return (\n      <div className=\"leaderboard-header\">\n        {columnHeader('header-entryid', 'Student Name')}\n        {columnHeader('header-entryrank', 'Rank')}\n        {columnHeader(\n          'header-score',\n          leaderboardType === SideContentType.scoreLeaderboard\n            ? 'Calculated Score'\n            : leaderboardType === SideContentType.popularVoteLeaderboard\n            ? 'Popularity Score'\n            : 'Metric'\n        )}\n      </div>\n    );\n  }, [leaderboardType]);\n\n  const contestEntryCards = useMemo(\n    () => (\n      <div>\n        {contestEntryHeader}\n        {orderedContestEntries.length > 0 ? (\n          orderedContestEntries.map((contestEntry: ContestEntry, index: number) => (\n            <SideContentLeaderboardCard\n              key={contestEntry.submission_id}\n              handleContestEntryClick={handleContestEntryClick}\n              contestEntry={contestEntry}\n              rank={index + 1}\n            />\n          ))\n        ) : (\n          <div className=\"noResults\">There are no eligible contest leaderboard entries found.</div>\n        )}\n      </div>\n    ),\n    [handleContestEntryClick, orderedContestEntries, contestEntryHeader]\n  );\n\n  return (\n    <div className=\"ContestLeaderboard\">\n      <Button\n        className=\"collapse-button\"\n        icon={showLeaderboard ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT}\n        minimal={true}\n        onClick={() => setShowLeaderboard(!showLeaderboard)}\n      >\n        <span>{leaderboardTitle}</span>\n        <Tooltip2 content={contestLeaderboardTooltipContent}>\n          <Icon icon={IconNames.HELP} />\n        </Tooltip2>\n      </Button>\n      <Collapse isOpen={showLeaderboard} keepChildrenMounted>\n        {contestEntryCards}\n      </Collapse>\n    </div>\n  );\n};\n\nexport default SideContentContestLeaderboard;\n","import { Button, Card, Classes, Collapse, Elevation, Icon, Pre } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport classNames from 'classnames';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { ContestEntry } from '../../assessment/AssessmentTypes';\n\nexport type SideContentContestVotingProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleContestEntryClick: (submissionId: number, answer: string) => void;\n};\n\ntype StateProps = {\n  canSave: boolean;\n  isValid: boolean;\n  handleVotingSubmissionChange: (entryId: number, score: number) => void;\n  contestEntries: ContestEntry[];\n};\n\n// Tier mapping to scores, arranged in descending order of scores.\nconst TIERS = [\n  { name: 'S', color: 'rgb(255, 127, 127)', score: 10 },\n  { name: 'A', color: 'rgb(255, 223, 127)', score: 7 },\n  { name: 'B', color: 'rgb(255, 255, 127)', score: 4 },\n  { name: 'C', color: 'rgb(191, 255, 127)', score: 2 },\n  { name: 'D', color: 'rgb(127, 191, 255)', score: 1 }\n];\n\nconst SideContentContestVoting: React.FunctionComponent<SideContentContestVotingProps> = props => {\n  const {\n    contestEntries,\n    canSave,\n    isValid,\n    handleContestEntryClick,\n    handleVotingSubmissionChange\n  } = props;\n  const [showContestEntries, setShowContestEntries] = useState<boolean>(true);\n  const [currentDraggedItem, setCurrentDraggedItem] = useState<HTMLElement | null>(null);\n  const [hoveredTier, setHoveredTier] = useState<string | null>(null);\n\n  const sortedContestEntries = useMemo(() => {\n    return [...contestEntries].sort((a, b) => a.submission_id - b.submission_id);\n  }, [contestEntries]);\n\n  const handleDragStart: React.DragEventHandler = e => {\n    setCurrentDraggedItem(e.currentTarget as HTMLElement);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragEnd = useCallback(\n    (contestEntry: ContestEntry): React.DragEventHandler =>\n      e => {\n        const tierElement = (e.currentTarget as HTMLElement).closest('.tier');\n        if (tierElement) {\n          const tierName = tierElement.id.split('-')[1];\n          const tier = TIERS.find(t => t.name.toLowerCase() === tierName);\n          handleVotingSubmissionChange(contestEntry.submission_id, tier?.score || 0);\n        }\n        setHoveredTier(null);\n      },\n    [handleVotingSubmissionChange]\n  );\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  }, []);\n\n  const handleDragEnter = useCallback((e: React.DragEvent): void => {\n    // Added setTimeout here to give handleDragLeave time to execute if a dragenter event is about to be fired\n    setTimeout(() => {\n      const tierElement = (e.target as HTMLElement).closest('.tier');\n      if (tierElement) {\n        setHoveredTier(tierElement.id);\n      }\n    }, 0);\n  }, []);\n\n  const handleDragLeave = useCallback(\n    (e: React.DragEvent): void => {\n      const tierElement = (e.target as HTMLElement).closest('.tier');\n      if (tierElement && tierElement.id === hoveredTier) {\n        setHoveredTier(null);\n      }\n    },\n    [hoveredTier]\n  );\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent): void => {\n      e.preventDefault();\n      const container = (e.target as HTMLElement).closest('.item-container');\n      if (container) {\n        container.appendChild(currentDraggedItem as Node);\n      }\n    },\n    [currentDraggedItem]\n  );\n\n  const contestEntryRefs = useRef({});\n  const tierContainerRefs = useRef({});\n\n  const tierBoard = useMemo(() => {\n    return TIERS.map((tier, index) => (\n      <div\n        className={classNames('tier', {\n          'hovered-tier': hoveredTier === `tier-${tier.name.toLowerCase()}`\n        })}\n        key={`tier-${tier.name.toLowerCase()}`}\n        id={`tier-${tier.name.toLowerCase()}`}\n        data-testid=\"tier\"\n      >\n        <h2 style={{ backgroundColor: tier.color }}>{tier.name}</h2>\n        <div\n          className=\"item-container\"\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDragEnter={handleDragEnter}\n          onDrop={handleDrop}\n          ref={item => (tierContainerRefs.current[index] = item)}\n        />\n      </div>\n    ));\n  }, [hoveredTier, handleDragOver, handleDragLeave, handleDragEnter, handleDrop]);\n\n  const contestEntryCards = useMemo(\n    () => (\n      <div className=\"tier-list\">\n        {tierBoard}\n        {sortedContestEntries.length > 0 ? (\n          <div className=\"tier\" id=\"bank\" data-testid=\"tier\">\n            <div\n              className=\"item-container\"\n              id=\"items\"\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDragEnter={handleDragEnter}\n              onDrop={handleDrop}\n              data-testid=\"voting-item-container\"\n            >\n              {sortedContestEntries.map((contestEntry: ContestEntry, index) => (\n                <div\n                  className={classNames('item', { wrong: !isValid })}\n                  draggable={canSave}\n                  key={`item-${index + 1}`}\n                  id={`item-${index + 1}`}\n                  onDragStart={handleDragStart}\n                  onDragEnd={handleDragEnd(contestEntry)}\n                  ref={item => (contestEntryRefs.current[index] = item)}\n                  data-testid=\"voting-item\"\n                >\n                  <Card\n                    className={Classes.INTERACTIVE}\n                    elevation={Elevation.ONE}\n                    onClick={() =>\n                      handleContestEntryClick(\n                        contestEntry.submission_id,\n                        contestEntry.answer.code ?? ''\n                      )\n                    }\n                  >\n                    <Pre className=\"contestentry-entryid\">{index + 1}</Pre>\n                  </Card>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"noResults\">There are no eligible entries for voting found.</div>\n        )}\n      </div>\n    ),\n    [\n      isValid,\n      canSave,\n      sortedContestEntries,\n      handleContestEntryClick,\n      handleDragEnd,\n      handleDragEnter,\n      handleDragLeave,\n      handleDragOver,\n      handleDrop,\n      tierBoard\n    ]\n  );\n\n  // Upon initial render, loads contest entries in the correct tier using saved score\n  useEffect(() => {\n    sortedContestEntries.forEach((entry, index) => {\n      if (entry.score !== null) {\n        const savedTierIndex = TIERS.findIndex(tier =>\n          // We are using <= instead of === for backwards\n          // compatibiilty with legacy voting submisions.\n          entry.score ? tier.score <= entry.score : false\n        );\n        if (savedTierIndex !== -1) {\n          const tierContainer = tierContainerRefs.current[savedTierIndex];\n          const entryItem = contestEntryRefs.current[index];\n          if (tierContainer && entryItem) {\n            tierContainer.appendChild(entryItem);\n          }\n        }\n      }\n    });\n  }, [sortedContestEntries]);\n\n  return (\n    <div className=\"ContestEntryVoting\">\n      <Button\n        className=\"collapse-button\"\n        icon={showContestEntries ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT}\n        minimal={true}\n        onClick={() => setShowContestEntries(!showContestEntries)}\n      >\n        <span>Contest Voting</span>\n        <Tooltip2\n          content={\n            <span>Rank your favourite contest entries from tiers D (worst) to S (best)!</span>\n          }\n        >\n          <Icon icon={IconNames.HELP} />\n        </Tooltip2>\n      </Button>\n      <Collapse isOpen={showContestEntries} keepChildrenMounted>\n        {contestEntryCards}\n      </Collapse>\n    </div>\n  );\n};\n\nexport default SideContentContestVoting;\n","import React, { useEffect, useState } from 'react';\nimport { showWarningMessage } from 'src/commons/utils/notifications/NotificationsHelper';\n\nimport { ContestEntry } from '../../assessment/AssessmentTypes';\nimport SideContentContestVoting from './SideContentContestVoting';\n\nexport type SideContentContestVotingContainerProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleContestEntryClick: (submissionId: number, answer: string) => void;\n  handleSave: (votingSubmission: ContestEntry[]) => void;\n};\n\ntype StateProps = {\n  canSave: boolean;\n  contestEntries: ContestEntry[];\n};\n\n/**\n * Container to separate behaviour concerns from rendering concerns\n * Stores component-level voting ranking state\n */\nconst SideContentContestVotingContainer: React.FunctionComponent<\n  SideContentContestVotingContainerProps\n> = props => {\n  const { canSave, contestEntries, handleSave, handleContestEntryClick } = props;\n  const [isValid, setIsValid] = useState<boolean>(true);\n  const [votingSubmission, setVotingSubmission] = useState<ContestEntry[]>([]);\n\n  useEffect(() => {\n    setVotingSubmission(contestEntries);\n  }, [contestEntries]);\n\n  const submissionHasNoNull = (votingSubmission: ContestEntry[]) => {\n    return votingSubmission.reduce((noNull, vote) => {\n      return noNull && vote.score !== undefined && vote.score !== null;\n    }, true);\n  };\n\n  const handleVotingSubmissionChange = (submissionId: number, score: number): void => {\n    // update the votes\n    const updatedSubmission = votingSubmission.map(vote =>\n      vote.submission_id === submissionId ? { ...vote, score: score } : vote\n    );\n    setVotingSubmission(updatedSubmission);\n    const noNull = submissionHasNoNull(updatedSubmission);\n    if (noNull) {\n      handleSave(updatedSubmission);\n      setIsValid(true);\n    } else {\n      showWarningMessage(`Please assign every entry to a tier.`);\n      setIsValid(false);\n    }\n  };\n\n  return (\n    <SideContentContestVoting\n      isValid={isValid}\n      canSave={canSave}\n      handleContestEntryClick={handleContestEntryClick}\n      handleVotingSubmissionChange={handleVotingSubmissionChange}\n      contestEntries={votingSubmission}\n    />\n  );\n};\n\nexport default SideContentContestVotingContainer;\n","import { Divider, HTMLTable, Text } from '@blueprintjs/core';\nimport React from 'react';\n\nimport Markdown from '../Markdown';\nimport { getPrettyDate } from '../utils/DateHelper';\n\ntype AssessmentWorkspaceGradingResultProps = StateProps;\n\ntype StateProps = {\n  graderName: string;\n  gradedAt: string;\n  xp: number;\n  maxXp: number;\n  comments?: string;\n};\n\nconst AssessmentWorkspaceGradingResult: React.FC<AssessmentWorkspaceGradingResultProps> = props => (\n  <div className=\"GradingResult\">\n    <div className=\"grading-result-table\">\n      <HTMLTable>\n        <tbody>\n          <tr>\n            <th>XP:</th>\n            <td>\n              <Text>\n                {props.xp} / {props.maxXp}\n              </Text>\n            </td>\n          </tr>\n\n          <tr>\n            <th>Comments:</th>\n            <td>{!props.comments && <Text>None</Text>}</td>\n          </tr>\n        </tbody>\n      </HTMLTable>\n\n      {props.comments && (\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <td>\n                <Divider />\n                <Markdown\n                  content={props.comments}\n                  simplifiedAutoLink={true}\n                  strikethrough={true}\n                  tasklists={true}\n                  openLinksInNewWindow={true}\n                />\n                <Divider />\n              </td>\n            </tr>\n          </tbody>\n        </HTMLTable>\n      )}\n\n      <br />\n\n      <div className=\"grading-result-info\">\n        <Text>\n          Graded by <b>{props.graderName}</b> on {getPrettyDate(props.gradedAt)}\n        </Text>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AssessmentWorkspaceGradingResult;\n","import {\n  Button,\n  Card,\n  Classes,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Intent,\n  NonIdealState,\n  Spinner,\n  SpinnerSize\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport { isEqual } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { onClickProgress } from 'src/features/assessments/AssessmentUtils';\nimport { mobileOnlyTabIds } from 'src/pages/playground/PlaygroundTabs';\n\nimport { initSession, log } from '../../features/eventLogging';\nimport {\n  CodeDelta,\n  Input,\n  KeyboardCommand,\n  SelectionRange\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { fetchAssessment, submitAnswer } from '../application/actions/SessionActions';\nimport { defaultWorkspaceManager } from '../application/ApplicationTypes';\nimport {\n  AssessmentConfiguration,\n  AutogradingResult,\n  ContestEntry,\n  IContestVotingQuestion,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  QuestionTypes,\n  Testcase\n} from '../assessment/AssessmentTypes';\nimport { ControlBarProps } from '../controlBar/ControlBar';\nimport { ControlBarChapterSelect } from '../controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../controlBar/ControlBarQuestionViewButton';\nimport { ControlBarResetButton } from '../controlBar/ControlBarResetButton';\nimport { ControlBarRunButton } from '../controlBar/ControlBarRunButton';\nimport { ControlButtonSaveButton } from '../controlBar/ControlBarSaveButton';\nimport ControlButton from '../ControlButton';\nimport {\n  convertEditorTabStateToProps,\n  NormalEditorContainerProps\n} from '../editor/EditorContainer';\nimport { Position } from '../editor/EditorTypes';\nimport Markdown from '../Markdown';\nimport { MobileSideContentProps } from '../mobileWorkspace/mobileSideContent/MobileSideContent';\nimport MobileWorkspace, { MobileWorkspaceProps } from '../mobileWorkspace/MobileWorkspace';\nimport SideContentAutograder from '../sideContent/content/SideContentAutograder';\nimport SideContentContestLeaderboard from '../sideContent/content/SideContentContestLeaderboard';\nimport SideContentContestVotingContainer from '../sideContent/content/SideContentContestVotingContainer';\nimport SideContentToneMatrix from '../sideContent/content/SideContentToneMatrix';\nimport { SideContentProps } from '../sideContent/SideContent';\nimport { changeSideContentHeight } from '../sideContent/SideContentActions';\nimport { useSideContent } from '../sideContent/SideContentHelper';\nimport { SideContentTab, SideContentType } from '../sideContent/SideContentTypes';\nimport Constants from '../utils/Constants';\nimport { useResponsive, useTypedSelector } from '../utils/Hooks';\nimport { assessmentTypeLink } from '../utils/ParamParseHelper';\nimport { assertType } from '../utils/TypeHelper';\nimport Workspace, { WorkspaceProps } from '../workspace/Workspace';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeExecTime,\n  clearReplOutput,\n  disableTokenCounter,\n  enableTokenCounter,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  resetWorkspace,\n  runAllTestcases,\n  setEditorBreakpoint,\n  updateActiveEditorTabIndex,\n  updateCurrentAssessmentId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue\n} from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation, WorkspaceState } from '../workspace/WorkspaceTypes';\nimport AssessmentWorkspaceGradingResult from './AssessmentWorkspaceGradingResult';\nexport type AssessmentWorkspaceProps = {\n  assessmentId: number;\n  needsPassword: boolean;\n  questionId: number;\n  notAttempted: boolean;\n  canSave: boolean;\n  assessmentConfiguration: AssessmentConfiguration;\n};\n\nconst workspaceLocation: WorkspaceLocation = 'assessment';\n\nconst AssessmentWorkspace: React.FC<AssessmentWorkspaceProps> = props => {\n  const [showOverlay, setShowOverlay] = useState(false);\n  const [showResetTemplateOverlay, setShowResetTemplateOverlay] = useState(false);\n  const [sessionId, setSessionId] = useState('');\n  const { isMobileBreakpoint } = useResponsive();\n\n  const assessment = useTypedSelector(state => state.session.assessments.get(props.assessmentId));\n  const { selectedTab, setSelectedTab } = useSideContent(\n    workspaceLocation,\n    assessment?.questions[props.questionId].grader !== undefined\n      ? SideContentType.grading\n      : SideContentType.questionOverview\n  );\n\n  const navigate = useNavigate();\n\n  const { courseId } = useTypedSelector(state => state.session);\n  const {\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    editorTabs,\n    autogradingResults,\n    editorTestcases,\n    hasUnsavedChanges,\n    isRunning,\n    output,\n    replValue,\n    currentAssessment: storedAssessmentId,\n    currentQuestion: storedQuestionId\n  } = useTypedSelector(store => store.workspaces[workspaceLocation]);\n\n  const dispatch = useDispatch();\n  const {\n    handleTestcaseEval,\n    handleClearContext,\n    handleChangeExecTime,\n    handleUpdateCurrentAssessmentId,\n    handleResetWorkspace,\n    handleRunAllTestcases,\n    handleEditorEval,\n    handleAssessmentFetch,\n    handleEditorValueChange,\n    handleEditorUpdateBreakpoints,\n    handleReplEval,\n    handleSave,\n    handleUpdateHasUnsavedChanges,\n    handleEnableTokenCounter,\n    handleDisableTokenCounter\n  } = useMemo(() => {\n    return {\n      handleTestcaseEval: (id: number) => dispatch(evalTestcase(workspaceLocation, id)),\n      handleClearContext: (library: Library, shouldInitLibrary: boolean) =>\n        dispatch(beginClearContext(workspaceLocation, library, shouldInitLibrary)),\n      handleChangeExecTime: (execTimeMs: number) =>\n        dispatch(changeExecTime(execTimeMs, workspaceLocation)),\n      handleUpdateCurrentAssessmentId: (assessmentId: number, questionId: number) =>\n        dispatch(updateCurrentAssessmentId(assessmentId, questionId)),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        dispatch(resetWorkspace(workspaceLocation, options)),\n      handleRunAllTestcases: () => dispatch(runAllTestcases(workspaceLocation)),\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      handleAssessmentFetch: (assessmentId: number, assessmentPassword?: string) =>\n        dispatch(fetchAssessment(assessmentId, assessmentPassword)),\n      handleEditorValueChange: (editorTabIndex: number, newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, editorTabIndex, newEditorValue)),\n      handleEditorUpdateBreakpoints: (editorTabIndex: number, newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, editorTabIndex, newBreakpoints)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleSave: (id: number, answer: number | string | ContestEntry[]) =>\n        dispatch(submitAnswer(id, answer)),\n      handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) =>\n        dispatch(updateHasUnsavedChanges(workspaceLocation, hasUnsavedChanges)),\n      handleEnableTokenCounter: () => dispatch(enableTokenCounter(workspaceLocation)),\n      handleDisableTokenCounter: () => dispatch(disableTokenCounter(workspaceLocation))\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorValueChange(0, '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * After mounting (either an older copy of the assessment\n   * or a loading screen), try to fetch a newer assessment,\n   * and show the briefing.\n   */\n  useEffect(() => {\n    let assessmentPassword: string | null = null;\n    if (props.needsPassword) {\n      // Only need to prompt for password the first time\n      // Attempt to load password-protected assessment\n      assessmentPassword = window.prompt('Please enter password.', '');\n      if (!assessmentPassword) {\n        window.history.back();\n        return;\n      }\n    }\n    handleAssessmentFetch(props.assessmentId, assessmentPassword || undefined);\n\n    if (props.questionId === 0 && props.notAttempted) {\n      setShowOverlay(true);\n    }\n    if (!assessment) {\n      return;\n    }\n    // ------------- PLEASE NOTE, EVERYTHING BELOW THIS SEEMS TO BE UNUSED -------------\n    // checkWorkspaceReset does exactly the same thing.\n    let questionId = props.questionId;\n    if (props.questionId >= assessment.questions.length) {\n      questionId = assessment.questions.length - 1;\n    }\n\n    const question = assessment.questions[questionId];\n\n    let answer = '';\n    if (question.type === QuestionTypes.programming) {\n      if (question.answer) {\n        answer = (question as IProgrammingQuestion).answer as string;\n      } else {\n        answer = (question as IProgrammingQuestion).solutionTemplate;\n      }\n    }\n\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorValueChange(0, answer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Once there is an update (due to the assessment being fetched), check\n   * if a workspace reset is needed.\n   */\n  useEffect(() => {\n    checkWorkspaceReset();\n  });\n\n  /**\n   * Handles toggling enabling and disabling token counter depending on assessment properties\n   */\n  useEffect(() => {\n    if (props.assessmentConfiguration.hasTokenCounter) {\n      handleEnableTokenCounter();\n    } else {\n      handleDisableTokenCounter();\n    }\n  }, [\n    props.assessmentConfiguration.hasTokenCounter,\n    handleEnableTokenCounter,\n    handleDisableTokenCounter\n  ]);\n\n  /**\n   * Handles toggling of relevant SideContentTabs when mobile breakpoint it hit\n   */\n  useEffect(() => {\n    if (!selectedTab) return;\n\n    if (!isMobileBreakpoint && mobileOnlyTabIds.includes(selectedTab)) {\n      setSelectedTab(SideContentType.questionOverview);\n    }\n  }, [isMobileBreakpoint, props, selectedTab, setSelectedTab]);\n\n  /* ==================\n     onChange handlers\n     ================== */\n  const pushLog = useCallback((newInput: Input) => log(sessionId, newInput), [sessionId]);\n\n  const onChangeMethod = (newCode: string, delta: CodeDelta) => {\n    handleUpdateHasUnsavedChanges?.(true);\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorValueChange(0, newCode);\n\n    const input: Input = {\n      time: Date.now(),\n      type: 'codeDelta',\n      data: delta\n    };\n    pushLog(input);\n  };\n\n  const onCursorChangeMethod = (selection: any) => {\n    const input: Input = {\n      time: Date.now(),\n      type: 'cursorPositionChange',\n      data: selection.getCursor()\n    };\n    pushLog(input);\n  };\n\n  const onSelectionChangeMethod = (selection: any) => {\n    const range: SelectionRange = selection.getRange();\n    const isBackwards: boolean = selection.isBackwards();\n    if (!isEqual(range.start, range.end)) {\n      const input: Input = {\n        time: Date.now(),\n        type: 'selectionRangeData',\n        data: { range, isBackwards }\n      };\n      pushLog(input);\n    }\n  };\n\n  /**\n   * handleEval used in both the Run button, and during 'shift-enter' in AceEditor\n   *\n   * However, AceEditor only binds commands on mount (https://github.com/securingsincity/react-ace/issues/684)\n   * Thus, we use a mutable ref to overcome the stale closure problem\n   */\n  const activeTab = useRef(selectedTab);\n  activeTab.current = selectedTab;\n  const handleEval = useCallback(() => {\n    // Run testcases when the autograder tab is selected\n    if (activeTab.current === SideContentType.autograder) {\n      handleRunAllTestcases();\n    } else {\n      handleEditorEval();\n    }\n\n    const input: Input = {\n      time: Date.now(),\n      type: 'keyboardCommand',\n      data: KeyboardCommand.run\n    };\n    pushLog(input);\n  }, [handleEditorEval, handleRunAllTestcases, pushLog]);\n\n  /* ================\n     Helper Functions\n     ================ */\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   */\n  const checkWorkspaceReset = () => {\n    /* Don't reset workspace if assessment not fetched yet. */\n    if (assessment === undefined) {\n      return;\n    }\n\n    /* Reset assessment if it has changed.*/\n    const { assessmentId, questionId } = props;\n    if (storedAssessmentId === assessmentId && storedQuestionId === questionId) {\n      return;\n    }\n\n    const question = assessment.questions[questionId];\n\n    const options: {\n      autogradingResults?: AutogradingResult[];\n      editorValue?: string;\n      programPrependValue?: string;\n      programPostpendValue?: string;\n      editorTestcases?: Testcase[];\n    } = {};\n\n    switch (question.type) {\n      case QuestionTypes.programming:\n        const programmingQuestionData: IProgrammingQuestion = question;\n        options.autogradingResults = programmingQuestionData.autogradingResults;\n        options.programPrependValue = programmingQuestionData.prepend;\n        options.programPostpendValue = programmingQuestionData.postpend;\n        options.editorTestcases = programmingQuestionData.testcases;\n\n        // We use || not ?? to match both null and an empty string\n        options.editorValue =\n          programmingQuestionData.answer || programmingQuestionData.solutionTemplate;\n        // Initialize session once the editorValue is known.\n        if (!sessionId) {\n          setSessionId(\n            initSession(`${(assessment as any).number}/${props.questionId}`, {\n              chapter: question.library.chapter,\n              externalLibrary: question?.library?.external?.name || 'NONE',\n              editorValue: options.editorValue\n            })\n          );\n        }\n        break;\n      case QuestionTypes.voting:\n        const votingQuestionData: IContestVotingQuestion = question;\n        options.programPrependValue = votingQuestionData.prepend;\n        options.programPostpendValue = votingQuestionData.postpend;\n        break;\n      case QuestionTypes.mcq:\n        // Do nothing\n        break;\n    }\n\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorUpdateBreakpoints(0, []);\n    handleUpdateCurrentAssessmentId(assessmentId, questionId);\n    const resetWorkspaceOptions = assertType<WorkspaceState>()({\n      autogradingResults: options.autogradingResults ?? [],\n      // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n      editorTabs: [{ value: options.editorValue ?? '', highlightedLines: [], breakpoints: [] }],\n      programPrependValue: options.programPrependValue ?? '',\n      programPostpendValue: options.programPostpendValue ?? '',\n      editorTestcases: options.editorTestcases ?? []\n    });\n    handleResetWorkspace(resetWorkspaceOptions);\n    handleChangeExecTime(\n      question.library.execTimeMs ?? defaultWorkspaceManager.assessment.execTime\n    );\n    handleClearContext(question.library, true);\n    handleUpdateHasUnsavedChanges(false);\n    if (options.editorValue) {\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorValueChange(0, options.editorValue);\n    }\n  };\n\n  /**\n   * sideContentProps() will only be called when assessment is not undefined\n   * (see 'Rendering Logic' below), thus it is okay to use assessment!\n   */\n  const sideContentProps: (p: AssessmentWorkspaceProps, q: number) => SideContentProps = (\n    props: AssessmentWorkspaceProps,\n    questionId: number\n  ) => {\n    const question = assessment!.questions[questionId];\n    const isGraded = question.grader !== undefined;\n    const isContestVoting = question?.type === QuestionTypes.voting;\n    const handleContestEntryClick = (_submissionId: number, answer: string) => {\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorValueChange(0, answer);\n    };\n\n    const tabs: SideContentTab[] = [\n      {\n        label: `Question ${questionId + 1}`,\n        iconName: IconNames.NINJA,\n        body: <Markdown content={question.content} />,\n        id: SideContentType.questionOverview\n      }\n    ];\n\n    if (isContestVoting) {\n      tabs.push(\n        {\n          label: `Contest Voting Briefing`,\n          iconName: IconNames.BRIEFCASE,\n          body: <Markdown content={assessment!.longSummary} />,\n          id: SideContentType.briefing\n        },\n        {\n          label: 'Contest Voting',\n          iconName: IconNames.NEW_LAYERS,\n          body: (\n            <SideContentContestVotingContainer\n              canSave={props.canSave}\n              handleSave={votingSubmission =>\n                handleSave((question as IContestVotingQuestion).id, votingSubmission)\n              }\n              handleContestEntryClick={handleContestEntryClick}\n              contestEntries={(question as IContestVotingQuestion)?.contestEntries ?? []}\n            />\n          ),\n          id: SideContentType.contestVoting\n        },\n        {\n          label: 'Score Leaderboard',\n          iconName: IconNames.CROWN,\n          body: (\n            <SideContentContestLeaderboard\n              handleContestEntryClick={handleContestEntryClick}\n              orderedContestEntries={(question as IContestVotingQuestion)?.scoreLeaderboard ?? []}\n              leaderboardType={SideContentType.scoreLeaderboard}\n            />\n          ),\n          id: SideContentType.scoreLeaderboard\n        },\n        {\n          label: 'Popular Vote Leaderboard',\n          iconName: IconNames.PEOPLE,\n          body: (\n            <SideContentContestLeaderboard\n              handleContestEntryClick={handleContestEntryClick}\n              orderedContestEntries={\n                (question as IContestVotingQuestion)?.popularVoteLeaderboard ?? []\n              }\n              leaderboardType={SideContentType.popularVoteLeaderboard}\n            />\n          ),\n          id: SideContentType.popularVoteLeaderboard\n        }\n      );\n    } else {\n      tabs.push(\n        {\n          label: `Briefing`,\n          iconName: IconNames.BRIEFCASE,\n          body: <Markdown className=\"sidecontent-overview\" content={assessment!.longSummary} />,\n          id: SideContentType.briefing\n        },\n        {\n          label: `Autograder`,\n          iconName: IconNames.AIRPLANE,\n          body: (\n            <SideContentAutograder\n              testcases={editorTestcases}\n              autogradingResults={\n                // Display autograding results if assessment has been graded by an avenger, OR does not need to be manually graded\n                isGraded || !props.assessmentConfiguration.isManuallyGraded\n                  ? autogradingResults\n                  : []\n              }\n              handleTestcaseEval={handleTestcaseEval}\n              workspaceLocation=\"assessment\"\n            />\n          ),\n          id: SideContentType.autograder\n        }\n      );\n    }\n\n    if (isGraded) {\n      tabs.push({\n        label: `Report Card`,\n        iconName: IconNames.TICK,\n        body: (\n          <AssessmentWorkspaceGradingResult\n            graderName={question.grader!.name}\n            gradedAt={question.gradedAt!}\n            xp={question.xp}\n            maxXp={question.maxXp}\n            comments={question.comments}\n          />\n        ),\n        id: SideContentType.grading\n      });\n    }\n\n    const externalLibrary = question.library.external;\n    const functionsAttached = externalLibrary.symbols;\n    if (functionsAttached.includes('get_matrix')) {\n      tabs.push({\n        label: `Tone Matrix`,\n        iconName: IconNames.GRID_VIEW,\n        body: <SideContentToneMatrix />,\n        id: SideContentType.toneMatrix\n      });\n    }\n\n    const onChangeTabs = (\n      newTabId: SideContentType,\n      prevTabId: SideContentType,\n      event: React.MouseEvent<HTMLElement>\n    ) => {\n      if (newTabId === prevTabId) {\n        return;\n      }\n      setSelectedTab(newTabId);\n    };\n\n    return {\n      selectedTabId: selectedTab,\n      tabs: {\n        beforeDynamicTabs: tabs,\n        afterDynamicTabs: []\n      },\n      onChange: onChangeTabs,\n      workspaceLocation\n    };\n  };\n\n  /**\n   * controlBarProps() will only be called when assessment is not undefined\n   * (see 'Rendering Logic' below), thus it is okay to use assessment!\n   */\n  const controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = `/courses/${courseId}/${assessmentTypeLink(assessment!.type)}`;\n    const assessmentWorkspacePath = listingPath + `/${assessment!.id.toString()}`;\n\n    const questions = assessment!.questions;\n    const question = questions[questionId];\n    const questionProgress: [number, number] = [questionId + 1, questions.length];\n\n    const onClickPrevious = () => {\n      navigate(assessmentWorkspacePath + `/${(questionId - 1).toString()}`);\n      setSelectedTab(SideContentType.questionOverview);\n    };\n    const onClickNext = () => {\n      navigate(assessmentWorkspacePath + `/${(questionId + 1).toString()}`);\n      setSelectedTab(SideContentType.questionOverview);\n    };\n    const onClickReturn = () => navigate(listingPath);\n\n    // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n    const onClickSave = () => handleSave(question.id, editorTabs[0].value);\n\n    const onClickResetTemplate = () => {\n      setShowResetTemplateOverlay(true);\n    };\n\n    // Perform question blocking - determine the highest question number previously accessed\n    // by counting the number of questions that have a non-null answer\n    const blockedQuestionId = questions.filter(qn => qn.answer !== null).length - 1;\n    const isBlocked = questionId >= blockedQuestionId;\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={\n          question.blocking\n            ? onClickProgress(onClickNext, question, editorTestcases, isBlocked)\n            : onClickNext\n        }\n        onClickReturn={\n          question.blocking\n            ? onClickProgress(onClickReturn, question, editorTestcases, isBlocked)\n            : onClickReturn\n        }\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const resetButton =\n      question.type !== QuestionTypes.mcq ? (\n        <ControlBarResetButton onClick={onClickResetTemplate} key=\"reset_template\" />\n      ) : null;\n\n    const runButton = (\n      <ControlBarRunButton\n        isEntrypointFileDefined={activeEditorTabIndex !== null}\n        handleEditorEval={handleEval}\n        key=\"run\"\n      />\n    );\n\n    const saveButton =\n      props.canSave && question.type === QuestionTypes.programming ? (\n        <ControlButtonSaveButton\n          hasUnsavedChanges={hasUnsavedChanges}\n          onClickSave={onClickSave}\n          key=\"save\"\n        />\n      ) : null;\n\n    const chapterSelect = (\n      <ControlBarChapterSelect\n        handleChapterSelect={() => {}}\n        isFolderModeEnabled={isFolderModeEnabled}\n        sourceChapter={question.library.chapter}\n        sourceVariant={question.library.variant ?? Constants.defaultSourceVariant}\n        disabled\n        key=\"chapter\"\n      />\n    );\n\n    return {\n      editorButtons: !isMobileBreakpoint\n        ? [runButton, saveButton, resetButton, chapterSelect]\n        : [saveButton, resetButton],\n      flowButtons: [previousButton, questionView, nextButton]\n    };\n  };\n\n  const mobileSideContentProps: (q: number) => MobileSideContentProps = (questionId: number) => {\n    const onChangeTabs = (\n      newTabId: SideContentType,\n      prevTabId: SideContentType,\n      event: React.MouseEvent<HTMLElement>\n    ) => {\n      if (newTabId === prevTabId) {\n        return;\n      }\n\n      // Do nothing when clicking the mobile 'Run' tab while on the autograder tab.\n      if (\n        !(prevTabId === SideContentType.autograder && newTabId === SideContentType.mobileEditorRun)\n      ) {\n        setSelectedTab(newTabId);\n      }\n    };\n\n    return {\n      mobileControlBarProps: {\n        ...controlBarProps(questionId)\n      },\n      ...sideContentProps(props, questionId),\n      onChange: onChangeTabs,\n      selectedTabId: selectedTab,\n      handleEditorEval: handleEval\n    };\n  };\n\n  const replButtons = useMemo(() => {\n    const clearButton = (\n      <ControlBarClearButton\n        handleReplOutputClear={() => dispatch(clearReplOutput(workspaceLocation))}\n        key=\"clear_repl\"\n      />\n    );\n    const evalButton = (\n      <ControlBarEvalButton handleReplEval={handleReplEval} isRunning={isRunning} key=\"eval_repl\" />\n    );\n\n    return [evalButton, clearButton];\n  }, [dispatch, isRunning, handleReplEval]);\n\n  const editorContainerHandlers = useMemo(() => {\n    return {\n      setActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      removeEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex)),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback))\n    };\n  }, [dispatch]);\n\n  const replHandlers = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation))\n    };\n  }, [dispatch]);\n\n  const workspaceHandlers = useMemo(() => {\n    return {\n      handleSideContentHeightChange: (heightChange: number) =>\n        dispatch(changeSideContentHeight(heightChange, workspaceLocation))\n    };\n  }, [dispatch]);\n\n  /* ===============\n     Rendering Logic\n     =============== */\n  if (!assessment?.questions.length) {\n    return (\n      <NonIdealState\n        className={classNames('WorkspaceParent', Classes.DARK)}\n        description=\"Getting mission ready...\"\n        icon={<Spinner size={SpinnerSize.LARGE} />}\n      />\n    );\n  }\n\n  const overlay = (\n    <Dialog className=\"assessment-briefing\" isOpen={showOverlay}>\n      <Card>\n        <Markdown content={assessment.longSummary} />\n        <Button\n          className=\"assessment-briefing-button\"\n          onClick={() => setShowOverlay(false)}\n          text=\"Continue\"\n        />\n      </Card>\n    </Dialog>\n  );\n\n  const closeOverlay = () => setShowResetTemplateOverlay(false);\n  const resetTemplateOverlay = (\n    <Dialog\n      className=\"assessment-reset\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={showResetTemplateOverlay}\n      onClose={closeOverlay}\n      title=\"Confirmation: Reset editor?\"\n    >\n      <DialogBody>\n        <Markdown content=\"Are you sure you want to reset the template?\" />\n        <Markdown content=\"*Note this will not affect the saved copy of your program, unless you save over it.*\" />\n      </DialogBody>\n      <DialogFooter\n        actions={\n          <>\n            <ControlButton label=\"Cancel\" onClick={closeOverlay} options={{ minimal: false }} />\n            <ControlButton\n              label=\"Confirm\"\n              onClick={() => {\n                closeOverlay();\n                // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n                handleEditorValueChange(\n                  0,\n                  (assessment!.questions[questionId] as IProgrammingQuestion).solutionTemplate\n                );\n                handleUpdateHasUnsavedChanges(true);\n              }}\n              options={{ minimal: false, intent: Intent.DANGER }}\n            />\n          </>\n        }\n      />\n    </Dialog>\n  );\n\n  /* If questionId is out of bounds, set it to the max. */\n  const questionId =\n    props.questionId >= assessment.questions.length\n      ? assessment.questions.length - 1\n      : props.questionId;\n  const question = assessment.questions[questionId];\n  const editorContainerProps: NormalEditorContainerProps | undefined =\n    question.type === QuestionTypes.programming || question.type === QuestionTypes.voting\n      ? {\n          editorVariant: 'normal',\n          isFolderModeEnabled,\n          activeEditorTabIndex,\n          setActiveEditorTabIndex: editorContainerHandlers.setActiveEditorTabIndex,\n          removeEditorTabByIndex: editorContainerHandlers.removeEditorTabByIndex,\n          editorTabs: editorTabs.map(convertEditorTabStateToProps),\n          editorSessionId: '',\n          sourceChapter: question.library.chapter || Chapter.SOURCE_4,\n          sourceVariant: question.library.variant ?? Variant.DEFAULT,\n          externalLibraryName: question.library.external.name || 'NONE',\n          handleDeclarationNavigate: editorContainerHandlers.handleDeclarationNavigate,\n          handleEditorEval: handleEval,\n          handleEditorValueChange: handleEditorValueChange,\n          handleUpdateHasUnsavedChanges: handleUpdateHasUnsavedChanges,\n          handleEditorUpdateBreakpoints: handleEditorUpdateBreakpoints,\n          handlePromptAutocomplete: editorContainerHandlers.handlePromptAutocomplete,\n          isEditorAutorun: false,\n          onChange: onChangeMethod,\n          onCursorChange: onCursorChangeMethod,\n          onSelectionChange: onSelectionChangeMethod\n        }\n      : undefined;\n  const mcqProps = {\n    mcq: question as IMCQQuestion,\n    handleMCQSubmit: (option: number) => handleSave(assessment!.questions[questionId].id, option)\n  };\n  const replProps = {\n    handleBrowseHistoryDown: replHandlers.handleBrowseHistoryDown,\n    handleBrowseHistoryUp: replHandlers.handleBrowseHistoryUp,\n    handleReplEval: handleReplEval,\n    handleReplValueChange: replHandlers.handleReplValueChange,\n    output: output,\n    replValue: replValue,\n    sourceChapter: question?.library?.chapter || Chapter.SOURCE_4,\n    sourceVariant: question.library.variant ?? Variant.DEFAULT,\n    externalLibrary: question?.library?.external?.name || 'NONE',\n    replButtons: replButtons\n  };\n  const sideBarProps = {\n    tabs: []\n  };\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: controlBarProps(questionId),\n    editorContainerProps: editorContainerProps,\n    handleSideContentHeightChange: workspaceHandlers.handleSideContentHeightChange,\n    hasUnsavedChanges: hasUnsavedChanges,\n    mcqProps: mcqProps,\n    sideBarProps: sideBarProps,\n    sideContentProps: sideContentProps(props, questionId),\n    replProps: replProps\n  };\n  const mobileWorkspaceProps: MobileWorkspaceProps = {\n    editorContainerProps: editorContainerProps,\n    hasUnsavedChanges: hasUnsavedChanges,\n    mcqProps: mcqProps,\n    replProps: replProps,\n    sideBarProps: sideBarProps,\n    mobileSideContentProps: mobileSideContentProps(questionId)\n  };\n  return (\n    <div className={classNames('WorkspaceParent', Classes.DARK)}>\n      {overlay}\n      {resetTemplateOverlay}\n      {!isMobileBreakpoint ? (\n        <Workspace {...workspaceProps} />\n      ) : (\n        <MobileWorkspace {...mobileWorkspaceProps} />\n      )}\n    </div>\n  );\n};\n\nexport default AssessmentWorkspace;\n","import { Classes, NonIdealState } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\n\nconst AssessmentNotFound: React.FC = () => (\n  <div className={classNames('NoPage', Classes.DARK)}>\n    <NonIdealState\n      icon={IconNames.ERROR}\n      title=\"Assessment Not Found\"\n      description=\"Please check the top right dropdown menu to see if you are in the right course.\"\n    />\n  </div>\n);\n\nexport default AssessmentNotFound;\n","import {\n  Button,\n  Card,\n  Collapse,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Elevation,\n  H4,\n  H6,\n  Icon,\n  IconName,\n  Intent,\n  NonIdealState,\n  Position,\n  Spinner,\n  Text\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport classNames from 'classnames';\nimport { sortBy } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport { numberRegExp } from 'src/features/academy/AcademyTypes';\n\nimport defaultCoverImage from '../../assets/default_cover_image.jpg';\nimport {\n  acknowledgeNotifications,\n  fetchAssessmentOverviews,\n  submitAssessment\n} from '../application/actions/SessionActions';\nimport { Role } from '../application/ApplicationTypes';\nimport AssessmentWorkspace, {\n  AssessmentWorkspaceProps\n} from '../assessmentWorkspace/AssessmentWorkspace';\nimport ContentDisplay from '../ContentDisplay';\nimport ControlButton from '../ControlButton';\nimport Markdown from '../Markdown';\nimport NotificationBadge from '../notificationBadge/NotificationBadge';\nimport { filterNotificationsByAssessment } from '../notificationBadge/NotificationBadgeHelper';\nimport Constants from '../utils/Constants';\nimport { beforeNow, getPrettyDate } from '../utils/DateHelper';\nimport { useResponsive, useSession } from '../utils/Hooks';\nimport { assessmentTypeLink, convertParamToInt } from '../utils/ParamParseHelper';\nimport AssessmentNotFound from './AssessmentNotFound';\nimport {\n  AssessmentConfiguration,\n  AssessmentOverview,\n  AssessmentStatuses,\n  AssessmentWorkspaceParams,\n  GradingStatuses\n} from './AssessmentTypes';\n\nexport type AssessmentProps = {\n  assessmentConfiguration: AssessmentConfiguration;\n};\n\nconst Assessment: React.FC<AssessmentProps> = props => {\n  const params = useParams<AssessmentWorkspaceParams>();\n  const { isMobileBreakpoint } = useResponsive();\n  const [betchaAssessment, setBetchaAssessment] = useState<AssessmentOverview | null>(null);\n  const [showClosedAssessments, setShowClosedAssessments] = useState(false);\n  const [showOpenedAssessments, setShowOpenedAssessments] = useState(true);\n  const [showUpcomingAssessments, setShowUpcomingAssessments] = useState(true);\n\n  const { courseId, role, assessmentOverviews: assessmentOverviewsUnfiltered } = useSession();\n  const dispatch = useDispatch();\n\n  const toggleClosedAssessments = () => setShowClosedAssessments(!showClosedAssessments);\n  const toggleOpenAssessments = () => setShowOpenedAssessments(!showOpenedAssessments);\n  const toggleUpcomingAssessments = () => setShowUpcomingAssessments(!showUpcomingAssessments);\n  const setBetchaAssessmentNull = () => setBetchaAssessment(null);\n  const handleSubmitAssessment = () => {\n    if (betchaAssessment) {\n      dispatch(submitAssessment(betchaAssessment.id));\n      setBetchaAssessmentNull();\n    }\n  };\n\n  const sortAssessments = (assessments: AssessmentOverview[]) => sortBy(assessments, [a => -a.id]);\n\n  const makeSubmissionButton = (overview: AssessmentOverview, index: number) => (\n    <Button\n      disabled={overview.status !== AssessmentStatuses.attempted}\n      icon={IconNames.CONFIRM}\n      intent={overview.status === AssessmentStatuses.attempted ? Intent.DANGER : Intent.NONE}\n      minimal={true}\n      // intentional: each listing renders its own version of onClick\n      // tslint:disable-next-line:jsx-no-lambda\n      onClick={() => setBetchaAssessment(overview)}\n    >\n      <span>Finalize</span>\n      <span className=\"custom-hidden-xxs\"> Submission</span>\n    </Button>\n  );\n\n  const makeAssessmentInteractButton = (overview: AssessmentOverview) => {\n    let icon: IconName;\n    let label: string;\n    let optionalLabel: string = '';\n\n    switch (overview.status) {\n      case AssessmentStatuses.not_attempted:\n        icon = IconNames.PLAY;\n        label = 'Attempt';\n        break;\n      case AssessmentStatuses.attempting:\n        icon = IconNames.PLAY;\n        label = 'Continue';\n        optionalLabel = ' Attempt';\n        break;\n      case AssessmentStatuses.attempted:\n        icon = IconNames.EDIT;\n        label = 'Review';\n        optionalLabel = ' Attempt';\n        break;\n      case AssessmentStatuses.submitted:\n        icon = IconNames.EYE_OPEN;\n        label = 'Review';\n        optionalLabel = ' Submission';\n        break;\n      default:\n        // If we reach this case, backend data did not fit IAssessmentOverview\n        icon = IconNames.PLAY;\n        label = 'Review';\n        break;\n    }\n    return (\n      <NavLink\n        to={`/courses/${courseId}/${assessmentTypeLink(overview.type)}/${overview.id.toString()}/${\n          Constants.defaultQuestionId\n        }`}\n      >\n        <Button\n          icon={icon}\n          minimal={true}\n          onClick={() =>\n            dispatch(acknowledgeNotifications(filterNotificationsByAssessment(overview.id)))\n          }\n        >\n          <span data-testid=\"Assessment-Attempt-Button\">{label}</span>\n          <span className=\"custom-hidden-xxxs\">{optionalLabel}</span>\n        </Button>\n      </NavLink>\n    );\n  };\n\n  /**\n   * Create a series of cards to display IAssessmentOverviews.\n   * @param {AssessmentOverview} overview the assessment overview to display\n   * @param {number} index a unique number for this card (required for sequential rendering).\n   *   See {@link https://reactjs.org/docs/lists-and-keys.html#keys}\n   * @param renderAttemptButton will only render the attempt button if true, regardless\n   *   of attempt status.\n   * @param notifications the notifications to be passed in.\n   */\n  const makeOverviewCard = (\n    overview: AssessmentOverview,\n    index: number,\n    renderAttemptButton: boolean,\n    renderGradingStatus: boolean\n  ) => {\n    const showGrade =\n      overview.gradingStatus === 'graded' || !props.assessmentConfiguration.isManuallyGraded;\n    return (\n      <div key={index}>\n        <Card className=\"row listing\" elevation={Elevation.ONE}>\n          <div className={classNames('listing-picture', !isMobileBreakpoint && 'col-xs-3')}>\n            <NotificationBadge\n              className=\"badge\"\n              notificationFilter={filterNotificationsByAssessment(overview.id)}\n              large={true}\n            />\n            <img\n              alt=\"Assessment\"\n              className={`cover-image-${overview.status}`}\n              src={overview.coverImage ? overview.coverImage : defaultCoverImage}\n            />\n          </div>\n          <div className={classNames('listing-text', !isMobileBreakpoint && 'col-xs-9')}>\n            {makeOverviewCardTitle(overview, index, renderGradingStatus)}\n            <div className=\"listing-xp\">\n              <H6>\n                {showGrade ? `XP: ${overview.xp} / ${overview.maxXp}` : `Max XP: ${overview.maxXp}`}\n              </H6>\n            </div>\n            <div className=\"listing-description\">\n              <Markdown content={overview.shortSummary} />\n            </div>\n            <div className=\"listing-footer\">\n              <div>\n                <Text className=\"listing-due-date\">\n                  <Icon className=\"listing-due-icon\" iconSize={12} icon={IconNames.CALENDAR} />\n                  {`${beforeNow(overview.openAt) ? 'Opened' : 'Opens'}: ${getPrettyDate(\n                    overview.openAt\n                  )}`}\n                </Text>\n                {beforeNow(overview.openAt) && (\n                  <Text className=\"listing-due-date\">\n                    <Icon className=\"listing-due-icon\" iconSize={12} icon={IconNames.TIME} />\n                    {`Due: ${getPrettyDate(overview.closeAt)}`}\n                  </Text>\n                )}\n              </div>\n              <div className=\"listing-button\">\n                {renderAttemptButton ? makeAssessmentInteractButton(overview) : null}\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  const makeOverviewCardTitle = (\n    overview: AssessmentOverview,\n    index: number,\n    renderGradingStatus: boolean\n  ) => (\n    <div className=\"listing-header\">\n      <Text ellipsize={true}>\n        <H4 className=\"listing-title\">\n          {overview.title}\n          {overview.private ? (\n            <Tooltip2\n              className=\"listing-title-tooltip\"\n              content=\"This assessment is password-protected.\"\n            >\n              <Icon icon=\"lock\" />\n            </Tooltip2>\n          ) : null}\n          {renderGradingStatus ? makeGradingStatus(overview.gradingStatus) : null}\n        </H4>\n      </Text>\n      <div className=\"listing-button\">{makeSubmissionButton(overview, index)}</div>\n    </div>\n  );\n\n  // Rendering Logic\n  const assessmentOverviews = useMemo(\n    () =>\n      assessmentOverviewsUnfiltered?.filter(ao => ao.type === props.assessmentConfiguration.type),\n    [assessmentOverviewsUnfiltered, props.assessmentConfiguration.type]\n  );\n\n  // If assessmentId or questionId is defined but not numeric, redirect back to the Assessment overviews page\n  if (\n    (params.assessmentId && !params.assessmentId?.match(numberRegExp)) ||\n    (params.questionId && !params.questionId?.match(numberRegExp))\n  ) {\n    return <Navigate to={`/courses/${courseId}/${props.assessmentConfiguration.type}`} />;\n  }\n\n  const assessmentId: number | null = convertParamToInt(params.assessmentId);\n  const questionId: number = convertParamToInt(params.questionId) || Constants.defaultQuestionId;\n\n  // If there is an assessment to render, create a workspace. The assessment\n  // overviews must still be loaded for this, to send the due date.\n  if (assessmentId !== null && assessmentOverviews !== undefined) {\n    const overview = assessmentOverviews.filter(a => a.id === assessmentId)[0];\n    if (!overview) {\n      return <AssessmentNotFound />;\n    }\n\n    const notAttempted = overview.status === AssessmentStatuses.not_attempted;\n    const assessmentWorkspaceProps: AssessmentWorkspaceProps = {\n      assessmentId,\n      questionId,\n      notAttempted,\n      needsPassword: !!overview.private && notAttempted,\n      canSave:\n        role !== Role.Student ||\n        (overview.status !== AssessmentStatuses.submitted && !beforeNow(overview.closeAt)),\n      assessmentConfiguration: props.assessmentConfiguration\n    };\n    return <AssessmentWorkspace {...assessmentWorkspaceProps} />;\n  }\n\n  // Otherwise, render a list of assOwnProps\n  let display: JSX.Element;\n  if (assessmentOverviews === undefined) {\n    display = <NonIdealState description=\"Fetching assessment...\" icon={<Spinner />} />;\n  } else if (assessmentOverviews.length === 0) {\n    display = <NonIdealState title=\"There are no assessments.\" icon={IconNames.FLAME} />;\n  } else {\n    /** Upcoming assessments, that are not released yet. */\n    const isOverviewUpcoming = (overview: AssessmentOverview) =>\n      !beforeNow(overview.closeAt) && !beforeNow(overview.openAt);\n\n    const upcomingCards = sortAssessments(assessmentOverviews.filter(isOverviewUpcoming)).map(\n      (overview, index) => makeOverviewCard(overview, index, role !== Role.Student, false)\n    );\n\n    /** Opened assessments, that are released and can be attempted. */\n    const isOverviewOpened = (overview: AssessmentOverview) =>\n      !beforeNow(overview.closeAt) &&\n      beforeNow(overview.openAt) &&\n      overview.status !== AssessmentStatuses.submitted;\n    const openedCards = sortAssessments(\n      assessmentOverviews.filter(overview => isOverviewOpened(overview))\n    ).map((overview, index) => makeOverviewCard(overview, index, true, false));\n\n    /** Closed assessments, that are past the due date or cannot be attempted further. */\n    const closedCards = sortAssessments(\n      assessmentOverviews.filter(\n        overview => !isOverviewOpened(overview) && !isOverviewUpcoming(overview)\n      )\n    ).map((overview, index) => makeOverviewCard(overview, index, true, true));\n\n    /** Render cards */\n    const upcomingCardsCollapsible = (\n      <>\n        {collapseButton('Upcoming', showUpcomingAssessments, toggleUpcomingAssessments)}\n        <Collapse isOpen={showUpcomingAssessments}>{upcomingCards}</Collapse>\n      </>\n    );\n\n    const openedCardsCollapsible = (\n      <>\n        {collapseButton('Open', showOpenedAssessments, toggleOpenAssessments)}\n        <Collapse isOpen={showOpenedAssessments}>{openedCards}</Collapse>\n      </>\n    );\n\n    const closedCardsCollapsible = (\n      <>\n        {collapseButton('Closed', showClosedAssessments, toggleClosedAssessments)}\n        <Collapse isOpen={showClosedAssessments}>{closedCards}</Collapse>\n      </>\n    );\n\n    display = (\n      <>\n        {upcomingCards.length > 0 ? upcomingCardsCollapsible : null}\n        {openedCards.length > 0 ? openedCardsCollapsible : null}\n        {closedCards.length > 0 ? closedCardsCollapsible : null}\n      </>\n    );\n  }\n\n  // Define the betcha dialog (in each card's menu)\n  const submissionText = betchaAssessment ? (\n    <p>\n      You are about to finalise your submission for the {betchaAssessment.type.toLowerCase()}{' '}\n      <i>&quot;{betchaAssessment.title}&quot;</i>.\n    </p>\n  ) : (\n    <p>You are about to finalise your submission.</p>\n  );\n  const betchaText = (\n    <>\n      {submissionText}\n      <p>\n        Finalising your submission early grants you additional XP, but{' '}\n        <span className=\"warning\">this action is irreversible.</span>\n      </p>\n    </>\n  );\n  const betchaDialog = (\n    <Dialog\n      className=\"betcha-dialog\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={betchaAssessment !== null}\n      onClose={setBetchaAssessmentNull}\n      title=\"Finalise submission?\"\n    >\n      <DialogBody>\n        <Text>{betchaText}</Text>\n      </DialogBody>\n      <DialogFooter\n        actions={\n          <>\n            <ControlButton\n              label=\"Cancel\"\n              onClick={setBetchaAssessmentNull}\n              options={{ minimal: false }}\n            />\n            <ControlButton\n              label=\"Finalise\"\n              onClick={handleSubmitAssessment}\n              options={{ minimal: false, intent: Intent.DANGER }}\n            />\n          </>\n        }\n      />\n    </Dialog>\n  );\n\n  // Finally, render the ContentDisplay.\n  return (\n    <div className=\"Assessment\">\n      <ContentDisplay\n        display={display}\n        loadContentDispatch={() => dispatch(fetchAssessmentOverviews())}\n      />\n      {betchaDialog}\n    </div>\n  );\n};\n\nconst makeGradingStatus = (gradingStatus: string) => {\n  let iconName: IconName;\n  let intent: Intent;\n  let tooltip: string;\n\n  switch (gradingStatus) {\n    case GradingStatuses.graded:\n      iconName = IconNames.TICK;\n      intent = Intent.SUCCESS;\n      tooltip = 'Fully graded';\n      break;\n    case GradingStatuses.grading:\n      iconName = IconNames.TIME;\n      intent = Intent.WARNING;\n      tooltip = 'Grading in progress';\n      break;\n    case GradingStatuses.none:\n      iconName = IconNames.CROSS;\n      intent = Intent.DANGER;\n      tooltip = 'Not graded yet';\n      break;\n    default:\n      // Shows default icon if this assessment is ungraded\n      iconName = IconNames.DISABLE;\n      intent = Intent.PRIMARY;\n      tooltip = `Not applicable`;\n      break;\n  }\n\n  return (\n    <Tooltip2 className=\"listing-title-tooltip\" content={tooltip} placement={Position.RIGHT}>\n      <Icon icon={iconName} intent={intent} />\n    </Tooltip2>\n  );\n};\n\nconst collapseButton = (label: string, isOpen: boolean, toggleFunc: () => void) => (\n  <ControlButton\n    label={label}\n    icon={isOpen ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT}\n    onClick={toggleFunc}\n    options={{ minimal: true, className: 'collapse-button' }}\n  />\n);\n\nexport default Assessment;\n","import {\n  cardBackgroundUrl,\n  coverImageUrl\n} from '../../../../features/achievement/AchievementConstants';\nimport {\n  AchievementItem,\n  AchievementView\n} from '../../../../features/achievement/AchievementTypes';\n\nexport const viewTemplate: AchievementView = {\n  coverImage: `${coverImageUrl}/default.png`,\n  description: '',\n  completionText: ''\n};\n\nexport const achievementTemplate: AchievementItem = {\n  uuid: '',\n  title: 'Achievement Title Here',\n  xp: 0,\n  isVariableXp: false,\n  isTask: false,\n  position: 0,\n  prerequisiteUuids: [],\n  goalUuids: [],\n  cardBackground: `${cardBackgroundUrl}/default.png`,\n  view: viewTemplate\n};\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useContext } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\n\nimport { achievementTemplate } from './AchievementTemplate';\n\ntype AchievementAdderProps = {\n  allowNewUuid: boolean;\n  setNewUuid: (uuid: string) => void;\n};\n\nconst AchievementAdder: React.FC<AchievementAdderProps> = ({ allowNewUuid, setNewUuid }) => {\n  const inferencer = useContext(AchievementContext);\n\n  const addAchievement = () => setNewUuid(inferencer.insertAchievement(achievementTemplate));\n\n  return (\n    <Button\n      className=\"command-button\"\n      disabled={!allowNewUuid}\n      icon={IconNames.NEW_OBJECT}\n      onClick={addAchievement}\n      text=\"Create Achievement\"\n    />\n  );\n};\n\nexport default AchievementAdder;\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { showSimpleConfirmDialog } from 'src/commons/utils/DialogHelper';\n\ntype ItemDeleterProps = {\n  deleteItem: () => void;\n  item: string;\n};\n\nconst ItemDeleter: React.FC<ItemDeleterProps> = ({ deleteItem, item }) => {\n  const confirmDelete = async () => {\n    const confirm = await showSimpleConfirmDialog({\n      contents: `Are you sure you want to delete '${item}' ?`,\n      negativeLabel: 'No',\n      positiveIntent: 'danger',\n      positiveLabel: 'Yes, delete'\n    });\n    if (confirm) {\n      deleteItem();\n    }\n  };\n\n  return (\n    <Tooltip2 content=\"Delete\">\n      <Button icon={IconNames.TRASH} intent=\"danger\" onClick={confirmDelete} />\n    </Tooltip2>\n  );\n};\n\nexport default ItemDeleter;\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport {\n  showSuccessMessage,\n  showWarningMessage\n} from 'src/commons/utils/notifications/NotificationsHelper';\n\ntype ItemSaverProps = {\n  discardChanges: () => void;\n  saveChanges: () => void;\n};\n\nconst ItemSaver: React.FC<ItemSaverProps> = ({ discardChanges, saveChanges }) => {\n  const handleSaveChanges = () => {\n    saveChanges();\n    showSuccessMessage('Saved changes locally');\n  };\n\n  const handleDiscardChanges = () => {\n    discardChanges();\n    showWarningMessage('Discarded changes');\n  };\n\n  return (\n    <>\n      <Tooltip2 content=\"Save Changes\">\n        <Button icon={IconNames.FLOPPY_DISK} intent=\"primary\" onClick={handleSaveChanges} />\n      </Tooltip2>\n\n      <Tooltip2 content=\"Discard Changes\">\n        <Button icon={IconNames.CROSS} intent=\"danger\" onClick={handleDiscardChanges} />\n      </Tooltip2>\n    </>\n  );\n};\n\nexport default ItemSaver;\n","import { MenuItem } from '@blueprintjs/core';\nimport { ItemPredicate, ItemRenderer, MultiSelect } from '@blueprintjs/select';\nimport { without } from 'lodash';\nimport React, { useContext } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\nimport { AchievementGoal } from 'src/features/achievement/AchievementTypes';\n\ntype EditableGoalUuidsProps = {\n  changeGoalUuids: (goalUuids: string[]) => void;\n  goalUuids: string[];\n};\n\nconst EditableGoalUuids: React.FC<EditableGoalUuidsProps> = ({ changeGoalUuids, goalUuids }) => {\n  const inferencer = useContext(AchievementContext);\n  const allGoalUuids = inferencer.getAllGoalUuids();\n  const selectedUuids = goalUuids.filter(\n    uuid => !inferencer.isInvalidGoal(inferencer.getGoal(uuid))\n  );\n\n  const getUuid = (text: string) => inferencer.getUuidByText(text);\n\n  const GoalSelect = MultiSelect.ofType<AchievementGoal>();\n  const goalRenderer: ItemRenderer<AchievementGoal> = (goal, { handleClick }) => (\n    <MenuItem key={goal.uuid} onClick={handleClick} text={goal.text} />\n  );\n  const goalPredicate: ItemPredicate<AchievementGoal> = (query, item) =>\n    item.text.toLowerCase().includes(query.toLowerCase());\n\n  const selectedGoals = new Set(selectedUuids);\n  const availableGoals = new Set(without(allGoalUuids, ...goalUuids));\n\n  const selectGoal = (selectUuid: string) => {\n    selectedGoals.add(selectUuid);\n    availableGoals.delete(selectUuid);\n    changeGoalUuids([...selectedGoals]);\n  };\n\n  const removeGoal = (removeUuid?: string) => {\n    if (removeGoal === undefined) return;\n\n    selectedGoals.delete(removeUuid!);\n    availableGoals.add(removeUuid!);\n    changeGoalUuids([...selectedGoals]);\n  };\n\n  return (\n    <GoalSelect\n      itemRenderer={goalRenderer}\n      items={[...availableGoals].map(uuid => inferencer.getGoal(uuid))}\n      noResults={<MenuItem disabled={true} text=\"No available goal\" />}\n      onItemSelect={goal => selectGoal(goal.uuid)}\n      selectedItems={[...selectedGoals].map(uuid => inferencer.getGoal(uuid))}\n      tagInputProps={{ onRemove: text => removeGoal(getUuid(text!.toString())) }}\n      tagRenderer={goal => goal.text}\n      itemPredicate={goalPredicate}\n      resetOnSelect={true}\n    />\n  );\n};\n\nexport default EditableGoalUuids;\n","import { Button, MenuItem } from '@blueprintjs/core';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React, { useContext } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\n\ntype EditablePositionProps = {\n  changePosition: (position: number) => void;\n  position: number;\n};\n\nconst EditablePosition: React.FC<EditablePositionProps> = ({ changePosition, position }) => {\n  const inferencer = useContext(AchievementContext);\n  const maxPosition = inferencer.listTaskUuids().length + 1;\n  const positionOptions = [...Array(maxPosition + 1).keys()]; // [0..maxPosition + 1]\n\n  const PositionSelect = Select.ofType<number>();\n  const positionRenderer: ItemRenderer<number> = (position, { handleClick }) => (\n    <MenuItem key={position} onClick={handleClick} text={position} />\n  );\n\n  return (\n    <PositionSelect\n      filterable={false}\n      itemRenderer={positionRenderer}\n      items={positionOptions}\n      onItemSelect={changePosition}\n    >\n      <Button text={position} />\n    </PositionSelect>\n  );\n};\n\nexport default EditablePosition;\n","import { MenuItem } from '@blueprintjs/core';\nimport { ItemPredicate, ItemRenderer, MultiSelect } from '@blueprintjs/select';\nimport { without } from 'lodash';\nimport React, { useContext } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\nimport { AchievementItem } from 'src/features/achievement/AchievementTypes';\n\ntype EditablePrerequisiteUuidsProps = {\n  changePrerequisiteUuids: (prerequisiteUuids: string[]) => void;\n  uuid: string;\n  prerequisiteUuids: string[];\n};\n\nconst EditablePrerequisiteUuids: React.FC<EditablePrerequisiteUuidsProps> = props => {\n  const { changePrerequisiteUuids, uuid, prerequisiteUuids } = props;\n\n  const enablePrerequisites = false;\n\n  const inferencer = useContext(AchievementContext);\n  const availableUuids: string[] = enablePrerequisites\n    ? inferencer.listAvailablePrerequisiteUuids(uuid)\n    : [];\n  const selectedUuids = prerequisiteUuids.filter(\n    uuid => !inferencer.isInvalidAchievement(inferencer.getAchievement(uuid))\n  );\n\n  const getUuid = (title: string) => inferencer.getUuidByTitle(title);\n\n  const PrerequisiteSelect = MultiSelect.ofType<AchievementItem>();\n  const prerequisiteRenderer: ItemRenderer<AchievementItem> = (achievement, { handleClick }) => (\n    <MenuItem key={achievement.uuid} onClick={handleClick} text={achievement.title} />\n  );\n  const prerequisitePredicate: ItemPredicate<AchievementItem> = (query, item) =>\n    item.title.toLowerCase().includes(query.toLowerCase());\n\n  const selectedPrereqs = new Set(selectedUuids);\n  const availablePrereqs = new Set(without(availableUuids, ...selectedUuids));\n\n  const selectPrereq = (selectUuid: string) => {\n    selectedPrereqs.add(selectUuid);\n    availablePrereqs.delete(selectUuid);\n    changePrerequisiteUuids([...selectedPrereqs]);\n  };\n\n  const removePrereq = (removeUuid?: string) => {\n    if (removeUuid === undefined) return;\n\n    selectedPrereqs.delete(removeUuid);\n    availablePrereqs.add(removeUuid);\n    changePrerequisiteUuids([...selectedPrereqs]);\n  };\n\n  return (\n    <PrerequisiteSelect\n      itemRenderer={prerequisiteRenderer}\n      items={[...availablePrereqs].map(uuid => inferencer.getAchievement(uuid))}\n      noResults={<MenuItem disabled={true} text=\"No available achievement\" />}\n      onItemSelect={achievement => selectPrereq(achievement.uuid)}\n      selectedItems={[...selectedPrereqs].map(uuid => inferencer.getAchievement(uuid))}\n      tagInputProps={{ onRemove: title => removePrereq(getUuid(title!.toString())) }}\n      tagRenderer={achievement => achievement.title}\n      itemPredicate={prerequisitePredicate}\n      resetOnSelect={true}\n    />\n  );\n};\n\nexport default EditablePrerequisiteUuids;\n","import { Button, Checkbox, Dialog, EditableText } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useState } from 'react';\nimport { AchievementItem } from 'src/features/achievement/AchievementTypes';\n\nimport EditableGoalUuids from './achievementSettings/EditableGoalUuids';\nimport EditablePosition from './achievementSettings/EditablePosition';\nimport EditablePrerequisiteUuids from './achievementSettings/EditablePrerequisiteUuids';\n\ntype AchievementSettingsProps = {\n  changeCardBackground: (cardBackground: string) => void;\n  changeGoalUuids: (goalUuids: string[]) => void;\n  changePosition: (position: number) => void;\n  changePrerequisiteUuids: (prerequisiteUuids: string[]) => void;\n  changeIsVariableXp: () => void;\n  editableAchievement: AchievementItem;\n};\n\nconst AchievementSettings: React.FC<AchievementSettingsProps> = props => {\n  const {\n    changeCardBackground,\n    changeGoalUuids,\n    changePosition,\n    changePrerequisiteUuids,\n    changeIsVariableXp,\n    editableAchievement\n  } = props;\n  const { uuid, cardBackground, goalUuids, position, prerequisiteUuids, isVariableXp } =\n    editableAchievement;\n\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const toggleOpen = () => setOpen(!isOpen);\n\n  return (\n    <>\n      <Tooltip2 content=\"More Settings\">\n        <Button icon={IconNames.WRENCH} onClick={toggleOpen} />\n      </Tooltip2>\n\n      <Dialog title=\"More Settings\" icon={IconNames.WRENCH} isOpen={isOpen} onClose={toggleOpen}>\n        <div style={{ padding: '0 0.5em' }}>\n          <h3>Card Background</h3>\n          <EditableText\n            multiline={true}\n            onChange={changeCardBackground}\n            placeholder=\"Enter card background URL here\"\n            value={cardBackground}\n          />\n          <h3>Position</h3>\n          <p>Note: Select position 0 to hide achievement</p>\n          <EditablePosition changePosition={changePosition} position={position} />\n          <h3>Prerequisites</h3>\n          <EditablePrerequisiteUuids\n            changePrerequisiteUuids={changePrerequisiteUuids}\n            uuid={uuid}\n            prerequisiteUuids={prerequisiteUuids}\n          />\n          <h3>Goals</h3>\n          <EditableGoalUuids changeGoalUuids={changeGoalUuids} goalUuids={goalUuids} />\n\n          <h3>Variable XP</h3>\n          <Checkbox\n            label={\"The rewarded XP will be equal to the sum of 'count' of goals\"}\n            checked={isVariableXp}\n            onChange={changeIsVariableXp}\n          />\n        </div>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AchievementSettings;\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { showSuccessMessage } from 'src/commons/utils/notifications/NotificationsHelper';\n\ntype AchievementUuidCopierProps = {\n  uuid: string;\n};\n\nconst AchievmenetUuidCopier: React.FC<AchievementUuidCopierProps> = ({ uuid }) => {\n  const hoverText = 'Click to copy achievement UUID';\n  const copy = () => {\n    navigator.clipboard.writeText(uuid);\n    showSuccessMessage('UUID copied to clipboard');\n  };\n\n  return (\n    <Tooltip2 content={hoverText}>\n      <Button icon={IconNames.CLIPBOARD} onClick={copy} />\n    </Tooltip2>\n  );\n};\n\nexport default AchievmenetUuidCopier;\n","import { AchievementItem, AchievementView } from 'src/features/achievement/AchievementTypes';\n\nexport enum EditableCardActionType {\n  CHANGE_CARD_BACKGROUND = 'CHANGE_CARD_BACKGROUND',\n  CHANGE_DEADLINE = 'CHANGE_DEADLINE',\n  CHANGE_GOAL_UUIDS = 'CHANGE_GOAL_UUIDS',\n  CHANGE_POSITION = 'CHANGE_POSITION',\n  CHANGE_PREREQUISITE_UUIDS = 'CHANGE_PREREQUISITE_UUIDS',\n  CHANGE_RELEASE = 'CHANGE_RELEASE',\n  CHANGE_TITLE = 'CHANGE_TITLE',\n  CHANGE_IS_VARIABLE_XP = 'CHANGE_VARIABLE_XP',\n  CHANGE_VIEW = 'CHANGE_VIEW',\n  CHANGE_XP = 'CHANGE_XP',\n  DELETE_ACHIEVEMENT = 'DELETE_ACHIEVEMENT',\n  DISCARD_CHANGES = 'DISCARD_CHANGES',\n  SAVE_CHANGES = 'SAVE_CHANGES'\n}\n\nexport type EditableCardAction =\n  | {\n      type: EditableCardActionType.CHANGE_CARD_BACKGROUND;\n      payload: string;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_DEADLINE;\n      payload: Date | undefined;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_GOAL_UUIDS;\n      payload: string[];\n    }\n  | {\n      type: EditableCardActionType.CHANGE_POSITION;\n      payload: number;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_PREREQUISITE_UUIDS;\n      payload: string[];\n    }\n  | {\n      type: EditableCardActionType.CHANGE_RELEASE;\n      payload: Date | undefined;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_TITLE;\n      payload: string;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_IS_VARIABLE_XP;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_VIEW;\n      payload: AchievementView;\n    }\n  | {\n      type: EditableCardActionType.CHANGE_XP;\n      payload: number;\n    }\n  | {\n      type: EditableCardActionType.DELETE_ACHIEVEMENT;\n    }\n  | {\n      type: EditableCardActionType.DISCARD_CHANGES;\n      payload: AchievementItem;\n    }\n  | {\n      type: EditableCardActionType.SAVE_CHANGES;\n    };\n\nexport type EditableCardState = {\n  editableAchievement: AchievementItem;\n  isDirty: boolean;\n};\n","import { Button, Dialog } from '@blueprintjs/core';\nimport { DatePicker } from '@blueprintjs/datetime';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useState } from 'react';\nimport { prettifyDate } from 'src/commons/achievement/utils/DateHelper';\n\ntype EditableDateProps = {\n  type: string;\n  date?: Date;\n  changeDate: (date?: Date) => void;\n};\n\nconst EditableDate: React.FC<EditableDateProps> = ({ type, date, changeDate }) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const toggleOpen = () => setOpen(!isOpen);\n\n  const hoverText = date === undefined ? `No ${type}` : `${prettifyDate(date)}`;\n\n  return (\n    <>\n      <Tooltip2 content={hoverText}>\n        <Button minimal={true} onClick={toggleOpen} outlined={true}>{`${type}`}</Button>\n      </Tooltip2>\n      <Dialog\n        isCloseButtonShown={false}\n        isOpen={isOpen}\n        onClose={toggleOpen}\n        style={{\n          background: '#fff',\n          maxWidth: 'max-content',\n          padding: '0.25em',\n          textAlign: 'center'\n        }}\n        title={`${type}`}\n      >\n        <DatePicker\n          onChange={changeDate}\n          timePickerProps={{ showArrowButtons: true }}\n          value={date}\n        />\n        <Button onClick={() => changeDate(undefined)} text={`Remove ${type}`} />\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditableDate;\n","import { Button, Dialog, EditableText } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useState } from 'react';\nimport { AchievementView } from 'src/features/achievement/AchievementTypes';\ntype EditableViewProps = {\n  changeView: (view: AchievementView) => void;\n  view: AchievementView;\n};\n\nconst EditableView: React.FC<EditableViewProps> = ({ changeView, view }) => {\n  const { coverImage, description, completionText } = view;\n\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const toggleOpen = () => setOpen(!isOpen);\n\n  const changeCoverImage = (coverImage: string) => changeView({ ...view, coverImage });\n\n  const changeDescription = (description: string) =>\n    changeView({ ...view, description: description });\n\n  const changeCompletionText = (completionText: string) =>\n    changeView({ ...view, completionText: completionText });\n\n  return (\n    <>\n      <Tooltip2 content=\"Edit View\">\n        <Button icon={IconNames.WIDGET_HEADER} onClick={toggleOpen} />\n      </Tooltip2>\n\n      <Dialog title=\"Edit View\" icon={IconNames.WIDGET_HEADER} isOpen={isOpen} onClose={toggleOpen}>\n        <div style={{ padding: '0 0.5em' }}>\n          <h3>Cover Image</h3>\n          <EditableText\n            multiline={true}\n            onChange={changeCoverImage}\n            placeholder=\"Enter cover image URL here\"\n            value={coverImage}\n          />\n          <h3>Description</h3>\n          <EditableText\n            multiline={true}\n            onChange={changeDescription}\n            placeholder=\"Enter description here\"\n            value={description}\n          />\n          <h3>Completion Text</h3>\n          <EditableText\n            multiline={true}\n            onChange={changeCompletionText}\n            placeholder=\"Enter completion text here\"\n            value={completionText}\n          />\n        </div>\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditableView;\n","import { EditableText, NumericInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport { cloneDeep } from 'lodash';\nimport React, { useContext, useMemo, useReducer, useState } from 'react';\n\nimport { AchievementContext } from '../../../../features/achievement/AchievementConstants';\nimport {\n  AchievementItem,\n  AchievementView\n} from '../../../../features/achievement/AchievementTypes';\nimport ItemDeleter from '../common/ItemDeleter';\nimport ItemSaver from '../common/ItemSaver';\nimport AchievementSettings from './AchievementSettings';\nimport AchievementUuidCopier from './AchievementUuidCopier';\nimport {\n  EditableCardAction as Action,\n  EditableCardActionType as ActionType,\n  EditableCardState as State\n} from './EditableCardTypes';\nimport EditableDate from './EditableDate';\nimport EditableView from './EditableView';\n\ntype EditableCardProps = {\n  uuid: string;\n  isNewAchievement: boolean;\n  releaseUuid: () => void;\n  removeCard: (uuid: string) => void;\n  requestPublish: () => void;\n};\n\nconst init = (achievement: AchievementItem): State => {\n  return {\n    editableAchievement: achievement,\n    isDirty: false\n  };\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.SAVE_CHANGES:\n      return {\n        ...state,\n        isDirty: false\n      };\n    case ActionType.DISCARD_CHANGES:\n      return init(action.payload);\n    case ActionType.DELETE_ACHIEVEMENT:\n      return {\n        ...state,\n        isDirty: false\n      };\n    case ActionType.CHANGE_CARD_BACKGROUND:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          cardBackground: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_DEADLINE:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          deadline: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_GOAL_UUIDS:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          goalUuids: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_POSITION:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          isTask: action.payload !== 0,\n          position: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_PREREQUISITE_UUIDS:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          prerequisiteUuids: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_RELEASE:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          release: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_TITLE:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          title: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_VIEW:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          view: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_XP:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          xp: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_IS_VARIABLE_XP:\n      return {\n        editableAchievement: {\n          ...state.editableAchievement,\n          isVariableXp: !state.editableAchievement.isVariableXp\n        },\n        isDirty: true\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditableCard: React.FC<EditableCardProps> = props => {\n  const { uuid, isNewAchievement, releaseUuid, removeCard, requestPublish } = props;\n\n  const inferencer = useContext(AchievementContext);\n  const achievement = inferencer.getAchievement(uuid);\n  const achievementClone = useMemo(() => cloneDeep(achievement), [achievement]);\n\n  const [state, dispatch] = useReducer(reducer, achievementClone, init);\n  const [isNew, setIsNew] = useState<boolean>(isNewAchievement);\n  const { editableAchievement, isDirty } = state;\n  const { cardBackground, deadline, release, title, view, xp } = editableAchievement;\n\n  const saveChanges = () => {\n    dispatch({ type: ActionType.SAVE_CHANGES });\n    inferencer.modifyAchievement(editableAchievement);\n    if (isNew) {\n      releaseUuid();\n      setIsNew(false);\n    }\n    requestPublish();\n  };\n\n  const discardChanges = () =>\n    dispatch({ type: ActionType.DISCARD_CHANGES, payload: achievementClone });\n\n  const deleteAchievement = () => {\n    dispatch({ type: ActionType.DELETE_ACHIEVEMENT });\n    inferencer.removeAchievement(uuid);\n    if (isNew) {\n      releaseUuid();\n      setIsNew(false);\n    }\n    removeCard(uuid);\n    requestPublish();\n  };\n\n  const changeCardBackground = (cardBackground: string) =>\n    dispatch({ type: ActionType.CHANGE_CARD_BACKGROUND, payload: cardBackground });\n\n  const changeDeadline = (deadline?: Date) =>\n    dispatch({ type: ActionType.CHANGE_DEADLINE, payload: deadline });\n\n  const changeGoalUuids = (goalUuids: string[]) => {\n    dispatch({ type: ActionType.CHANGE_GOAL_UUIDS, payload: goalUuids });\n  };\n\n  const changePosition = (position: number) =>\n    dispatch({ type: ActionType.CHANGE_POSITION, payload: position });\n\n  const changePrerequisiteUuids = (prerequisiteUuids: string[]) =>\n    dispatch({ type: ActionType.CHANGE_PREREQUISITE_UUIDS, payload: prerequisiteUuids });\n\n  const changeRelease = (release?: Date) =>\n    dispatch({ type: ActionType.CHANGE_RELEASE, payload: release });\n\n  const changeTitle = (title: string) =>\n    dispatch({ type: ActionType.CHANGE_TITLE, payload: title });\n\n  const changeView = (view: AchievementView) =>\n    dispatch({ type: ActionType.CHANGE_VIEW, payload: view });\n\n  const changeXp = (xp: number) => dispatch({ type: ActionType.CHANGE_XP, payload: xp });\n\n  const changeIsVariableXp = () => dispatch({ type: ActionType.CHANGE_IS_VARIABLE_XP });\n\n  return (\n    <li\n      className=\"editable-card\"\n      style={{\n        background: `url(${cardBackground}) center/cover`\n      }}\n    >\n      <div className=\"action-button\">\n        {isDirty ? (\n          <ItemSaver discardChanges={discardChanges} saveChanges={saveChanges} />\n        ) : (\n          <ItemDeleter deleteItem={deleteAchievement} item={title} />\n        )}\n      </div>\n\n      <div className=\"content\">\n        <h3 className=\"title\">\n          <EditableText onChange={changeTitle} placeholder=\"Enter your title here\" value={title} />\n        </h3>\n        <div className=\"xp\">\n          <Tooltip2 content=\"XP\">\n            <NumericInput\n              value={xp}\n              min={0}\n              allowNumericCharactersOnly={true}\n              leftIcon={IconNames.TRENDING_UP}\n              placeholder=\"XP\"\n              onValueChange={changeXp}\n            />\n          </Tooltip2>\n        </div>\n        <div className=\"details\">\n          <EditableDate changeDate={changeRelease} date={release} type=\"Release\" />\n          <EditableDate changeDate={changeDeadline} date={deadline} type=\"Deadline\" />\n          <AchievementUuidCopier uuid={uuid} />\n        </div>\n      </div>\n\n      <div className=\"content-button\">\n        <EditableView changeView={changeView} view={view} />\n        <AchievementSettings\n          changeCardBackground={changeCardBackground}\n          changeGoalUuids={changeGoalUuids}\n          changePosition={changePosition}\n          changePrerequisiteUuids={changePrerequisiteUuids}\n          changeIsVariableXp={changeIsVariableXp}\n          editableAchievement={editableAchievement}\n        />\n      </div>\n    </li>\n  );\n};\n\nexport default EditableCard;\n","import React, { useContext, useState } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\n\nimport AchievementAdder from './achievementEditor/AchievementAdder';\nimport EditableCard from './achievementEditor/EditableCard';\n\ntype AchievementEditorProps = {\n  requestPublish: () => void;\n};\n\nlet editableCards: JSX.Element[] = [];\n\nconst AchievementEditor: React.FC<AchievementEditorProps> = ({ requestPublish }) => {\n  const inferencer = useContext(AchievementContext);\n\n  /**\n   * newUuid helps us to ensure that only ONE achievement is added at any point of time.\n   *\n   * By default,  the newUuid is an empty string, which means currently no new achievement\n   * is being added and the admin is able to add a new achievement.\n   *\n   * Conversely, if the newUuid is not an empty string, this means currently an achievement\n   * is being added to the system and the admin is not allowed to add two achievements\n   * at one go. The newUuid holds the newly created achievement uuid until the new achievement\n   * is added into the inferencer.\n   */\n  const [newUuid, setNewUuid] = useState<string>('');\n  const allowNewUuid = newUuid === '';\n  const releaseUuid = () => setNewUuid('');\n\n  const removeCard = (uuid: string) => {\n    let idx = 0;\n    while (editableCards[idx].key !== uuid && idx < editableCards.length) {\n      idx++;\n    }\n    editableCards.splice(idx, 1);\n  };\n\n  const generateEditableCard = (achievementUuid: string, isNewAchievement: boolean) => (\n    <EditableCard\n      key={achievementUuid}\n      uuid={achievementUuid}\n      isNewAchievement={isNewAchievement}\n      releaseUuid={releaseUuid}\n      removeCard={removeCard}\n      requestPublish={requestPublish}\n    />\n  );\n\n  // load preexisting achievements from the inferencer\n  if (editableCards.length === 0) {\n    editableCards = inferencer\n      .listSortedAchievementUuids()\n      .map(uuid => generateEditableCard(uuid, false));\n  }\n\n  const addNewAchievement = (uuid: string) => {\n    setNewUuid(uuid);\n    // keep the new achievement on top by swapping it with the first achievement\n    editableCards[editableCards.length] = editableCards[0];\n    editableCards[0] = generateEditableCard(uuid, true);\n  };\n\n  return (\n    <div className=\"achievement-editor\">\n      <div className=\"command\">\n        <AchievementAdder allowNewUuid={allowNewUuid} setNewUuid={addNewAchievement} />\n      </div>\n      <ul className=\"achievement-container\">{editableCards}</ul>\n    </div>\n  );\n};\n\nexport default AchievementEditor;\n","import { Icon, IconName } from '@blueprintjs/core';\nimport React from 'react';\n\nimport { getFilterColor } from '../../features/achievement/AchievementConstants';\nimport { FilterStatus } from '../../features/achievement/AchievementTypes';\n\ntype AchievementFilterProps = {\n  filterState: [FilterStatus, any];\n  icon: IconName;\n  ownStatus: FilterStatus;\n};\n\nconst AchievementFilter: React.FC<AchievementFilterProps> = ({ filterState, icon, ownStatus }) => {\n  const [globalStatus, setGlobalStatus] = filterState;\n\n  return (\n    <div\n      className=\"filter\"\n      onClick={() => setGlobalStatus(ownStatus)}\n      style={{ color: getFilterColor(globalStatus, ownStatus) }}\n    >\n      <Icon icon={icon} iconSize={30} />\n      <p>{ownStatus}</p>\n    </div>\n  );\n};\n\nexport default AchievementFilter;\n","import React from 'react';\n\nimport Constants from '../../utils/Constants';\n\ntype AchievementMilestoneProps = {\n  studentXp: number;\n};\n\n// 36k XP = Level 37\nconst AchievementMilestone: React.FC<AchievementMilestoneProps> = ({ studentXp }) => {\n  return (\n    <div className=\"milestone\">\n      <h3>Your Total XP</h3>\n      <div className=\"user-xp\">{studentXp} XP</div>\n\n      <h3>CA Achievement Level</h3>\n      <div className=\"details\">\n        <div className=\"level-badge\">\n          <span className=\"level-icon\" />\n          <p>{Constants.caFulfillmentLevel}</p>\n        </div>\n        <p className=\"description\">Complete CS1101S CA Component</p>\n      </div>\n      <div className=\"footer\">\n        <p>Full CA level of {Constants.caFulfillmentLevel} is subjected to change.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AchievementMilestone;\n","import { ProgressBar } from '@blueprintjs/core';\nimport React, { useState } from 'react';\n\nimport { xpPerLevel } from '../../../features/achievement/AchievementConstants';\nimport Constants from '../../utils/Constants';\nimport AchievementMilestone from './AchievementMilestone';\n\ntype AchievementLevelProps = {\n  studentXp: number;\n};\n\nconst AchievementLevel: React.FC<AchievementLevelProps> = ({ studentXp }) => {\n  const [showMilestone, setShowMilestone] = useState<boolean>(false);\n  const displayMilestone = () => setShowMilestone(true);\n  const hideMilestone = () => setShowMilestone(false);\n\n  // start at level 1\n  const level = Math.floor(studentXp / xpPerLevel) + 1;\n  const progress = studentXp % xpPerLevel;\n  const progressFrac = progress / xpPerLevel;\n\n  return (\n    <div className=\"level\" onMouseEnter={displayMilestone} onMouseLeave={hideMilestone}>\n      <div className=\"level-badge\">\n        <span className=\"level-icon\" />\n        <p>{`Level ${level}`}</p>\n      </div>\n      <span className=\"level-progress\">\n        <ProgressBar\n          animate={false}\n          className=\"progress-bar\"\n          stripes={false}\n          value={progressFrac}\n        />\n        <p>\n          {progress} / {xpPerLevel} XP\n        </p>\n      </span>\n      {Constants.caFulfillmentLevel !== 0 && showMilestone && (\n        <AchievementMilestone studentXp={studentXp} />\n      )}\n    </div>\n  );\n};\n\nexport default AchievementLevel;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AchievementUser } from 'src/features/achievement/AchievementTypes';\n\nimport { FETCH_TOTAL_XP, FETCH_TOTAL_XP_ADMIN } from '../application/types/SessionTypes';\nimport { useTypedSelector } from '../utils/Hooks';\nimport AchievementLevel from './overview/AchievementLevel';\n\ntype AchievementOverviewProps = {\n  name: string;\n  userState: [AchievementUser | undefined, any];\n};\n\nconst AchievementOverview: React.FC<AchievementOverviewProps> = ({ name, userState }) => {\n  const [selectedUser] = userState;\n  const crid = selectedUser?.courseRegId;\n  const userCrid = useTypedSelector(store => store.session.courseRegId);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // If user is student, fetch assessment details from assessment route instead, as seen below\n    if (crid && crid !== userCrid) {\n      dispatch({ type: FETCH_TOTAL_XP_ADMIN, payload: crid });\n    } else {\n      dispatch({ type: FETCH_TOTAL_XP });\n    }\n  }, [crid, userCrid, dispatch]);\n\n  const studentXp = useTypedSelector(store => store.session.xp);\n\n  return (\n    <div className=\"achievement-overview\">\n      <AchievementLevel studentXp={studentXp} />\n      <h3>{name}</h3>\n    </div>\n  );\n};\n\nexport default AchievementOverview;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport { DeadlineColors } from '../../../features/achievement/AchievementConstants';\nimport { isExpired, prettifyDeadline, timeFromExpired } from '../utils/DateHelper';\n\ntype AchievementDeadlineProps = {\n  deadline?: Date;\n};\n\nconst twoDays = new Date(0, 0, 2).getTime() - new Date(0, 0, 0).getTime();\n\nconst AchievementDeadline: React.FC<AchievementDeadlineProps> = ({ deadline }) => {\n  // red deadline color for core achievements that are expiring in less than 2 days\n  const deadlineColor =\n    deadline !== undefined && !isExpired(deadline) && timeFromExpired(deadline) <= twoDays\n      ? DeadlineColors.RED\n      : DeadlineColors.BLACK;\n\n  return (\n    <div className=\"deadline\">\n      <Icon color={deadlineColor} icon={IconNames.STOPWATCH} />\n      <p style={{ color: deadlineColor }}>{prettifyDeadline(deadline)}</p>\n    </div>\n  );\n};\n\nexport default AchievementDeadline;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\ntype AchievementXpProps = {\n  isBonus: boolean;\n  xp: number;\n};\n\nconst stringifyXp = (xp: number, isBonus: boolean) => {\n  return (isBonus ? 'Total ' : '') + xp + ' XP';\n};\n\nconst AchievementXp: React.FC<AchievementXpProps> = ({ isBonus, xp }) => {\n  return (\n    <div className=\"xp\">\n      {xp !== 0 && (\n        <>\n          <Icon icon={IconNames.BANK_ACCOUNT} />\n          <p>{stringifyXp(xp, isBonus)}</p>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AchievementXp;\n","import { Icon, Intent, ProgressBar } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useContext } from 'react';\nimport { AchievementContext, handleGlow } from 'src/features/achievement/AchievementConstants';\n\nimport { AchievementStatus } from '../../features/achievement/AchievementTypes';\nimport AchievementDeadline from './card/AchievementDeadline';\nimport AchievementXp from './card/AchievementXp';\n\ntype AchievementCardProps = {\n  uuid: string;\n  focusState: [string, any];\n  isDropdownOpen?: boolean;\n  shouldRender: boolean;\n  toggleDropdown?: () => void;\n};\n\nconst AchievementCard: React.FC<AchievementCardProps> = props => {\n  const { uuid, focusState, isDropdownOpen, shouldRender, toggleDropdown } = props;\n\n  const inferencer = useContext(AchievementContext);\n\n  const [focusUuid, setFocusUuid] = focusState;\n\n  const { cardBackground, title } = inferencer.getAchievement(uuid);\n  const displayDeadline = inferencer.getDisplayDeadline(uuid);\n  const displayXp = inferencer.getDescendantXp(uuid);\n  const progressFrac = inferencer.getProgressFrac(uuid);\n  const status = inferencer.getStatus(uuid);\n\n  // Only task card with prerequisites has dropdown button\n  const hasDropdown =\n    isDropdownOpen !== undefined && inferencer.getImmediateChildren(uuid).size !== 0;\n\n  return (\n    <div\n      className=\"achievement-card\"\n      onClick={() => setFocusUuid(uuid)}\n      onClickCapture={toggleDropdown}\n      style={{\n        ...handleGlow(uuid, focusUuid),\n        opacity: shouldRender ? '100%' : '20%',\n        background: `url(${cardBackground}) center/cover`\n      }}\n    >\n      <div className=\"dropdown-button\">\n        {hasDropdown && (\n          <Icon icon={isDropdownOpen ? IconNames.CARET_DOWN : IconNames.CARET_RIGHT} />\n        )}\n      </div>\n\n      <div className=\"content\">\n        <div className=\"heading\">\n          <h3>{title.toUpperCase()}</h3>\n          {status === AchievementStatus.COMPLETED && (\n            <Icon icon={IconNames.CONFIRM} intent={Intent.SUCCESS} style={{ padding: '1em' }} />\n          )}\n        </div>\n\n        <div className=\"details\">\n          <AchievementDeadline deadline={displayDeadline} />\n          <AchievementXp isBonus={hasDropdown} xp={displayXp} />\n        </div>\n\n        <ProgressBar\n          animate={false}\n          className=\"progress\"\n          intent={progressFrac === 1 ? 'success' : 'primary'}\n          stripes={false}\n          value={progressFrac}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AchievementCard;\n","import { Collapse } from '@blueprintjs/core';\nimport React, { useContext, useState } from 'react';\n\nimport {\n  AchievementContext,\n  getAbilityColor\n} from '../../features/achievement/AchievementConstants';\nimport { AchievementStatus, FilterStatus } from '../../features/achievement/AchievementTypes';\nimport AchievementCard from './AchievementCard';\n\ntype AchievementTaskProps = {\n  uuid: string;\n  filterStatus: FilterStatus;\n  focusState: [string, any];\n};\n\nconst AchievementTask: React.FC<AchievementTaskProps> = ({ uuid, filterStatus, focusState }) => {\n  const inferencer = useContext(AchievementContext);\n  const prerequisiteUuids = [...inferencer.getImmediateChildren(uuid)];\n  const taskColor = getAbilityColor();\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState<boolean>(false);\n  const toggleDropdown = () => setIsDropdownOpen(!isDropdownOpen);\n\n  /**\n   * Checks whether the AchievementItem (can be a task or prereq) should be rendered\n   * based on the achievement dashboard filterStatus.\n   */\n  const isInFilter = (uuid: string): boolean => {\n    const status = inferencer.getStatus(uuid);\n\n    switch (filterStatus) {\n      case FilterStatus.ALL:\n        return true;\n      case FilterStatus.ACTIVE:\n        return status === AchievementStatus.ACTIVE;\n      case FilterStatus.COMPLETED:\n        return status === AchievementStatus.COMPLETED;\n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Checks whether the AchievementItem (can be a task or prereq) should be rendered\n   * based on the achievement dashboard filterStatus and whether it is a prereq.\n   */\n  const shouldRender = (uuid: string): boolean => {\n    const isPrerequisite = inferencer.isPrerequisite(uuid);\n\n    return !isPrerequisite && isInFilter(uuid);\n  };\n\n  /**\n   * Checks whether the AchievementItem has any prerequisite that\n   * should be rendered based on the achievement dashboard filterStatus.\n   *\n   * If there is at least 1 prerequisite that needs to be rendered,\n   * the whole AchievementTask will be rendered together.\n   */\n  const shouldRenderPrerequisites = (uuid: string) => {\n    const children = [...inferencer.getImmediateChildren(uuid)];\n    return children.reduce((canRender, prerequisite) => {\n      return canRender || isInFilter(prerequisite);\n    }, false);\n  };\n\n  /**\n   * If the main achievement or any of the prerequisites need to be rendered,\n   * the whole achievement task will be rendered\n   */\n  const shouldRenderTask = (uuid: string) => shouldRender(uuid) || shouldRenderPrerequisites(uuid);\n\n  return (\n    <>\n      {shouldRenderTask(uuid) && (\n        <li className=\"task\">\n          <AchievementCard\n            uuid={uuid}\n            focusState={focusState}\n            isDropdownOpen={isDropdownOpen}\n            shouldRender={isInFilter(uuid)}\n            toggleDropdown={toggleDropdown}\n          />\n          <Collapse isOpen={isDropdownOpen} keepChildrenMounted={true}>\n            <div className=\"prerequisite-container\">\n              {prerequisiteUuids.map(prerequisiteUuid => (\n                <div className=\"prerequisite\" key={prerequisiteUuid}>\n                  <div\n                    className=\"dropdown-lines\"\n                    style={{\n                      borderBottom: `1px solid ${taskColor}`,\n                      borderLeft: `1px solid ${taskColor}`\n                    }}\n                  ></div>\n                  <AchievementCard\n                    uuid={prerequisiteUuid}\n                    focusState={focusState}\n                    shouldRender={isInFilter(prerequisiteUuid)}\n                  />\n                </div>\n              ))}\n            </div>\n          </Collapse>\n        </li>\n      )}\n    </>\n  );\n};\n\nexport default AchievementTask;\n","// extracted by mini-css-extract-plugin\nexport default {\"assessment-feedback\":\"AchievementCommentCard_assessment-feedback__k-sBc\",\"feedback-list\":\"AchievementCommentCard_feedback-list__o20Gz\",\"assessment-comments\":\"AchievementCommentCard_assessment-comments__0xF7w\",\"question-header\":\"AchievementCommentCard_question-header__rBnJx\",\"box-comment\":\"AchievementCommentCard_box-comment__CXsWS\",\"xp\":\"AchievementCommentCard_xp__FQDH4\",\"to-assessment-button\":\"AchievementCommentCard_to-assessment-button__akAcI\"};","import React, { useMemo } from 'react';\nimport { useNavigate } from 'react-router';\nimport classes from 'src/styles/AchievementCommentCard.module.scss';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport { useTypedSelector } from '../utils/Hooks';\nimport { showWarningMessage } from '../utils/notifications/NotificationsHelper';\nimport { assessmentTypeLink } from '../utils/ParamParseHelper';\n\nconst AchievementCommentCard: React.FC<{\n  assessment: Assessment;\n  showToQuestion: boolean;\n}> = ({ assessment, showToQuestion }) => {\n  const navigate = useNavigate();\n  const courseId = useTypedSelector(store => store.session.courseId);\n  const toMission = useMemo(\n    () => (questionId: number) => {\n      if (!courseId) {\n        showWarningMessage('Course ID not found');\n        return;\n      }\n\n      const listingPath = `/courses/${courseId}/${assessmentTypeLink(assessment?.type)}`;\n      const assessmentWorkspacePath = listingPath + `/${assessment?.id.toString()}`;\n      navigate(assessmentWorkspacePath + `/${questionId}`);\n    },\n    [assessment?.id, assessment?.type, courseId, navigate]\n  );\n\n  return (\n    <div>\n      <h1 className={classes['assessment-feedback']}>Feedback</h1>\n      <div className={classes['feedback-list']}>\n        {assessment &&\n          assessment.questions.map((question, index) => (\n            <div className={classes['assessment-comments']} key={index}>\n              <span>\n                <h2 className={classes['question-header']}>{'Q' + (index + 1)}</h2>\n              </span>\n\n              <div className={classes['box-comment']}>\n                <p>{question.comments === null ? 'No Comments' : question.comments}</p>\n                <p className=\"xp\">{'XP: ' + question.xp + '/' + question.maxXp}</p>\n              </div>\n\n              {showToQuestion && (\n                <button\n                  className={classes['to-assessment-button']}\n                  onClick={() => toMission(index)}\n                >\n                  {'To Question'}\n                </button>\n              )}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AchievementCommentCard;\n","import React from 'react';\n\ntype AchievementViewCompletionProps = {\n  awardedXp: number;\n  completionText: string;\n};\n\nconst AchievementViewCompletion: React.FC<AchievementViewCompletionProps> = props => {\n  const { awardedXp, completionText } = props;\n\n  const paragraphs = completionText ? completionText.split('\\n') : [''];\n\n  return (\n    <div className=\"completion\">\n      {awardedXp > 0 && <h1>{`AWARDED ${awardedXp}XP`}</h1>}\n      {paragraphs.map((para, idx) => (\n        <p key={idx}>\n          {para}\n          <br />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default AchievementViewCompletion;\n","import { ProgressBar } from '@blueprintjs/core';\nimport React from 'react';\n\nimport { AchievementGoal } from '../../../features/achievement/AchievementTypes';\n\ntype AchievementViewGoalProps = {\n  goals: AchievementGoal[];\n};\n\n/**\n * Maps an array of goalUuid to Goal component\n *\n * @param goal an array of goalUuid\n */\nconst mapGoalToJSX = (goal: AchievementGoal) => {\n  const { uuid, text, targetCount, count, completed } = goal;\n  const frac = Math.min(targetCount === 0 ? 0 : count / targetCount, 1);\n  return (\n    <div className=\"goal\" key={uuid}>\n      <div className=\"goal-badge\">\n        <span className=\"goal-icon\" />\n        <p>\n          {count} / {targetCount}\n        </p>\n      </div>\n      <div className=\"goal-progress\">\n        <p>{text}</p>\n        <ProgressBar\n          animate={false}\n          className=\"progress\"\n          intent={completed ? 'success' : undefined}\n          stripes={false}\n          value={frac}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst AchievementViewGoal: React.FC<AchievementViewGoalProps> = ({ goals }) => {\n  return (\n    <>\n      <h1 className=\"progress-header\">Progress</h1>\n      {goals.map(goal => mapGoalToJSX(goal))}\n    </>\n  );\n};\n\nexport default AchievementViewGoal;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useContext, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  AchievementContext,\n  getAbilityBackground,\n  getAbilityGlow\n} from '../../features/achievement/AchievementConstants';\nimport { AchievementStatus, AchievementUser } from '../../features/achievement/AchievementTypes';\nimport { FETCH_ASSESSMENT, FETCH_ASSESSMENT_ADMIN } from '../application/types/SessionTypes';\nimport { Assessment, FETCH_ASSESSMENT_OVERVIEWS } from '../assessment/AssessmentTypes';\nimport { useTypedSelector } from '../utils/Hooks';\nimport AchievementCommentCard from './AchievementCommentCard';\nimport { prettifyDate } from './utils/DateHelper';\nimport AchievementViewCompletion from './view/AchievementViewCompletion';\nimport AchievementViewGoal from './view/AchievementViewGoal';\n\ntype AchievementViewProps = {\n  focusUuid: string;\n  assessments?: Map<number, Assessment>;\n  userState?: [AchievementUser | undefined, any];\n};\n\nconst AchievementView: React.FC<AchievementViewProps> = ({ focusUuid, userState }) => {\n  const assessmentId = !Number.isNaN(+focusUuid) && +focusUuid !== 0 ? +focusUuid : undefined;\n  let courseRegId: number | undefined;\n\n  if (userState) {\n    const [selectedUser] = userState!;\n    courseRegId = selectedUser?.courseRegId;\n  }\n  const userCrid = useTypedSelector(store => store.session.courseRegId);\n  const isAdminView: boolean = courseRegId !== undefined && courseRegId !== userCrid;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({ type: FETCH_ASSESSMENT_OVERVIEWS });\n    if (!assessmentId) {\n      return;\n    }\n    if (isAdminView) {\n      // Fetch selected user's assessment from admin route\n      dispatch({ type: FETCH_ASSESSMENT_ADMIN, payload: { assessmentId, courseRegId } });\n    } else {\n      // If user is student, fetch assessment details from assessment route instead, as seen below\n      dispatch({ type: FETCH_ASSESSMENT, payload: { assessmentId } });\n    }\n  }, [dispatch, assessmentId, courseRegId, isAdminView]);\n\n  const inferencer = useContext(AchievementContext);\n  const assessments = useTypedSelector(store => store.session.assessments);\n  const selectedAssessment: Assessment | undefined = assessments.get(assessmentId!);\n  const allAssessmentConfigs = useTypedSelector(store => store.session.assessmentOverviews) ?? [];\n  const selectedAssessmentConfig = allAssessmentConfigs.find(config => config.id === assessmentId);\n\n  if (focusUuid === '') {\n    return (\n      <div className=\"no-view\">\n        <Icon icon={IconNames.MOUNTAIN} iconSize={60} />\n        <h2>Select an achievement</h2>\n      </div>\n    );\n  }\n  const achievement = inferencer.getAchievement(focusUuid);\n  const { deadline, title, view } = achievement;\n  const { coverImage, completionText, description } = view;\n  const awardedXp = inferencer.getAchievementXp(focusUuid);\n  const goals = inferencer.listGoals(focusUuid);\n  const status = inferencer.getStatus(focusUuid);\n\n  const descriptionParagraphs = description ? description.split('\\n') : [''];\n\n  return (\n    <div className=\"view\" style={{ ...getAbilityGlow(), ...getAbilityBackground() }}>\n      <div\n        className=\"cover\"\n        style={{\n          background: `rgba(0, 0, 0, 0.5) url(${coverImage}) center/cover`,\n          backgroundBlendMode: `darken`\n        }}\n      >\n        <h1>{title.toUpperCase()}</h1>\n        {deadline && <p>{`Deadline: ${prettifyDate(deadline)}`}</p>}\n        <span className=\"description\">\n          {descriptionParagraphs.map((para, idx) => (\n            <p key={idx}>\n              {para}\n              <br />\n            </p>\n          ))}\n        </span>\n      </div>\n\n      {status === AchievementStatus.COMPLETED &&\n        selectedAssessment &&\n        selectedAssessmentConfig &&\n        selectedAssessmentConfig.isManuallyGraded && (\n          // TODO: showToQuestion is currently used to disable the goto question button for admins,\n          // as it has not been integrated with the grading view yet\n          <AchievementCommentCard assessment={selectedAssessment} showToQuestion={!isAdminView} />\n        )}\n\n      {goals.length > 0 && (\n        <>\n          <AchievementViewGoal goals={goals} />\n          {status === AchievementStatus.COMPLETED && (\n            <>\n              <hr />\n              <AchievementViewCompletion awardedXp={awardedXp} completionText={completionText} />\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AchievementView;\n","import moment from 'moment';\n\nimport {\n  cardBackgroundUrl,\n  coverImageUrl\n} from '../../../features/achievement/AchievementConstants';\nimport { GoalType } from '../../../features/achievement/AchievementTypes';\nimport { AssessmentConfiguration, AssessmentOverview } from '../../assessment/AssessmentTypes';\nimport AchievementInferencer from './AchievementInferencer';\nimport { isExpired, isReleased } from './DateHelper';\n\nfunction assessmentCompleted(assessmentOverview: AssessmentOverview): boolean {\n  return (\n    assessmentOverview.gradingStatus === 'graded' ||\n    (!assessmentOverview.isManuallyGraded && assessmentOverview.status === 'submitted')\n  );\n}\n\nfunction insertFakeAchievements(\n  assessmentOverviews: AssessmentOverview[],\n  assessmentConfigs: AssessmentConfiguration[],\n  inferencer: AchievementInferencer\n) {\n  const sortedOverviews = [...assessmentOverviews].sort((overview1, overview2) =>\n    moment(overview1.closeAt).diff(moment(overview2.closeAt))\n  );\n  const length = assessmentOverviews.length;\n\n  const assessmentTypes = assessmentConfigs.map(config => config.type);\n\n  const categorisedUuids: string[][] = assessmentTypes.map(_ => []);\n\n  sortedOverviews.forEach((assessmentOverview, idx) => {\n    // Reduce clutter for achievements that cannot be earned at that point\n    if (\n      !isReleased(new Date(assessmentOverview.openAt)) ||\n      (isExpired(new Date(assessmentOverview.closeAt)) && assessmentOverview.status !== 'submitted')\n    ) {\n      return;\n    }\n    const idString = assessmentOverview.id.toString();\n\n    if (!inferencer.hasAchievement(idString)) {\n      // Goal for assessment submission\n      inferencer.insertFakeGoalDefinition(\n        {\n          uuid: idString + '0',\n          text: `Submitted ${assessmentOverview.title}`,\n          achievementUuids: [idString],\n          meta: {\n            type: GoalType.ASSESSMENT,\n            assessmentNumber: assessmentOverview.id,\n            requiredCompletionFrac: 0\n          }\n        },\n        assessmentOverview.status === 'submitted'\n      );\n\n      // goal for assessment grading\n      if (assessmentOverview.isManuallyGraded) {\n        inferencer.insertFakeGoalDefinition(\n          {\n            uuid: idString + '1',\n            text: `Graded ${assessmentOverview.title}`,\n            achievementUuids: [idString],\n            meta: {\n              type: GoalType.ASSESSMENT,\n              assessmentNumber: assessmentOverview.id,\n              requiredCompletionFrac: 0\n            }\n          },\n          assessmentOverview.gradingStatus === 'graded'\n        );\n      }\n\n      inferencer.insertFakeAchievement({\n        uuid: idString,\n        title: assessmentOverview.title,\n        xp: assessmentCompleted(assessmentOverview)\n          ? assessmentOverview.xp\n          : assessmentOverview.maxXp,\n        isVariableXp: false,\n        deadline: new Date(assessmentOverview.closeAt),\n        release: new Date(assessmentOverview.openAt),\n        isTask:\n          assessmentOverview.isPublished === undefined ? false : assessmentOverview.isPublished,\n        position: idx - length - 100, // assessment closest to expiring on top\n        prerequisiteUuids: [],\n        goalUuids: !assessmentOverview.isManuallyGraded\n          ? [idString + '0']\n          : [idString + '0', idString + '1'], // need to create a mock completed goal to reference to be considered complete\n        cardBackground: `${cardBackgroundUrl}/default.png`,\n        view: {\n          coverImage: assessmentOverview.coverImage,\n          description: assessmentOverview.shortSummary,\n          completionText: `XP: ${assessmentOverview.xp} / ${assessmentOverview.maxXp}`\n        }\n      });\n\n      // if completed, add the uuid into the appropriate array\n      if (assessmentCompleted(assessmentOverview)) {\n        assessmentTypes.forEach((type, idx) => {\n          if (type === assessmentOverview.type) {\n            categorisedUuids[idx].push(idString);\n          }\n        });\n      }\n    }\n  });\n\n  // the dropdowns appear below the incomplete assessments, in the order missions, quests, path, contests\n  // will not appear if there are no completed assessments of that type\n  categorisedUuids.forEach((uuids, idx) => {\n    const assessmentType = assessmentTypes[idx];\n    uuids.length > 0 &&\n      inferencer.insertFakeAchievement({\n        uuid: assessmentType,\n        title: 'Completed ' + assessmentType,\n        xp: 0,\n        isVariableXp: false,\n        deadline: undefined,\n        release: undefined,\n        isTask: true,\n        position: -1 - idx, // negative number to ensure that they stay on top\n        prerequisiteUuids: uuids,\n        goalUuids: [],\n        cardBackground: `${cardBackgroundUrl}/default.png`,\n        view: {\n          coverImage: `${coverImageUrl}/default.png`,\n          description: 'Your completed ' + assessmentType + ' are listed here!',\n          completionText: ''\n        }\n      });\n  });\n}\n\nexport default insertFakeAchievements;\n","import { IconNames } from '@blueprintjs/icons';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport { useSession, useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport AchievementFilter from '../../../commons/achievement/AchievementFilter';\nimport AchievementManualEditor from '../../../commons/achievement/AchievementManualEditor';\nimport AchievementOverview from '../../../commons/achievement/AchievementOverview';\nimport AchievementTask from '../../../commons/achievement/AchievementTask';\nimport AchievementView from '../../../commons/achievement/AchievementView';\nimport AchievementInferencer from '../../../commons/achievement/utils/AchievementInferencer';\nimport insertFakeAchievements from '../../../commons/achievement/utils/InsertFakeAchievements';\nimport { fetchAssessmentOverviews } from '../../../commons/application/actions/SessionActions';\nimport {\n  getAchievements,\n  getGoals,\n  getOwnGoals,\n  getUserAssessmentOverviews,\n  getUsers,\n  updateGoalProgress\n} from '../../../features/achievement/AchievementActions';\nimport { AchievementContext } from '../../../features/achievement/AchievementConstants';\nimport {\n  AchievementUser,\n  FilterStatus,\n  GoalProgress\n} from '../../../features/achievement/AchievementTypes';\n\n/**\n * Generates <AchievementTask /> components\n *\n * @param taskUuids an array of achievementUuid\n * @param filterStatus the dashboard filter status\n * @param focusState the focused achievement state\n */\nexport const generateAchievementTasks = (\n  taskUuids: string[],\n  filterStatus: FilterStatus,\n  focusState: [string, any]\n) =>\n  taskUuids.map(taskUuid => (\n    <AchievementTask\n      key={taskUuid}\n      uuid={taskUuid}\n      filterStatus={filterStatus}\n      focusState={focusState}\n    />\n  ));\n\nconst AchievementDashboard: React.FC = () => {\n  // default nothing selected\n  const userIdState = useState<AchievementUser | undefined>(undefined);\n  const [selectedUser] = userIdState;\n\n  const {\n    group,\n    name,\n    role,\n    assessmentOverviews,\n    assessmentConfigurations: assessmentConfigs\n  } = useSession();\n\n  const { assessmentOverviews: achievementAssessmentOverviews, users } = useTypedSelector(\n    state => state.achievement\n  );\n  const inferencer = useTypedSelector(\n    state => new AchievementInferencer(state.achievement.achievements, state.achievement.goals)\n  );\n\n  const dispatch = useDispatch();\n  const {\n    handleFetchAssessmentOverviews,\n    handleGetAchievements,\n    handleGetGoals,\n    handleGetOwnGoals,\n    handleGetUserAssessmentOverviews,\n    handleGetUsers,\n    handleUpdateGoalProgress\n  } = useMemo(() => {\n    return {\n      handleFetchAssessmentOverviews: () => dispatch(fetchAssessmentOverviews()),\n      handleGetAchievements: () => dispatch(getAchievements()),\n      handleGetGoals: (studentCourseRegId: number) => dispatch(getGoals(studentCourseRegId)),\n      handleGetOwnGoals: () => dispatch(getOwnGoals()),\n      handleGetUserAssessmentOverviews: (studentCourseRegId: number) =>\n        dispatch(getUserAssessmentOverviews(studentCourseRegId)),\n      handleGetUsers: () => dispatch(getUsers()),\n      handleUpdateGoalProgress: (studentCourseRegId: number, progress: GoalProgress) =>\n        dispatch(updateGoalProgress(studentCourseRegId, progress))\n    };\n  }, [dispatch]);\n\n  /**\n   * Fetch the latest achievements and goals from backend when the page is rendered\n   */\n  useEffect(() => {\n    selectedUser ? handleGetGoals(selectedUser.courseRegId) : handleGetOwnGoals();\n\n    selectedUser\n      ? handleGetUserAssessmentOverviews(selectedUser.courseRegId)\n      : handleFetchAssessmentOverviews();\n\n    handleGetAchievements();\n  }, [\n    handleFetchAssessmentOverviews,\n    handleGetAchievements,\n    handleGetGoals,\n    handleGetOwnGoals,\n    handleGetUserAssessmentOverviews,\n    selectedUser\n  ]);\n\n  const userAssessmentOverviews = selectedUser\n    ? achievementAssessmentOverviews\n    : assessmentOverviews;\n\n  // Inserts assessment achievements for each assessment retrieved\n  // Note that assessmentConfigs is updated when the page loads (see Application.tsx)\n  userAssessmentOverviews &&\n    assessmentConfigs &&\n    insertFakeAchievements(userAssessmentOverviews, assessmentConfigs, inferencer);\n\n  const filterState = useState<FilterStatus>(FilterStatus.ALL);\n  const [filterStatus] = filterState;\n\n  /**\n   * Marks the achievement uuid that is currently on focus (selected)\n   * If an achievement is focused, the cards glow and dashboard displays the AchievementView\n   */\n  const focusState = useState<string>('');\n  const [focusUuid, setFocusUuid] = focusState;\n\n  const hiddenState = useState<boolean>(false);\n  const [seeHidden] = hiddenState;\n\n  // Resets AchievementView when the selected user changes\n  useEffect(() => {\n    setFocusUuid('');\n  }, [selectedUser, setFocusUuid]);\n\n  return (\n    <AchievementContext.Provider value={inferencer}>\n      <div className=\"AchievementDashboard\">\n        <AchievementOverview\n          name={selectedUser ? selectedUser.name || selectedUser.username : name || 'User'}\n          userState={userIdState}\n        />\n        {role && role !== Role.Student && (\n          <AchievementManualEditor\n            userState={userIdState}\n            hiddenState={hiddenState}\n            studio={group || 'Staff'}\n            users={users}\n            getUsers={handleGetUsers}\n            updateGoalProgress={handleUpdateGoalProgress}\n          />\n        )}\n\n        <div className=\"achievement-main\">\n          <div className=\"filter-container\">\n            <AchievementFilter\n              filterState={filterState}\n              icon={IconNames.GLOBE}\n              ownStatus={FilterStatus.ALL}\n            />\n            <AchievementFilter\n              filterState={filterState}\n              icon={IconNames.LOCATE}\n              ownStatus={FilterStatus.ACTIVE}\n            />\n            <AchievementFilter\n              filterState={filterState}\n              icon={IconNames.ENDORSED}\n              ownStatus={FilterStatus.COMPLETED}\n            />\n          </div>\n\n          <ul className=\"task-container\">\n            {generateAchievementTasks(\n              role === Role.Student || !seeHidden\n                ? inferencer.listSortedReleasedTaskUuids()\n                : inferencer.listAllSortedAchievementUuids(),\n              filterStatus,\n              focusState\n            )}\n          </ul>\n\n          <div className=\"view-container\">\n            <AchievementView focusUuid={focusUuid} userState={userIdState} />\n          </div>\n        </div>\n      </div>\n    </AchievementContext.Provider>\n  );\n};\n\nexport default AchievementDashboard;\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useContext, useReducer, useState } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\nimport { FilterStatus } from 'src/features/achievement/AchievementTypes';\nimport { generateAchievementTasks } from 'src/pages/achievement/subcomponents/AchievementDashboard';\n\nimport AchievementView from '../AchievementView';\n\ntype AchievementPreviewProps = {\n  awaitPublish: boolean;\n  publishChanges: () => void;\n};\n\nconst AchievementPreview: React.FC<AchievementPreviewProps> = ({\n  awaitPublish,\n  publishChanges\n}) => {\n  const inferencer = useContext(AchievementContext);\n\n  // Show AchievementView when viewMode is true, otherwise show AchievementTask\n  const [viewMode, toggleMode] = useReducer(mode => !mode, false);\n\n  /**\n   * Marks the achievement uuid that is currently on focus (selected)\n   * If an achievement is focused, the cards glow and dashboard displays the AchievementView\n   */\n  const focusState = useState<string>('');\n  const [focusUuid] = focusState;\n\n  return (\n    <div className=\"achievement-preview\">\n      <div className=\"command\">\n        <Button\n          className=\"command-button\"\n          icon={viewMode && IconNames.ARROW_LEFT}\n          rightIcon={!viewMode && IconNames.ARROW_RIGHT}\n          text={viewMode ? 'Task' : 'View'}\n          onClick={toggleMode}\n        />\n        {awaitPublish && (\n          <Button\n            className=\"command-button\"\n            icon={IconNames.CLOUD_UPLOAD}\n            intent=\"primary\"\n            text=\"Publish Changes\"\n            onClick={publishChanges}\n          />\n        )}\n      </div>\n      {viewMode ? (\n        <div className=\"preview-container\">\n          <AchievementView focusUuid={focusUuid} />\n        </div>\n      ) : (\n        <ul className=\"preview-container\">\n          {generateAchievementTasks(inferencer.listSortedTaskUuids(), FilterStatus.ALL, focusState)}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AchievementPreview;\n","import { GoalDefinition, GoalMeta } from 'src/features/achievement/AchievementTypes';\n\nexport enum EditableGoalActionType {\n  CHANGE_META = 'CHANGE_META',\n  CHANGE_TEXT = 'CHANGE_TEXT',\n  DELETE_GOAL = 'DELETE_GOAL',\n  DISCARD_CHANGES = 'DISCARD_CHANGES',\n  SAVE_CHANGES = 'SAVE_CHANGES'\n}\n\nexport type EditableGoalAction =\n  | {\n      type: EditableGoalActionType.CHANGE_META;\n      payload: GoalMeta;\n    }\n  | {\n      type: EditableGoalActionType.CHANGE_TEXT;\n      payload: string;\n    }\n  | {\n      type: EditableGoalActionType.DELETE_GOAL;\n    }\n  | {\n      type: EditableGoalActionType.DISCARD_CHANGES;\n      payload: GoalDefinition;\n    }\n  | {\n      type: EditableGoalActionType.SAVE_CHANGES;\n    };\n\nexport type EditableGoalState = {\n  editableGoal: GoalDefinition;\n  isDirty: boolean;\n};\n","import {\n  AchievementGoal,\n  EventType,\n  GoalDefinition,\n  GoalMeta,\n  GoalProgress,\n  GoalType\n} from 'src/features/achievement/AchievementTypes';\n\nexport const metaTemplate = (type: GoalType): GoalMeta => {\n  switch (type) {\n    case GoalType.ASSESSMENT:\n      return {\n        type: GoalType.ASSESSMENT,\n        assessmentNumber: 0,\n        requiredCompletionFrac: 0\n      };\n    case GoalType.BINARY:\n      return {\n        type: GoalType.BINARY,\n        condition: false,\n        targetCount: 1\n      };\n    case GoalType.MANUAL:\n      return {\n        type: GoalType.MANUAL,\n        targetCount: 1\n      };\n    case GoalType.EVENT:\n      return {\n        type: GoalType.EVENT,\n        eventNames: [EventType.RUN_CODE],\n        targetCount: 1,\n        release: undefined,\n        deadline: undefined,\n        observeFrom: undefined,\n        observeTo: undefined\n      };\n  }\n};\n\nexport const goalDefinitionTemplate: GoalDefinition = {\n  uuid: '',\n  text: 'Goal Text Here',\n  achievementUuids: [],\n  meta: metaTemplate(GoalType.MANUAL)\n};\n\nconst goalProgressTemplate: GoalProgress = {\n  uuid: '',\n  count: 0,\n  targetCount: 1,\n  completed: false\n};\n\nexport const goalTemplate: AchievementGoal = {\n  ...goalDefinitionTemplate,\n  ...goalProgressTemplate\n};\n","import { NumericInput } from '@blueprintjs/core';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { AssessmentMeta, GoalMeta } from 'src/features/achievement/AchievementTypes';\n\ntype EditableAssessmentMetaProps = {\n  assessmentMeta: AssessmentMeta;\n  changeMeta: (meta: GoalMeta) => void;\n};\n\nconst EditableAssessmentMeta: React.FC<EditableAssessmentMetaProps> = props => {\n  const { assessmentMeta, changeMeta } = props;\n  const { assessmentNumber, requiredCompletionFrac } = assessmentMeta;\n\n  const changeAssessmentNumber = (assessmentNumber: number) =>\n    changeMeta({ ...assessmentMeta, assessmentNumber: assessmentNumber });\n\n  const changeRequiredCompletion = (requiredCompletion: number) => {\n    const requiredCompletionFrac = requiredCompletion / 100;\n    changeMeta({ ...assessmentMeta, requiredCompletionFrac: requiredCompletionFrac });\n  };\n\n  return (\n    <>\n      <Tooltip2 content=\"Assessment Number\">\n        <NumericInput\n          allowNumericCharactersOnly={true}\n          onValueChange={changeAssessmentNumber}\n          placeholder=\"Enter assessment number here\"\n          value={assessmentNumber}\n        />\n      </Tooltip2>\n      <Tooltip2 content=\"Required Completion Percentage\">\n        <NumericInput\n          allowNumericCharactersOnly={true}\n          max={100}\n          min={0}\n          onValueChange={changeRequiredCompletion}\n          placeholder=\"Enter required completion percentage here\"\n          rightElement={<p>%</p>}\n          value={requiredCompletionFrac * 100}\n        />\n      </Tooltip2>\n    </>\n  );\n};\n\nexport default EditableAssessmentMeta;\n","export type BooleanExpression = AndExpression | OrExpression | Conditional | false;\n\ninterface AndExpression {\n  type: 'AND';\n  operands: BooleanExpression[];\n}\n\ninterface OrExpression {\n  type: 'OR';\n  operands: BooleanExpression[];\n}\n\ntype Conditional =\n  | AchievementConditional\n  | AssessmentGradingConditional\n  | AssessmentSubmissionConditional\n  | GenericConditional;\n\nexport enum EventTypes {\n  ACHIEVEMENT = 'achievement',\n  ASSESSMENT_GRADING = 'assessment-grading',\n  ASSESSMENT_SUBMISSION = 'assessment-submission'\n}\n\ninterface ConditionalBase {\n  event: EventTypes;\n}\n\ninterface GenericConditional extends ConditionalBase {\n  condition?: (evt: any) => boolean;\n  restriction?: string;\n}\n\ninterface AchievementConditional extends ConditionalBase {\n  event: EventTypes.ACHIEVEMENT;\n  restriction: string;\n}\n\ninterface AssessmentGradingConditional extends ConditionalBase {\n  event: EventTypes.ASSESSMENT_GRADING;\n  restriction: string;\n}\n\ninterface AssessmentSubmissionConditional extends ConditionalBase {\n  event: EventTypes.ASSESSMENT_SUBMISSION;\n  restriction: string;\n}\n\nexport function AND(...operands: BooleanExpression[]): BooleanExpression {\n  return {\n    type: 'AND',\n    operands\n  };\n}\n\nexport function OR(...operands: BooleanExpression[]): BooleanExpression {\n  return {\n    type: 'OR',\n    operands\n  };\n}\n","import { Button, EditableText, MenuItem, NumericInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React from 'react';\nimport { BinaryMeta, GoalMeta } from 'src/features/achievement/AchievementTypes';\nimport { AND, BooleanExpression, OR } from 'src/features/achievement/ExpressionTypes';\n\n/**\n * Possible extension: event should be a select of type EventTypes (import from ExpressionTypes)\n * This is very much possible, but the possible false value in BooleanExpression really prevents it\n * Why is this even a possible boolean expression? why would anyone ever use false?\n */\n\ntype EditableBinaryMetaProps = {\n  binaryMeta: BinaryMeta;\n  changeMeta: (meta: GoalMeta) => void;\n};\n\ntype Joiner = 'AND' | 'OR';\nconst JoinerSelect = Select.ofType<Joiner>();\nconst joinerRenderer: ItemRenderer<Joiner> = (joiner, { handleClick }) => (\n  <MenuItem key={joiner} onClick={handleClick} text={joiner} />\n);\n\n// Takes the current condition, splits it into an array of strings\nconst conditionSplitter = (condition: BooleanExpression): string[] => {\n  // only OR or AND Expressions have type property\n  if (typeof condition === 'object' && 'type' in condition) {\n    const { type, operands } = condition;\n    const len = operands.length;\n    const conditions = [];\n    // make conditions [cond1, joiner, cond2, joiner, ..., condn]\n    for (let i = 0; i < len; i++) {\n      conditions.push(conditionSplitter(operands[i]));\n      if (i !== len - 1) {\n        conditions.push(type);\n      }\n    }\n    // each recursive call flattens itself, so max depth is always 1\n    return conditions.flat();\n  } else {\n    return [JSON.stringify(condition)];\n  }\n};\n\nconst EditableBinaryMeta: React.FC<EditableBinaryMetaProps> = ({ binaryMeta, changeMeta }) => {\n  const { condition, targetCount } = binaryMeta;\n\n  const joiners: string[] = [];\n  const conditions: string[] = [];\n  const condArray: string[] = conditionSplitter(condition);\n  for (let i = 0; i < condArray.length; i++) {\n    if (i % 2 === 0) {\n      conditions[conditions.length] = condArray[i];\n    } else {\n      joiners[joiners.length] = condArray[i];\n    }\n  }\n\n  // Joins the conditions array, and changes the goalMeta\n  const changeCondition = () => {\n    // find the first joiner, join the left and right\n    // repeat until no more joiners left\n    let condition = JSON.parse(conditions[0]);\n    for (let i = 1; i < conditions.length; i++) {\n      if (joiners[i - 1] === 'AND') {\n        condition = AND(condition, JSON.parse(conditions[i]));\n      } else {\n        condition = OR(condition, JSON.parse(conditions[i]));\n      }\n    }\n    changeMeta({ ...binaryMeta, condition: condition });\n  };\n\n  const changeTargetCount = (targetCount: number) =>\n    changeMeta({ ...binaryMeta, targetCount: targetCount });\n\n  // Adds the and/or, adds the condition to be edited\n  const addCondition = () => {\n    joiners.push('AND');\n    conditions.push('{\"event\":\"\", \"restriction\":\"\"}');\n    changeCondition();\n  };\n\n  const changeConditionArray = (cond: string, idx: number) => {\n    conditions[idx] = cond;\n    changeCondition();\n  };\n\n  const changeJoinerArray = (joiner: Joiner, idx: number) => {\n    joiners[idx] = joiner;\n    changeCondition();\n  };\n\n  const deleteCondition = (idx: number) => {\n    for (let i = idx; i < conditions.length - 1; i++) {\n      // bring everything forward\n      conditions[i] = conditions[i + 1];\n      joiners[i] = joiners[i + 1];\n    }\n    conditions.length = conditions.length - 1;\n    joiners.length = joiners.length - 1;\n    changeCondition();\n  };\n\n  // Generates the components for editing conditions\n  const generateConditions = () => {\n    return condArray.map((op: string, idx: number) => (\n      <div key={idx}>\n        {\n          // even idx is condition, odd is joiner\n          idx % 2 === 0 ? (\n            // the text to change the condition\n            <>\n              <Tooltip2 content=\"Condition\">\n                <EditableText\n                  onChange={value => changeConditionArray(value, idx / 2)}\n                  multiline={true}\n                  placeholder=\"Enter condition here\"\n                  value={op}\n                />\n              </Tooltip2>\n              {\n                // should only be deleteable if not the only condition\n                conditions.length > 1 && (\n                  <Tooltip2 content=\"Delete Condition\">\n                    <Button intent=\"danger\" icon=\"trash\" onClick={() => deleteCondition(idx)} />\n                  </Tooltip2>\n                )\n              }\n            </>\n          ) : (\n            // the button to choose the joiner to use\n            <Tooltip2 content=\"And/Or\">\n              <JoinerSelect\n                filterable={false}\n                itemRenderer={joinerRenderer}\n                items={['AND', 'OR']}\n                onItemSelect={value => changeJoinerArray(value, (idx - 1) / 2)}\n              >\n                <Button minimal={true} outlined={true} text={op} />\n              </JoinerSelect>\n            </Tooltip2>\n          )\n        }\n      </div>\n    ));\n  };\n\n  return (\n    <>\n      <Tooltip2 content=\"Target Count\">\n        <NumericInput\n          allowNumericCharactersOnly={true}\n          leftIcon={IconNames.BANK_ACCOUNT}\n          min={0}\n          onValueChange={changeTargetCount}\n          placeholder=\"Enter target count here\"\n          value={targetCount}\n        />\n      </Tooltip2>\n      {generateConditions()}\n      <br />\n      <Button minimal={true} outlined={true} text=\"Add Condition\" onClick={addCondition} />\n    </>\n  );\n};\n\nexport default EditableBinaryMeta;\n","import { Button, Dialog } from '@blueprintjs/core';\nimport { DatePicker } from '@blueprintjs/datetime';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useState } from 'react';\nimport { prettifyDate } from 'src/commons/achievement/utils/DateHelper';\n\ntype EditableDateProps = {\n  type: string;\n  date?: Date;\n  changeDate: (date?: Date) => void;\n};\n\nconst EditableDate: React.FC<EditableDateProps> = ({ type, date, changeDate }) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const toggleOpen = () => setOpen(!isOpen);\n\n  const hoverText = date === undefined ? `No ${type}` : `${prettifyDate(date)}`;\n\n  return (\n    <>\n      <Tooltip2 content={hoverText}>\n        <Button minimal={true} onClick={toggleOpen} outlined={true}>{`${type}`}</Button>\n      </Tooltip2>\n      <Dialog\n        isCloseButtonShown={false}\n        isOpen={isOpen}\n        onClose={toggleOpen}\n        style={{\n          background: '#fff',\n          maxWidth: 'max-content',\n          padding: '0.25em',\n          textAlign: 'center'\n        }}\n        title={`${type}`}\n      >\n        <DatePicker\n          onChange={changeDate}\n          timePickerProps={{ showArrowButtons: true }}\n          value={date}\n        />\n        <Button onClick={() => changeDate(undefined)} text={`Remove ${type}`} />\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditableDate;\n","import { Button, Dialog } from '@blueprintjs/core';\nimport { TimePicker } from '@blueprintjs/datetime';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useState } from 'react';\nimport { prettifyTime } from 'src/commons/achievement/utils/DateHelper';\n\ntype EditableTimeProps = {\n  type: string;\n  time?: Date;\n  changeTime: (time?: Date) => void;\n};\n\nconst EditableTime: React.FC<EditableTimeProps> = ({ type, time, changeTime }) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const toggleOpen = () => setOpen(!isOpen);\n\n  const hoverText = time === undefined ? `No ${type}` : `${prettifyTime(time)}`;\n\n  return (\n    <>\n      <Tooltip2 content={hoverText}>\n        <Button minimal={true} onClick={toggleOpen} outlined={true}>{`${type}`}</Button>\n      </Tooltip2>\n      <Dialog\n        isCloseButtonShown={false}\n        isOpen={isOpen}\n        onClose={toggleOpen}\n        style={{\n          background: '#fff',\n          maxWidth: 'max-content',\n          padding: '0.25em',\n          textAlign: 'center'\n        }}\n        title={`${type}`}\n      >\n        <TimePicker onChange={changeTime} showArrowButtons={true} value={time} />\n        <Button onClick={() => changeTime(undefined)} text={`Remove ${type}`} />\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditableTime;\n","import { Button, MenuItem, NumericInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React from 'react';\nimport { EventMeta, EventType, GoalMeta } from 'src/features/achievement/AchievementTypes';\n\nimport EditableDate from '../EditableDate';\nimport EditableTime from '../EditableTime';\n\ntype EditableEventMetaProps = {\n  changeMeta: (meta: GoalMeta) => void;\n  eventMeta: EventMeta;\n};\n\nconst EventSelect = Select.ofType<EventType>();\nconst eventRenderer: ItemRenderer<EventType> = (eventName, { handleClick }) => (\n  <MenuItem key={eventName} onClick={handleClick} text={eventName} />\n);\n\nconst EditableEventMeta: React.FC<EditableEventMetaProps> = ({ changeMeta, eventMeta }) => {\n  const { eventNames, targetCount, release, deadline, observeFrom, observeTo } = eventMeta;\n\n  const changeTargetCount = (targetCount: number) =>\n    changeMeta({ ...eventMeta, targetCount: targetCount });\n\n  const changeEventName = (eventName: EventType, index: number) => {\n    if (eventName === EventType.NONE) {\n      changeMeta({ ...eventMeta, eventNames: eventNames.filter((_, idx) => idx !== index) });\n    } else {\n      eventNames[index] = eventName;\n      changeMeta({ ...eventMeta, eventNames: eventNames });\n    }\n  };\n\n  const changeRelease = (release?: Date) => {\n    changeMeta({ ...eventMeta, release: release });\n  };\n\n  const changeDeadline = (deadline?: Date) => {\n    changeMeta({ ...eventMeta, deadline: deadline });\n  };\n\n  const changeObserveFrom = (observeFrom?: Date) => {\n    changeMeta({ ...eventMeta, observeFrom: observeFrom });\n  };\n\n  const changeObserveTo = (observeTo?: Date) => {\n    changeMeta({ ...eventMeta, observeTo: observeTo });\n  };\n\n  const changeIndexEventName = (index: number) => (eventName: EventType) =>\n    changeEventName(eventName, index);\n\n  const generateEventNames = () => {\n    return eventNames.map((eventName, index) => (\n      <Tooltip2 content={'Change event type ' + index} key={index}>\n        <EventSelect\n          filterable={false}\n          items={Object.values(EventType)}\n          itemRenderer={eventRenderer}\n          onItemSelect={changeIndexEventName(index)}\n        >\n          <Button outlined={true} text={eventName} />\n        </EventSelect>\n      </Tooltip2>\n    ));\n  };\n\n  const addEvent = () => {\n    eventNames[eventNames.length] = EventType.RUN_CODE;\n    changeMeta({ ...eventMeta, eventNames: eventNames });\n  };\n\n  return (\n    <>\n      {generateEventNames()}\n      <Tooltip2 content=\"Add Event\">\n        <Button outlined={true} text={'Add Event'} onClick={addEvent} />\n      </Tooltip2>\n      <Tooltip2 content=\"Target Count\">\n        <NumericInput\n          allowNumericCharactersOnly={true}\n          leftIcon={IconNames.LOCATE}\n          min={0}\n          onValueChange={changeTargetCount}\n          placeholder=\"Enter target count here\"\n          value={targetCount}\n        />\n      </Tooltip2>\n      <br />\n      <EditableDate type=\"Release\" date={release} changeDate={changeRelease} />\n      <EditableDate type=\"Deadline\" date={deadline} changeDate={changeDeadline} />\n      <EditableTime type=\"Observe From\" time={observeFrom} changeTime={changeObserveFrom} />\n      <EditableTime type=\"Observe To\" time={observeTo} changeTime={changeObserveTo} />\n    </>\n  );\n};\n\nexport default EditableEventMeta;\n","import { NumericInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { GoalMeta, ManualMeta } from 'src/features/achievement/AchievementTypes';\n\ntype EditableManualMetaProps = {\n  changeMeta: (meta: GoalMeta) => void;\n  manualMeta: ManualMeta;\n};\n\nconst EditableManualMeta: React.FC<EditableManualMetaProps> = ({ changeMeta, manualMeta }) => {\n  const { targetCount } = manualMeta;\n\n  const changeTargetCount = (targetCount: number) =>\n    changeMeta({ ...manualMeta, targetCount: targetCount });\n\n  return (\n    <Tooltip2 content=\"Target Count\">\n      <NumericInput\n        allowNumericCharactersOnly={true}\n        leftIcon={IconNames.BANK_ACCOUNT}\n        min={0}\n        onValueChange={changeTargetCount}\n        placeholder=\"Enter target count here\"\n        value={targetCount}\n      />\n    </Tooltip2>\n  );\n};\n\nexport default EditableManualMeta;\n","import { Button, MenuItem } from '@blueprintjs/core';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React from 'react';\nimport {\n  AssessmentMeta,\n  BinaryMeta,\n  EventMeta,\n  GoalMeta,\n  GoalType,\n  ManualMeta\n} from 'src/features/achievement/AchievementTypes';\n\nimport { metaTemplate } from './GoalTemplate';\nimport EditableAssessmentMeta from './metaDetails/EditableAssessmentMeta';\nimport EditableBinaryMeta from './metaDetails/EditableBinaryMeta';\nimport EditableEventMeta from './metaDetails/EditableEventMeta';\nimport EditableManualMeta from './metaDetails/EditableManualMeta';\n\ntype EditableMetaProps = {\n  changeMeta: (meta: GoalMeta) => void;\n  meta: GoalMeta;\n};\n\nconst EditableMeta: React.FC<EditableMetaProps> = ({ changeMeta, meta }) => {\n  const { type } = meta;\n\n  const TypeSelect = Select.ofType<GoalType>();\n  const typeRenderer: ItemRenderer<GoalType> = (type, { handleClick }) => (\n    <MenuItem key={type} onClick={handleClick} text={type} />\n  );\n\n  const changeType = (type: GoalType) => changeMeta(metaTemplate(type));\n\n  const editableMetaDetails = (type: GoalType) => {\n    switch (type) {\n      case GoalType.ASSESSMENT:\n        return (\n          <EditableAssessmentMeta assessmentMeta={meta as AssessmentMeta} changeMeta={changeMeta} />\n        );\n      case GoalType.BINARY:\n        return <EditableBinaryMeta binaryMeta={meta as BinaryMeta} changeMeta={changeMeta} />;\n      case GoalType.MANUAL:\n        return <EditableManualMeta changeMeta={changeMeta} manualMeta={meta as ManualMeta} />;\n      case GoalType.EVENT:\n        return <EditableEventMeta eventMeta={meta as EventMeta} changeMeta={changeMeta} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      <Tooltip2 content=\"Change Goal Type\">\n        <TypeSelect\n          filterable={false}\n          itemRenderer={typeRenderer}\n          items={Object.values(GoalType)}\n          onItemSelect={changeType}\n        >\n          <Button minimal={true} outlined={true} text={type} />\n        </TypeSelect>\n      </Tooltip2>\n      {editableMetaDetails(type)}\n    </>\n  );\n};\n\nexport default EditableMeta;\n","import { EditableText } from '@blueprintjs/core';\nimport { cloneDeep } from 'lodash';\nimport React, { useContext, useMemo, useReducer, useState } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\nimport { GoalDefinition, GoalMeta } from 'src/features/achievement/AchievementTypes';\n\nimport ItemDeleter from '../common/ItemDeleter';\nimport ItemSaver from '../common/ItemSaver';\nimport {\n  EditableGoalAction as Action,\n  EditableGoalActionType as ActionType,\n  EditableGoalState as State\n} from './EditableGoalTypes';\nimport EditableMeta from './EditableMeta';\n\ntype EditableGoalProps = {\n  uuid: string;\n  isNewGoal: boolean;\n  releaseUuid: () => void;\n  removeCard: (uuid: string) => void;\n  requestPublish: () => void;\n};\n\nconst init = (goal: GoalDefinition): State => {\n  return {\n    editableGoal: goal,\n    isDirty: false\n  };\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.SAVE_CHANGES:\n      return {\n        ...state,\n        isDirty: false\n      };\n    case ActionType.DISCARD_CHANGES:\n      return init(action.payload);\n    case ActionType.DELETE_GOAL:\n      return {\n        ...state,\n        isDirty: false\n      };\n    case ActionType.CHANGE_META:\n      return {\n        editableGoal: {\n          ...state.editableGoal,\n          meta: action.payload\n        },\n        isDirty: true\n      };\n    case ActionType.CHANGE_TEXT:\n      return {\n        editableGoal: {\n          ...state.editableGoal,\n          text: action.payload\n        },\n        isDirty: true\n      };\n    default:\n      return state;\n  }\n};\n\nconst EditableGoal: React.FC<EditableGoalProps> = props => {\n  const { uuid, isNewGoal, releaseUuid, removeCard, requestPublish } = props;\n\n  const inferencer = useContext(AchievementContext);\n  const goal = inferencer.getGoalDefinition(uuid);\n  const goalClone = useMemo(() => cloneDeep(goal), [goal]);\n\n  const [state, dispatch] = useReducer(reducer, goalClone, init);\n  const [isNew, setIsNew] = useState<boolean>(isNewGoal);\n  const { editableGoal, isDirty } = state;\n  const { meta, text } = editableGoal;\n\n  const saveChanges = () => {\n    dispatch({ type: ActionType.SAVE_CHANGES });\n    inferencer.modifyGoalDefinition(editableGoal);\n    if (isNew) {\n      releaseUuid();\n      setIsNew(false);\n    }\n    requestPublish();\n  };\n\n  const discardChanges = () => dispatch({ type: ActionType.DISCARD_CHANGES, payload: goalClone });\n\n  const deleteGoal = () => {\n    dispatch({ type: ActionType.DELETE_GOAL });\n    inferencer.removeGoalDefinition(uuid);\n    if (isNew) {\n      releaseUuid();\n      setIsNew(false);\n    }\n    removeCard(uuid);\n    requestPublish();\n  };\n\n  const changeMeta = (meta: GoalMeta) => dispatch({ type: ActionType.CHANGE_META, payload: meta });\n\n  const changeText = (text: string) => dispatch({ type: ActionType.CHANGE_TEXT, payload: text });\n\n  return (\n    <li className=\"editable-goal\" id={uuid}>\n      <div className=\"action-button\">\n        {isDirty ? (\n          <ItemSaver discardChanges={discardChanges} saveChanges={saveChanges} />\n        ) : (\n          <ItemDeleter deleteItem={deleteGoal} item={text} />\n        )}\n      </div>\n      <h3>\n        <EditableText onChange={changeText} placeholder=\"Enter goal text here\" value={text} />\n      </h3>\n      <div className=\"meta\">\n        <EditableMeta changeMeta={changeMeta} meta={meta} />\n      </div>\n    </li>\n  );\n};\n\nexport default EditableGoal;\n","import { Button } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useContext } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\n\nimport { goalDefinitionTemplate } from './GoalTemplate';\n\ntype GoalAdderProps = {\n  allowNewUuid: boolean;\n  setNewUuid: (uuid: string) => void;\n};\n\nconst GoalAdder: React.FC<GoalAdderProps> = ({ allowNewUuid, setNewUuid }) => {\n  const inferencer = useContext(AchievementContext);\n\n  const addGoal = () => setNewUuid(inferencer.insertGoalDefinition(goalDefinitionTemplate));\n\n  return (\n    <Button\n      className=\"command-button\"\n      disabled={!allowNewUuid}\n      icon={IconNames.NEW_OBJECT}\n      onClick={addGoal}\n      text=\"Create Goal\"\n    />\n  );\n};\n\nexport default GoalAdder;\n","import React, { useContext, useState } from 'react';\nimport { AchievementContext } from 'src/features/achievement/AchievementConstants';\n\nimport EditableGoal from './goalEditor/EditableGoal';\nimport GoalAdder from './goalEditor/GoalAdder';\n\ntype GoalEditorProps = {\n  requestPublish: () => void;\n};\n\nlet editableGoals: JSX.Element[] = [];\n\nconst GoalEditor: React.FC<GoalEditorProps> = ({ requestPublish }) => {\n  const inferencer = useContext(AchievementContext);\n\n  /**\n   * newUuid helps us to ensure that only ONE goal is added at any point of time.\n   *\n   * By default,  the newUuid is an empty string, which means currently no new goal\n   * is being added and the admin is able to add a new goal.\n   *\n   * Conversely, if the newUuid is not an empty string, this means currently a goal\n   * is being added to the system and the admin is not allowed to add two goals\n   * at one go. The newUuid holds the newly created goal uuid until the new goal\n   * is added into the inferencer.\n   */\n  const [newUuid, setNewUuid] = useState<string>('');\n  const allowNewUuid = newUuid === '';\n  const releaseUuid = () => setNewUuid('');\n\n  const removeCard = (uuid: string) => {\n    let idx = 0;\n    while (editableGoals[idx].key !== uuid && idx < editableGoals.length) {\n      idx++;\n    }\n    editableGoals.splice(idx, 1);\n  };\n\n  const generateEditableGoal = (goalUuid: string, isNewGoal: boolean) => (\n    <EditableGoal\n      key={goalUuid}\n      uuid={goalUuid}\n      isNewGoal={isNewGoal}\n      releaseUuid={releaseUuid}\n      requestPublish={requestPublish}\n      removeCard={removeCard}\n    />\n  );\n\n  // load preexisting goals from the inferencer\n  if (editableGoals.length === 0) {\n    editableGoals = inferencer.getAllGoalUuids().map(uuid => generateEditableGoal(uuid, false));\n  }\n\n  const addNewGoal = (uuid: string) => {\n    setNewUuid(uuid);\n    // keep the new goal on top by swapping it with the first element\n    editableGoals[editableGoals.length] = editableGoals[0];\n    editableGoals[0] = generateEditableGoal(uuid, true);\n  };\n\n  return (\n    <div className=\"goal-editor\">\n      <div className=\"command\">\n        <GoalAdder allowNewUuid={allowNewUuid} setNewUuid={addNewGoal} />\n      </div>\n      <ul className=\"goal-container\">{editableGoals}</ul>\n    </div>\n  );\n};\n\nexport default GoalEditor;\n","import React, { useEffect, useMemo, useReducer, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport AchievementEditor from '../../../commons/achievement/control/AchievementEditor';\nimport AchievementPreview from '../../../commons/achievement/control/AchievementPreview';\nimport GoalEditor from '../../../commons/achievement/control/GoalEditor';\nimport AchievementInferencer from '../../../commons/achievement/utils/AchievementInferencer';\nimport { Prompt } from '../../../commons/ReactRouterPrompt';\nimport {\n  bulkUpdateAchievements,\n  bulkUpdateGoals,\n  getAchievements,\n  getOwnGoals,\n  removeAchievement,\n  removeGoal\n} from '../../../features/achievement/AchievementActions';\nimport { AchievementContext } from '../../../features/achievement/AchievementConstants';\nimport { AchievementItem, GoalDefinition } from '../../../features/achievement/AchievementTypes';\n\nconst AchievementControl: React.FC = () => {\n  const dispatch = useDispatch();\n  const {\n    handleBulkUpdateAchievements,\n    handleBulkUpdateGoals,\n    handleGetAchievements,\n    handleGetOwnGoals,\n    handleRemoveAchievement,\n    handleRemoveGoal\n  } = useMemo(\n    () => ({\n      handleBulkUpdateAchievements: (achievement: AchievementItem[]) =>\n        dispatch(bulkUpdateAchievements(achievement)),\n      handleBulkUpdateGoals: (goals: GoalDefinition[]) => dispatch(bulkUpdateGoals(goals)),\n      handleGetAchievements: () => dispatch(getAchievements()),\n      handleGetOwnGoals: () => dispatch(getOwnGoals()),\n      handleRemoveAchievement: (uuid: string) => dispatch(removeAchievement(uuid)),\n      handleRemoveGoal: (uuid: string) => dispatch(removeGoal(uuid))\n    }),\n    [dispatch]\n  );\n\n  const inferencer = useTypedSelector(\n    state => new AchievementInferencer(state.achievement.achievements, state.achievement.goals)\n  );\n\n  /**\n   * Fetch the latest achievements and goals from backend when the page is rendered\n   */\n  useEffect(() => {\n    handleGetAchievements();\n    handleGetOwnGoals();\n  }, [handleGetAchievements, handleGetOwnGoals]);\n\n  /**\n   * Monitors changes that are awaiting publish\n   */\n  const [awaitPublish, setAwaitPublish] = useState<boolean>(false);\n  const publishChanges = () => {\n    // NOTE: Goals and achievements must exist in the backend before the association can be built\n    handleBulkUpdateGoals(inferencer.getAllGoals());\n    handleBulkUpdateAchievements(inferencer.getAllAchievements());\n    inferencer.getGoalsToDelete().forEach(handleRemoveGoal);\n    inferencer.getAchievementsToDelete().forEach(handleRemoveAchievement);\n    inferencer.resetToDelete();\n    setAwaitPublish(false);\n  };\n  const requestPublish = () => {\n    setAwaitPublish(true);\n    forceUpdate();\n  };\n\n  /**\n   * Allows editor components to trigger a page re-render whenever the inferencer is modified\n   * so that the AchievementPreview displays the latest local changes\n   *\n   * NOTE: Although the inferencer is passed to the value prop of AchievementContext.Provider,\n   * changes to the inferencer does not trigger a re-render in all AchievementContext.Consumer\n   * as expected because Context uses reference identity to determine when to re-render. When\n   * the editor components update the inferencer by calling inferencer.modifyAchievement(...)\n   * or inferencer.modifyGoalDefinition(...), the Context does not register the changes hence\n   * a forceUpdate() hook is needed.\n   *\n   * See: https://reactjs.org/docs/context.html#caveats\n   */\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  return (\n    <AchievementContext.Provider value={inferencer}>\n      <Prompt\n        message=\"You have unpublished changes. Are you sure you want to leave?\"\n        when={awaitPublish}\n      />\n\n      <div className=\"AchievementControl\">\n        <AchievementPreview awaitPublish={awaitPublish} publishChanges={publishChanges} />\n        <AchievementEditor requestPublish={requestPublish} />\n        <GoalEditor requestPublish={requestPublish} />\n      </div>\n    </AchievementContext.Provider>\n  );\n};\n\nexport default AchievementControl;\n","import React from 'react';\nimport { Route, Routes } from 'react-router';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport { Role } from '../../commons/application/ApplicationTypes';\nimport NotFound from '../notFound/NotFound';\nimport AchievementControl from './control/AchievementControl';\nimport AchievementDashboard from './subcomponents/AchievementDashboard';\n\nconst Achievement: React.FC = () => {\n  const role = useTypedSelector(state => state.session.role!);\n\n  const toAchievementControl =\n    role === Role.Admin || role === Role.Staff ? <AchievementControl /> : <NotFound />;\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<AchievementDashboard />}></Route>\n      <Route path=\"control\" element={toAchievementControl}></Route>\n      <Route path=\"*\" element={<NotFound />} />\n    </Routes>\n  );\n};\n\nexport default Achievement;\n","import { ButtonGroup, Slider } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Chapter } from 'js-slang/dist/types';\nimport React from 'react';\n\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus,\n  SourcecastData\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport ControlButton from '../ControlButton';\nimport { SideContentType } from '../sideContent/SideContentTypes';\n\nexport type SourceRecorderControlBarProps = DispatchProps & StateProps & OwnProps;\n\ntype DispatchProps = {\n  handleEditorValueChange: (newCode: string) => void;\n  handleSetCurrentPlayerTime: (playTime: number) => void;\n  handleSetCodeDeltasToApply: (deltas: CodeDelta[]) => void;\n  handleSetIsEditorReadonly: (isEditorReadonly: boolean) => void;\n  handleSetInputToApply: (inputToApply: Input) => void;\n  handleSetSourcecastDuration: (duration: number) => void;\n  handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) => void;\n  handleChapterSelect: (chapter: Chapter) => void;\n  handleExternalSelect: (name: ExternalLibraryName) => void;\n  handlePromptAutocomplete: (row: number, col: number, callback: any) => void;\n};\n\ntype StateProps = {\n  audioUrl: string;\n  currentPlayerTime: number;\n  duration: number;\n  playbackData: PlaybackData;\n  playbackStatus: PlaybackStatus;\n};\n\ntype OwnProps = {\n  /**\n   * setSelectedTab is optional since it is only used in Sourcecast and not Sourcereel\n   * due to the addition of the MobileWorkspace to Sourcecast.\n   */\n  setSelectedTab?: (newTab: SideContentType) => void;\n};\n\ntype State = {\n  currentDeltaRevision: number;\n  currentPlayerProgress: number;\n  currentSourcecastItem: SourcecastData | null;\n  duration: number;\n};\n\nclass SourceRecorderControlBar extends React.PureComponent<SourceRecorderControlBarProps, State> {\n  private audio: React.RefObject<HTMLAudioElement>;\n\n  constructor(props: SourceRecorderControlBarProps) {\n    super(props);\n    this.audio = React.createRef();\n    this.state = {\n      currentDeltaRevision: 0,\n      currentPlayerProgress: 0,\n      currentSourcecastItem: null,\n      duration: 0\n    };\n  }\n\n  public render() {\n    const PlayerPlayButton = (\n      <ControlButton\n        label=\"Play\"\n        icon={IconNames.PLAY}\n        onClick={this.handlePlayerPlaying}\n        isDisabled={!this.props.duration}\n      />\n    );\n    const PlayerPauseButton = (\n      <ControlButton label=\"Pause\" icon={IconNames.PAUSE} onClick={this.handlePlayerPausing} />\n    );\n    return (\n      <div className=\"SourcecastControlBar\">\n        <audio\n          src={this.props.audioUrl}\n          ref={this.audio}\n          onEnded={this.handlePlayerStopping}\n          onLoadedMetadata={this.handleAudioLoaded}\n          onSeeked={this.handleSeeked}\n          onTimeUpdate={this.updatePlayerTime}\n          preload=\"metadata\"\n          // controls={true}\n        />\n        <br />\n        <div className=\"PlayerControl\">\n          <ButtonGroup className=\"PlayerControlButton\">\n            {this.props.playbackStatus === PlaybackStatus.paused && PlayerPlayButton}\n            {this.props.playbackStatus === PlaybackStatus.playing && PlayerPauseButton}\n          </ButtonGroup>\n          <div className=\"Slider\">\n            <Slider\n              min={0}\n              max={1}\n              stepSize={0.0001}\n              onChange={this.handlePlayerProgressBarChange}\n              value={this.state.currentPlayerProgress}\n              labelRenderer={this.renderLabel}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private handleSeeked = () => {\n    // FIXME: loop in applyPlaybackDataFromStart keeps running if seeked from paused mode\n    this.stopPreviousPlaybackAndApplyFromStart(this.props.playbackData);\n  };\n\n  private handleAudioLoaded = () => {\n    this.props.handleSetSourcecastDuration(this.audio.current!.duration);\n  };\n\n  private applyDeltas = (deltas: CodeDelta[]) => {\n    this.props.handleSetCodeDeltasToApply(deltas);\n  };\n\n  private stopPreviousPlaybackAndApplyFromStart = (playbackData: PlaybackData) => {\n    this.setState(\n      {\n        currentDeltaRevision: this.state.currentDeltaRevision + 1\n      },\n      () => this.applyPlaybackDataFromStart(playbackData)\n    );\n  };\n\n  private applyPlaybackDataFromStart = async (playbackData: PlaybackData) => {\n    const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n    const currentRevision = this.state.currentDeltaRevision;\n    let currentTime = this.audio.current!.currentTime * 1000;\n    this.props.handleEditorValueChange(playbackData.init.editorValue);\n    this.props.handleExternalSelect(playbackData.init.externalLibrary);\n    this.props.handleChapterSelect(playbackData.init.chapter);\n    const codeDeltasToApply = playbackData.inputs\n      .filter(\n        deltaWithTime => deltaWithTime.time <= currentTime && deltaWithTime.type === 'codeDelta'\n      )\n      .map(deltaWithTime => deltaWithTime.data as CodeDelta);\n    this.applyDeltas(codeDeltasToApply);\n\n    const futureData = playbackData.inputs.filter(\n      deltaWithTime => deltaWithTime.time > currentTime\n    );\n    const len = futureData.length;\n    let i = 0;\n    while (i < len && this.state.currentDeltaRevision === currentRevision) {\n      currentTime = this.audio.current!.currentTime * 1000;\n      if (futureData[i].time < currentTime) {\n        this.props.handleSetInputToApply(futureData[i]);\n        i++;\n        continue;\n      }\n      await sleep(20);\n    }\n  };\n\n  private stopCurrentPlayback() {\n    this.setState({\n      currentDeltaRevision: this.state.currentDeltaRevision + 1\n    });\n  }\n\n  private handlePlayerPausing = () => {\n    const audio = this.audio.current;\n    audio!.pause();\n    this.props.handleSetIsEditorReadonly(false);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.paused);\n    this.stopCurrentPlayback();\n  };\n\n  private handlePlayerPlaying = () => {\n    const audio = this.audio.current;\n    audio!.play();\n    this.props.handleSetIsEditorReadonly(true);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.playing);\n    this.stopPreviousPlaybackAndApplyFromStart(this.props.playbackData);\n    if (this.props.setSelectedTab) {\n      this.props.setSelectedTab(SideContentType.mobileEditor);\n    }\n  };\n\n  private handlePlayerStopping = () => {\n    this.props.handleSetIsEditorReadonly(false);\n    this.props.handleSetSourcecastStatus(PlaybackStatus.paused);\n    this.props.handleSetCurrentPlayerTime(0);\n    this.setState({\n      currentPlayerProgress: 0\n    });\n  };\n\n  private updatePlayerTime: React.ReactEventHandler<HTMLAudioElement> = e => {\n    const { currentTime }: { currentTime: number } = e.target as HTMLMediaElement;\n    this.props.handleSetCurrentPlayerTime(currentTime);\n    this.setState({\n      currentPlayerProgress: currentTime / this.props.duration\n    });\n\n    // listening on forcedPaused status\n    if (this.props.playbackStatus === PlaybackStatus.forcedPaused) {\n      this.handlePlayerPausing();\n    }\n  };\n\n  private handlePlayerProgressBarChange = (value: number) => {\n    if (this.audio.current) {\n      const currentTime = this.props.duration * value;\n      this.audio.current.currentTime = currentTime;\n      this.props.handleSetCurrentPlayerTime(currentTime);\n      this.setState({\n        currentPlayerProgress: value\n      });\n    }\n  };\n\n  private renderLabel = (value: number) => {\n    if (this.props.duration) {\n      const totalTime = this.props.duration * value;\n      const min = Math.floor(totalTime / 60);\n      const sec = Math.floor(totalTime - min * 60);\n      const minString = min < 10 ? '0' + min : min;\n      const secString = sec < 10 ? '0' + sec : sec;\n      return minString + ':' + secString;\n    } else {\n      return '00:00';\n    }\n  };\n}\n\nexport default SourceRecorderControlBar;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useState } from 'react';\n\nimport { SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport ControlButton from '../ControlButton';\n\ntype SourceRecorderDeleteCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleDeleteSourcecastEntry: (id: number) => void;\n};\n\ntype StateProps = {\n  data: SourcecastData;\n};\n\nconst SourceRecorderDeleteCell: React.FC<SourceRecorderDeleteCellProps> = props => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleCloseDialog = () => setIsDialogOpen(false);\n  const handleOpenDialog = () => setIsDialogOpen(true);\n  const handleDelete = () => {\n    const { data } = props;\n    props.handleDeleteSourcecastEntry(data.id);\n  };\n\n  return (\n    <div>\n      <ControlButton icon={IconNames.TRASH} onClick={handleOpenDialog} />\n      <Dialog\n        icon=\"info-sign\"\n        isOpen={isDialogOpen}\n        onClose={handleCloseDialog}\n        title=\"Delete Sourcecast\"\n        canOutsideClickClose={true}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <p>Are you sure to delete this sourcecast entry?</p>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <ControlButton label=\"Confirm Delete\" icon={IconNames.TRASH} onClick={handleDelete} />\n            <ControlButton label=\"Cancel\" icon={IconNames.CROSS} onClick={handleCloseDialog} />\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SourceRecorderDeleteCell;\n","import { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport { PlaybackData, SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport ControlButton from '../ControlButton';\n\ntype SourceRecorderSelectCellProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    uid: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n};\n\ntype StateProps = {\n  data: SourcecastData;\n};\nconst SourceRecorderSelectCell: React.FC<SourceRecorderSelectCellProps> = ({\n  data,\n  handleSetSourcecastData\n}) => {\n  const handleSelect = () => {\n    handleSetSourcecastData(\n      data.title,\n      data.description,\n      data.uid,\n      data.url,\n      JSON.parse(data.playbackData)\n    );\n  };\n\n  return (\n    <Tooltip2 content=\"Load Sourcecast Recording\">\n      <ControlButton label={`${data.title}`} icon={IconNames.PAPERCLIP} onClick={handleSelect} />\n    </Tooltip2>\n  );\n};\n\nexport default SourceRecorderSelectCell;\n","import { IconNames } from '@blueprintjs/icons';\nimport { Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport React, { useRef, useState } from 'react';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\n\nimport { SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport ControlButton from '../ControlButton';\n\ntype SourceRecorderShareCellProps = StateProps;\n\ntype StateProps = {\n  data: SourcecastData;\n  courseId?: number;\n};\n\nconst SourceRecorderShareCell: React.FC<SourceRecorderShareCellProps> = props => {\n  const shareInputElem = useRef<HTMLInputElement>(null);\n  const [shareURL] = useState<string>(\n    `${window.location.protocol}//${window.location.host}/courses/${props.courseId}/sourcecast/${props.data.uid}`\n  );\n\n  const selectShareInputText = () => {\n    if (shareInputElem.current !== null) {\n      shareInputElem.current.focus();\n      shareInputElem.current.select();\n    }\n  };\n\n  const shareButtonPopoverContent = (\n    <div key={shareURL}>\n      <input defaultValue={shareURL} readOnly={true} ref={shareInputElem} />\n      <Tooltip2 content=\"Copy link to clipboard\">\n        <CopyToClipboard text={shareURL}>\n          <ControlButton icon={IconNames.DUPLICATE} onClick={selectShareInputText} />\n        </CopyToClipboard>\n      </Tooltip2>\n    </div>\n  );\n\n  return (\n    <Popover2\n      popoverClassName=\"Popover-share\"\n      inheritDarkTheme={false}\n      content={shareButtonPopoverContent}\n    >\n      <Tooltip2 content=\"Get shareable link\">\n        <ControlButton icon={IconNames.SHARE} />\n      </Tooltip2>\n    </Popover2>\n  );\n};\n\nexport default SourceRecorderShareCell;\n","import 'ag-grid-community/styles/ag-grid.css';\n\nimport {\n  Divider,\n  FormGroup,\n  InputGroup,\n  NonIdealState,\n  Spinner,\n  SpinnerSize\n} from '@blueprintjs/core';\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { sortBy } from 'lodash';\nimport React from 'react';\n\nimport { PlaybackData, SourcecastData } from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { getStandardDate } from '../utils/DateHelper';\nimport SourcastDeleteCell from './SourceRecorderDeleteCell';\nimport SourceRecorderSelectCell from './SourceRecorderSelectCell';\nimport SourceRecorderShareCell from './SourceRecorderShareCell';\n\ntype SourceRecorderTableProps = OwnProps;\n\ntype OwnProps = {\n  handleDeleteSourcecastEntry?: (id: number) => void;\n  handleSetSourcecastData?: (\n    title: string,\n    description: string,\n    uid: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  sourcecastIndex: SourcecastData[] | null;\n  courseId?: number;\n};\n\n/**\n * Column Definitions are defined within the state, so that data\n * can be manipulated easier. See constructor for an example.\n */\ntype State = {\n  columnDefs: ColDef[];\n  filterValue: string;\n  groupFilterEnabled: boolean;\n};\n\nclass SourcecastTable extends React.Component<SourceRecorderTableProps, State> {\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n\n  public constructor(props: SourceRecorderTableProps) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          headerName: 'Title',\n          field: 'title',\n          cellRenderer: SourceRecorderSelectCell,\n          cellRendererParams: {\n            handleSetSourcecastData: this.props.handleSetSourcecastData\n          },\n          minWidth: 200,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'left'\n          },\n          hide: !this.props.handleSetSourcecastData\n        },\n        {\n          headerName: 'Title',\n          field: 'title',\n          minWidth: 100,\n          suppressMovable: true,\n          suppressMenu: true,\n          hide: !!this.props.handleSetSourcecastData\n        },\n        {\n          headerName: 'Uploader',\n          field: 'uploader.name',\n          minWidth: 150,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'center'\n          }\n        },\n        {\n          headerName: 'Date',\n          valueGetter: params => getStandardDate(params.data.inserted_at),\n          minWidth: 150,\n          suppressMovable: true,\n          suppressMenu: true\n        },\n        {\n          headerName: 'Share',\n          field: 'uid',\n          cellRenderer: SourceRecorderShareCell,\n          cellRendererParams: {\n            courseId: this.props.courseId\n          },\n          minWidth: 80,\n          suppressMovable: true,\n          suppressMenu: true\n        },\n        {\n          headerName: 'Delete',\n          field: '',\n          cellRenderer: SourcastDeleteCell,\n          cellRendererParams: {\n            handleDeleteSourcecastEntry: this.props.handleDeleteSourcecastEntry\n          },\n          minWidth: 100,\n          maxWidth: 100,\n          sortable: false,\n          suppressMovable: true,\n          suppressMenu: true,\n          cellStyle: {\n            'text-align': 'center'\n          },\n          hide: !this.props.handleDeleteSourcecastEntry\n        },\n        { headerName: 'description', field: 'description', hide: true },\n        { headerName: 'inserted_at', field: 'inserted_at', hide: true },\n        { headerName: 'updated_at', field: 'updated_at', hide: true },\n        { headerName: 'audio', field: 'audio', hide: true },\n        { headerName: 'playbackData', field: 'playbackData', hide: true },\n        { headerName: 'url', field: 'url', hide: true }\n      ],\n      filterValue: '',\n      groupFilterEnabled: false\n    };\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n  }\n\n  public render() {\n    /* Display either a loading screen or a table with overviews. */\n    const loadingDisplay = (\n      <NonIdealState\n        className=\"Sourcecast\"\n        description=\"Fetching sourcecast index...\"\n        icon={<Spinner size={SpinnerSize.LARGE} />}\n      />\n    );\n    const data = sortBy(this.props.sourcecastIndex, [(a: SourcecastData) => -a.id]);\n\n    const grid = (\n      <div className=\"SourcecastContainer\">\n        <br />\n        <div>\n          <FormGroup label=\"\" labelFor=\"text-input\">\n            <InputGroup\n              id=\"searchBar\"\n              large={false}\n              leftIcon=\"search\"\n              placeholder=\"Search\"\n              value={this.state.filterValue}\n              onChange={this.handleFilterChange}\n            />\n          </FormGroup>\n        </div>\n        <Divider />\n        <div className=\"SourcecastTable\">\n          <div className=\"ag-grid-parent\">\n            <AgGridReact\n              domLayout={'autoHeight'}\n              columnDefs={this.state.columnDefs}\n              defaultColDef={this.defaultColumnDefs}\n              onGridReady={this.onGridReady}\n              rowData={data}\n              rowHeight={30}\n              pagination={false}\n              paginationPageSize={50}\n            />\n          </div>\n        </div>\n        <br />\n      </div>\n    );\n    return <div>{this.props.sourcecastIndex === undefined ? loadingDisplay : grid}</div>;\n  }\n\n  private handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const changeVal = event.target.value;\n    this.setState({ filterValue: changeVal });\n\n    if (this.gridApi) {\n      this.gridApi.setQuickFilter(changeVal);\n    }\n  };\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n    this.gridApi.sizeColumnsToFit();\n    window.onresize = () => this.gridApi!.sizeColumnsToFit();\n  };\n}\n\nexport default SourcecastTable;\n","import { Classes, Pre } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from 'src/commons/application/actions/InterpreterActions';\nimport { Position } from 'src/commons/editor/EditorTypes';\nimport { changeSideContentHeight } from 'src/commons/sideContent/SideContentActions';\nimport { useSideContent } from 'src/commons/sideContent/SideContentHelper';\nimport { useResponsive, useTypedSelector } from 'src/commons/utils/Hooks';\nimport {\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  externalLibrarySelect,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  setEditorBreakpoint,\n  setIsEditorReadonly,\n  toggleEditorAutorun,\n  updateActiveEditorTabIndex,\n  updateEditorValue,\n  updateReplValue\n} from 'src/commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from 'src/commons/workspace/WorkspaceTypes';\nimport { fetchSourcecastIndex } from 'src/features/sourceRecorder/sourcecast/SourcecastActions';\nimport {\n  setCodeDeltasToApply,\n  setCurrentPlayerTime,\n  setInputToApply,\n  setSourcecastData,\n  setSourcecastDuration,\n  setSourcecastStatus\n} from 'src/features/sourceRecorder/SourceRecorderActions';\n\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../commons/controlBar/ControlBarEvalButton';\nimport {\n  convertEditorTabStateToProps,\n  SourcecastEditorContainerProps\n} from '../../commons/editor/EditorContainer';\nimport MobileWorkspace, {\n  MobileWorkspaceProps\n} from '../../commons/mobileWorkspace/MobileWorkspace';\nimport makeCseMachineTabFrom from '../../commons/sideContent/content/SideContentCseMachine';\nimport makeDataVisualizerTabFrom from '../../commons/sideContent/content/SideContentDataVisualizer';\nimport { SideContentTab, SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport SourceRecorderControlBar, {\n  SourceRecorderControlBarProps\n} from '../../commons/sourceRecorder/SourceRecorderControlBar';\nimport SourceRecorderTable from '../../commons/sourceRecorder/SourceRecorderTable';\nimport Workspace, { WorkspaceProps } from '../../commons/workspace/Workspace';\nimport {\n  CodeDelta,\n  Input,\n  PlaybackData,\n  PlaybackStatus\n} from '../../features/sourceRecorder/SourceRecorderTypes';\n\nconst workspaceLocation: WorkspaceLocation = 'sourcecast';\n\nconst Sourcecast: React.FC = () => {\n  const { isMobileBreakpoint } = useResponsive();\n  const params = useParams<{ sourcecastId: string }>();\n\n  // Handlers migrated over from deprecated withRouter implementation\n  const {\n    audioUrl,\n    currentPlayerTime,\n    codeDeltasToApply,\n    title,\n    description,\n    externalLibrary: externalLibraryName,\n    isEditorAutorun,\n    isEditorReadonly,\n    inputToApply,\n    isRunning,\n    isDebugging,\n    output,\n    playbackDuration,\n    playbackData,\n    playbackStatus,\n    replValue,\n    sourcecastIndex,\n    context: { chapter: sourceChapter, variant: sourceVariant },\n    uid,\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    editorTabs\n  } = useTypedSelector(store => store.workspaces[workspaceLocation]);\n  const courseId = useTypedSelector(store => store.session.courseId);\n\n  const dispatch = useDispatch();\n  const {\n    handleFetchSourcecastIndex,\n    handleChapterSelect,\n    handleEditorEval,\n    handleEditorValueChange,\n    handleExternalSelect,\n    handleReplEval,\n    handleSetSourcecastData,\n    handleSetSourcecastStatus,\n    handleReplOutputClear,\n    handleSideContentHeightChange\n  } = useMemo(() => {\n    return {\n      handleFetchSourcecastIndex: () => dispatch(fetchSourcecastIndex(workspaceLocation)),\n      handleChapterSelect: (chapter: Chapter) =>\n        dispatch(chapterSelect(chapter, Variant.DEFAULT, workspaceLocation)),\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorValueChange: (newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, 0, newEditorValue)),\n      handleExternalSelect: (externalLibraryName: ExternalLibraryName) =>\n        dispatch(externalLibrarySelect(externalLibraryName, workspaceLocation)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleSetSourcecastData: (\n        title: string,\n        description: string,\n        uid: string,\n        audioUrl: string,\n        playbackData: PlaybackData\n      ) =>\n        dispatch(\n          setSourcecastData(title, description, uid, audioUrl, playbackData, workspaceLocation)\n        ),\n      handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) =>\n        dispatch(setSourcecastStatus(playbackStatus, workspaceLocation)),\n      handleReplOutputClear: () => dispatch(clearReplOutput(workspaceLocation)),\n      handleSideContentHeightChange: (change: number) =>\n        dispatch(changeSideContentHeight(change, workspaceLocation))\n    };\n  }, [dispatch]);\n\n  /**\n   * The default selected tab for the Sourcecast workspace is the introduction tab,\n   * which contains the ag-grid table of available Sourcecasts. This is intentional\n   * to avoid an ag-grid console warning. For more info, see issue #1152 in frontend.\n   */\n  const { selectedTab, setSelectedTab } = useSideContent(\n    workspaceLocation,\n    SideContentType.introduction\n  );\n\n  const handleQueryParam = () => {\n    const newUid = params.sourcecastId;\n    if (newUid && newUid !== uid && sourcecastIndex) {\n      const cast = sourcecastIndex.find(data => data.uid === newUid);\n      if (cast) {\n        handleSetSourcecastData(\n          cast.title,\n          cast.description,\n          cast.uid,\n          cast.url,\n          JSON.parse(cast.playbackData)\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    handleFetchSourcecastIndex();\n    // This effect should only fire once on component mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    handleQueryParam();\n\n    if (!inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'activeTabChange':\n        setSelectedTab(inputToApply.data);\n        break;\n      case 'chapterSelect':\n        handleChapterSelect(inputToApply.data);\n        break;\n      case 'externalLibrarySelect':\n        handleExternalSelect(inputToApply.data);\n        break;\n      case 'forcePause':\n        handleSetSourcecastStatus(PlaybackStatus.forcedPaused);\n        break;\n    }\n    // This effect should only fire when props.inputToApply changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [handleQueryParam, inputToApply]);\n\n  /**\n   * Handles toggling of relevant SideContentTabs when exiting the mobile breakpoint\n   */\n  useEffect(() => {\n    if (\n      !isMobileBreakpoint &&\n      (selectedTab === SideContentType.mobileEditor ||\n        selectedTab === SideContentType.mobileEditorRun)\n    ) {\n      setSelectedTab(SideContentType.introduction);\n    }\n  }, [isMobileBreakpoint, selectedTab, setSelectedTab]);\n\n  const autorunButtonHandlers = useMemo(() => {\n    return {\n      handleDebuggerPause: () => dispatch(beginDebuggerPause(workspaceLocation)),\n      handleDebuggerReset: () => dispatch(debuggerReset(workspaceLocation)),\n      handleDebuggerResume: () => dispatch(debuggerResume(workspaceLocation)),\n      handleInterruptEval: () => dispatch(beginInterruptExecution(workspaceLocation)),\n      handleToggleEditorAutorun: () => dispatch(toggleEditorAutorun(workspaceLocation))\n    };\n  }, [dispatch]);\n  const autorunButtons = (\n    <ControlBarAutorunButtons\n      handleDebuggerPause={autorunButtonHandlers.handleDebuggerPause}\n      handleDebuggerReset={autorunButtonHandlers.handleDebuggerReset}\n      handleDebuggerResume={autorunButtonHandlers.handleDebuggerResume}\n      handleEditorEval={handleEditorEval}\n      handleInterruptEval={autorunButtonHandlers.handleInterruptEval}\n      handleToggleEditorAutorun={autorunButtonHandlers.handleToggleEditorAutorun}\n      isEntrypointFileDefined={activeEditorTabIndex !== null}\n      isDebugging={isDebugging}\n      isEditorAutorun={isEditorAutorun}\n      isRunning={isRunning}\n      key=\"autorun\"\n    />\n  );\n\n  const chapterSelectHandler = ({ chapter }: { chapter: Chapter }, e: any) =>\n    handleChapterSelect(chapter);\n\n  const chapterSelectButton = (\n    <ControlBarChapterSelect\n      handleChapterSelect={chapterSelectHandler}\n      isFolderModeEnabled={isFolderModeEnabled}\n      sourceChapter={sourceChapter}\n      sourceVariant={sourceVariant}\n      key=\"chapter\"\n    />\n  );\n\n  const clearButton = (\n    <ControlBarClearButton handleReplOutputClear={handleReplOutputClear} key=\"clear_repl\" />\n  );\n\n  const evalButton = (\n    <ControlBarEvalButton handleReplEval={handleReplEval} isRunning={isRunning} key=\"eval_repl\" />\n  );\n\n  const dataVisualizerTab = makeDataVisualizerTabFrom(workspaceLocation);\n\n  const cseMachineTab = makeCseMachineTabFrom(workspaceLocation);\n\n  const tabs: SideContentTab[] = [\n    {\n      label: 'Sourcecast Table',\n      iconName: IconNames.HOME,\n      body: (\n        <div>\n          <span className=\"Multi-line\">\n            <Pre>{title ? 'Title: ' + title + '\\nDescription: ' + description : INTRODUCTION}</Pre>\n          </span>\n          <SourceRecorderTable\n            handleSetSourcecastData={handleSetSourcecastData}\n            sourcecastIndex={sourcecastIndex}\n            courseId={courseId}\n          />\n        </div>\n      ),\n      id: SideContentType.introduction\n    },\n    dataVisualizerTab,\n    cseMachineTab\n  ];\n\n  const onChangeTabs = (\n    newTabId: SideContentType,\n    prevTabId: SideContentType,\n    event: React.MouseEvent<HTMLElement>\n  ) => {\n    if (newTabId === prevTabId) {\n      return;\n    }\n    setSelectedTab(newTabId);\n  };\n\n  const editorContainerHandlers = useMemo(() => {\n    return {\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorUpdateBreakpoints: (newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, 0, newBreakpoints)),\n      setActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      removeEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex))\n    };\n  }, [dispatch]);\n  const editorContainerProps: SourcecastEditorContainerProps = {\n    editorVariant: 'sourcecast',\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    setActiveEditorTabIndex: editorContainerHandlers.setActiveEditorTabIndex,\n    removeEditorTabByIndex: editorContainerHandlers.removeEditorTabByIndex,\n    editorTabs: editorTabs.map(convertEditorTabStateToProps),\n    codeDeltasToApply: codeDeltasToApply,\n    isEditorReadonly: isEditorReadonly,\n    editorSessionId: '',\n    handleDeclarationNavigate: editorContainerHandlers.handleDeclarationNavigate,\n    handleEditorEval: handleEditorEval,\n    handleEditorValueChange: handleEditorValueChange,\n    isEditorAutorun: isEditorAutorun,\n    inputToApply: inputToApply,\n    isPlaying: playbackStatus === PlaybackStatus.playing,\n    handleEditorUpdateBreakpoints: editorContainerHandlers.handleEditorUpdateBreakpoints\n  };\n\n  const replHandlers = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation))\n    };\n  }, [dispatch]);\n  const replProps = {\n    output: output,\n    replValue: replValue,\n    handleBrowseHistoryDown: replHandlers.handleBrowseHistoryDown,\n    handleBrowseHistoryUp: replHandlers.handleBrowseHistoryUp,\n    handleReplEval: handleReplEval,\n    handleReplValueChange: replHandlers.handleReplValueChange,\n    sourceChapter: sourceChapter,\n    sourceVariant: sourceVariant,\n    externalLibrary: externalLibraryName,\n    replButtons: [evalButton, clearButton]\n  };\n\n  const sideBarProps = {\n    tabs: []\n  };\n\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: {\n      editorButtons: [autorunButtons, chapterSelectButton]\n    },\n    editorContainerProps,\n    handleSideContentHeightChange: handleSideContentHeightChange,\n    replProps,\n    sideBarProps,\n    sideContentProps: {\n      selectedTabId: selectedTab,\n      onChange: onChangeTabs,\n      tabs: {\n        beforeDynamicTabs: tabs,\n        afterDynamicTabs: []\n      },\n      workspaceLocation\n    }\n  };\n  const mobileWorkspaceProps: MobileWorkspaceProps = {\n    editorContainerProps,\n    replProps,\n    sideBarProps,\n    mobileSideContentProps: {\n      mobileControlBarProps: {\n        editorButtons: [autorunButtons, chapterSelectButton]\n      },\n      selectedTabId: selectedTab,\n      onChange: onChangeTabs,\n      tabs: {\n        beforeDynamicTabs: tabs,\n        afterDynamicTabs: []\n      },\n      workspaceLocation\n    }\n  };\n\n  const sourcecastControlbarHandlers = useMemo(() => {\n    return {\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback)),\n      handleSetCurrentPlayerTime: (playerTime: number) =>\n        dispatch(setCurrentPlayerTime(playerTime, workspaceLocation)),\n      handleSetCodeDeltasToApply: (deltas: CodeDelta[]) =>\n        dispatch(setCodeDeltasToApply(deltas, workspaceLocation)),\n      handleSetIsEditorReadonly: (editorReadonly: boolean) =>\n        dispatch(setIsEditorReadonly(workspaceLocation, editorReadonly)),\n      handleSetInputToApply: (inputToApply: Input) =>\n        dispatch(setInputToApply(inputToApply, workspaceLocation)),\n      handleSetSourcecastDuration: (duration: number) =>\n        dispatch(setSourcecastDuration(duration, workspaceLocation))\n    };\n  }, [dispatch]);\n  const sourcecastControlbarProps: SourceRecorderControlBarProps = {\n    handleEditorValueChange: handleEditorValueChange,\n    handlePromptAutocomplete: sourcecastControlbarHandlers.handlePromptAutocomplete,\n    handleSetCurrentPlayerTime: sourcecastControlbarHandlers.handleSetCurrentPlayerTime,\n    handleSetCodeDeltasToApply: sourcecastControlbarHandlers.handleSetCodeDeltasToApply,\n    handleSetIsEditorReadonly: sourcecastControlbarHandlers.handleSetIsEditorReadonly,\n    handleSetInputToApply: sourcecastControlbarHandlers.handleSetInputToApply,\n    handleSetSourcecastDuration: sourcecastControlbarHandlers.handleSetSourcecastDuration,\n    handleSetSourcecastStatus: handleSetSourcecastStatus,\n    audioUrl: audioUrl,\n    currentPlayerTime: currentPlayerTime,\n    duration: playbackDuration,\n    playbackData: playbackData,\n    playbackStatus: playbackStatus,\n    handleChapterSelect: handleChapterSelect,\n    handleExternalSelect: handleExternalSelect,\n    setSelectedTab: setSelectedTab\n  };\n\n  return (\n    <div className={classNames('Sourcecast', Classes.DARK)}>\n      <SourceRecorderControlBar {...sourcecastControlbarProps} />\n      {isMobileBreakpoint ? (\n        <MobileWorkspace {...mobileWorkspaceProps} />\n      ) : (\n        <Workspace {...workspaceProps} />\n      )}\n    </div>\n  );\n};\n\nconst INTRODUCTION = 'Welcome to Sourcecast!';\n\nexport default Sourcecast;\n","import {\n  Button,\n  Callout,\n  FileInput,\n  FormGroup,\n  H2,\n  H4,\n  HTMLSelect,\n  Icon,\n  Intent,\n  Position\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport { GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { uniqBy } from 'lodash';\nimport React from 'react';\nimport { useCSVReader } from 'react-papaparse';\nimport { StoriesRole } from 'src/commons/application/ApplicationTypes';\n\nimport Constants from '../../../../commons/utils/Constants';\n\ntype Props = {\n  handleAddNewUsersToCourse: (users: NameUsernameRole[], provider: string) => void;\n};\n\nexport type NameUsernameRole = {\n  name: string;\n  username: string;\n  role: StoriesRole;\n};\n\nconst AddStoriesUserPanel: React.FC<Props> = props => {\n  const [users, setUsers] = React.useState<NameUsernameRole[]>([]);\n  const [invalidCsvMsg, setInvalidCsvMsg] = React.useState<string | JSX.Element>('');\n  const gridApi = React.useRef<GridApi>();\n  const { CSVReader } = useCSVReader();\n\n  const columnDefs = [\n    {\n      headerName: 'Name',\n      field: 'name'\n    },\n    {\n      headerName: 'Username',\n      field: 'username'\n    },\n    {\n      headerName: 'Role',\n      field: 'role'\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: true,\n    resizable: true,\n    sortable: true\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n  };\n\n  const grid = (\n    <div className=\"Grid ag-grid-parent ag-theme-balham\">\n      <AgGridReact\n        domLayout={'autoHeight'}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColumnDefs}\n        onGridReady={onGridReady}\n        onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n        rowData={users}\n        rowHeight={36}\n        suppressCellFocus={true}\n        suppressMovableColumns={true}\n        pagination\n      />\n    </div>\n  );\n\n  const htmlSelectOptions = [...Constants.authProviders.entries()].map(([id, _]) => id);\n  const [provider, setProvider] = React.useState(htmlSelectOptions[0]);\n\n  const validateCsvInput = (results: any) => {\n    const { data, errors }: { data: string[][]; errors: any[] } = results;\n\n    // react-papaparse upload errors\n    if (!!errors.length) {\n      setInvalidCsvMsg(\n        'Error detected while uploading the CSV file! Please recheck the file and try again.'\n      );\n      return;\n    }\n\n    /**\n     * Begin CSV validation.\n     *\n     * Terminate early if validation errors are encountered, and do not add to existing\n     * valid uploaded entries in the table\n     */\n    const processed: NameUsernameRole[] = [...users];\n\n    if (data.length + users.length > 1000) {\n      setInvalidCsvMsg('Please limit each upload to 1000 entries!');\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      // Incorrect number of columns\n      if (data[i].length !== 3) {\n        setInvalidCsvMsg(\n          <>\n            <div>\n              Invalid format (line {i})! Please ensure that the name, username and role is specified\n              for each row entry!\n            </div>\n            <br />\n            <div>\n              Format: <i>name,username,role</i>\n            </div>\n            <br />\n            <div>(please hover over the question mark above for more details)</div>\n          </>\n        );\n        return;\n      }\n      // Invalid role specified\n      if (!Object.values(StoriesRole).includes(data[i][2] as StoriesRole)) {\n        setInvalidCsvMsg(\n          `Invalid role (line ${i})! Please ensure that the third column of each entry contains one of the following: 'member, moderator, admin'`\n        );\n        return;\n      }\n    }\n\n    data.forEach(e => {\n      processed.push({\n        name: e[0],\n        username: e[1],\n        role: e[2] as StoriesRole\n      });\n    });\n\n    // Check for duplicate usernames in data\n    if (uniqBy(processed, val => val.username).length !== processed.length) {\n      setInvalidCsvMsg('There are duplicate usernames in the uploaded CSV(s)!');\n      return;\n    }\n\n    // No validation errors\n    setUsers(processed);\n    setInvalidCsvMsg('');\n  };\n\n  const submitHandler = () => {\n    props.handleAddNewUsersToCourse(users, provider);\n    setUsers([]);\n    setProvider(htmlSelectOptions[0]);\n  };\n\n  return (\n    <div className=\"add-users\">\n      <H2>Add Stories Users</H2>\n      {grid}\n      <H4>Upload a CSV file to mass insert or update users in your course.</H4>\n      <div className=\"upload-container\">\n        <div>\n          <div className=\"upload-settings\">\n            <div className=\"file-input\">\n              <CSVReader\n                onUploadAccepted={(results: any) => validateCsvInput(results)}\n                config={{\n                  delimiter: ',',\n                  skipEmptyLines: true\n                }}\n              >\n                {({ getRootProps, acceptedFile, ProgressBar, getRemoveFileProps }: any) => (\n                  <>\n                    <FileInput text=\"Upload CSV\" inputProps={getRootProps()} />\n                    <Popover2\n                      content={\n                        <div>\n                          <p>\n                            <u>CSV Format</u>: &nbsp;\n                            <b>\n                              <i>name,username,role</i>\n                            </b>\n                          </p>\n                          <p>\n                            <b>\n                              <i>name</i>\n                            </b>\n                            : the name of the user\n                          </p>\n                          <p>\n                            <b>\n                              <i>username</i>\n                            </b>\n                            : username of the user in the corresponding authentication\n                          </p>\n                          <p>\n                            <b>\n                              <i>role</i>\n                            </b>\n                            : the role of the user <i>(member | moderator | admin)</i>\n                          </p>\n\n                          <p>&nbsp;</p>\n                          <p>\n                            <u>Examples:</u>\n                          </p>\n                          <p>\n                            <i>(Luminus): &nbsp; Wei Kai,e1234567,member</i>\n                          </p>\n                          <p>\n                            <i>(Google): &nbsp; Timothy,learner@gmail.com,moderator</i>\n                          </p>\n                          <p>\n                            <i>(GitHub): &nbsp; Mingkai,ghusername,admin</i>\n                          </p>\n                        </div>\n                      }\n                      interactionKind=\"hover\"\n                      position={Position.TOP}\n                      popoverClassName=\"file-input-popover\"\n                    >\n                      <Icon icon={IconNames.HELP} className=\"file-input-icon\" />\n                    </Popover2>\n                  </>\n                )}\n              </CSVReader>\n            </div>\n\n            <FormGroup\n              className=\"html-select\"\n              label={\n                <div className=\"html-select-label\">\n                  <div>Authentication Provider</div>\n                  <Popover2\n                    content=\"The authentication provider your learners will use to log in with\"\n                    interactionKind=\"hover-target\"\n                    position={Position.TOP}\n                    popoverClassName=\"html-select-popover\"\n                  >\n                    <Icon icon={IconNames.HELP} className=\"html-select-label-icon\" />\n                  </Popover2>\n                </div>\n              }\n              inline\n            >\n              <HTMLSelect\n                options={htmlSelectOptions}\n                value={provider}\n                onChange={e => setProvider(e.target.value)}\n              />\n            </FormGroup>\n          </div>\n          {invalidCsvMsg && (\n            <Callout intent={Intent.DANGER} title=\"Invalid CSV file provided!\">\n              {invalidCsvMsg}\n            </Callout>\n          )}\n        </div>\n      </div>\n      <Button\n        className=\"add-button\"\n        text=\"Add Stories Users\"\n        intent={users.length === 0 ? Intent.NONE : Intent.WARNING}\n        onClick={submitHandler}\n      />\n    </div>\n  );\n};\n\nexport default AddStoriesUserPanel;\n","import {\n  Button,\n  Callout,\n  FileInput,\n  FormGroup,\n  H2,\n  H4,\n  HTMLSelect,\n  Icon,\n  Intent,\n  Position\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport { GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { uniqBy } from 'lodash';\nimport React from 'react';\nimport { useCSVReader } from 'react-papaparse';\nimport { Role } from 'src/commons/application/ApplicationTypes';\n\nimport Constants from '../../../../commons/utils/Constants';\n\ntype Props = {\n  handleAddNewUsersToCourse: (users: UsernameRoleGroup[], provider: string) => void;\n};\n\nexport type UsernameRoleGroup = {\n  username: string;\n  role: Role;\n  group?: string;\n};\n\nconst AddUserPanel: React.FC<Props> = props => {\n  const [users, setUsers] = React.useState<UsernameRoleGroup[]>([]);\n  const [invalidCsvMsg, setInvalidCsvMsg] = React.useState<string | JSX.Element>('');\n  const gridApi = React.useRef<GridApi>();\n  const { CSVReader } = useCSVReader();\n\n  const columnDefs = [\n    {\n      headerName: 'Username',\n      field: 'username'\n    },\n    {\n      headerName: 'Role',\n      field: 'role'\n    },\n    {\n      headerName: 'Group',\n      field: 'group'\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: true,\n    resizable: true,\n    sortable: true\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n  };\n\n  const grid = (\n    <div className=\"Grid ag-grid-parent ag-theme-balham\">\n      <AgGridReact\n        domLayout={'autoHeight'}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColumnDefs}\n        onGridReady={onGridReady}\n        onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n        rowData={users}\n        rowHeight={36}\n        suppressCellFocus={true}\n        suppressMovableColumns={true}\n        pagination\n      />\n    </div>\n  );\n\n  const htmlSelectOptions = [...Constants.authProviders.entries()].map(([id, _]) => id);\n  const [provider, setProvider] = React.useState(htmlSelectOptions[0]);\n\n  const validateCsvInput = (results: any) => {\n    const { data, errors }: { data: string[][]; errors: any[] } = results;\n\n    // react-papaparse upload errors\n    if (!!errors.length) {\n      setInvalidCsvMsg(\n        'Error detected while uploading the CSV file! Please recheck the file and try again.'\n      );\n      return;\n    }\n\n    /**\n     * Begin CSV validation.\n     *\n     * Terminate early if validation errors are encountered, and do not add to existing\n     * valid uploaded entries in the table\n     */\n    const processed: UsernameRoleGroup[] = [...users];\n\n    if (data.length + users.length > 1000) {\n      setInvalidCsvMsg('Please limit each upload to 1000 entries!');\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      // Incorrect number of columns\n      if (!(data[i].length === 2 || data[i].length === 3)) {\n        setInvalidCsvMsg(\n          <>\n            <div>\n              Invalid format (line {i})! Please ensure that the username and role is specified for\n              each row entry!\n            </div>\n            <br />\n            <div>\n              Format: <i>username,role</i> <b>OR</b> <i>username,role,group</i>\n            </div>\n            <br />\n            <div>(please hover over the question mark above for more details)</div>\n          </>\n        );\n        return;\n      }\n      // Invalid role specified\n      if (!Object.values(Role).includes(data[i][1] as Role)) {\n        setInvalidCsvMsg(\n          `Invalid role (line ${i})! Please ensure that the second column of each entry contains one of the following: 'admin, staff, student'`\n        );\n        return;\n      }\n    }\n\n    data.forEach(e => {\n      processed.push({\n        username: e[0],\n        role: e[1] as Role,\n        group: e[2]\n      });\n    });\n\n    // Check for duplicate usernames in data\n    if (uniqBy(processed, val => val.username).length !== processed.length) {\n      setInvalidCsvMsg('There are duplicate usernames in the uploaded CSV(s)!');\n      return;\n    }\n\n    // No validation errors\n    setUsers(processed);\n    setInvalidCsvMsg('');\n  };\n\n  const submitHandler = () => {\n    props.handleAddNewUsersToCourse(users, provider);\n    setUsers([]);\n    setProvider(htmlSelectOptions[0]);\n  };\n\n  return (\n    <div className=\"add-users\">\n      <H2>Add Users</H2>\n      {grid}\n      <H4>Upload a CSV file to mass insert or update users in your course.</H4>\n      <div className=\"upload-container\">\n        <div>\n          <div className=\"upload-settings\">\n            <div className=\"file-input\">\n              <CSVReader\n                onUploadAccepted={(results: any) => validateCsvInput(results)}\n                config={{\n                  delimiter: ',',\n                  skipEmptyLines: true\n                }}\n              >\n                {({ getRootProps, acceptedFile, ProgressBar, getRemoveFileProps }: any) => (\n                  <>\n                    <FileInput text=\"Upload CSV\" inputProps={getRootProps()} />\n                    <Popover2\n                      content={\n                        <div>\n                          <p>\n                            <u>CSV Format</u>: &nbsp;\n                            <b>\n                              <i>username,role</i>\n                            </b>\n                            &nbsp;&nbsp;OR&nbsp;&nbsp;\n                            <b>\n                              <i>username,role,group</i>\n                            </b>\n                          </p>\n                          <p>\n                            <b>\n                              <i>username</i>\n                            </b>\n                            : the username of the learner in the corresponding authentication\n                            provider\n                          </p>\n                          <p>\n                            <b>\n                              <i>role</i>\n                            </b>\n                            : the role of the learner in this course{' '}\n                            <i>(admin | staff | student)</i>\n                          </p>\n                          <p>\n                            <b>\n                              <i>group (optional)</i>\n                            </b>\n                            : the group name that the learner belongs to in this course\n                          </p>\n                          <p>\n                            <i>\n                              (*Note that staff or admin will automatically be assigned as group\n                              leader and each group\n                            </i>\n                          </p>\n                          <p>\n                            <i>\n                              can only have one leader. If there are duplicates the latest entry\n                              will take effect)\n                            </i>\n                          </p>\n\n                          <p>&nbsp;</p>\n                          <p>\n                            <u>Examples:</u>\n                          </p>\n                          <p>\n                            <i>\n                              (Luminus): &nbsp;e1234567,student &nbsp;•&nbsp;\n                              e1234567,student,Group1\n                            </i>\n                          </p>\n                          <p>\n                            <i>\n                              (Google): &nbsp;learner@gmail.com,staff &nbsp;•&nbsp;\n                              learner@gmail.com,staff,Group1\n                            </i>\n                          </p>\n                          <p>\n                            <i>\n                              (GitHub): &nbsp;ghusername,admin &nbsp;•&nbsp; ghusername,admin,Group1\n                            </i>\n                          </p>\n                        </div>\n                      }\n                      interactionKind=\"hover\"\n                      position={Position.TOP}\n                      popoverClassName=\"file-input-popover\"\n                    >\n                      <Icon icon={IconNames.HELP} className=\"file-input-icon\" />\n                    </Popover2>\n                  </>\n                )}\n              </CSVReader>\n            </div>\n\n            <FormGroup\n              className=\"html-select\"\n              label={\n                <div className=\"html-select-label\">\n                  <div>Authentication Provider</div>\n                  <Popover2\n                    content=\"The authentication provider your learners will use to log in with\"\n                    interactionKind=\"hover-target\"\n                    position={Position.TOP}\n                    popoverClassName=\"html-select-popover\"\n                  >\n                    <Icon icon={IconNames.HELP} className=\"html-select-label-icon\" />\n                  </Popover2>\n                </div>\n              }\n              inline\n            >\n              <HTMLSelect\n                options={htmlSelectOptions}\n                value={provider}\n                onChange={e => setProvider(e.target.value)}\n              />\n            </FormGroup>\n          </div>\n          {invalidCsvMsg && (\n            <Callout intent={Intent.DANGER} title=\"Invalid CSV file provided!\">\n              {invalidCsvMsg}\n            </Callout>\n          )}\n        </div>\n      </div>\n      <Button\n        className=\"add-button\"\n        text=\"Add Users\"\n        intent={users.length === 0 ? Intent.NONE : Intent.WARNING}\n        onClick={submitHandler}\n      />\n    </div>\n  );\n};\n\nexport default AddUserPanel;\n","import { Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype BooleanCellProps = OwnProps;\n\ninterface dataProps {\n  [key: string]: boolean;\n}\n\ntype OwnProps = {\n  data: dataProps;\n  field: KeysOfType<dataProps, boolean>;\n  rowIndex: number;\n  setStateHandler: (index: number, value: boolean) => void;\n};\n\nconst BooleanCell: React.FC<BooleanCellProps> = props => {\n  const { data } = props;\n  const checked = data[props.field];\n\n  const changeHandler = React.useCallback(() => {\n    props.setStateHandler(props.rowIndex, !checked);\n  }, [props, checked]);\n\n  return <Switch checked={checked} onChange={changeHandler} />;\n};\n\nexport default BooleanCell;\n","import { Button, Dialog, DialogBody, DialogFooter, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useCallback, useState } from 'react';\nimport { AssessmentConfiguration } from 'src/commons/assessment/AssessmentTypes';\nimport ControlButton from 'src/commons/ControlButton';\n\ntype Props = {\n  data: AssessmentConfiguration;\n  rowIndex: number;\n  deleteRowHandler: (index: number) => void;\n};\n\nconst DeleteRowCell: React.FC<Props> = ({ data, rowIndex, deleteRowHandler }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const clickHandler = () => {\n    setIsDialogOpen(true);\n  };\n  const handleDelete = useCallback(() => {\n    deleteRowHandler(rowIndex);\n    setIsDialogOpen(false);\n  }, [deleteRowHandler, rowIndex]);\n\n  return (\n    <>\n      <Button icon={IconNames.CROSS} onClick={clickHandler} />\n      <Dialog\n        icon={IconNames.WARNING_SIGN}\n        isOpen={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        title=\"Warning\"\n      >\n        <DialogBody>\n          <p>\n            Are you sure you want to <b>delete</b> the assessment type <i>{data.type}</i>?\n          </p>\n          <p>\n            <b>\n              All related assessments, submissions and answers will be deleted as well upon clicking\n              the main save button.\n            </b>\n          </p>\n        </DialogBody>\n        <DialogFooter\n          actions={\n            <>\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={() => setIsDialogOpen(false)}\n                options={{ minimal: false }}\n              />\n              <ControlButton\n                label=\"Ok\"\n                icon={IconNames.TICK}\n                onClick={handleDelete}\n                options={{ minimal: false, intent: Intent.WARNING }}\n              />\n            </>\n          }\n        />\n      </Dialog>\n    </>\n  );\n};\nexport default DeleteRowCell;\n","import { NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { AssessmentConfiguration } from 'src/commons/assessment/AssessmentTypes';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype NumericCellProps = OwnProps;\n\ntype OwnProps = {\n  data: AssessmentConfiguration;\n  field: KeysOfType<AssessmentConfiguration, number>;\n  rowIndex: number;\n  setStateHandler: (index: number, value: number) => void;\n};\n\nconst NumericCell: React.FC<NumericCellProps> = props => {\n  const { data } = props;\n\n  const changeHandler = React.useCallback(\n    (value: number) => {\n      props.setStateHandler(props.rowIndex, value);\n    },\n    [props]\n  );\n\n  return (\n    <NumericInput\n      value={data[props.field]}\n      min={0}\n      clampValueOnBlur\n      onValueChange={changeHandler}\n    />\n  );\n};\nexport default NumericCell;\n","import { Button, H2 } from '@blueprintjs/core';\nimport {\n  CellValueChangedEvent,\n  ColDef,\n  GridApi,\n  GridReadyEvent,\n  RowDragEvent\n} from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { isEqual } from 'lodash';\nimport React from 'react';\nimport { showWarningMessage } from 'src/commons/utils/notifications/NotificationsHelper';\n\nimport { AssessmentConfiguration } from '../../../../../commons/assessment/AssessmentTypes';\nimport BooleanCell from './BooleanCell';\nimport DeleteRowCell from './DeleteRowCell';\nimport NumericCell from './NumericCell';\n\nexport type AssessmentConfigPanelProps = OwnProps;\n\ntype OwnProps = {\n  assessmentConfig: React.MutableRefObject<AssessmentConfiguration[]>;\n  setAssessmentConfig: (assessmentConfig: AssessmentConfiguration[]) => void;\n  setAssessmentConfigsToDelete: (assessmentConfig: AssessmentConfiguration) => void;\n  setHasChangesAssessmentConfig: (val: boolean) => void;\n};\n\nconst AssessmentConfigPanel: React.FC<AssessmentConfigPanelProps> = props => {\n  const { assessmentConfig, setAssessmentConfig, setAssessmentConfigsToDelete } = props;\n  const gridApi = React.useRef<GridApi>();\n\n  const setIsManuallyGraded = (index: number, value: boolean) => {\n    const temp = [...assessmentConfig.current];\n    temp[index] = {\n      ...temp[index],\n      isManuallyGraded: value\n    };\n    setAssessmentConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('isManuallyGraded', value);\n  };\n\n  const setDisplayInDashboard = (index: number, value: boolean) => {\n    const temp = [...assessmentConfig.current];\n    temp[index] = {\n      ...temp[index],\n      displayInDashboard: value\n    };\n    setAssessmentConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('displayInDashboard', value);\n  };\n\n  const setHasTokenCounter = (index: number, value: boolean) => {\n    const temp = [...assessmentConfig.current];\n    temp[index] = {\n      ...temp[index],\n      hasTokenCounter: value\n    };\n    setAssessmentConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('hasTokenCounter', value);\n  };\n\n  const setEarlyXp = (index: number, value: number) => {\n    const temp = [...assessmentConfig.current];\n    temp[index] = {\n      ...temp[index],\n      earlySubmissionXp: value\n    };\n    setAssessmentConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('earlySubmissionXp', value);\n  };\n\n  const setHoursBeforeDecay = (index: number, value: number) => {\n    const temp = [...assessmentConfig.current];\n    temp[index] = {\n      ...temp[index],\n      hoursBeforeEarlyXpDecay: value\n    };\n    setAssessmentConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('hoursBeforeEarlyXpDecay', value);\n  };\n\n  const addRowHandler = () => {\n    if (assessmentConfig.current.length >= 8) {\n      showWarningMessage('You can have at most 8 assessment types!');\n      return;\n    }\n\n    const temp = [...assessmentConfig.current];\n    temp.push({\n      assessmentConfigId: -1,\n      type: 'untitled',\n      isManuallyGraded: true,\n      displayInDashboard: true,\n      hoursBeforeEarlyXpDecay: 0,\n      hasTokenCounter: false,\n      earlySubmissionXp: 0\n    });\n    setAssessmentConfig(temp);\n    gridApi.current?.setRowData(temp);\n  };\n\n  const deleteRowHandler = (index: number) => {\n    if (assessmentConfig.current.length <= 1) {\n      showWarningMessage('You must have at least 1 assessment type!');\n      return;\n    }\n\n    const temp = [...assessmentConfig.current];\n    const deleted = temp.splice(index, 1);\n    gridApi.current?.setRowData(temp);\n    setAssessmentConfig(temp);\n    setAssessmentConfigsToDelete(deleted[0]);\n  };\n\n  const columnDefs: ColDef[] = [\n    {\n      headerName: 'Assessment Type',\n      field: 'type',\n      rowDrag: true,\n      editable: true\n    },\n    {\n      headerName: 'Is Manually Graded',\n      field: 'isManuallyGraded',\n      cellRenderer: BooleanCell,\n      cellRendererParams: {\n        setStateHandler: setIsManuallyGraded,\n        field: 'isManuallyGraded'\n      }\n    },\n    {\n      headerName: 'Display in Dashboard',\n      field: 'displayInDashboard',\n      cellRenderer: BooleanCell,\n      cellRendererParams: {\n        setStateHandler: setDisplayInDashboard,\n        field: 'displayInDashboard'\n      }\n    },\n    {\n      headerName: 'Has Token Counter',\n      field: 'hasTokenCounter',\n      cellRenderer: BooleanCell,\n      cellRendererParams: {\n        setStateHandler: setHasTokenCounter,\n        field: 'hasTokenCounter'\n      }\n    },\n    {\n      headerName: 'Max Bonus XP',\n      field: 'earlySubmissionXp',\n      cellRenderer: NumericCell,\n      cellRendererParams: {\n        setStateHandler: setEarlyXp,\n        field: 'earlySubmissionXp'\n      }\n    },\n    {\n      headerName: 'Early Hours Before Decay',\n      field: 'hoursBeforeEarlyXpDecay',\n      cellRenderer: NumericCell,\n      cellRendererParams: {\n        setStateHandler: setHoursBeforeDecay,\n        field: 'hoursBeforeEarlyXpDecay'\n      }\n    },\n    {\n      headerName: 'Delete Row',\n      field: 'placeholderToPreventColumnRerender',\n      cellRenderer: DeleteRowCell,\n      cellRendererParams: {\n        deleteRowHandler: deleteRowHandler\n      },\n      maxWidth: 120,\n      resizable: false\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: false,\n    resizable: true,\n    sortable: false\n  };\n\n  // Tracks the movement of rows in our local React state while dragging\n  const onRowDragMove = React.useCallback(\n    (event: RowDragEvent) => {\n      const movingNode = event.node;\n      const overNode = event.overNode;\n      const rowNeedsToMove = movingNode !== overNode;\n      if (rowNeedsToMove) {\n        const movingData = movingNode.data;\n        const overData = overNode?.data;\n        const fromIndex = indexOfObject(assessmentConfig.current, movingData);\n        const toIndex = indexOfObject(assessmentConfig.current, overData);\n\n        const temp = [...assessmentConfig.current];\n        moveInArray(temp, fromIndex, toIndex);\n        assessmentConfig.current = temp;\n      }\n    },\n    [assessmentConfig]\n  );\n\n  // Updates the data passed into ag-grid (this is necessary to update the rowIndex in our custom\n  // cellRenderer)\n  const onRowDragLeaveOrEnd = (event: RowDragEvent) => {\n    gridApi.current?.setRowData(assessmentConfig.current);\n    props.setHasChangesAssessmentConfig(true);\n  };\n\n  // Updates our local React state whenever there are changes to the Assessment Type column\n  const onCellValueChanged = (event: CellValueChangedEvent) => {\n    if (event.colDef.field === 'type') {\n      const temp = [...assessmentConfig.current];\n      temp[event.rowIndex!] = {\n        ...temp[event.rowIndex!],\n        type: event.value\n      };\n      assessmentConfig.current = temp;\n      props.setHasChangesAssessmentConfig(true);\n    }\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n    params.api.sizeColumnsToFit();\n  };\n\n  const grid = (\n    <div className=\"Grid ag-grid-parent ag-theme-balham\">\n      <AgGridReact\n        domLayout={'autoHeight'}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColumnDefs}\n        onGridReady={onGridReady}\n        onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n        rowData={props.assessmentConfig.current}\n        rowHeight={36}\n        rowDragManaged={true}\n        suppressCellFocus={true}\n        suppressMovableColumns={true}\n        suppressPaginationPanel={true}\n        onRowDragMove={onRowDragMove}\n        onRowDragLeave={onRowDragLeaveOrEnd}\n        onRowDragEnd={onRowDragLeaveOrEnd}\n        onCellValueChanged={onCellValueChanged}\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"assessment-configuration\">\n      <div className=\"assessment-configuration-header-container\">\n        <H2>Assessment Configuration</H2>\n        <Button text=\"Add Row\" onClick={addRowHandler} className=\"add-row-button\" />\n      </div>\n      {grid}\n    </div>\n  );\n};\n\nfunction moveInArray(arr: any[], fromIndex: number, toIndex: number): void {\n  const element = arr[fromIndex];\n  arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, element);\n}\n\nfunction indexOfObject(arr: any[], obj: any): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (isEqual(arr[i], obj)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport default AssessmentConfigPanel;\n","import { Button, MenuItem } from '@blueprintjs/core';\nimport { ItemRenderer, Select2 } from '@blueprintjs/select';\nimport React from 'react';\nimport { NotificationConfiguration, TimeOption } from 'src/commons/application/types/SessionTypes';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype SelectCellProps = OwnProps;\n\ntype OwnProps = {\n  data: NotificationConfiguration;\n  rowIndex: number;\n  field: KeysOfType<NotificationConfiguration, TimeOption[]>;\n  setStateHandler: (rowIndex: number, value: any) => void;\n};\n\nconst SelectCell: React.FC<SelectCellProps> = props => {\n  const [selectedOption, setSelectedOption] = React.useState<TimeOption>();\n  const timeOptions: TimeOption[] = props.data[props.field];\n  timeOptions.sort((to1, to2) => to1.minutes - to2.minutes);\n\n  const getUserFriendlyText = (option: TimeOption) =>\n    option.minutes >= 60\n      ? `${Math.round((option.minutes / 60) * 100) / 100} hour(s)`\n      : `${option.minutes} minute(s)`;\n\n  const renderOption: ItemRenderer<TimeOption> = (\n    option: TimeOption,\n    { handleClick, handleFocus, modifiers, query }\n  ) => {\n    return (\n      <MenuItem\n        active={modifiers.active}\n        disabled={modifiers.disabled}\n        key={option.id + '' + option.minutes}\n        onClick={handleClick}\n        onFocus={handleFocus}\n        roleStructure=\"listoption\"\n        text={getUserFriendlyText(option)}\n      />\n    );\n  };\n\n  const defaultTimeOptions = timeOptions.filter(to => to.isDefault);\n  if (defaultTimeOptions.length === 1) {\n    if (!selectedOption || selectedOption.id !== defaultTimeOptions[0].id) {\n      setSelectedOption(defaultTimeOptions[0]);\n    }\n  }\n\n  const handleSelect = (option: TimeOption) => {\n    setSelectedOption(option);\n    const updatedTimeOptions: TimeOption[] = timeOptions.map(timeOption => {\n      return {\n        ...timeOption,\n        isDefault: timeOption.id === option.id && timeOption.minutes === option.minutes\n      };\n    });\n    props.setStateHandler(props.rowIndex, updatedTimeOptions);\n  };\n\n  return (\n    <Select2<TimeOption>\n      filterable={false}\n      items={timeOptions}\n      itemRenderer={renderOption}\n      onItemSelect={handleSelect}\n      noResults={<MenuItem disabled={true} text=\"No results.\" roleStructure=\"listoption\" />}\n    >\n      <Button\n        text={selectedOption ? getUserFriendlyText(selectedOption) : 'Choose default'}\n        rightIcon=\"caret-down\"\n      />\n    </Select2>\n  );\n};\n\nexport default SelectCell;\n","import { TagInput } from '@blueprintjs/core';\nimport { isInteger } from 'lodash';\nimport React, { useState } from 'react';\nimport { NotificationConfiguration, TimeOption } from 'src/commons/application/types/SessionTypes';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype TimeOptionCellProps = OwnProps;\n\ntype OwnProps = {\n  data: NotificationConfiguration;\n  rowIndex: number;\n  field: KeysOfType<NotificationConfiguration, TimeOption[]>;\n  setStateHandler: (rowIndex: number, value: TimeOption[]) => void;\n  setDelete: (timeOption: TimeOption) => void;\n};\n\nconst TimeOptionCell: React.FC<TimeOptionCellProps> = props => {\n  const timeOptions: TimeOption[] = props.data[props.field];\n  const [values, setValues] = useState<React.ReactNode[]>(\n    timeOptions.map((timeOption: TimeOption) => (timeOption.minutes / 60).toFixed(2).toString())\n  );\n\n  function isValidTimeOption(n: string) {\n    const num = parseFloat(n);\n    const minutes = num * 60;\n    if (!isInteger(minutes)) return false;\n    // Check if time option already exists\n    if (timeOptions.some((timeOption: TimeOption) => timeOption.minutes === minutes)) return false;\n\n    return !isNaN(num) && isFinite(num) && num >= 0;\n  }\n\n  const onRemove = (value: React.ReactNode, index: number) => {\n    // TODO: Show Warning Dialog\n    setValues(values.filter(i => i !== value));\n    props.setDelete(timeOptions[index]);\n    props.setStateHandler(\n      props.rowIndex,\n      timeOptions.filter((_, i) => i !== index)\n    );\n  };\n\n  const onAdd = (value: React.ReactNode) => {\n    if (isValidTimeOption(value as string)) {\n      const newTimeOption: TimeOption = {\n        id: -1,\n        minutes: parseFloat(value as string) * 60,\n        isDefault: false\n      };\n\n      setValues([...values, value]);\n      props.setStateHandler(props.rowIndex, [...timeOptions, newTimeOption]);\n    } else {\n      // TODO: Toaster if posisble\n    }\n  };\n\n  return <TagInput values={values} onRemove={onRemove} onAdd={onAdd} />;\n};\n\nexport default TimeOptionCell;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Button, H2, Intent } from '@blueprintjs/core';\nimport { ColDef, GridApi, GridReadyEvent, ValueFormatterFunc } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { cloneDeep } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteTimeOptions,\n  fetchNotificationConfigs,\n  updateNotificationConfigs,\n  updateTimeOptions\n} from 'src/commons/application/actions/SessionActions';\nimport { NotificationConfiguration, TimeOption } from 'src/commons/application/types/SessionTypes';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport BooleanCell from './assessmentConfigPanel/BooleanCell';\nimport SelectCell from './notificationConfigPanel/SelectCell';\nimport TimeOptionCell from './notificationConfigPanel/TimeOptionCell';\n\nconst NotificationConfigPanel = () => {\n  const gridApi = React.useRef<GridApi>();\n\n  const dispatch = useDispatch();\n  const session = useTypedSelector(state => state.session);\n\n  /**\n   * Mutable ref to track the assessment configuration form state instead of useState. This is\n   * because ag-grid does not update the cellRendererParams whenever there is an update in rowData,\n   * leading to a stale closure problem where the handlers in AssessmentConfigPanel capture the old\n   * value of assessmentConfig.\n   *\n   * Also, useState causes a flicker in ag-grid during rerenders. Thus we use this mutable ref and\n   * ag-grid's API to update cell values instead.\n   */\n  const notificationConfig = React.useRef<NotificationConfiguration[] | undefined>(\n    session.notificationConfigs\n  );\n  const [timeOptionsToDelete, setTimeOptionsToDelete] = useState<TimeOption[]>([]);\n  const [hasChangesNotificationConfig, setHasChangesNotificationConfig] = useState(false);\n\n  const setNotificationConfig = (val: NotificationConfiguration[]) => {\n    notificationConfig.current = val;\n    setHasChangesNotificationConfig(true);\n  };\n\n  const addTimeOptionsToDelete = (deletedElement: TimeOption) => {\n    // If it is not a newly created row that is yet to be persisted in the backend\n    if (deletedElement.id !== -1) {\n      const temp = [...timeOptionsToDelete];\n      temp.push(deletedElement);\n      setTimeOptionsToDelete(temp);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchNotificationConfigs());\n  }, [dispatch]);\n\n  useEffect(() => {\n    notificationConfig.current = cloneDeep(\n      session.notificationConfigs\n    ) as NotificationConfiguration[];\n  }, [session]);\n\n  const setIsEnabled = (index: number, value: boolean) => {\n    const temp = [...(notificationConfig.current ?? [])];\n    temp[index] = {\n      ...temp[index],\n      isEnabled: value\n    };\n    setNotificationConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('isEnabled', value);\n    setHasChangesNotificationConfig(true);\n  };\n\n  const setTimeOptions = (index: number, value: TimeOption[]) => {\n    const temp = [...(notificationConfig.current ?? [])];\n\n    temp[index] = {\n      ...temp[index],\n      timeOptions: value\n    };\n    setNotificationConfig(temp);\n    gridApi.current?.getDisplayedRowAtIndex(index)?.setDataValue('timeOptions', value);\n    setHasChangesNotificationConfig(true);\n  };\n\n  const assessmentTypeFormatter: ValueFormatterFunc<NotificationConfiguration> = params => {\n    return params.data!.assessmentConfig?.type || '-';\n  };\n\n  const recipientFormatter: ValueFormatterFunc<NotificationConfiguration> = params => {\n    return params.data!.notificationType.forStaff ? 'Staff' : 'Student';\n  };\n\n  const columnDefs: ColDef[] = [\n    {\n      headerName: 'Notification Type',\n      field: 'notificationType.name',\n      rowDrag: true\n    },\n    {\n      headerName: 'Assessment Type',\n      field: 'assessmentConfig.type',\n      valueFormatter: assessmentTypeFormatter\n    },\n    {\n      headerName: 'Recipients',\n      field: 'notificationType.forStaff',\n      valueFormatter: recipientFormatter\n    },\n    // TODO: Extension for notification configs\n    // {\n    //   headerName: 'View Email Template',\n    //   field: 'notificationType.name'\n    // },\n    // {\n    //   headerName: 'Past 30 Days',\n    //   field: 'notificationType.id'\n    // },\n    {\n      headerName: 'Reminder Time Options (hours)',\n      field: 'timeOptions',\n      cellRenderer: TimeOptionCell,\n      cellRendererParams: {\n        setStateHandler: setTimeOptions,\n        setDelete: addTimeOptionsToDelete,\n        field: 'timeOptions'\n      }\n    },\n    {\n      headerName: 'Default Reminder (hours)',\n      field: 'timeOptions',\n      cellRenderer: SelectCell,\n      cellRendererParams: {\n        setStateHandler: setTimeOptions,\n        field: 'timeOptions'\n      }\n    },\n    {\n      headerName: 'Enabled',\n      field: 'isEnabled',\n      cellRenderer: BooleanCell,\n      cellRendererParams: {\n        setStateHandler: setIsEnabled,\n        field: 'isEnabled'\n      }\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: false,\n    resizable: true,\n    sortable: false\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n    params.api.sizeColumnsToFit();\n  };\n\n  // Handler to submit changes to Notification Configration to the backend.\n  // Changes made to users, Course Configration and Assessment Configuration are handled separately.\n  const submitHandler = () => {\n    if (hasChangesNotificationConfig) {\n      setHasChangesNotificationConfig(false);\n      const allTimeOptions: TimeOption[] = [];\n      notificationConfig.current?.forEach(curr => {\n        const timeOptions = curr.timeOptions.map(timeOption => {\n          return {\n            ...timeOption,\n            notificationConfigId: curr.id\n          };\n        });\n        allTimeOptions.push(...timeOptions);\n      });\n\n      if (allTimeOptions.length > 0) {\n        dispatch(updateTimeOptions(allTimeOptions));\n      }\n\n      if (timeOptionsToDelete.length > 0) {\n        dispatch(deleteTimeOptions(timeOptionsToDelete.map(timeOption => timeOption.id)));\n        setTimeOptionsToDelete([]);\n      }\n      dispatch(updateNotificationConfigs(notificationConfig.current ?? []));\n    }\n  };\n\n  const grid = (\n    <div className=\"Grid ag-grid-parent ag-theme-balham\">\n      <AgGridReact\n        domLayout={'autoHeight'}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColumnDefs}\n        onGridReady={onGridReady}\n        onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n        rowData={notificationConfig.current}\n        rowHeight={36}\n        rowDragManaged={true}\n        suppressCellFocus={true}\n        suppressMovableColumns={true}\n        suppressPaginationPanel={true}\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"assessment-configuration\">\n      <div className=\"assessment-configuration-header-container\">\n        <H2>Notification Configuration</H2>\n      </div>\n      {grid}\n      <Button\n        text=\"Save\"\n        style={{ marginTop: '15px' }}\n        intent={hasChangesNotificationConfig ? Intent.WARNING : Intent.NONE}\n        onClick={submitHandler}\n      />\n    </div>\n  );\n};\n\nexport default NotificationConfigPanel;\n","import { HTMLSelect, Position } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport { AdminPanelCourseRegistration } from 'src/commons/application/types/SessionTypes';\n\ntype RolesCellProps = OwnProps;\n\ntype OwnProps = {\n  data: AdminPanelCourseRegistration;\n  rowIndex: number;\n  courseRegId: number;\n  handleUpdateUserRole: (courseRegId: number, role: Role) => void;\n};\n\nconst RolesCell: React.FC<RolesCellProps> = props => {\n  const { data } = props;\n\n  const changeHandler = React.useCallback(\n    (e: React.ChangeEvent<HTMLSelectElement>) => {\n      props.handleUpdateUserRole(data.courseRegId, e.target.value as Role);\n    },\n    [data, props]\n  );\n\n  const roleOptions = [\n    {\n      label: 'Student',\n      value: Role.Student\n    },\n    {\n      label: 'Staff',\n      value: Role.Staff\n    },\n    {\n      label: 'Admin',\n      value: Role.Admin\n    }\n  ];\n  return (\n    <Popover2\n      content=\"You cannot downgrade yourself from an admin role!\"\n      interactionKind=\"click\"\n      position={Position.TOP}\n      disabled={props.courseRegId !== data.courseRegId}\n    >\n      <HTMLSelect\n        options={roleOptions}\n        onChange={changeHandler}\n        fill\n        minimal\n        style={{ textAlign: 'center' }}\n        value={data.role}\n        disabled={props.courseRegId === data.courseRegId}\n      />\n    </Popover2>\n  );\n};\n\nexport default RolesCell;\n","import { Button, Dialog, DialogBody, DialogFooter, Intent, Position } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport React, { useCallback, useState } from 'react';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport { AdminPanelCourseRegistration } from 'src/commons/application/types/SessionTypes';\nimport ControlButton from 'src/commons/ControlButton';\nimport { showWarningMessage } from 'src/commons/utils/notifications/NotificationsHelper';\n\ntype Props = {\n  data: AdminPanelCourseRegistration;\n  rowIndex: number; // unused prop\n  handleDeleteUserFromCourse: (courseRegId: number) => void;\n};\n\nconst DeleteUserCell: React.FC<Props> = ({ data, handleDeleteUserFromCourse }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false);\n\n  const clickHandler = () => {\n    if (data.role === Role.Admin) {\n      showWarningMessage('You cannot delete an admin user!');\n      return;\n    }\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = useCallback(() => {\n    handleDeleteUserFromCourse(data.courseRegId);\n    setIsDialogOpen(false);\n  }, [data.courseRegId, handleDeleteUserFromCourse]);\n\n  return (\n    <>\n      <Popover2\n        content=\"You cannot delete an admin!\"\n        interactionKind=\"click\"\n        position={Position.TOP}\n        disabled={data.role !== Role.Admin}\n      >\n        <Button\n          text=\"Delete User\"\n          icon={IconNames.CROSS}\n          onClick={clickHandler}\n          disabled={data.role === Role.Admin}\n        />\n      </Popover2>\n      <Dialog\n        icon={IconNames.WARNING_SIGN}\n        isOpen={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        title=\"Deleting User From Course\"\n        canOutsideClickClose\n      >\n        <DialogBody>\n          <p>\n            Are you sure you want to <b>delete</b> the user{' '}\n            <i>\n              {data.name} ({data.username})\n            </i>\n            ?\n          </p>\n          <p>\n            <b>All their assessment answers will be deleted as well.</b>\n          </p>\n        </DialogBody>\n        <DialogFooter\n          actions={\n            <>\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={() => setIsDialogOpen(false)}\n                options={{ minimal: false }}\n              />\n              <ControlButton\n                label=\"Confirm\"\n                icon={IconNames.TRASH}\n                onClick={handleDelete}\n                options={{ minimal: false, intent: Intent.DANGER }}\n              />\n            </>\n          }\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default DeleteUserCell;\n","import { Button, H2 } from '@blueprintjs/core';\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport React from 'react';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport { AdminPanelCourseRegistration } from 'src/commons/application/types/SessionTypes';\n\nimport RolesCell from './RolesCell';\nimport UserActionsCell from './UserActionsCell';\n\nexport type UserConfigPanelProps = OwnProps;\n\ntype OwnProps = {\n  courseRegId?: number;\n  userCourseRegistrations?: AdminPanelCourseRegistration[];\n  handleUpdateUserRole: (courseRegId: number, role: Role) => void;\n  handleDeleteUserFromCourse: (courseRegId: number) => void;\n};\n\n/**\n * Only admins can access this panel.\n * - Admins cannot be deleted\n * - An admin cannot downgrade himself to a non-admin role (only\n *   other admins can do so, to prevent a scenario where there are\n *   no admins left in a course)\n */\nconst UserConfigPanel: React.FC<UserConfigPanelProps> = props => {\n  const gridApi = React.useRef<GridApi>();\n\n  const userCourseRegistrations = props.userCourseRegistrations?.map(e =>\n    !e.name ? { ...e, name: '(user has yet to log in)' } : e\n  );\n\n  const columnDefs: ColDef[] = [\n    {\n      headerName: 'Name',\n      field: 'name',\n      sort: 'asc'\n    },\n    {\n      headerName: 'Username',\n      field: 'username'\n    },\n    {\n      headerName: 'Group',\n      field: 'group'\n    },\n    {\n      headerName: 'Role',\n      field: 'role',\n      cellRenderer: RolesCell,\n      cellRendererParams: {\n        courseRegId: props.courseRegId,\n        handleUpdateUserRole: props.handleUpdateUserRole\n      },\n      width: 110\n    },\n    {\n      headerName: 'Actions',\n      field: 'actions',\n      cellRenderer: UserActionsCell,\n      cellRendererParams: {\n        handleDeleteUserFromCourse: props.handleDeleteUserFromCourse\n      },\n      width: 120,\n      filter: false,\n      resizable: false\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: true,\n    resizable: true,\n    sortable: true\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n  };\n\n  const grid = (\n    <div className=\"Grid ag-grid-parent ag-theme-balham\">\n      <AgGridReact\n        domLayout={'autoHeight'}\n        columnDefs={columnDefs}\n        defaultColDef={defaultColumnDefs}\n        onGridReady={onGridReady}\n        onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n        rowData={userCourseRegistrations}\n        rowHeight={36}\n        suppressCellFocus={true}\n        suppressMovableColumns={true}\n        pagination\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"users-configuration\">\n      <div className=\"users-header-container\">\n        <H2>Users</H2>\n        <Button\n          text=\"Export as CSV\"\n          className=\"export-csv-button\"\n          onClick={() => {\n            if (gridApi.current) {\n              gridApi.current.exportDataAsCsv({\n                fileName: `SA Users (${new Date().toISOString()}).csv`,\n                columnKeys: ['name', 'username', 'group', 'role']\n              });\n            }\n          }}\n        />\n      </div>\n      {grid}\n    </div>\n  );\n};\n\nexport default UserConfigPanel;\n","import 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css';\n\nimport { Button, Divider, H1, Intent, Tab, Tabs } from '@blueprintjs/core';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport {\n  addNewStoriesUsersToCourse,\n  addNewUsersToCourse\n} from 'src/features/academy/AcademyActions';\n\nimport {\n  deleteAssessmentConfig,\n  deleteUserCourseRegistration,\n  fetchAdminPanelCourseRegistrations,\n  fetchAssessmentConfigs,\n  fetchCourseConfig,\n  fetchNotificationConfigs,\n  setAssessmentConfigurations,\n  updateAssessmentConfigs,\n  updateCourseConfig,\n  updateUserRole\n} from '../../../commons/application/actions/SessionActions';\nimport { UpdateCourseConfiguration } from '../../../commons/application/types/SessionTypes';\nimport { AssessmentConfiguration } from '../../../commons/assessment/AssessmentTypes';\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport AddStoriesUserPanel, { NameUsernameRole } from './subcomponents/AddStoriesUserPanel';\nimport AddUserPanel, { UsernameRoleGroup } from './subcomponents/AddUserPanel';\nimport AssessmentConfigPanel from './subcomponents/assessmentConfigPanel/AssessmentConfigPanel';\nimport CourseConfigPanel from './subcomponents/CourseConfigPanel';\nimport NotificationConfigPanel from './subcomponents/NotificationConfigPanel';\nimport UserConfigPanel from './subcomponents/userConfigPanel/UserConfigPanel';\n\nconst AdminPanel: React.FC = () => {\n  const [hasChangesCourseConfig, setHasChangesCourseConfig] = React.useState(false);\n  const [hasChangesAssessmentConfig, setHasChangesAssessmentConfig] = React.useState(false);\n\n  const [courseConfiguration, setCourseConfiguration] = React.useState<UpdateCourseConfiguration>({\n    courseName: '',\n    courseShortName: '',\n    viewable: true,\n    enableGame: true,\n    enableAchievements: true,\n    enableSourcecast: true,\n    enableStories: false,\n    moduleHelpText: ''\n  });\n\n  const dispatch = useDispatch();\n\n  const session = useTypedSelector(state => state.session);\n\n  /**\n   * Mutable ref to track the assessment configuration form state instead of useState. This is\n   * because ag-grid does not update the cellRendererParams whenever there is an update in rowData,\n   * leading to a stale closure problem where the handlers in AssessmentConfigPanel capture the old\n   * value of assessmentConfig.\n   *\n   * Also, useState causes a flicker in ag-grid during rerenders. Thus we use this mutable ref and\n   * ag-grid's API to update cell values instead.\n   */\n  const assessmentConfig = React.useRef(session.assessmentConfigurations);\n\n  // Tracks the assessment configurations to be deleted in the backend when the save button is clicked\n  const [assessmentConfigsToDelete, setAssessmentConfigsToDelete] = React.useState<\n    AssessmentConfiguration[]\n  >([]);\n\n  React.useEffect(() => {\n    dispatch(fetchCourseConfig());\n    dispatch(fetchAssessmentConfigs());\n    dispatch(fetchAdminPanelCourseRegistrations());\n    dispatch(fetchNotificationConfigs());\n  }, [dispatch]);\n\n  // After updated configs have been loaded from the backend, put them into local React state\n  React.useEffect(() => {\n    setCourseConfiguration({\n      courseName: session.courseName,\n      courseShortName: session.courseShortName,\n      viewable: session.viewable,\n      enableGame: session.enableGame,\n      enableAchievements: session.enableAchievements,\n      enableSourcecast: session.enableSourcecast,\n      enableStories: session.enableStories,\n      moduleHelpText: session.moduleHelpText\n    });\n\n    // IMPT: To prevent mutation of props\n    assessmentConfig.current = cloneDeep(session.assessmentConfigurations);\n  }, [session]);\n\n  const courseConfigPanelProps = {\n    courseConfiguration: courseConfiguration,\n    setCourseConfiguration: (courseConfig: UpdateCourseConfiguration) => {\n      setCourseConfiguration(courseConfig);\n      setHasChangesCourseConfig(true);\n    }\n  };\n\n  const assessmentConfigPanelProps = React.useMemo(() => {\n    return {\n      // Would have been loaded by the useEffect above\n      assessmentConfig: assessmentConfig as React.MutableRefObject<AssessmentConfiguration[]>,\n      setAssessmentConfig: (val: AssessmentConfiguration[]) => {\n        assessmentConfig.current = val;\n        setHasChangesAssessmentConfig(true);\n      },\n      setAssessmentConfigsToDelete: (deletedElement: AssessmentConfiguration) => {\n        // If it is not a newly created row that is yet to be persisted in the backend\n        if (deletedElement.assessmentConfigId !== -1) {\n          const temp = [...assessmentConfigsToDelete];\n          temp.push(deletedElement);\n          setAssessmentConfigsToDelete(temp);\n        }\n      },\n      setHasChangesAssessmentConfig: setHasChangesAssessmentConfig\n    };\n  }, [assessmentConfigsToDelete]);\n\n  const userConfigPanelProps = {\n    courseRegId: session.courseRegId,\n    userCourseRegistrations: session.userCourseRegistrations,\n    handleUpdateUserRole: (courseRegId: number, role: Role) =>\n      dispatch(updateUserRole(courseRegId, role)),\n    handleDeleteUserFromCourse: (courseRegId: number) =>\n      dispatch(deleteUserCourseRegistration(courseRegId))\n  };\n\n  const addUserPanelProps = {\n    handleAddNewUsersToCourse: (users: UsernameRoleGroup[], provider: string) =>\n      dispatch(addNewUsersToCourse(users, provider))\n  };\n\n  const addStoriesUserPanelProps = {\n    handleAddNewUsersToCourse: (users: NameUsernameRole[], provider: string) =>\n      dispatch(addNewStoriesUsersToCourse(users, provider))\n  };\n\n  // Handler to submit changes to Course Configration and Assessment Configuration to the backend.\n  // Changes made to users are handled separately.\n  const submitHandler = () => {\n    if (hasChangesCourseConfig) {\n      dispatch(updateCourseConfig(courseConfiguration));\n      setHasChangesCourseConfig(false);\n    }\n    if (assessmentConfigsToDelete.length > 0) {\n      assessmentConfigsToDelete.forEach(assessmentConfig => {\n        dispatch(deleteAssessmentConfig(assessmentConfig));\n      });\n      setAssessmentConfigsToDelete([]);\n    }\n    if (hasChangesAssessmentConfig) {\n      // Reset the store first so that old props do not propagate down and cause a flicker\n      dispatch(setAssessmentConfigurations([]));\n\n      // assessmentConfig.current will exist after the first load\n      dispatch(updateAssessmentConfigs(assessmentConfig.current!));\n      setHasChangesAssessmentConfig(false);\n    }\n  };\n\n  const data = (\n    <div className=\"admin-panel\">\n      <H1>Admin Panel</H1>\n      {/* renderActiveTabPanelOnly to handle large courses with many entries in ag-grid */}\n      <Tabs id=\"admin-panel\" renderActiveTabPanelOnly>\n        <Tab\n          id=\"configuration\"\n          title=\"Configuration\"\n          panel={\n            <>\n              <CourseConfigPanel {...courseConfigPanelProps} />\n              <Divider />\n              <AssessmentConfigPanel {...assessmentConfigPanelProps} />\n              <Button\n                text=\"Save\"\n                style={{ marginTop: '15px' }}\n                intent={\n                  hasChangesCourseConfig || hasChangesAssessmentConfig\n                    ? Intent.WARNING\n                    : Intent.NONE\n                }\n                onClick={submitHandler}\n              />\n            </>\n          }\n        />\n        <Tab id=\"users\" title=\"Users\" panel={<UserConfigPanel {...userConfigPanelProps} />} />\n        <Tab id=\"add-users\" title=\"Add Users\" panel={<AddUserPanel {...addUserPanelProps} />} />\n        <Tab\n          id=\"add-stories-users\"\n          title=\"Add Stories Users\"\n          panel={<AddStoriesUserPanel {...addStoriesUserPanelProps} />}\n        />\n        <Tab id=\"notification-config\" title=\"Notifications\" panel={<NotificationConfigPanel />} />\n      </Tabs>\n    </div>\n  );\n\n  return <ContentDisplay loadContentDispatch={() => {}} display={data} fullWidth={false} />;\n};\n\nexport default AdminPanel;\n","import 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css';\n\nimport { ColDef, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { startCase } from 'lodash';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport { fetchGroupGradingSummary } from '../../../features/dashboard/DashboardActions';\n\ntype DashboardProps = StateProps;\n\nexport type StateProps = {};\n\nconst defaultColumnDefs: ColDef = {\n  filter: true,\n  resizable: true,\n  sortable: true\n};\n\nconst Dashboard: React.FC<DashboardProps> = props => {\n  const dispatch = useDispatch();\n  const gradingSummary = useTypedSelector(state => state.dashboard.gradingSummary);\n\n  let gridApi: GridApi | undefined;\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi = params.api;\n  };\n\n  const resizeGrid = () => {\n    if (gridApi) {\n      gridApi.sizeColumnsToFit();\n    }\n  };\n\n  const columnDefs = gradingSummary.cols.map(e => {\n    return {\n      headerName: startCase(e),\n      field: e\n    };\n  });\n\n  const content = (\n    <div className=\"Dashboard\">\n      <div className=\"Grid ag-grid-parent ag-theme-balham\">\n        <AgGridReact\n          domLayout={'autoHeight'}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColumnDefs}\n          onGridReady={onGridReady}\n          onGridSizeChanged={resizeGrid}\n          rowData={gradingSummary.rows}\n          rowHeight={30}\n          suppressCellFocus={true}\n          suppressMovableColumns={true}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <ContentDisplay\n        display={content}\n        loadContentDispatch={() => dispatch(fetchGroupGradingSummary())}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { AssetMap, FontAsset } from './AssetsTypes';\n\nconst FontAssets: AssetMap<FontAsset> = {\n  zektonFont: {\n    key: 'zekton',\n    pngPath: '../../assets/zekton.png',\n    fntPath: '../../assets/zekton.fnt'\n  },\n  zektonDarkFont: {\n    key: 'zektonDark',\n    pngPath: '../../assets/zekton_dark.png',\n    fntPath: '../../assets/zekton.fnt'\n  },\n  alienCowsFont: {\n    key: 'alienAndCows',\n    pngPath: '../../assets/alien_and_cows.png',\n    fntPath: '../../assets/alien_and_cows.fnt'\n  },\n  alienLeagueFont: {\n    key: 'alienLeague',\n    pngPath: '../../assets/alien_league.png',\n    fntPath: '../../assets/alien_league.fnt'\n  },\n  pixelFont: {\n    key: 'pixel',\n    pngPath: '../../assets/pixel.png',\n    fntPath: '../../assets/pixel.fnt'\n  }\n};\n\nexport default FontAssets;\n","import { Links } from 'src/commons/utils/Constants';\n\nimport FontAssets from '../assets/FontAssets';\n\nexport const Constants = {\n  assetsFolder: Links.sourceAcademyAssets,\n  fadeDuration: 600,\n  nullFunction: () => {},\n  nullInteractionId: '',\n  nullSequenceNumber: -1,\n  popUpDuration: 1000,\n  defaultAssetPath: '/ui/wristDeviceButton.png',\n  defaultFontStyle: {\n    key: FontAssets.zektonFont.key,\n    size: 30,\n    align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n  },\n  defaultCursor: ''\n};\n\nexport const screenSize = {\n  x: 1920,\n  y: 1080\n};\n\nexport const screenCenter = {\n  x: screenSize.x / 2,\n  y: screenSize.y / 2\n};\n","import * as _ from 'lodash';\n\nimport { screenSize } from '../commons/CommonConstants';\n\nexport const Color = {\n  navy: '#03092c',\n  lightBlue: '#ece1fb',\n  offWhite: '#bbc1c9',\n  white: '#ffffff',\n  darkGrey: '#333333',\n  lightGrey: '#555555',\n  blue: '#1133ff',\n  darkBlue: '#0d2440',\n  orange: '#ff9933',\n  yellow: '#ffee33',\n  red: '0#ff0000',\n  maroon: '#142B2E',\n  black: '#000000',\n  purple: '#dd33dd',\n  paleYellow: '#f6ffbd'\n};\n\nconst hex = (str: string) => parseInt(str.slice(1), 16);\nexport const HexColor = _.mapValues(Color, hex);\n\ntype TableFormatPosConfig = {\n  direction?: Direction;\n  numOfItems: number;\n  maxXSpace?: number;\n  maxYSpace?: number;\n  numItemLimit?: number;\n  redistributeLast?: boolean;\n};\n\nexport enum Direction {\n  Row = 'Row',\n  Column = 'Column'\n}\n\n/**\n * Calculate x,y positions using a table format: mimic table-like\n * positions, with rows and columns.\n *\n * The positions will be ordered from LEFT to RIGHT before\n * moving to the next row i.e. row-wise.\n *\n * @param numOfItems total number of items\n * @param maxXSpace maximum X space to be used, optional\n * @param maxYSpace maximum Y space to be used, optional\n * @param numItemLimit maximum number of item at a given row, optional\n * @param redistributeLast if true, items at the last row will have their location\n *                         calculated based on the number of items at the last row, optional\n * @returns {Array<[number, number]>} array of positions, in the format of\n *                                 [[xPos0, yPos0], [xPos1, yPos1]...]\n */\nexport function calcTableFormatPos({\n  direction = Direction.Row,\n  numOfItems,\n  maxXSpace = screenSize.x,\n  maxYSpace = screenSize.y,\n  numItemLimit = 0,\n  redistributeLast = true\n}: TableFormatPosConfig): Array<[number, number]> {\n  let itemsPerList = numItemLimit || numOfItems;\n  const numOfLists = Math.ceil(numOfItems / itemsPerList);\n\n  return _.times(numOfItems, itemNumber => {\n    const itemIndexInList = itemNumber % itemsPerList;\n    const listIndex = Math.floor(itemNumber / itemsPerList);\n\n    if (redistributeLast && listIndex === numOfLists - 1) {\n      itemsPerList = numOfItems % numOfLists || itemsPerList;\n    }\n\n    return direction === Direction.Row\n      ? [\n          indexToCoordinate(screenSize.x, maxXSpace, itemIndexInList, itemsPerList),\n          indexToCoordinate(screenSize.y, maxYSpace, listIndex, numOfLists)\n        ]\n      : [\n          indexToCoordinate(screenSize.x, maxXSpace, listIndex, numOfLists),\n          indexToCoordinate(screenSize.y, maxYSpace, itemIndexInList, itemsPerList)\n        ];\n  });\n}\n\nfunction indexToCoordinate(\n  screenSpace: number,\n  listSpace: number,\n  index: number,\n  maxItems: number\n) {\n  const partitionSpace = listSpace / maxItems;\n  return (screenSpace - listSpace + partitionSpace) / 2 + partitionSpace * index;\n}\n\ntype ListFormatPos = {\n  numOfItems: number;\n  xSpacing: number;\n  ySpacing: number;\n};\n\n/**\n * Calculate x,y positions using a list format: mimic list-like\n * positions, ordered sequentially.\n *\n * Each item will be offset by xSpaing and ySpacing.\n *\n * The first item will start at [0, 0] (top left) position.\n *\n * @param numOfItems total number of items\n * @param xSpacing horizontal spacing between items\n * @param ySpacing vertical spacing between items\n * @returns {Array<[number, number]>} array of positions, in the format of\n *                                 [[xPos0, yPos0], [xPos1, yPos1]...]\n */\nexport function calcListFormatPos({ numOfItems, xSpacing = 30, ySpacing = 30 }: ListFormatPos) {\n  const pos = new Array<[number, number]>();\n\n  for (let i = 0; i < numOfItems; i++) {\n    pos.push([i * xSpacing, i * ySpacing]);\n  }\n\n  return pos;\n}\n","import { Color, HexColor } from '../utils/StyleUtils';\n\nconst textPad = 10;\nconst defaultTextHoverWidth = 300;\nconst cursorOffSet = 20;\n\nconst textHoverStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '15px',\n  fill: Color.lightBlue,\n  align: 'left',\n  wordWrap: { width: defaultTextHoverWidth - textPad }\n};\n\n/**\n * A container that can be used as simple text hover.\n * Its visibility is set to false by default.\n * The container only consists of a simple rectangle with text on top.\n *\n * The container still needs to be attached to an object.\n * i.e. on GAMEOBJECT_POINTER_OVER => hoverContainer.setVisibility(true)\n *      on GAMEOBJECT_POINTER_OUT => hoverContainer.setVisibility(false)\n *      on GAMEOBJECT_POINTER_MOVE => hoverContainer.x = pointer.x;\n *                                    hoverContainer.y = pointer.y;\n */\nclass CommonTextHover extends Phaser.GameObjects.Container {\n  /**\n   * @param scene scene for the container to attach to\n   * @param x x position of the container\n   * @param y y position of the container\n   * @param text message to be displayed\n   * @param maxWidth the maximum width of the text before the text wraps\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    text: string,\n    maxWidth: number = defaultTextHoverWidth\n  ) {\n    super(scene, x, y);\n    this.renderTextHover(text, maxWidth);\n  }\n\n  private renderTextHover(text: string, maxWidth: number) {\n    const fontSize = parseInt(\n      textHoverStyle.fontSize.substring(0, textHoverStyle.fontSize.length - 2)\n    );\n    const width = text.length * fontSize * 0.75;\n    const hoverWidth = Math.min(width, maxWidth);\n    const hoverText = new Phaser.GameObjects.Text(\n      this.scene,\n      cursorOffSet + textPad,\n      textPad,\n      text,\n      {\n        ...textHoverStyle,\n        wordWrap: { width: hoverWidth - textPad }\n      }\n    );\n    const hoverTextBg = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      cursorOffSet,\n      0,\n      hoverWidth,\n      hoverText.getBounds().bottom + textPad,\n      HexColor.darkBlue\n    )\n      .setOrigin(0.0, 0.0)\n      .setAlpha(0.8);\n\n    this.add([hoverTextBg, hoverText]);\n    this.setDepth(1); // Render hover text over other objects\n    this.setVisible(false);\n  }\n}\n\nexport default CommonTextHover;\n","import { BitmapFontStyle, TextConfig } from '../commons/CommonTypes';\n\n/**\n * Create bitmap text with the given style.\n *\n * @param scene scene to be attached to\n * @param text message to be shon\n * @param x x coordinate in worldspace\n * @param y y coordinate in worldspace\n * @param style style to be applied to the bitmap text\n * @returns {Phaser.GameObjects.BitmapText}\n */\nexport const createBitmapText = (\n  scene: Phaser.Scene,\n  text: string,\n  { x, y, oriX, oriY }: TextConfig,\n  style: BitmapFontStyle\n) => {\n  return new Phaser.GameObjects.BitmapText(\n    scene,\n    x,\n    y,\n    style.key,\n    text,\n    style.size,\n    style.align\n  ).setOrigin(oriX, oriY);\n};\n","import FontAssets from '../assets/FontAssets';\nimport { Constants, screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { Color } from '../utils/StyleUtils';\nimport { AwardProperty } from './GameAwardsTypes';\n\nexport const listBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const awardTitleStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 50,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const awardKeyStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 18,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const awardDescStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '18px',\n  fill: Color.lightBlue,\n  align: 'center',\n  lineSpacing: 10,\n  wordWrap: { width: 500 }\n};\n\nexport const defaultAwardProp: AwardProperty = {\n  id: 'default-award',\n  assetKey: Constants.nullInteractionId,\n  assetPath: Constants.nullInteractionId,\n  title: Constants.nullInteractionId,\n  description: 'There is no asset associated with this award.',\n  completed: false\n};\n\nexport const awardExplanation =\n  \"Asset key can be used to include the asset into your room by using 'create_award' function.\";\n\nconst previewXPos = -screenSize.x * 0.3;\nconst previewYPos = -screenSize.y * 0.05;\nconst previewKeyYPos = previewYPos + 275;\nconst previewDim = 430;\n\nconst AwardsConstants = {\n  arrow: { x: screenSize.x * 0.08, y: screenSize.y * 0.34, xOffset: 80, xScale: 0.4, yScale: 0.3 },\n  itemsPerPage: 7,\n  list: { yStart: -screenSize.y * 0.31, ySpace: 100 },\n  listTextConfig: { x: -screenSize.x * 0.09, y: 0, oriX: 0.0, oriY: 0.55 },\n  noPreviewTextConfig: { x: previewXPos, y: -40, oriX: 0.5, oriY: 0.5 },\n  preview: {\n    descText: { yOffset: 320 },\n    rect: { dim: previewDim, x: previewXPos, y: previewYPos, xOffset: 30, yOffset: 15 },\n    key: { x: previewXPos, y: previewKeyYPos, width: previewDim, height: 35 },\n    keyTagTextConfig: { x: previewXPos - 205, y: previewKeyYPos, oriX: 0.0, oriY: 0.5 },\n    keyTextConfig: { x: previewXPos - 90, y: previewKeyYPos, oriX: 0.0, oriY: 0.5 },\n    explanation: { x: previewXPos - 150, y: previewYPos + 200 },\n    titleTextConfig: { x: previewXPos + 20, y: previewYPos - 275, oriX: 0.5, oriY: 0.5 }\n  }\n};\n\nexport default AwardsConstants;\n","import CommonTextHover from '../commons/CommonTextHover';\nimport { ItemId } from '../commons/CommonTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { HexColor } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport AwardsConstants, {\n  awardExplanation,\n  awardKeyStyle,\n  defaultAwardProp\n} from './GameAwardsConstants';\nimport { AwardProperty } from './GameAwardsTypes';\n\n/**\n * Get corresponding award properties of the given award keys.\n * Keys that do not have any associated award mapping will be automatically\n * associated with a default award property.\n *\n * @param awardKeys award keys\n */\nexport const getAwardProps = (awardKeys: ItemId[]): AwardProperty[] => {\n  return awardKeys.map(key => getAwardProp(key));\n};\n\n/**\n * Get corresponding award property of the given award key.\n * If no property is tied to the given award key, most likely\n * it is because there is no asset is associated with it within the game.\n *\n * In the case there is no property is associated with the key,\n * we return the default award property instead.\n *\n * @param awardKey award key\n */\nexport const getAwardProp = (awardKey: ItemId): AwardProperty => {\n  const awardProp = SourceAcademyGame.getInstance().getAwardsMapping().get(awardKey);\n  return awardProp ? awardProp : { ...defaultAwardProp, title: awardKey };\n};\n\n/**\n * Create a UI bar, labeled as 'asset key' on the side. To be used\n * within Awards Menu UI container. On hover on the label,\n * will pop up a hover text explanation on the use of the asset key.\n *\n * @param scene scene to attach to\n */\nexport function createAssetKeyPreviewCont(scene: Phaser.Scene) {\n  const assetKeyCont = new Phaser.GameObjects.Container(\n    scene,\n    AwardsConstants.preview.rect.xOffset,\n    AwardsConstants.preview.rect.yOffset\n  );\n  const rectDim = AwardsConstants.preview.key;\n\n  // Create asset key bar and text\n  const assetKeyBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    rectDim.x,\n    rectDim.y,\n    rectDim.width,\n    rectDim.height,\n    HexColor.lightBlue,\n    0.1\n  );\n  const assetKeyTagBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    rectDim.x - rectDim.width * assetKeyBg.originX * 0.75,\n    rectDim.y,\n    rectDim.width / 4,\n    rectDim.height,\n    HexColor.lightBlue,\n    0.2\n  );\n  const assetKeyTag = createBitmapText(\n    scene,\n    'asset key',\n    AwardsConstants.preview.keyTagTextConfig,\n    awardKeyStyle\n  );\n\n  // Create explanation pop-up\n  const hoverCont = new CommonTextHover(\n    scene,\n    AwardsConstants.preview.explanation.x,\n    AwardsConstants.preview.explanation.y,\n    awardExplanation\n  );\n\n  // Attach\n  assetKeyTagBg.setInteractive();\n  assetKeyTagBg.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () =>\n    hoverCont.setVisible(true)\n  );\n  assetKeyTagBg.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () =>\n    hoverCont.setVisible(false)\n  );\n\n  assetKeyCont.add([assetKeyBg, assetKeyTagBg, assetKeyTag, hoverCont]);\n  return assetKeyCont;\n}\n","import { AssetKey, AssetPath } from '../commons/CommonTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\n\nexport type AssetMap<T> = {\n  [name: string]: T;\n};\n\nexport type ImageAsset = {\n  type: AssetType;\n  key: AssetKey;\n  path: AssetPath;\n  config?: ImageConfig;\n};\n\nexport type ImageConfig = {\n  frameWidth: number;\n  frameHeight: number;\n  centreX: number;\n  centreY: number;\n  endFrame?: number;\n  start?: number;\n  frameRate?: number;\n  animType?: AnimType;\n};\n\nexport enum AssetType {\n  Image = 'Image',\n  Sprite = 'Sprite'\n}\n\nexport enum AnimType {\n  Background = 'Background',\n  Object = 'Object'\n}\n\nexport type SoundAsset = {\n  key: string;\n  path: string;\n  config: Phaser.Types.Sound.SoundConfig;\n  soundType: GameSoundType;\n};\n\nexport type FontAsset = {\n  key: string;\n  pngPath: string;\n  fntPath: string;\n};\n\nexport type TextAsset = {\n  key: string;\n  path: string;\n};\n","import { AssetMap, AssetType, ImageAsset } from './AssetsTypes';\n\nconst ImageAssets: AssetMap<ImageAsset> = {\n  // Commons Asset\n  spaceshipBg: {\n    type: AssetType.Image,\n    key: 'spaceship-bg',\n    path: '/locations/spaceshipBackground.png'\n  },\n  saBanner: { type: AssetType.Image, key: 'sa-banner', path: '/ui/sourceAcadBannerOneLine.png' },\n  shortButton: { type: AssetType.Image, key: 'short-button', path: '/ui/shortButton.png' },\n  mediumButton: { type: AssetType.Image, key: 'med-button', path: '/ui/mediumButton.png' },\n  longButton: { type: AssetType.Image, key: 'long-button', path: '/ui/longButton.png' },\n  topButton: { type: AssetType.Image, key: 'top-button', path: '/ui/topButton.png' },\n  speechBox: { type: AssetType.Image, key: 'speechBox', path: '/ui/speechbox.png' },\n  speakerBox: { type: AssetType.Image, key: 'speakerBox', path: '/ui/speakerBox.png' },\n  defaultLocationImg: {\n    type: AssetType.Image,\n    key: 'loc-default',\n    path: '/ui/defaultLocation.jpg'\n  },\n  locationPreviewFrame: {\n    type: AssetType.Image,\n    key: 'loc-preview-frame',\n    path: '/ui/locationPreviewFrame.png'\n  },\n  locationPreviewFill: {\n    type: AssetType.Image,\n    key: 'loc-preview-fill',\n    path: '/ui/locationPreviewFill.png'\n  },\n  talkOptButton: { type: AssetType.Image, key: 'talk-opt-button', path: '/ui/talkOptButton.png' },\n  talkOptCheck: { type: AssetType.Image, key: 'talk-opt-check', path: '/ui/talkOptCheck.png' },\n  modeMenuBanner: { type: AssetType.Image, key: 'mode-banner', path: '/ui/modeMenuBanner.png' },\n  popUpFrame: { type: AssetType.Image, key: 'pop-up-frame', path: '/ui/popUpFrame.png' },\n  mediumBox: { type: AssetType.Image, key: 'medium-box', path: '/ui/mediumBox.png' },\n  diamond: { type: AssetType.Image, key: 'diamond', path: '/ui/zircon.png' },\n  arrow: { type: AssetType.Image, key: 'arrow', path: '/ui/arrow.png' },\n  cookies: { type: AssetType.Image, key: 'cookies', path: '/images/cookies.png' },\n  scrollFrame: { type: AssetType.Image, key: 'scroll-frame', path: '/ui/scrollFrame.png' },\n  messageBar: { type: AssetType.Image, key: 'message-bar', path: '/ui/messageBg.png' },\n\n  // Escape Menu\n  escapeMenuBackground: { type: AssetType.Image, key: 'escape-bg', path: '/ui/escapeMenu.png' },\n\n  // Awards Menu\n  awardsMenu: { type: AssetType.Image, key: 'award-bg', path: '/ui/collectiblesBg.png' },\n  awardsBanner: { type: AssetType.Image, key: 'award-banner', path: '/ui/awardsBanner.png' },\n  awardsPageChosen: {\n    type: AssetType.Image,\n    key: 'award-pg-chosen',\n    path: '/ui/collectiblesPageOptChosen.png'\n  },\n  awardsPage: { type: AssetType.Image, key: 'award-pg-opt', path: '/ui/collectiblesPageOpt.png' },\n\n  // Awards Hall\n  awardsBackground: { type: AssetType.Image, key: 'award-hall-bg', path: '/ui/awardsHall.png' },\n\n  // Toolbar\n  gear: { type: AssetType.Image, key: 'gear', path: '/ui/settings.png' },\n  journal: { type: AssetType.Image, key: 'journal', path: '/ui/journal.png' },\n\n  // Chapter Select\n  chapterRepeatButton: {\n    type: AssetType.Image,\n    key: 'chapter-repeat',\n    path: '/ui/chapterRepeat.png'\n  },\n  chapterContinueButton: {\n    type: AssetType.Image,\n    key: 'chapter-continue',\n    path: '/ui/chapterContinue.png'\n  },\n  StarGold: {\n    type: AssetType.Image,\n    key: 'StarGold',\n    path: '/ui/StarGold.png'\n  },\n  StarSilver: {\n    type: AssetType.Image,\n    key: 'StarSilver',\n    path: '/ui/StarSilver.png'\n  },\n  StarBronze: {\n    type: AssetType.Image,\n    key: 'StarBronze',\n    path: '/ui/StarBronze.png'\n  },\n  chapterSelectFrame: {\n    type: AssetType.Image,\n    key: 'chapter-select-frame',\n    path: '/ui/chapterSelectionFrame.png'\n  },\n  chapterSelectBorder: {\n    type: AssetType.Image,\n    key: 'chapter-select-border',\n    path: '/ui/chapterSelectionBorder.png'\n  },\n  chapterSelectArrow: {\n    type: AssetType.Image,\n    key: 'chapter-select-arrow',\n    path: '/ui/chapSelectArrow.png'\n  },\n\n  // Main Menu\n  mainMenuOptBanner: { type: AssetType.Image, key: 'menu-option', path: '/ui/menuOption.png' },\n\n  // Settings\n  settingBanner: { type: AssetType.Image, key: 'settings-bg', path: '/ui/settingsBg.png' },\n  settingOption: { type: AssetType.Image, key: 'settings-opt', path: '/ui/settingsOption.png' },\n\n  // Room Preview\n  verifiedFrame: { type: AssetType.Image, key: 'verified-frame', path: '/ui/verifiedFrame.png' },\n  sourceCrashedPod: {\n    type: AssetType.Image,\n    key: 'source-crashed-pod',\n    path: '/locations/sourceCrashedPod.png'\n  },\n\n  // Bindings\n  squareKeyboardIcon: {\n    type: AssetType.Image,\n    key: 'keyboard-key-square',\n    path: '/ui/keyboardKeyIcon.png'\n  },\n  medKeyboardIcon: { type: AssetType.Image, key: 'keyboard-key-medium', path: '/ui/TabIcon.png' }\n};\n\nexport default ImageAssets;\n","export const bgMusicFadeDuration = 1000;\n\nexport const musicFadeOutTween = {\n  volume: 0,\n  ease: 'Power2'\n};\n\nexport enum GameSoundType {\n  SFX,\n  BGM\n}\n","import { GameSoundType } from '../sound/GameSoundTypes';\nimport { AssetMap, SoundAsset } from './AssetsTypes';\n\nconst SoundAssets: AssetMap<SoundAsset> = {\n  // SFX\n  buttonHover: {\n    key: 'btn-hover',\n    path: '/sfx/buttonHover.mp3',\n    config: { volume: 0.1 },\n    soundType: GameSoundType.SFX\n  },\n  buttonClick: {\n    key: 'btn-click',\n    path: '/sfx/buttonClick.mp3',\n    config: { volume: 0.1 },\n    soundType: GameSoundType.SFX\n  },\n  radioButtonClick: {\n    key: 'radio-btn-click',\n    path: '/sfx/radioButtonClick.mp3',\n    config: { volume: 0.15 },\n    soundType: GameSoundType.SFX\n  },\n  dialogueAdvance: {\n    key: 'dialogue-advance',\n    path: '/sfx/dialogueAdvance.mp3',\n    config: { volume: 0.3 },\n    soundType: GameSoundType.SFX\n  },\n  popUpEnter: {\n    key: 'pop-up-enter',\n    path: '/sfx/popUpEnter.mp3',\n    config: { volume: 0.35 },\n    soundType: GameSoundType.SFX\n  },\n  popUpExit: {\n    key: 'pop-up-exit',\n    path: '/sfx/popUpExit.mp3',\n    config: { volume: 0.35 },\n    soundType: GameSoundType.SFX\n  },\n  menuEnter: {\n    key: 'menu-enter',\n    path: '/sfx/menuEnter.mp3',\n    config: { volume: 0.5 },\n    soundType: GameSoundType.SFX\n  },\n  menuExit: {\n    key: 'menu-exit',\n    path: '/sfx/menuExit.mp3',\n    config: { volume: 0.5 },\n    soundType: GameSoundType.SFX\n  },\n  modeEnter: {\n    key: 'mode-enter',\n    path: '/sfx/modeEnter.mp3',\n    config: { volume: 0.1 },\n    soundType: GameSoundType.SFX\n  },\n  notifEnter: {\n    key: 'notif-enter',\n    path: '/sfx/notifEnter.mp3',\n    config: { volume: 0.25 },\n    soundType: GameSoundType.SFX\n  },\n  notifExit: {\n    key: 'notif-exit',\n    path: '/sfx/notifExit.mp3',\n    config: { volume: 0.25 },\n    soundType: GameSoundType.SFX\n  },\n  radioStatic: {\n    key: 'radio-static',\n    path: '/sfx/radioStatic.mp3',\n    config: { volume: 0.1 },\n    soundType: GameSoundType.SFX\n  },\n\n  // BGM\n  galacticHarmony: {\n    key: 'galactic-harmony',\n    path: '/bgm/GalacticHarmony.mp3',\n    config: { volume: 0.25, loop: true },\n    soundType: GameSoundType.BGM\n  }\n};\n\nexport default SoundAssets;\n","export enum Layer {\n  Effects,\n  Background,\n  Character,\n  Speaker,\n  PopUp,\n  Dialogue,\n  SpeakerBox,\n  UI,\n  Objects,\n  BBox,\n  Escape,\n  Selector,\n  Dashboard,\n  WorkerMessage\n}\n\n// Back to Front\nexport const defaultLayerSequence = [\n  Layer.Background,\n  Layer.Selector,\n  Layer.Objects,\n  Layer.BBox,\n  Layer.Character,\n  Layer.Speaker,\n  Layer.PopUp,\n  Layer.Dialogue,\n  Layer.SpeakerBox,\n  Layer.Effects,\n  Layer.Dashboard,\n  Layer.Escape,\n  Layer.UI,\n  Layer.WorkerMessage\n];\n","import { store } from 'src/pages/createStore';\n\nimport { Constants } from '../commons/CommonConstants';\n\n/**\n * When called with await in an async function,\n * e.g. \"await sleep(5000)\", this line delays\n * the next line by that number of milliseconds.\n *\n * @param ms number of milliseconds to delay next line.\n * @returns {Promise} promise which resolves in ms milliseconds.\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Creates a Map with the same keys, but the values\n * are mapped using a specified function\n *\n * Example:\n * mapValues(Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]), (value, key) => 2 * value + key)\n * returns Map([[\"a\", \"2a\"], [\"b\", \"4b\"], [\"c\", \"6c\"]])\n *\n * @param map the Map that you'd like to iterate over\n * @param fn the binary function that produces the new\n *           value of the map using (value, key) as input\n * @returns {Map<K, R>} new Map with mapped values\n */\nexport function mapValues<K, V, R>(map: Map<K, V>, fn: (value: V, key?: K) => R): Map<K, R> {\n  const newMap = new Map<K, R>();\n  map.forEach((value: V, key: K) => {\n    const result: R = fn(value, key);\n    newMap.set(key, result);\n  });\n  return newMap;\n}\n\n/**\n * Caps a number to min and max boundary inclusive.\n *\n * @param value the number's value\n * @param min the minimum value of the number\n * @param max the maximum value of the number\n *\n * @returns {number} number which is capped based on boundaries\n */\nexport function limitNumber(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Appends the s3 file path to a short path name\n *\n * @param filename the short path of a filename\n * @param courseCoded true iff file is course-specific\n * @returns {string} new path to file including full s3 link\n */\nexport function toS3Path(fileName: string, courseCoded = false) {\n  if (fileName.startsWith('/')) {\n    fileName = fileName.substr(1);\n  }\n  return Constants.assetsFolder + (courseCoded ? assetsPrefix() + fileName : fileName);\n}\n\n/**\n * Throws an error when the property is not found.\n *\n * @param object the property that you would like to get\n * @returns {object} the object if it is found.\n * @throws {Error} if object is undefined\n */\nexport function mandatory<T>(object: T, errorMsg?: string) {\n  if (object === undefined) {\n    throw new Error(errorMsg || 'Object not found');\n  }\n  return (object as T)!;\n}\n\n/**\n * Returns the last element in the array\n *\n * @param array array you want to access\n * @returns the final element of the array\n */\nexport function lastElement<T>(array: T[]): T {\n  if (array.length === 0) {\n    throw new Error('Array is empty');\n  }\n  return array[array.length - 1];\n}\n\nexport const courseId = () => store.getState().session.courseId;\nexport const assetsPrefix = () => store.getState().session.assetsPrefix || '';\n","import { Constants, screenCenter, screenSize } from '../commons/CommonConstants';\nimport { IBaseScene } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { sleep } from '../utils/GameUtils';\nimport { HexColor } from '../utils/StyleUtils';\n\n/**\n * Generates a tween configuration for making objects fade out of scene.\n *\n * @param targets - an array of game objects that you want to fade out\n * @param duration - the duration of the fade animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the fadeout animation\n */\nexport const fadeOut = (\n  targets: Phaser.GameObjects.GameObject[],\n  duration = Constants.fadeDuration\n) => ({\n  alpha: 0,\n  targets,\n  duration,\n  ease: 'Power2'\n});\n\n/**\n * Generates a tween configuration for making objects fade into scene.\n * Make sure the alpha of object is set to zero first.\n *\n * @param targets - an array of game objects that you want to fade in\n * @param duration - the duration of the fade animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the fadein animation\n */\nexport const fadeIn = (\n  targets: Phaser.GameObjects.GameObject[],\n  duration = Constants.fadeDuration\n) => ({\n  alpha: 1,\n  targets,\n  duration,\n  ease: 'Power2'\n});\n\n/**\n * @typedef {FadeProps} - props to specify additional properties/configuration for a fade animation\n * @prop fadeDuration - how long to fade in and out\n */\ntype FadeProps = {\n  fadeDuration?: number;\n};\n\n/**\n * Function that makes a game object fade out, and after the animation,\n * removes the game object from the scene.\n *\n * @param scene - scene where this should happen\n * @param object - the game object that should fade out and be destroyed\n * @param fadeProps - additional properties/configuration describing the fade animation\n */\nexport function fadeAndDestroy(\n  scene: Phaser.Scene,\n  object: Phaser.GameObjects.GameObject | null,\n  { fadeDuration }: FadeProps = {}\n) {\n  if (!object) return;\n  scene.add.tween(fadeOut([object], fadeDuration || Constants.fadeDuration));\n  setTimeout(() => object.destroy(), fadeDuration || Constants.fadeDuration);\n}\n\n/**\n * A black screen that can be used in fade effects\n *\n * @param scene - the scene to add this screen to\n */\nexport function blackScreen(scene: Phaser.Scene) {\n  return new Phaser.GameObjects.Rectangle(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    screenSize.x,\n    screenSize.y,\n    0\n  );\n}\n\n/**\n * A white screen that can be used in fade effects\n *\n * @param scene - the scene to add this screen to\n */\nexport function whiteScreen(scene: Phaser.Scene) {\n  return new Phaser.GameObjects.Rectangle(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    screenSize.x,\n    screenSize.y,\n    HexColor.white\n  );\n}\n\n/**\n * Transitions two scenes using a black screen\n *\n * @param scene - the scene to add this screen to\n * @param fadeDuration - how long is the fading in and out of the scenes\n * @param delay - how long does the black screen remains on screen\n * @param callback - the function that is called during the transition\n */\nexport const blackFade = async (\n  scene: IBaseScene,\n  fadeDuration: number,\n  delay: number,\n  callback: any\n) => {\n  const fadeBlack = blackScreen(scene);\n  scene.getLayerManager().addToLayer(Layer.Effects, fadeBlack);\n\n  fadeBlack.setAlpha(0);\n  scene.tweens.add(fadeIn([fadeBlack], fadeDuration));\n  await sleep(fadeDuration);\n\n  await callback();\n  await sleep(delay);\n\n  fadeBlack.setAlpha(1);\n  scene.tweens.add(fadeOut([fadeBlack], fadeDuration));\n  await sleep(fadeDuration);\n\n  fadeBlack.destroy();\n};\n\n/**\n * Makes a game object object blink through fade ins and fade outs\n *\n * @param scene - the scene where you want to add this object to\n * @param gameObject - the gameObject which you want to add blinking effect on\n * @returns {() => void} - clearBlink is a function. When called, it stops the blinking.\n */\nexport function blink(\n  scene: Phaser.Scene,\n  gameObject: Phaser.GameObjects.Image | Phaser.GameObjects.Container\n) {\n  let i = 0;\n  const blink = setInterval(() => {\n    if (i % 2 !== 0) {\n      gameObject.setAlpha(0);\n      scene.tweens.add(fadeIn([gameObject], 250));\n    } else {\n      gameObject.setAlpha(1);\n      scene.tweens.add(fadeOut([gameObject], 250));\n    }\n    i++;\n  }, 500);\n  function clearBlink() {\n    i = 0;\n    clearInterval(blink);\n  }\n  return clearBlink;\n}\n","import { screenSize } from '../commons/CommonConstants';\n\n/**\n * A tween config that makes the object fly in\n * from the top of screen into the middle of the screen\n */\nexport const entryTweenProps = {\n  y: 0,\n  duration: 300,\n  ease: 'Power2'\n};\n\n/**\n * Makes the object fly out from the middle of the screen\n * to the top of the screen\n */\nexport const exitTweenProps = {\n  y: -screenSize.y,\n  duration: 250,\n  ease: 'Power2'\n};\n\n/**\n * A tween config that makes the object fly in\n * from the left of screen into the middle of the screen\n */\nexport const leftSideEntryTweenProps = {\n  x: 0,\n  duration: 350,\n  ease: 'Power2'\n};\n\n/**\n * Makes the object fly out from the middle of the screen\n * to the left of the screen\n */\nexport const leftSideExitTweenProps = {\n  x: -screenSize.x,\n  duration: 350,\n  ease: 'Power2'\n};\n\n/**\n * A tween config that makes the object fly in\n * from the right of screen into the middle of the screen\n */\nexport const rightSideEntryTweenProps = {\n  x: 0,\n  duration: 500,\n  ease: 'Power2'\n};\n\n/**\n * Makes the object fly out from the middle of the screen\n * to the right of the screen\n */\nexport const rightSideExitTweenProps = {\n  x: screenSize.x,\n  duration: 500,\n  ease: 'Power2'\n};\n","import FontAssets from '../assets/FontAssets';\nimport ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants, screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle, IBaseScene } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { sleep } from '../utils/GameUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { fadeAndDestroy } from './FadeEffect';\nimport { rightSideEntryTweenProps, rightSideExitTweenProps } from './FlyEffect';\n\nconst messageDuration = 3000;\nconst messageTextConfig = { x: 1900, y: 100, oriX: 1.0, oriY: 0.5 };\nconst messageStyle: BitmapFontStyle = {\n  key: FontAssets.zektonDarkFont.key,\n  size: 24,\n  align: Phaser.GameObjects.BitmapText.ALIGN_RIGHT\n};\n\n/**\n * Generates a closure containing a promise chain of message displaying calls\n * and a function to enqueue more messages to show.\n *\n * @returns a function to display a message\n */\nconst makeMiniMessageDisplayer = () => {\n  let displayMessagesPromise = Promise.resolve();\n  const displayMiniMessage = (scene: IBaseScene, text: string) => {\n    displayMessagesPromise = displayMessagesPromise.then(() =>\n      displayMiniMessageHelper(scene, text)\n    );\n  };\n  return displayMiniMessage;\n};\n\n/**\n * A function to display a message on the top right side of the screen.\n * The message will be tweened to enter from the right side of the screen,\n * displayed for a duration, before tweened out. The message will not be\n * shown immediately if there is another message currently being displayed\n * and/or other messages are waiting to be displayed\n *\n * @param scene scene to attach this message to\n * @param text text to be written\n */\nexport const displayMiniMessage = makeMiniMessageDisplayer();\n\n/**\n * A function to display a message on the top right side of the screen.\n * The message will be tweened to enter from the right side of the screen,\n * displayed for a duration, before tweened out.\n *\n * @param scene scene to attach this message to\n * @param text text to be written\n */\nasync function displayMiniMessageHelper(scene: IBaseScene, text: string) {\n  const container = new Phaser.GameObjects.Container(scene, 0, 0);\n  const messageBg = new Phaser.GameObjects.Sprite(\n    scene,\n    screenSize.x,\n    100,\n    ImageAssets.messageBar.key\n  );\n  messageBg.setScale(-1.5, 0.8);\n  const messageText = createBitmapText(scene, text, messageTextConfig, messageStyle);\n\n  container.add([messageBg, messageText]);\n  scene.getLayerManager().addToLayer(Layer.Effects, container);\n  container.setPosition(screenSize.x, 0);\n  container.setAlpha(0);\n\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifEnter.key);\n  scene.add.tween({\n    targets: container,\n    alpha: 1,\n    ...rightSideEntryTweenProps\n  });\n\n  await sleep(rightSideEntryTweenProps.duration + messageDuration);\n\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifExit.key);\n  scene.add.tween({\n    targets: container,\n    alpha: 1,\n    ...rightSideExitTweenProps\n  });\n\n  await sleep(rightSideExitTweenProps.duration);\n  fadeAndDestroy(scene, container, { fadeDuration: Constants.fadeDuration });\n}\n","import FontAssets from '../assets/FontAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { Color } from '../utils/StyleUtils';\n\nconst dialogueRectMargin = 10;\n\nconst DialogueConstants = {\n  prompt: { x: 30, y: 60, xPad: 30, yPad: 10 },\n  rect: {\n    x: dialogueRectMargin,\n    y: 760,\n    width: screenSize.x - dialogueRectMargin * 2\n  },\n  text: { xPad: 100, yPad: 70 },\n  speakerTextConfig: { x: 320, y: 745, oriX: 0.5, oriY: 0.5 }\n};\n\nexport const textTypeWriterStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '30px',\n  fill: Color.lightBlue,\n  align: 'left',\n  lineSpacing: 10,\n  wordWrap: {\n    width:\n      DialogueConstants.rect.width - DialogueConstants.text.xPad * 2 - DialogueConstants.rect.x * 2\n  }\n};\n\nexport const speakerTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 36,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport default DialogueConstants;\n","/**\n * @typedef {TypewriterProps} - properties describing a typewriter\n *\n * @prop {number} x - x coordinate of the left edge of the typewriter\n * @prop {number} y - y coordinate of the top edge of the typewriter\n * @prop {Phaser.Types.GameObjects.Text.TextStyle} textStyle\n *       the text config to specify the text propertoes of the typewriter text\n * @prop {number} typeWriterInterval - how long is the interval between\n *                                     each letter's appearance\n */\ntype TypewriterProps = {\n  x?: number;\n  y?: number;\n  textStyle?: Phaser.Types.GameObjects.Text.TextStyle;\n  typeWriterInterval?: number;\n};\n\n/**\n * Text sprite manager to produce typewriter effect\n *\n * @param scene - scene to add the typewriter sprite\n * @param typeWriterProps - properties to describe the appearance and animation of the typewriter\n */\nexport function Typewriter(\n  scene: Phaser.Scene,\n  { x = 0, y = 0, textStyle = {}, typeWriterInterval = 1 }: TypewriterProps\n) {\n  const textSprite = new Phaser.GameObjects.Text(scene, x, y, '', textStyle);\n\n  let line = '';\n  let charPointer = 0;\n  let typeWriting: NodeJS.Timeout;\n\n  const clearTyping = () => {\n    typeWriting && clearInterval(typeWriting);\n  };\n\n  /* Reset line and type out */\n  const changeLine = (message: string) => {\n    if (!message) return;\n    line = message;\n\n    textSprite.text = '';\n    charPointer = 0;\n\n    clearTyping();\n    typeWriting = setInterval(() => {\n      textSprite.text += line[charPointer++];\n      if (charPointer === line.length) {\n        clearInterval(typeWriting);\n      }\n    }, typeWriterInterval);\n  };\n\n  return { container: textSprite, changeLine, clearTyping };\n}\n\nexport default Typewriter;\n","import ImageAssets from '../assets/ImageAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { blink, fadeAndDestroy } from '../effects/FadeEffect';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport dialogueConstants from './GameDialogueConstants';\nimport { createDialogueBox, createTypewriter } from './GameDialogueHelper';\n\n/**\n * Class that manages the appearance of the dialogue box, which includes\n * the box itself, the text animations as well as the blinking diamond click prompt\n */\nclass DialogueRenderer {\n  private typewriter: any;\n  private dialogueBox: Phaser.GameObjects.Image;\n  private blinkingDiamond: any;\n\n  /**\n   * @param typewriterStyle the style of the typewriter you want to use\n   */\n  constructor(typewriterStyle: Phaser.Types.GameObjects.Text.TextStyle) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.dialogueBox = createDialogueBox(gameManager).setInteractive({\n      useHandCursor: true,\n      pixelPerfect: true\n    });\n    this.typewriter = createTypewriter(gameManager, typewriterStyle);\n    this.blinkingDiamond = this.drawDiamond(gameManager);\n  }\n\n  /**\n   * @returns {Phaser.GameObjects.Container} returns the entire dialogueBox container\n   * which can be added to the scene\n   */\n  public getDialogueContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n    container.add([this.dialogueBox, this.blinkingDiamond.container, this.typewriter.container]);\n    return container;\n  }\n\n  private drawDiamond(scene: Phaser.Scene) {\n    const diamondSprite = new Phaser.GameObjects.Image(\n      scene,\n      screenSize.x - dialogueConstants.prompt.x - dialogueConstants.prompt.xPad,\n      screenSize.y - dialogueConstants.prompt.y - dialogueConstants.prompt.yPad,\n      ImageAssets.diamond.key\n    ).setDisplaySize(dialogueConstants.prompt.x, dialogueConstants.prompt.y);\n\n    return { container: diamondSprite, clearBlink: blink(scene, diamondSprite) };\n  }\n\n  /**\n   * Obtains the green dialogue box\n   */\n  public getDialogueBox() {\n    return this.dialogueBox;\n  }\n\n  /**\n   * Destroyer for the dialogue box elements and interactivity\n   */\n  public destroy() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.typewriter.clearTyping();\n    this.blinkingDiamond.clearBlink();\n    this.getDialogueBox().off(Phaser.Input.Events.GAMEOBJECT_POINTER_UP);\n    fadeAndDestroy(gameManager, this.getDialogueContainer());\n  }\n\n  /**\n   * Change the text written in the box\n   */\n  public changeText(message: string) {\n    this.typewriter.changeLine(message);\n  }\n}\n\nexport default DialogueRenderer;\n","import ImageAssets from '../assets/ImageAssets';\nimport { screenCenter } from '../commons/CommonConstants';\nimport Typewriter from '../effects/Typewriter';\nimport dialogueConstants from './GameDialogueConstants';\n\n/**\n * Helper function to render the green box shown in every dialogue/ notification popup\n */\nexport function createDialogueBox(scene: Phaser.Scene) {\n  const dialogueBox = new Phaser.GameObjects.Image(\n    scene,\n    screenCenter.x,\n    screenCenter.y,\n    ImageAssets.speechBox.key\n  ).setAlpha(0.9);\n  return dialogueBox;\n}\n\n/**\n * Helper function to to generate the typewriter effect used by the dialogue renderer\n * @param scene the scene on which to place the typewriter effect\n * @param style the style of the typewriter\n */\nexport function createTypewriter(\n  scene: Phaser.Scene,\n  style: Phaser.Types.GameObjects.Text.TextStyle\n) {\n  const typewriter = Typewriter(scene, {\n    x: dialogueConstants.rect.x + dialogueConstants.text.xPad,\n    y: dialogueConstants.rect.y + dialogueConstants.text.yPad,\n    textStyle: style\n  });\n  return typewriter;\n}\n","export const keyboardShortcuts = {\n  Dashboard: Phaser.Input.Keyboard.KeyCodes.TAB,\n  Menu: Phaser.Input.Keyboard.KeyCodes.ESC,\n  Next: Phaser.Input.Keyboard.KeyCodes.SPACE,\n  Notif: Phaser.Input.Keyboard.KeyCodes.SPACE,\n  Explore: Phaser.Input.Keyboard.KeyCodes.E,\n  Move: Phaser.Input.Keyboard.KeyCodes.V,\n  Talk: Phaser.Input.Keyboard.KeyCodes.T,\n  Options: [\n    Phaser.Input.Keyboard.KeyCodes.ONE,\n    Phaser.Input.Keyboard.KeyCodes.TWO,\n    Phaser.Input.Keyboard.KeyCodes.THREE,\n    Phaser.Input.Keyboard.KeyCodes.FOUR\n  ]\n};\n","/**\n * Manager that keeps track of all the event listeners.\n * This manager allow clearing of all listeners at once,\n * making it easier to clean up during scene transition.\n *\n * Additionally, it can also block/allow mouse and keyboard input\n * if needed.\n */\nclass GameInputManager {\n  private scene: Phaser.Scene;\n  private keyboardListeners: Phaser.Input.Keyboard.Key[];\n  private eventListeners: Phaser.Input.InputPlugin[];\n\n  constructor(scene: Phaser.Scene) {\n    this.keyboardListeners = [];\n    this.eventListeners = [];\n    this.scene = scene;\n  }\n\n  /**\n   * Set default cursor icon.\n   *\n   * @param cursor css cursor value\n   */\n  public setDefaultCursor(cursor: string) {\n    this.scene.input.setDefaultCursor(cursor);\n  }\n\n  /**\n   * Enable/disable mouse input based on the parameter.\n   *\n   * @param active if true, mouse input is enabled. Else, mouse input is disabled.\n   */\n  public enableMouseInput(active: boolean) {\n    this.scene.input.mouse.enabled = active;\n  }\n\n  /**\n   * Enable/disable keyboard input based on the parameter.\n   *\n   * @param active if true, keyboard input is enabled. Else, keyboard input is disabled.\n   */\n  public enableKeyboardInput(active: boolean) {\n    this.scene.input.keyboard.enabled = active;\n  }\n\n  /**\n   * Register a keyboard listener into the input manager.\n   * The manager will keep track of this listener.\n   *\n   * @param key keyboard key the listener is attached to\n   * @param event event to be listened to\n   * @param callback callback to execute on event\n   */\n  public registerKeyboardListener(\n    key: string | number | Phaser.Input.Keyboard.Key,\n    event: string | symbol,\n    callback: Function\n  ) {\n    const keyObj = this.scene.input.keyboard.addKey(key);\n    const keyboardListener = keyObj.addListener(event, callback);\n    this.keyboardListeners.push(keyboardListener);\n  }\n\n  /**\n   * Register an event listener into the input manager.\n   * The manager will keep track of this listener.\n   *\n   * @param event event to be listened to\n   * @param callback callback to execute on event\n   */\n  public registerEventListener(event: string | symbol, callback: Function) {\n    const eventListener = this.scene.input.addListener(event, callback);\n    this.eventListeners.concat(eventListener);\n  }\n\n  /**\n   * Clear all listeners, keyboard and event listeners.\n   */\n  public clearListeners() {\n    this.keyboardListeners.forEach(keyboardListener => keyboardListener.removeAllListeners());\n    this.eventListeners.forEach(eventListener => eventListener.removeAllListeners());\n  }\n\n  /**\n   * Clear specific keyboard listeners.\n   */\n  public clearKeyboardListeners(keycodes: number[]) {\n    this.keyboardListeners.forEach(keyboardListener => {\n      if (keycodes.includes(keyboardListener.keyCode)) {\n        keyboardListener.removeAllListeners();\n      }\n    });\n  }\n}\n\nexport default GameInputManager;\n","import FontAssets from '../assets/FontAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants, screenCenter } from '../commons/CommonConstants';\nimport { BitmapFontStyle, IBaseScene } from '../commons/CommonTypes';\nimport dialogueConstants from '../dialogue/GameDialogueConstants';\nimport DialogueRenderer from '../dialogue/GameDialogueRenderer';\nimport { keyboardShortcuts } from '../input/GameInputConstants';\nimport GameInputManager from '../input/GameInputManager';\nimport { Layer } from '../layer/GameLayerTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { sleep } from '../utils/GameUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { fadeAndDestroy, fadeIn } from './FadeEffect';\n\nconst notifStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 100,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst notifTextConfig = {\n  x: screenCenter.x,\n  y: dialogueConstants.rect.y + notifStyle.size * 2,\n  oriX: 0.5,\n  oriY: 0.9\n};\n\n/**\n * A function to display a notifications such as location-change notification\n *\n * @param scene scene to attach this message to\n * @param message - the string you want to display\n * @returns {Promise} - a promise that resolves when notification is clicked\n */\nexport async function displayNotification(scene: IBaseScene, message: string): Promise<void> {\n  const dialogueRenderer = new DialogueRenderer({});\n  const container = dialogueRenderer.getDialogueContainer();\n\n  scene.getLayerManager().addToLayer(Layer.Effects, container);\n  scene.getLayerManager().fadeInLayer(Layer.Effects);\n\n  const notifText = createBitmapText(scene, message, notifTextConfig, notifStyle).setAlpha(0);\n  container.add(notifText);\n\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifEnter.key);\n  scene.add.tween(fadeIn([notifText], Constants.fadeDuration * 2));\n\n  // Wait for fade in to finish\n  await sleep(Constants.fadeDuration * 2);\n\n  const gameInputManager = new GameInputManager(scene);\n\n  const dissolveNotification = () => {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifExit.key);\n    fadeAndDestroy(scene, notifText, { fadeDuration: Constants.fadeDuration / 4 });\n    dialogueRenderer.destroy();\n  };\n\n  const showNotification = new Promise<void>(resolve => {\n    // using the same binding as dialogue shortcut\n    gameInputManager.registerKeyboardListener(keyboardShortcuts.Notif, 'up', async () => {\n      gameInputManager.clearKeyboardListeners([keyboardShortcuts.Notif]);\n      dissolveNotification();\n      resolve();\n    });\n\n    dialogueRenderer.getDialogueBox().on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n      dissolveNotification();\n      resolve();\n    });\n  });\n\n  await showNotification;\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport { Constants } from '../commons/CommonConstants';\nimport { AssetKey, BitmapFontStyle, TextConfig } from '../commons/CommonTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { createBitmapText } from './TextUtils';\n\ntype ButtonConfig = {\n  assetKey: AssetKey;\n  message?: string;\n  textConfig?: TextConfig;\n  bitMapTextStyle?: BitmapFontStyle;\n  onDown?: () => void;\n  onUp?: () => void;\n  onHover?: () => void;\n  onOut?: () => void;\n  onPointerMove?: (pointer: Phaser.Input.Pointer, localX: number, localY: number) => void;\n  onHoverEffect?: boolean;\n  onClickSound?: AssetKey;\n  onHoverSound?: AssetKey;\n};\n\nconst onHoverAlpha = 1.0;\nconst offHoverAlpha = 0.9;\n\n/**\n * Create an index for the button\n * @param index: index of the button\n * @param text: text of the button\n */\nexport function createButtonText(index: number, text: string): string {\n  return '[ ' + index + ' ]  ' + text;\n}\n\n/**\n * Create a button with basic functionalities.\n *\n * Functionalities include:\n * 1. Attached onDown, onUp, onHover, onOut listeners\n * 2. Text writing\n * 3. onHover and onOut alpha changes\n * 4. onClick and onHover sound effect\n *\n * @param scene scene to be attached to\n * @param assetKey asset key to be used as button image\n * @param message text to be written on the button, optional\n * @param textConfig config to apply to the text, optional\n * @param bitMapTextStyle bitMapText style to be used, optional\n * @param onDown callback to execute on onDown event, optional\n * @param onUp callback to execute on onUp event, optional\n * @param onHover callback to execute on onHover event, optional\n * @param onOut callback to execute on onOut event, optional\n * @param onPointerMove callback to execute on onPointerMove, optional\n * @param onHoverEffect if true, button will include onHover and onOut alpha changes, optional\n * @param onClickSound sound key to play when button is clicked, executed onUp, optional\n * @param onHoverSound sound key to play when button is hovered, optional\n * @param soundManager required for sound to be played, optional\n * @returns {Phaser.GameObjects.Container} button container\n */\nexport function createButton(\n  scene: Phaser.Scene,\n  {\n    assetKey,\n    message = '',\n    textConfig = { x: 0, y: 0, oriX: 0, oriY: 0 },\n    bitMapTextStyle = Constants.defaultFontStyle,\n    onDown = Constants.nullFunction,\n    onUp = Constants.nullFunction,\n    onHover = Constants.nullFunction,\n    onOut = Constants.nullFunction,\n    onPointerMove = Constants.nullFunction,\n    onHoverEffect = true,\n    onClickSound = SoundAssets.buttonClick.key,\n    onHoverSound = SoundAssets.buttonHover.key\n  }: ButtonConfig\n): Phaser.GameObjects.Container {\n  const container = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  // Set up button functionality\n  const button = new Phaser.GameObjects.Sprite(scene, 0, 0, assetKey);\n  button.setInteractive({ pixelPerfect: true, useHandCursor: true });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(onClickSound);\n    onUp();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () => {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(onHoverSound);\n    if (onHoverEffect) container.setAlpha(onHoverAlpha);\n    onHover();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () => {\n    if (onHoverEffect) container.setAlpha(offHoverAlpha);\n    onOut();\n  });\n  button.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, () => {\n    onDown();\n  });\n  button.addListener(\n    Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n    (pointer: Phaser.Input.Pointer, localX: number, localY: number) => {\n      onPointerMove(pointer, localX, localY);\n    }\n  );\n\n  // Set up text\n  const text = createBitmapText(scene, message, textConfig, bitMapTextStyle);\n\n  container.add([button, text]);\n  if (onHoverEffect) container.setAlpha(offHoverAlpha);\n\n  return container;\n}\n","import FontAssets from '../assets/FontAssets';\nimport ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants, screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { createButton } from '../utils/ButtonUtils';\nimport { sleep } from '../utils/GameUtils';\nimport { calcListFormatPos, Color, HexColor } from '../utils/StyleUtils';\nimport { fadeAndDestroy } from './FadeEffect';\nimport { rightSideEntryTweenProps, rightSideExitTweenProps } from './FlyEffect';\n\nconst PromptConstants = {\n  textPad: 20,\n  textConfig: { x: 15, y: -15, oriX: 0.5, oriY: 0.5 },\n  y: 100,\n  width: 450,\n  yInterval: 100\n};\n\nconst textStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '20px',\n  fill: Color.offWhite,\n  align: 'right',\n  lineSpacing: 10,\n  wordWrap: { width: PromptConstants.width - PromptConstants.textPad * 2 }\n};\n\nconst promptOptStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\n/**\n * Display a UI that asks users to choose which option they like\n *\n * @param scene - which scene to add this prompt in\n * @param text - question you want to ask\n * @param choices - an array of choices to show\n * @returns {Promise<number>} which choice index the user has chosen\n */\nexport async function promptWithChoices(\n  scene: Phaser.Scene,\n  text: string,\n  choices: string[]\n): Promise<number> {\n  const promptContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  const promptPartitions = Math.ceil(choices.length / 5);\n  const promptHeight = choices.length > 5 ? 5 : choices.length;\n\n  const header = new Phaser.GameObjects.Text(\n    scene,\n    screenSize.x - PromptConstants.textPad,\n    PromptConstants.y,\n    text,\n    textStyle\n  ).setOrigin(1.0, 0.0);\n  const promptHeaderBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    screenSize.x,\n    PromptConstants.y - PromptConstants.textPad,\n    PromptConstants.width * promptPartitions,\n    header.getBounds().bottom * 0.5 + PromptConstants.textPad,\n    HexColor.darkBlue,\n    0.8\n  ).setOrigin(1.0, 0.0);\n  const promptBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    screenSize.x,\n    PromptConstants.y - PromptConstants.textPad,\n    PromptConstants.width * promptPartitions,\n    promptHeaderBg.getBounds().bottom * 0.5 + (promptHeight + 0.5) * PromptConstants.yInterval,\n    HexColor.lightBlue,\n    0.2\n  ).setOrigin(1.0, 0.0);\n\n  promptContainer.add([promptBg, promptHeaderBg, header]);\n\n  const buttonPositions = calcListFormatPos({\n    numOfItems: choices.length,\n    xSpacing: 0,\n    ySpacing: PromptConstants.yInterval\n  });\n\n  GameGlobalAPI.getInstance().addToLayer(Layer.UI, promptContainer);\n\n  const activatePromptContainer: Promise<number> = new Promise(resolve => {\n    promptContainer.add(\n      choices.map((response, index) =>\n        createButton(scene, {\n          assetKey: ImageAssets.mediumButton.key,\n          message: response,\n          textConfig: PromptConstants.textConfig,\n          bitMapTextStyle: promptOptStyle,\n          onUp: () => {\n            promptContainer.destroy();\n            resolve(index);\n          }\n        }).setPosition(\n          screenSize.x -\n            PromptConstants.width / 2 -\n            PromptConstants.width * (promptPartitions - Math.floor(index / 5) - 1),\n          (buttonPositions[index][1] % (5 * PromptConstants.yInterval)) +\n            promptHeaderBg.getBounds().bottom +\n            75\n        )\n      )\n    );\n  });\n\n  // Animate in\n  promptContainer.setPosition(screenSize.x, 0);\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifEnter.key);\n  scene.add.tween({\n    targets: promptContainer,\n    alpha: 1,\n    ...rightSideEntryTweenProps\n  });\n  await sleep(rightSideEntryTweenProps.duration);\n\n  const response = await activatePromptContainer;\n\n  // Animate out\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.notifExit.key);\n  scene.add.tween({\n    targets: promptContainer,\n    alpha: 1,\n    ...rightSideExitTweenProps\n  });\n\n  await sleep(rightSideExitTweenProps.duration);\n  fadeAndDestroy(scene, promptContainer, { fadeDuration: Constants.fadeDuration });\n\n  return response;\n}\n","export enum GamePhaseType {\n  Move = 'Move',\n  Explore = 'Explore',\n  Talk = 'Talk',\n  Menu = 'Menu',\n  EscapeMenu = 'EscapeMenu',\n  None = 'None',\n  Sequence = 'Sequence',\n  Dashboard = 'Dashboard'\n}\n\n/**\n * A terminal phase should only ever be the top-most phase in the phase stack.\n * In particular, this means the phase stack should only have at most one\n * terminal phase on it at any point. A terminal phase should be popped from\n * the stack before another phase is pushed on.\n */\nexport enum GameTerminalPhaseType {\n  EscapeMenu = GamePhaseType.EscapeMenu,\n  Dashboard = GamePhaseType.Dashboard\n}\n","import { GameAction } from '../../action/GameActionTypes';\nimport { SoundAsset } from '../../assets/AssetsTypes';\nimport { getAwardProp } from '../../awards/GameAwardsHelper';\nimport { BBoxProperty } from '../../boundingBoxes/GameBoundingBoxTypes';\nimport { Character, SpeakerDetail } from '../../character/GameCharacterTypes';\nimport { GamePosition, GameSize, ItemId } from '../../commons/CommonTypes';\nimport { AssetKey } from '../../commons/CommonTypes';\nimport { Dialogue } from '../../dialogue/GameDialogueTypes';\nimport { displayMiniMessage } from '../../effects/MiniMessage';\nimport { displayNotification } from '../../effects/Notification';\nimport { promptWithChoices } from '../../effects/Prompt';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { AnyId, GameItemType, GameLocation, LocationId } from '../../location/GameMapTypes';\nimport { GameMode } from '../../mode/GameModeTypes';\nimport { ObjectProperty } from '../../objects/GameObjectTypes';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport { SettingsJson } from '../../save/GameSaveTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { StateObserver, UserStateType } from '../../state/GameStateTypes';\nimport { TaskDetail } from '../../task/GameTaskTypes';\nimport { courseId, mandatory } from '../../utils/GameUtils';\nimport GameManager from './GameManager';\n\n/**\n * This class exposes all the public API's of managers\n * in the Game Manager scene.\n *\n * It allows managers to access services globally\n * through GameGlobalAPI.getInstance().function() without\n * having to keep a reference to the gameManager.\n */\nclass GameGlobalAPI {\n  private gameManager: GameManager | undefined;\n\n  static instance: GameGlobalAPI;\n\n  private constructor() {\n    this.gameManager = undefined;\n  }\n\n  static getInstance() {\n    if (!GameGlobalAPI.instance) {\n      GameGlobalAPI.instance = new GameGlobalAPI();\n    }\n    return GameGlobalAPI.instance;\n  }\n\n  /////////////////////\n  //   Game Manager  //\n  /////////////////////\n\n  public getGameManager = () => mandatory(this.gameManager);\n\n  public setGameManager(gameManagerRef: GameManager): void {\n    this.gameManager = gameManagerRef;\n  }\n\n  public getCurrLocId(): LocationId {\n    return this.getGameManager().currentLocationId;\n  }\n\n  public getLocationAtId(locationId: LocationId): GameLocation {\n    return this.getGameManager().getStateManager().getGameMap().getLocationAtId(locationId);\n  }\n\n  public async changeLocationTo(locationName: string) {\n    await this.getGameManager().changeLocationTo(locationName);\n  }\n\n  /////////////////////\n  //    Game Mode    //\n  /////////////////////\n\n  public getLocationModes(locationId: LocationId): GameMode[] {\n    return this.getGameManager().getStateManager().getLocationModes(locationId);\n  }\n\n  public addLocationMode(locationId: LocationId, mode: GameMode): void {\n    this.getGameManager().getStateManager().addLocationMode(locationId, mode);\n  }\n\n  public removeLocationMode(locationId: LocationId, mode: GameMode): void {\n    this.getGameManager().getStateManager().removeLocationMode(locationId, mode);\n  }\n\n  /////////////////////\n  //   Interaction   //\n  /////////////////////\n\n  public hasTriggeredInteraction(id: string): boolean | undefined {\n    return this.getGameManager().getStateManager().hasTriggeredInteraction(id);\n  }\n\n  public triggerStateChangeAction(actionId: ItemId): void {\n    this.getGameManager().getStateManager().triggerStateChangeAction(actionId);\n  }\n\n  public triggerInteraction(id: string): void {\n    this.getGameManager().getStateManager().triggerInteraction(id);\n  }\n\n  /////////////////////\n  //    Game Items   //\n  /////////////////////\n\n  public watchGameItemType(gameItemType: GameItemType, stateObserver: StateObserver) {\n    this.getGameManager().getStateManager().watchGameItemType(gameItemType, stateObserver);\n  }\n\n  public getGameMap() {\n    return this.getGameManager().getStateManager().getGameMap();\n  }\n\n  public getGameItemsInLocation(gameItemType: GameItemType, locationId: LocationId): ItemId[] {\n    return this.getGameManager().getStateManager().getGameItemsInLocation(gameItemType, locationId);\n  }\n\n  public addItem(gameItemType: GameItemType, locationId: LocationId, itemId: ItemId): void {\n    this.getGameManager().getStateManager().addItem(gameItemType, locationId, itemId);\n  }\n\n  public removeItem(gameItemType: GameItemType, locationId: LocationId, itemId: ItemId): void {\n    return this.getGameManager().getStateManager().removeItem(gameItemType, locationId, itemId);\n  }\n\n  /////////////////////\n  //  Game Objects   //\n  /////////////////////\n\n  public makeObjectGlow(objectId: ItemId, turnOn: boolean) {\n    this.getGameManager().getObjectManager().makeObjectGlow(objectId, turnOn);\n  }\n\n  public makeObjectBlink(objectId: ItemId, turnOn: boolean) {\n    this.getGameManager().getObjectManager().makeObjectBlink(objectId, turnOn);\n  }\n\n  public setObjProperty(id: ItemId, newObjProp: ObjectProperty) {\n    this.getGameManager().getStateManager().setObjProperty(id, newObjProp);\n  }\n\n  public renderObjectLayerContainer(locationId: LocationId) {\n    this.getGameManager().getObjectManager().renderObjectsLayerContainer(locationId);\n  }\n\n  public getAllActivatables() {\n    return [\n      ...this.getGameManager().getObjectManager().getActivatables(),\n      ...this.getGameManager().getBBoxManager().getActivatables()\n    ];\n  }\n\n  /////////////////////\n  //    Game BBox    //\n  /////////////////////\n\n  public setBBoxProperty(id: ItemId, newBBoxProp: BBoxProperty) {\n    this.getGameManager().getStateManager().setBBoxProperty(id, newBBoxProp);\n  }\n\n  public renderBBoxLayerContainer(locationId: LocationId) {\n    this.getGameManager().getBBoxManager().renderBBoxLayerContainer(locationId);\n  }\n\n  /////////////////////\n  //  Game Objective //\n  /////////////////////\n\n  public areAllObjectivesComplete(): boolean {\n    return this.getGameManager().getStateManager().areAllObjectivesComplete();\n  }\n\n  public isObjectiveComplete(key: string): boolean {\n    return this.getGameManager().getStateManager().isObjectiveComplete(key);\n  }\n\n  public areObjectivesComplete(keys: string[]): boolean {\n    return this.getGameManager().getStateManager().areObjectivesComplete(keys);\n  }\n\n  public completeObjective(key: string): void {\n    this.getGameManager().getStateManager().completeObjective(key);\n  }\n\n  /////////////////////\n  //  Game Task      //\n  /////////////////////\n\n  public isTaskComplete(key: string): boolean {\n    return this.getGameManager().getStateManager().isTaskComplete(key);\n  }\n\n  public areTasksComplete(keys: string[]): boolean {\n    return this.getGameManager().getStateManager().areTasksComplete(keys);\n  }\n\n  public completeTask(key: string): void {\n    this.getGameManager().getStateManager().completeTask(key);\n    displayMiniMessage(this.getGameManager(), 'Task completed!');\n  }\n\n  public showTask(key: string): void {\n    this.getGameManager().getStateManager().showTask(key);\n    displayMiniMessage(this.getGameManager(), 'New task added');\n  }\n\n  public getAllVisibleTaskData(): Array<[TaskDetail, boolean]> {\n    return this.getGameManager().getStateManager().getAllVisibleTaskData();\n  }\n\n  /////////////////////\n  //   User State    //\n  /////////////////////\n\n  public addCollectible(id: string): void {\n    SourceAcademyGame.getInstance().getUserStateManager().addCollectible(id);\n  }\n\n  public async isInUserState(userStateType: UserStateType, id: string): Promise<boolean> {\n    return SourceAcademyGame.getInstance().getUserStateManager().isInUserState(userStateType, id);\n  }\n\n  /////////////////////\n  //   Game Layer    //\n  /////////////////////\n\n  public clearSeveralLayers(layerTypes: Layer[]) {\n    this.getGameManager().getLayerManager().clearSeveralLayers(layerTypes);\n  }\n\n  public addToLayer(layer: Layer, gameObj: Phaser.GameObjects.GameObject) {\n    this.getGameManager().getLayerManager().addToLayer(layer, gameObj);\n  }\n\n  public showLayer(layer: Layer) {\n    this.getGameManager().getLayerManager().showLayer(layer);\n  }\n\n  public hideLayer(layer: Layer) {\n    this.getGameManager().getLayerManager().hideLayer(layer);\n  }\n\n  public async fadeInLayer(layer: Layer, fadeDuration?: number) {\n    await this.getGameManager().getLayerManager().fadeInLayer(layer, fadeDuration);\n  }\n\n  public async fadeOutLayer(layer: Layer, fadeDuration?: number) {\n    await this.getGameManager().getLayerManager().fadeOutLayer(layer, fadeDuration);\n  }\n  /////////////////////\n  //  Location Notif //\n  /////////////////////\n\n  public async bringUpUpdateNotif(message: string) {\n    await displayNotification(this.getGameManager(), message);\n  }\n\n  /////////////////////\n  //   Story Action  //\n  /////////////////////\n\n  public async processGameActions(actionIds: ItemId[] | undefined) {\n    await this.getGameManager().getPhaseManager().pushPhase(GamePhaseType.Sequence);\n    await this.getGameManager().getActionManager().processGameActions(actionIds);\n    await this.getGameManager().getPhaseManager().popPhase();\n  }\n\n  public async processGameActionsInSamePhase(actionIds: ItemId[] | undefined) {\n    await this.getGameManager().getActionManager().processGameActions(actionIds);\n  }\n\n  /////////////////////\n  //   Dialogue      //\n  /////////////////////\n\n  public async showDialogue(dialogueId: ItemId) {\n    await this.getGameManager().getPhaseManager().pushPhase(GamePhaseType.Sequence);\n    await this.getGameManager().getDialogueManager().showDialogue(dialogueId);\n    await this.getGameManager().getPhaseManager().popPhase();\n  }\n\n  public async showDialogueInSamePhase(dialogueId: ItemId) {\n    await this.getGameManager().getDialogueManager().showDialogue(dialogueId);\n  }\n\n  /////////////////////\n  //   Storage      //\n  /////////////////////\n\n  public storeDialogueLine(newLine: string, newSpeakerDetail?: SpeakerDetail | null) {\n    this.getGameManager().getDialogueStorageManager().storeLine(newLine, newSpeakerDetail);\n  }\n\n  public getDialogueStorage() {\n    return this.getGameManager().getDialogueStorageManager().getDialogueStorage();\n  }\n\n  /////////////////////\n  //   Collectible   //\n  /////////////////////\n\n  public async obtainCollectible(collectibleId: string) {\n    displayMiniMessage(this.getGameManager(), `Obtained ${getAwardProp(collectibleId).title}`);\n    SourceAcademyGame.getInstance().getUserStateManager().addCollectible(collectibleId);\n  }\n\n  /////////////////////\n  //     Pop Up      //\n  /////////////////////\n\n  public displayPopUp(itemId: ItemId, position: GamePosition, duration?: number, size?: GameSize) {\n    this.getGameManager().getPopupManager().displayPopUp(itemId, position, duration, size);\n  }\n\n  public destroyAllPopUps() {\n    this.getGameManager().getPopupManager().destroyAllPopUps();\n  }\n\n  public async destroyPopUp(position: GamePosition) {\n    this.getGameManager().getPopupManager().destroyPopUp(position);\n  }\n\n  /////////////////////\n  //    Save Game    //\n  /////////////////////\n\n  public async saveGame() {\n    await this.getGameManager().getSaveManager().saveGame();\n  }\n\n  public async saveSettings(settingsJson: SettingsJson) {\n    await this.getGameManager().getSaveManager().saveSettings(settingsJson);\n  }\n\n  public getLoadedUserState() {\n    return this.getGameManager().getSaveManager().getLoadedUserState();\n  }\n\n  /////////////////////\n  //      Sound      //\n  /////////////////////\n\n  public getSoundManager() {\n    return SourceAcademyGame.getInstance().getSoundManager();\n  }\n\n  public playSound(soundKey: AssetKey) {\n    SourceAcademyGame.getInstance().getSoundManager().playSound(soundKey);\n  }\n\n  public playBgMusic(soundKey: AssetKey) {\n    SourceAcademyGame.getInstance().getSoundManager().playBgMusic(soundKey);\n  }\n\n  public async stopAllSound() {\n    SourceAcademyGame.getInstance().getSoundManager().stopAllSound();\n  }\n\n  public pauseCurrBgMusic() {\n    SourceAcademyGame.getInstance().getSoundManager().pauseCurrBgMusic();\n  }\n\n  public continueCurrBgMusic() {\n    SourceAcademyGame.getInstance().getSoundManager().continueCurrBgMusic();\n  }\n\n  public applySoundSettings(userSettings: SettingsJson) {\n    SourceAcademyGame.getInstance().getSoundManager().applyUserSettings(userSettings);\n  }\n\n  public loadSounds(soundAssets: SoundAsset[]) {\n    SourceAcademyGame.getInstance().getSoundManager().loadSounds(soundAssets);\n  }\n\n  /////////////////////\n  //    Animations   //\n  /////////////////////\n\n  public startAnimation(id: AnyId, startFrame: number, frameRate: number) {\n    const startImage = this.getAssetByKey(this.getGameMap().getAssetKeyFromId(id));\n    this.getGameManager().getAnimationManager().displayAnimation(startImage, startFrame, frameRate);\n  }\n\n  public stopAnimation(id: AnyId) {\n    const stopImage = this.getAssetByKey(this.getGameMap().getAssetKeyFromId(id));\n    this.getGameManager().getAnimationManager().stopAnimation(stopImage);\n  }\n\n  /////////////////////\n  //      Input      //\n  /////////////////////\n\n  public setDefaultCursor(cursor: string) {\n    this.getGameManager().getInputManager().setDefaultCursor(cursor);\n  }\n\n  public enableKeyboardInput(active: boolean) {\n    this.getGameManager().getInputManager().enableKeyboardInput(active);\n  }\n\n  public enableMouseInput(active: boolean) {\n    this.getGameManager().getInputManager().enableMouseInput(active);\n  }\n\n  public enableSprite(gameObject: Phaser.GameObjects.GameObject, active: boolean) {\n    active\n      ? this.getGameManager().input.enable(gameObject)\n      : this.getGameManager().input.disable(gameObject);\n  }\n\n  /////////////////////\n  //      Phases     //\n  /////////////////////\n\n  public async popPhase() {\n    await this.getGameManager().getPhaseManager().popPhase();\n  }\n\n  public async pushPhase(gamePhaseType: GamePhaseType) {\n    await this.getGameManager().getPhaseManager().pushPhase(gamePhaseType);\n  }\n\n  public async swapPhase(gamePhaseType: GamePhaseType) {\n    await this.getGameManager().getPhaseManager().swapPhase(gamePhaseType);\n  }\n\n  public isCurrentPhase(gamePhaseType: GamePhaseType) {\n    return this.getGameManager().getPhaseManager().isCurrentPhase(gamePhaseType);\n  }\n\n  /////////////////////\n  //   Background    //\n  /////////////////////\n\n  public renderBackgroundLayerContainer(locationId: LocationId) {\n    this.getGameManager().getBackgroundManager().renderBackgroundLayerContainer(locationId);\n  }\n\n  /////////////////////\n  //    Assessment   //\n  /////////////////////\n\n  public async promptNavigateToAssessment(assessmentId: number) {\n    const response = await promptWithChoices(\n      GameGlobalAPI.getInstance().getGameManager(),\n      `Are you ready for the challenge?`,\n      ['Yes', 'No']\n    );\n    if (response === 0) {\n      window.open(`/courses/${courseId()}/missions/${assessmentId}/0`, 'blank');\n      window.focus();\n    }\n  }\n\n  public async updateAssessmentState() {\n    await SourceAcademyGame.getInstance().getUserStateManager().loadAssessments();\n  }\n\n  /////////////////////\n  //   Characters    //\n  /////////////////////\n\n  public createCharacterSprite(\n    characterId: ItemId,\n    overrideExpression?: string,\n    overridePosition?: GamePosition\n  ) {\n    return this.getGameManager()\n      .getCharacterManager()\n      .createCharacterSprite(characterId, overrideExpression, overridePosition);\n  }\n\n  public moveCharacter(id: ItemId, newLocation: LocationId, newPosition: GamePosition) {\n    this.getGameManager().getStateManager().moveCharacter(id, newLocation, newPosition);\n  }\n\n  public updateCharacter(id: ItemId, expression: string) {\n    this.getGameManager().getStateManager().updateCharacter(id, expression);\n  }\n\n  /////////////////////\n  //  Item retrieval //\n  /////////////////////\n\n  public getDialogueById(dialogueId: ItemId): Dialogue {\n    return mandatory(this.getGameMap().getDialogueMap().get(dialogueId));\n  }\n\n  public getCharacterById(characterId: ItemId): Character {\n    return mandatory(this.getGameMap().getCharacterMap().get(characterId));\n  }\n\n  public getActionById(actionId: ItemId): GameAction {\n    return mandatory(this.getGameMap().getActionMap().get(actionId));\n  }\n\n  public getObjectById(objectId: ItemId): ObjectProperty {\n    return mandatory(this.getGameMap().getObjectPropMap().get(objectId));\n  }\n\n  public getBBoxById(bboxId: ItemId): BBoxProperty {\n    return mandatory(this.getGameMap().getBBoxPropMap().get(bboxId));\n  }\n  public getAssetByKey(assetKey: AssetKey) {\n    return this.getGameMap().getAssetByKey(assetKey);\n  }\n}\n\nexport default GameGlobalAPI;\n","import { ItemId } from '../commons/CommonTypes';\n\nexport enum GameStateStorage {\n  UserState = 'UserState',\n  ChecklistState = 'ChecklistState',\n  TasklistState = 'TasklistState'\n}\n\n/**\n * Type of user state list.\n */\nexport enum UserStateType {\n  collectibles = 'collectibles',\n  assessments = 'assessments',\n  achievements = 'achievements'\n}\n\n/**\n * State observer is a renderer that can reflect the changes\n * to the current scene\n */\nexport interface StateObserver {\n  handleAdd: (itemId: ItemId) => boolean;\n  handleDelete: (itemId: ItemId) => boolean;\n  handleMutate: (itemId: ItemId) => boolean;\n}\n","import GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { GameStateStorage } from '../state/GameStateTypes';\nimport { ActionCondition } from './GameActionTypes';\n\n/**\n * This class checks for whether if-conditions are satisfied,\n * to determine whether or not game actions will be played out.\n */\nexport default class ActionConditionChecker {\n  /**\n   * Checks whether all action conditions are met\n   * @param actionConditions Array of action conditions\n   * @returns {Promise<boolean>} True if all conditions are met\n   */\n  public static async checkAllConditionsSatisfied(actionConditions: ActionCondition[]) {\n    const allConditions = await Promise.all(\n      actionConditions.map(\n        async actionCondition => await this.checkConditionSatisfied(actionCondition)\n      )\n    );\n    return allConditions.every(condition => condition === true);\n  }\n\n  /**\n   * Checks whether one action conditions is met\n   * Also stubs the user state\n   *\n   * @param conditional The action condition\n   * @returns {boolean} True if condition is met\n   */\n  public static async checkConditionSatisfied(conditional: ActionCondition) {\n    const { state, conditionParams, boolean } = conditional;\n    switch (state) {\n      case GameStateStorage.UserState:\n        return (\n          (await GameGlobalAPI.getInstance().isInUserState(\n            conditionParams.userStateType,\n            conditionParams.id\n          )) === boolean\n        );\n      case GameStateStorage.ChecklistState:\n        return GameGlobalAPI.getInstance().isObjectiveComplete(conditionParams.id) === boolean;\n      case GameStateStorage.TasklistState:\n        return GameGlobalAPI.getInstance().isTaskComplete(conditionParams.id) === boolean;\n      default:\n        return true;\n    }\n  }\n}\n","import { ItemId, TrackInteraction } from '../commons/CommonTypes';\nimport { GameStateStorage } from '../state/GameStateTypes';\n\nexport enum GameActionType {\n  MoveCharacter = 'MoveCharacter',\n  UpdateCharacter = 'UpdateCharacter',\n  ObtainCollectible = 'ObtainCollectible',\n  CompleteObjective = 'CompleteObjective',\n  CompleteTask = 'CompleteTask',\n  ShowTask = 'ShowTask',\n  PreviewLocation = 'PreviewLocation',\n  AddItem = 'AddItem',\n  RemoveItem = 'RemoveItem',\n  ShowDialogue = 'ShowDialogue',\n  ChangeBackground = 'ChangeBackground',\n  StartAnimation = 'StartAnimation',\n  StopAnimation = 'StopAnimation',\n  RemoveLocationMode = 'RemoveLocationMode',\n  AddLocationMode = 'AddLocationMode',\n  AddPopup = 'AddPopup',\n  MakeObjectBlink = 'MakeObjectBlink',\n  MakeObjectGlow = 'MakeObjectGlow',\n  PlayBGM = 'PlayBGM',\n  PlaySFX = 'PlaySFX',\n  ShowObjectLayer = 'ShowObjectLayer',\n  NavigateToAssessment = 'NavigateToAssessment',\n  UpdateAssessmentStatus = 'UpdateAssessmentStatus',\n  Delay = 'Delay'\n}\n\n/**\n * Interface for entities which can contain actions, including locations, objects, etc.\n */\nexport interface IGameActionable {\n  actionIds?: ItemId[];\n}\n/**\n * Condition object which encapsulates data about an action condition,\n * which is the condition that needs to be satisfied before an action\n * can be played\n *\n * @prop {GameStateStorage} state - the game state which needs to be checked to determine the truthiness of the condition\n * @prop {any} conditionParams - an object encapsulating more information about the condition,\n *                               such as itemId that needs to be checked for existence to satisfy the condition\n * @prop {boolean} boolean - whether the condition needs to match \"true\" or \"false\" before it is satisfied\n */\nexport type ActionCondition = {\n  state: GameStateStorage;\n  conditionParams: any;\n  boolean: boolean;\n};\n\n/**\n * Action object which encapsulates data about an action,\n * that can be performed.\n *\n * See Command Pattern/Redux actions.\n *\n * @prop {GameActionType} actionType - the type of action that will be performed\n * @prop {any} actionParams - an object containing information about the parameters of the action such as which entity ID to perform this action on\n * @prop {Array<ActionCondition>} actionConditions - a list of conditions that need to be satisfied in order for the action to be executed\n * @prop {isRepeatable} boolean - whether or not the action can be performed again when it is triggerd.\n */\nexport type GameAction = TrackInteraction & {\n  actionType: GameActionType;\n  actionParams: any;\n  actionConditions: ActionCondition[];\n  isRepeatable: boolean;\n};\n","import { Layer } from '../layer/GameLayerTypes';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { sleep } from '../utils/GameUtils';\nimport { GameActionType } from './GameActionTypes';\n\n/**\n * This class executes game actions by calling the right functions\n * from global API\n */\nexport default class GameActionExecuter {\n  /**\n   * Executes the game action based on given type and parameters\n   * @param actionType the type of action that will be executed\n   * @param actionParams an object containing all the parameters\n   */\n  public static async executeGameAction(actionType: GameActionType, actionParams: any) {\n    const globalAPI = GameGlobalAPI.getInstance();\n\n    switch (actionType) {\n      case GameActionType.AddItem:\n        globalAPI.addItem(actionParams.gameItemType, actionParams.locationId, actionParams.id);\n        return;\n      case GameActionType.RemoveItem:\n        globalAPI.removeItem(actionParams.gameItemType, actionParams.locationId, actionParams.id);\n        return;\n      case GameActionType.AddLocationMode:\n        globalAPI.addLocationMode(actionParams.locationId, actionParams.mode);\n        return;\n      case GameActionType.RemoveLocationMode:\n        globalAPI.removeLocationMode(actionParams.locationId, actionParams.mode);\n        return;\n      case GameActionType.MoveCharacter:\n        globalAPI.moveCharacter(actionParams.id, actionParams.locationId, actionParams.position);\n        return;\n      case GameActionType.UpdateCharacter:\n        globalAPI.updateCharacter(actionParams.id, actionParams.expression);\n        return;\n      case GameActionType.ChangeBackground:\n        globalAPI.renderBackgroundLayerContainer(actionParams.id);\n        return;\n      case GameActionType.StartAnimation:\n        globalAPI.startAnimation(actionParams.id, actionParams.startFrame, actionParams.frameRate);\n        return;\n      case GameActionType.StopAnimation:\n        globalAPI.stopAnimation(actionParams.id);\n        return;\n      case GameActionType.PreviewLocation:\n        globalAPI.renderBackgroundLayerContainer(actionParams.id);\n        globalAPI.renderObjectLayerContainer(actionParams.id);\n        globalAPI.renderBBoxLayerContainer(actionParams.id);\n        return;\n      case GameActionType.ObtainCollectible:\n        globalAPI.obtainCollectible(actionParams.id);\n        return;\n      case GameActionType.CompleteObjective:\n        globalAPI.completeObjective(actionParams.id);\n        return;\n      case GameActionType.CompleteTask:\n        globalAPI.completeTask(actionParams.id);\n        return;\n      case GameActionType.ShowTask:\n        globalAPI.showTask(actionParams.id);\n        return;\n      case GameActionType.ShowDialogue:\n        if (globalAPI.isCurrentPhase(GamePhaseType.Sequence)) {\n          await globalAPI.showDialogueInSamePhase(actionParams.id);\n        } else {\n          await globalAPI.showDialogue(actionParams.id);\n        }\n        return;\n      case GameActionType.AddPopup:\n        await globalAPI.displayPopUp(\n          actionParams.id,\n          actionParams.position,\n          actionParams.duration,\n          actionParams.size\n        );\n        return;\n      case GameActionType.MakeObjectBlink:\n        await globalAPI.makeObjectBlink(actionParams.id, actionParams.turnOn);\n        return;\n      case GameActionType.MakeObjectGlow:\n        await globalAPI.makeObjectGlow(actionParams.id, actionParams.turnOn);\n        return;\n      case GameActionType.PlayBGM:\n        SourceAcademyGame.getInstance().getSoundManager().playBgMusic(actionParams.id);\n        return;\n      case GameActionType.PlaySFX:\n        await SourceAcademyGame.getInstance().getSoundManager().playSound(actionParams.id);\n        return;\n      case GameActionType.ShowObjectLayer:\n        actionParams.show ? globalAPI.showLayer(Layer.Objects) : globalAPI.hideLayer(Layer.Objects);\n        return;\n      case GameActionType.NavigateToAssessment:\n        await globalAPI.promptNavigateToAssessment(actionParams.assessmentId);\n        return;\n      case GameActionType.UpdateAssessmentStatus:\n        await globalAPI.updateAssessmentState();\n        return;\n      case GameActionType.Delay:\n        await sleep(actionParams.duration);\n        return;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Determines if action is state change action type\n   * State-change actions are replayed at the start of every game\n   * They are actions that modify that game map's original state\n   *\n   * @param actionType - the type of action\n   */\n  public static isStateChangeAction(actionType: GameActionType) {\n    switch (actionType) {\n      case GameActionType.AddItem:\n      case GameActionType.RemoveItem:\n      case GameActionType.AddLocationMode:\n      case GameActionType.RemoveLocationMode:\n      case GameActionType.MoveCharacter:\n      case GameActionType.UpdateCharacter:\n        return true;\n      case GameActionType.NavigateToAssessment:\n      case GameActionType.UpdateAssessmentStatus:\n      case GameActionType.PreviewLocation:\n      case GameActionType.ChangeBackground:\n      case GameActionType.StartAnimation:\n      case GameActionType.StopAnimation:\n      case GameActionType.ObtainCollectible:\n      case GameActionType.CompleteObjective:\n      case GameActionType.CompleteTask:\n      case GameActionType.ShowTask:\n      case GameActionType.ShowDialogue:\n      case GameActionType.AddPopup:\n      case GameActionType.MakeObjectBlink:\n      case GameActionType.MakeObjectGlow:\n      case GameActionType.PlayBGM:\n      case GameActionType.PlaySFX:\n      case GameActionType.ShowObjectLayer:\n      case GameActionType.Delay:\n        return false;\n    }\n  }\n}\n","import { ItemId } from '../commons/CommonTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport ActionConditionChecker from './GameActionConditionChecker';\nimport GameActionExecuter from './GameActionExecuter';\nimport { ActionCondition } from './GameActionTypes';\n\n/**\n * This class manages all game actions, and is called whenever\n * entities need to perform actions.\n */\nexport default class GameActionManager {\n  /**\n   * Executes an array of state-change actions\n   * to bring game state same as last player's progress\n   *\n   * @param actionIds ids of the actions\n   */\n  public async fastForwardGameActions(actionIds?: ItemId[]): Promise<void> {\n    if (!actionIds) return;\n    for (const actionId of actionIds) {\n      const { actionType, actionParams } = GameGlobalAPI.getInstance().getActionById(actionId);\n      await GameActionExecuter.executeGameAction(actionType, actionParams);\n    }\n  }\n\n  /**\n   * Process an array of actions, denoted by their IDs.\n   *\n   * NOTE: Saves the game after all the actions are executed.\n   *\n   * @param actionIds ids of the actions\n   */\n  public async processGameActions(actionIds?: ItemId[]): Promise<void> {\n    if (!actionIds) return;\n    for (const actionId of actionIds) {\n      await this.processGameAction(actionId);\n    }\n    await GameGlobalAPI.getInstance().saveGame();\n  }\n\n  /**\n   * Process an action, denoted by its ID.\n   *\n   * @param actionId id of the action\n   */\n  public async processGameAction(actionId: ItemId) {\n    const { actionType, actionParams, actionConditions, isRepeatable, interactionId } =\n      GameGlobalAPI.getInstance().getActionById(actionId);\n\n    if (await this.checkCanPlayAction(isRepeatable, interactionId, actionConditions)) {\n      await GameActionExecuter.executeGameAction(actionType, actionParams);\n      if (GameActionExecuter.isStateChangeAction(actionType)) {\n        GameGlobalAPI.getInstance().triggerStateChangeAction(actionId);\n      }\n      GameGlobalAPI.getInstance().triggerInteraction(actionId);\n    }\n  }\n\n  /**\n   * Check whether an action is playable.\n   *\n   * An action is playable if:\n   *  - Has not been triggered & has all of its condition fulfilled\n   *  - Has been triggered, but repeatable & & has all of its condition fulfilled\n   *\n   * @param isRepeatable whether the action is repeatable\n   * @param interactionId id of the interaction\n   * @param actionConditions condition to be fulfilled to play the action\n   */\n  private async checkCanPlayAction(\n    isRepeatable: boolean,\n    interactionId: string,\n    actionConditions: ActionCondition[]\n  ) {\n    return (\n      (isRepeatable || !GameGlobalAPI.getInstance().hasTriggeredInteraction(interactionId)) &&\n      (await ActionConditionChecker.checkAllConditionsSatisfied(actionConditions))\n    );\n  }\n}\n","import { IGameActionable } from '../action/GameActionTypes';\nimport { AssetKey, ItemId } from '../commons/CommonTypes';\nimport { GameMode } from '../mode/GameModeTypes';\n\n/**\n * @typedef {string} LocationId - id that identifies a location\n */\nexport type LocationId = string;\n\n/**\n * @typedef {LocationId | ItemId} AnyId - a general id type for a location or any object id\n */\nexport type AnyId = LocationId | ItemId;\n\n/**\n * @typedef {GameLocation} - encapsulates data about a location in a GameMap\n * @prop {ItemId[]} actionIds - ids of all actions that play when that location is visited\n * @prop {LocationId} id - the id to indentify that location\n * @prop {string} name - the name of the location as shown in the Move Menu\n * @prop {AssetKey} assetKey - the asset key for the background image of the location\n * @prop {Set<GameMode>} modes - the game modes that are available in the location\n * @prop {Set<ItemId>} talkTopics - the dialogue id of topics that players can talk about in Talk menu of that location\n * @prop {Set<ItemId>} objects - the object id of objects rendered in the location\n * @prop {Set<ItemId>} boundingBoxes - the id of the bounding boxes (invisible rectangles) in that location\n * @prop {AssetKey} bgmKey - the asset key of background music being played in that location\n */\nexport type GameLocation = IGameActionable & {\n  id: LocationId;\n  name: string;\n  assetKey: AssetKey;\n  previewKey: AssetKey | null;\n  modes: Set<GameMode>;\n  navigation: Set<LocationId>;\n  talkTopics: Set<ItemId>;\n  objects: Set<ItemId>;\n  boundingBoxes: Set<ItemId>;\n  bgmKey: AssetKey;\n  characters: Set<ItemId>;\n};\n\nexport enum GameItemType {\n  navigation = 'navigation',\n  locations = 'locations',\n  talkTopics = 'talkTopics',\n  dialogues = 'dialogues',\n  objects = 'objects',\n  boundingBoxes = 'boundingBoxes',\n  characters = 'characters',\n  actions = 'actions',\n  bgmKey = 'bgmKey',\n  collectibles = 'collectibles'\n}\n","import { AnimType, AssetType, ImageAsset } from '../assets/AssetsTypes';\nimport { AssetKey } from '../commons/CommonTypes';\nimport { GameItemType } from '../location/GameMapTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { mandatory } from '../utils/GameUtils';\n\n/**\n * Manager for game animations.\n * Creates Animation instances and stores them in the a\n */\nexport default class GameAnimationManager {\n  private game = GameGlobalAPI.getInstance().getGameManager();\n  private animationInstanceMap = new Map<AssetKey, Phaser.GameObjects.Sprite>();\n\n  /**\n   * Create an image (Phaser Image or Sprite).\n   *\n   * @param assetKey asset key of the image to\n   * create\n   * @param image image asset corresponding to\n   * the image to create\n   * @returns the instantiated image\n   */\n  public createImage(\n    image: ImageAsset,\n    assetKey: AssetKey\n  ): Phaser.GameObjects.Image | Phaser.GameObjects.Sprite {\n    switch (image.type) {\n      case AssetType.Sprite:\n        this.createAnimation(image, image.config?.start || 0, image.config?.frameRate || 20);\n        return this.getAnimation(image);\n        break;\n      case AssetType.Image:\n        return new Phaser.GameObjects.Image(\n          this.game,\n          image?.config?.centreX || 0,\n          image?.config?.centreY || 0,\n          assetKey\n        );\n        break;\n    }\n  }\n\n  /**\n   * Calls on the game manager for the given\n   * animation type (Object or Background) to\n   * add the given animation to the scene.\n   *\n   * @param image image corresponding to the\n   * animation to display\n   * @param startFrame the frame to start playing\n   * the animation from\n   * @param frameRate frame rate to play the animation\n   * at\n   */\n  public displayAnimation(image: ImageAsset, startFrame: number, frameRate: number) {\n    const img = GameGlobalAPI.getInstance().getAssetByKey(image.path);\n    // Update image config\n    if (img && img.config) {\n      img.config.start = startFrame;\n      img.config.frameRate = frameRate;\n    }\n\n    switch (img.config?.animType) {\n      case AnimType.Object:\n        const currLoc = GameGlobalAPI.getInstance().getCurrLocId();\n        GameGlobalAPI.getInstance().addItem(GameItemType.objects, currLoc, image.key);\n        break;\n      case AnimType.Background:\n        GameGlobalAPI.getInstance().renderBackgroundLayerContainer(image.key);\n        break;\n    }\n  }\n\n  /**\n   * Create a new Sprite object and store a\n   * reference to the instance.\n   *\n   * @param image image corresponding to a sprite\n   * @param startFrame the frame to start playing\n   * the animation from\n   * @param frameRate frame rate to play the animation\n   * at\n   */\n  private createAnimation(image: ImageAsset, startFrame: number, frameRate: number) {\n    if (this.isSprite(image)) {\n      this.removeAnimation(image);\n      const sprite = new Phaser.GameObjects.Sprite(\n        this.game,\n        image.config?.centreX || 0,\n        image.config?.centreY || 0,\n        image.path\n      );\n      const config = {\n        key: image.path,\n        frames: this.game.anims.generateFrameNumbers(image.path, {\n          start: startFrame,\n          end: image.config?.endFrame || 0,\n          first: 0\n        }),\n        frameRate: frameRate,\n        repeat: -1\n      };\n      this.game.anims.create(config);\n      this.animationInstanceMap.set(image.key, sprite);\n    }\n  }\n\n  /**\n   * Play an instantiated sprite.\n   *\n   * @param image image asset corresponding\n   * to the sprite to play\n   */\n  public startAnimation(image: ImageAsset) {\n    if (this.isSprite(image)) {\n      const sprite = this.getAnimation(image);\n      sprite.play(image.path, false);\n      this.game.add.existing(sprite);\n    }\n  }\n\n  /**\n   * Stop playing an instantiated sprite.\n   *\n   * @param image image asset corresponding\n   * to the sprite to stop playing\n   */\n  public stopAnimation(image: ImageAsset) {\n    const sprite = this.animationInstanceMap.get(image.key);\n    if (this.isSprite(image) && sprite && sprite.anims) {\n      sprite.anims.stop();\n    }\n  }\n\n  /**\n   * Destroys and deletes sprite instance corresponding\n   * to the the given image asset from the animation\n   * instance map.\n   *\n   * @param image image asset corresponding to the Sprite\n   * instance to be deleted\n   */\n  public removeAnimation(image: ImageAsset) {\n    const anim = this.animationInstanceMap.get(image.key);\n    if (anim) {\n      this.game.anims.remove(image.path);\n      anim.destroy();\n      this.animationInstanceMap.delete(image.key);\n    }\n  }\n\n  /**\n   * Get the Phaser animation instance corresponding\n   * to the given image asset.\n   *\n   * @param image image asset corresponding to the Sprite\n   * instance to be retrieved\n   * @returns Instantiated Phaser Sprite object corresponding\n   * to given image\n   */\n  public getAnimation(image: ImageAsset): Phaser.GameObjects.Sprite {\n    return mandatory(this.animationInstanceMap.get(image.key), `Image: ${image.path} not found`);\n  }\n\n  /**\n   * Checks whether given image is a sprite\n   *\n   * @param image\n   * @returns true iff image is a sprite\n   */\n  private isSprite = (image: ImageAsset) => image.type === AssetType.Sprite;\n}\n","/**\n * Resize a displayed object to given width and height\n * if both dimensions are specified.\n *\n * If either one of width or height is zero/undefined,\n * then only the given dimension will be used to scale the image\n * proportionally according to aspect-ratio\n *\n * @param obj object to be resized\n * @param width desired width of object\n * @param height desired height of object\n */\nexport function resize(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height?: number\n) {\n  const ratio = obj.displayHeight / obj.displayWidth;\n  if (!width) {\n    obj.displayWidth = height! / ratio;\n    obj.displayHeight = height!;\n  } else {\n    obj.displayWidth = width;\n    obj.displayHeight = height || width * ratio;\n  }\n}\n\n/**\n * Resize the obj display size such that the shorter side fits\n * the width/height i.e. the other dimension will overflow.\n *\n * @param obj obj to be resized\n * @param width width\n * @param height height\n */\nexport function resizeOverflow(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height: number\n) {\n  if (obj.displayWidth > obj.displayHeight) {\n    resize(obj, 0, height);\n  } else {\n    resize(obj, width);\n  }\n}\n\n/**\n * Resize the obj display size such that the longer side fits\n * the width/height i.e. the other dimension will underflow.\n *\n * @param obj obj to be resized\n * @param width width\n * @param height height\n */\nexport function resizeUnderflow(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  width: number,\n  height: number\n) {\n  if (obj.displayWidth > obj.displayHeight) {\n    resize(obj, width);\n  } else {\n    resize(obj, 0, height);\n  }\n}\n\n/**\n * Multiplies sprite dimension by factor\n *\n * @param obj obj to be resized\n * @param factor number of times to multiply the object's width and height by.\n */\nexport function multiplyDimensions(\n  obj: Phaser.GameObjects.Image | Phaser.GameObjects.Rectangle,\n  factor: number\n) {\n  obj.displayWidth *= factor;\n  obj.displayHeight *= factor;\n}\n","import ImageAssets from '../assets/ImageAssets';\nimport { Constants } from '../commons/CommonConstants';\nimport { IBaseScene } from '../commons/CommonTypes';\nimport { DashboardPageManager } from '../dashboard/GameDashboardTypes';\nimport { createButton } from '../utils/ButtonUtils';\nimport { limitNumber } from '../utils/GameUtils';\nimport { resizeUnderflow } from '../utils/SpriteUtils';\nimport { calcListFormatPos } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport AwardsConstants, {\n  awardDescStyle,\n  awardKeyStyle,\n  awardTitleStyle,\n  listBannerTextStyle\n} from './GameAwardsConstants';\nimport { createAssetKeyPreviewCont, getAwardProps } from './GameAwardsHelper';\nimport { AwardProperty } from './GameAwardsTypes';\n\n/**\n * Manager for an award page on the dashboard (either collectibles or achievements).\n */\nclass GameAwardsManager implements DashboardPageManager {\n  private scene: IBaseScene;\n  private awardsGetter: () => string[]; // The function for retrieving the award keys\n\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n  private previewContainer: Phaser.GameObjects.Container | undefined;\n  private itemsContainer: Phaser.GameObjects.Container | undefined;\n  private activePageNumber: number;\n\n  constructor(scene: IBaseScene, awardsGetter: () => string[]) {\n    this.scene = scene;\n    this.awardsGetter = awardsGetter;\n    this.activePageNumber = 0;\n  }\n\n  /**\n   * Create the container that encapsulate the 'Award Menu' UI.\n   */\n  public createUIContainer() {\n    const awardContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n    this.uiContainer = awardContainer;\n\n    // Add page arrows\n    const arrowLeft = createButton(this.scene, {\n      assetKey: ImageAssets.arrow.key,\n      onUp: () => this.nextPage(false)\n    })\n      .setScale(AwardsConstants.arrow.yScale, AwardsConstants.arrow.yScale)\n      .setRotation((-90 * Math.PI) / 180)\n      .setPosition(\n        AwardsConstants.arrow.x - AwardsConstants.arrow.xOffset,\n        AwardsConstants.arrow.y\n      );\n\n    const arrowRight = createButton(this.scene, {\n      assetKey: ImageAssets.arrow.key,\n      onUp: () => this.nextPage(true)\n    })\n      .setScale(AwardsConstants.arrow.xScale, AwardsConstants.arrow.yScale)\n      .setRotation((90 * Math.PI) / 180)\n      .setPosition(\n        AwardsConstants.arrow.x + AwardsConstants.arrow.xOffset,\n        AwardsConstants.arrow.y\n      );\n    awardContainer.add([arrowLeft, arrowRight]);\n\n    // Add preview frame\n    const frame = new Phaser.GameObjects.Sprite(\n      this.scene,\n      AwardsConstants.preview.rect.x,\n      AwardsConstants.preview.rect.y,\n      ImageAssets.popUpFrame.key\n    ).setScale(1.2);\n    awardContainer.add(frame);\n\n    // Add asset key container\n    awardContainer.add(createAssetKeyPreviewCont(this.scene));\n\n    // Set initial page\n    this.setPage();\n\n    return awardContainer;\n  }\n\n  /**\n   * Change the current page in view to a new page.\n   *\n   * Internally, destroy and replace the containers to reflect\n   * the new page.\n   */\n  private setPage() {\n    if (this.uiContainer) {\n      if (this.itemsContainer) this.itemsContainer.destroy();\n\n      // Update\n      this.itemsContainer = this.createItemsContainer();\n      this.uiContainer.add(this.itemsContainer);\n\n      // Set default preview\n      this.setPreview();\n    }\n  }\n\n  /**\n   * Set the preview of the award; shown on the left side of the menu.\n   *\n   * The preview include the title of achievement, object asset, asset key,\n   * as well as asset description.\n   *\n   * @param award award to preview\n   */\n  private setPreview(award?: AwardProperty) {\n    if (this.uiContainer) {\n      if (this.previewContainer) this.previewContainer.destroy();\n      if (!award) return;\n\n      this.previewContainer = new Phaser.GameObjects.Container(\n        this.scene,\n        AwardsConstants.preview.rect.xOffset,\n        AwardsConstants.preview.rect.yOffset\n      );\n\n      // Preview image\n      let previewAsset;\n      if (award.assetKey === Constants.nullInteractionId) {\n        // No asset is associated with the award\n        previewAsset = createBitmapText(\n          this.scene,\n          'No preview available',\n          AwardsConstants.noPreviewTextConfig,\n          awardKeyStyle\n        );\n      } else {\n        const previewRect = AwardsConstants.preview.rect;\n        previewAsset = new Phaser.GameObjects.Sprite(this.scene, 0, 0, award.assetKey);\n        resizeUnderflow(previewAsset, previewRect.dim, previewRect.dim);\n        previewAsset.setPosition(previewRect.x, previewRect.y);\n      }\n\n      // Preview title\n      const previewTitle = createBitmapText(\n        this.scene,\n        award.title,\n        AwardsConstants.preview.titleTextConfig,\n        awardTitleStyle\n      );\n\n      // Preview description\n      const previewDesc = new Phaser.GameObjects.Text(\n        this.scene,\n        AwardsConstants.preview.rect.x,\n        AwardsConstants.preview.rect.y + AwardsConstants.preview.descText.yOffset,\n        award.description,\n        awardDescStyle\n      ).setOrigin(0.5, 0.0);\n\n      // Preview asset key, use only empty string if award is not completed\n      const assetKey = award.completed === false ? '' : award.assetKey;\n      const previewKey = createBitmapText(\n        this.scene,\n        assetKey,\n        AwardsConstants.preview.keyTextConfig,\n        awardKeyStyle\n      );\n\n      // Black tint to overlay the asset if award is not completed\n      const blackTint = new Phaser.GameObjects.Rectangle(\n        this.scene,\n        AwardsConstants.preview.rect.x,\n        AwardsConstants.preview.rect.y,\n        AwardsConstants.preview.rect.dim,\n        AwardsConstants.preview.rect.dim,\n        0\n      ).setAlpha(award.completed ? 0 : 0.8);\n\n      this.previewContainer.add([previewAsset, blackTint, previewTitle, previewDesc, previewKey]);\n      this.uiContainer.add(this.previewContainer);\n    }\n  }\n\n  /**\n   * Flip the page.\n   *\n   * The minimum page number is 0, which represent the\n   * start of the list.\n   *\n   * This method is only able to flip forward (increment the page number)\n   * if there is still items to be shown on the list after what is\n   * shown currently.\n   *\n   * @param next if next is set to true, page number will be incremented\n   *             by one; else it will be decremented by one.\n   */\n  private nextPage(next: boolean) {\n    const currPageNum = this.activePageNumber;\n    const newPageNum = limitNumber(\n      next ? currPageNum + 1 : currPageNum - 1,\n      0,\n      Number.MAX_SAFE_INTEGER\n    );\n    const itemLength = this.getItems(newPageNum).length;\n\n    if (itemLength > 0) {\n      this.activePageNumber = newPageNum;\n      this.setPage();\n    }\n  }\n\n  /**\n   * Create a container that represent the list of objects\n   * to be selected on the screen.\n   */\n  private createItemsContainer() {\n    const itemsContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    // Use the previously active page number of the page\n    const items = this.getItems(this.activePageNumber);\n    const itemPositions = calcListFormatPos({\n      numOfItems: items.length,\n      xSpacing: 0,\n      ySpacing: AwardsConstants.list.ySpace\n    });\n\n    // Populate container with all the item buttons\n    itemsContainer.add(\n      items.map((awardProp, index) =>\n        this.createItemButton(\n          awardProp.title,\n          itemPositions[index][0],\n          itemPositions[index][1] + AwardsConstants.list.yStart,\n          () => this.setPreview(awardProp),\n          awardProp.completed !== false\n        )\n      )\n    );\n    return itemsContainer;\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality. This button represent the object selection\n   * button.\n   *\n   * @param obj name of object to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createItemButton(\n    obj: string,\n    xPos: number,\n    yPos: number,\n    callback: any,\n    completed: boolean\n  ) {\n    const button = createButton(this.scene, {\n      assetKey: ImageAssets.awardsBanner.key,\n      message: obj,\n      textConfig: AwardsConstants.listTextConfig,\n      bitMapTextStyle: listBannerTextStyle,\n      onUp: callback,\n      onHoverEffect: completed\n    }).setPosition(xPos, yPos);\n\n    // For non completed award, they do not hover effect and is less visible\n    if (!completed) button.setAlpha(0.5);\n    return button;\n  }\n\n  /**\n   * Get the list of objects to be shown on the UI.\n   *\n   * List items is dependent on the active page;\n   * and is only limited to a number of items due to UI\n   * size. Hence, which section of list is taken is\n   * dependent on the parameter pageNum.\n   *\n   * @param pageNum page number\n   */\n  private getItems(pageNum: number) {\n    const keys = this.awardsGetter();\n    const itemList = getAwardProps(keys);\n    const itemStartIdx = pageNum * AwardsConstants.itemsPerPage;\n    return itemList.slice(itemStartIdx, itemStartIdx + AwardsConstants.itemsPerPage);\n  }\n}\n\nexport default GameAwardsManager;\n","import { ImageAsset } from '../assets/AssetsTypes';\nimport { screenSize } from '../commons/CommonConstants';\nimport { AssetKey } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { LocationId } from '../location/GameMapTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { resizeOverflow } from '../utils/SpriteUtils';\n\n/**\n * Manager for game's background.\n * Loads the background for a location on navigate and change_background action.\n */\nexport default class GameBackgroundManager {\n  private currentBackground?: ImageAsset;\n  /**\n   * Render the background with the asset attached to the location ID.\n   *\n   * @param locationId id of the location\n   */\n  public renderBackgroundLayerContainer(locationId: LocationId) {\n    const assetKey = GameGlobalAPI.getInstance().getLocationAtId(locationId).assetKey;\n\n    this.renderBackgroundImage(assetKey);\n  }\n\n  /**\n   * Render the background with the image associated with the asset key.\n   * The image will be resized (overflow) to fit the screen.\n   *\n   * @param assetKey key of the image\n   */\n  private renderBackgroundImage(assetKey: AssetKey) {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Background]);\n    this.currentBackground = GameGlobalAPI.getInstance().getAssetByKey(assetKey);\n    const animationManager = GameGlobalAPI.getInstance().getGameManager().getAnimationManager();\n    let asset: Phaser.GameObjects.Image | Phaser.GameObjects.Sprite | undefined;\n\n    if (this.currentBackground) {\n      asset = animationManager.createImage(this.currentBackground, assetKey);\n      animationManager.startAnimation(this.currentBackground);\n\n      resizeOverflow(asset, screenSize.x, screenSize.y);\n      GameGlobalAPI.getInstance().addToLayer(Layer.Background, asset);\n      GameGlobalAPI.getInstance().fadeInLayer(Layer.Background);\n    }\n  }\n}\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { ItemId } from '../commons/CommonTypes';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport { ActivatableSprite } from '../objects/GameObjectTypes';\nimport { StateObserver } from '../state/GameStateTypes';\nimport { BBoxProperty } from './GameBoundingBoxTypes';\n\n/**\n * Manager for rendering interactive bounding boxes in the location.\n */\nclass GameBoundingBoxManager implements StateObserver {\n  private bboxes: Map<ItemId, ActivatableSprite>;\n\n  constructor() {\n    this.bboxes = new Map<ItemId, ActivatableSprite>();\n    GameGlobalAPI.getInstance().watchGameItemType(GameItemType.boundingBoxes, this);\n  }\n\n  /**\n   * Clear the layers, and render all the bboxes available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render bboxes at\n   */\n  public renderBBoxLayerContainer(locationId: LocationId): void {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.BBox]);\n    const bboxIdsToRender = GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.boundingBoxes,\n      locationId\n    );\n\n    // Refresh mapping\n    this.bboxes.clear();\n\n    // Add all the bbox\n    bboxIdsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Create the bbox from the given bbox property.\n   * Because we want this sprite to be activatable\n   * by Explore Mode UI, we expose its actionIds\n   * and interactionId\n   *\n   * @param bboxProperty bbox property to be used\n   */\n  private createBBox(bboxProperty: BBoxProperty): ActivatableSprite {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const { x, y, width, height, actionIds, interactionId } = bboxProperty;\n    const bboxSprite = new Phaser.GameObjects.Rectangle(gameManager, x, y, width, height, 0, 0);\n    if (bboxProperty.isInteractive) {\n      bboxSprite.setInteractive();\n    }\n\n    return {\n      sprite: bboxSprite,\n      clickArea: bboxSprite,\n      actionIds,\n      interactionId\n    };\n  }\n\n  /**\n   * Add the bbox, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * Throws error if the bbox property is not available\n   * in the mapping.\n   *\n   * @param id id of bbox\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleAdd(id: ItemId): boolean {\n    const bboxProp = GameGlobalAPI.getInstance().getBBoxById(id);\n    const bbox = this.createBBox(bboxProp);\n    GameGlobalAPI.getInstance().addToLayer(Layer.BBox, bbox.sprite as Phaser.GameObjects.Rectangle);\n    this.bboxes.set(id, bbox);\n    return true;\n  }\n\n  /**\n   * Mutate the bbox of the given id.\n   *\n   * Internally, will delete and re-add the bbox with\n   * the updated property.\n   *\n   * @param id id of bbox\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleMutate(id: ItemId): boolean {\n    return this.handleDelete(id) && this.handleAdd(id);\n  }\n\n  /**\n   * Delete the bbox of the given id, if\n   * applicable.\n   *\n   * @param id id of the bbox\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleDelete(id: ItemId): boolean {\n    const bbox = this.bboxes.get(id);\n    if (bbox) {\n      this.bboxes.delete(id);\n      (bbox.sprite as Phaser.GameObjects.Rectangle).destroy();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get all the rectanlge sprites which can be activated\n   * by external Explore Mode UI\n   */\n  public getActivatables() {\n    return Array.from(this.bboxes.values());\n  }\n}\n\nexport default GameBoundingBoxManager;\n","import { screenCenter, screenSize } from '../commons/CommonConstants';\n\nconst charXOffset = 350;\n\nconst CharConstants = {\n  charWidth: 600,\n  charRect: {\n    x: { Left: charXOffset, Middle: screenCenter.x, Right: screenSize.x - charXOffset }\n  }\n};\n\nexport default CharConstants;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { screenSize } from '../commons/CommonConstants';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport { StateObserver } from '../state/GameStateTypes';\nimport { resize } from '../utils/SpriteUtils';\nimport CharConstants from './GameCharacterConstants';\n\n/**\n * Manager for rendering characters in the location.\n */\nexport default class CharacterManager implements StateObserver {\n  private characterSpriteMap: Map<ItemId, Phaser.GameObjects.Image>;\n\n  constructor() {\n    this.characterSpriteMap = new Map<ItemId, Phaser.GameObjects.Image>();\n    GameGlobalAPI.getInstance().watchGameItemType(GameItemType.characters, this);\n  }\n\n  /**\n   * Clear the layers, and render all the characters available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render characters at\n   */\n  public renderCharacterLayerContainer(locationId: LocationId): void {\n    const idsToRender = GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.characters,\n      locationId\n    );\n\n    // Refresh mapping\n    this.characterSpriteMap.clear();\n\n    // Add all the characters\n    idsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Create the character sprite based on its ID,\n   * expression, and put it at the specified location.\n   *\n   * @param characterId id of the character\n   * @param overrideExpression expression of the shown character, optional\n   * @param overridePosition position to put the character at, optional\n   */\n  public createCharacterSprite(\n    characterId: ItemId,\n    overrideExpression?: string,\n    overridePosition?: GamePosition\n  ) {\n    const character = GameGlobalAPI.getInstance().getCharacterById(characterId);\n    const { defaultPosition, defaultExpression, expressions, scale } = character;\n    const characterXPosition = CharConstants.charRect.x[overridePosition || defaultPosition];\n    const assetKey = expressions.get(overrideExpression || defaultExpression)!;\n\n    const characterSprite = new Phaser.GameObjects.Image(\n      GameGlobalAPI.getInstance().getGameManager(),\n      characterXPosition,\n      screenSize.y,\n      assetKey\n    ).setOrigin(0.5, 1);\n\n    resize(characterSprite, CharConstants.charWidth * scale);\n    return characterSprite;\n  }\n\n  /**\n   * Add the character, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * @param id id of character\n   * @return {boolean} true if successful, false otherwise\n\n   */\n  public handleAdd(id: ItemId): boolean {\n    const characterSprite = this.createCharacterSprite(id);\n    GameGlobalAPI.getInstance().addToLayer(Layer.Character, characterSprite);\n    this.characterSpriteMap.set(id, characterSprite);\n    return true;\n  }\n\n  /**\n   * Mutate the character of the given id.\n   *\n   * Internally, will delete and re-add the character with\n   * the updated property.\n   *\n   * @param id id of character\n   * @return {boolean} true if successful, false otherwise\n\n   */\n  public handleMutate(id: ItemId): boolean {\n    return this.handleDelete(id) && this.handleAdd(id);\n  }\n\n  /**\n   * Delete the character of the given id, if\n   * applicable.\n   *\n   * @param id id of the character\n   *  @return {boolean} true if successful, false otherwise\n   */\n  public handleDelete(id: ItemId) {\n    const char = this.characterSpriteMap.get(id);\n    if (char) {\n      this.characterSpriteMap.delete(id);\n      char.destroy();\n      return true;\n    }\n    return false;\n  }\n}\n","import FontAssets from '../assets/FontAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\n\nexport const pageBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 35,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nconst DashboardConstants = {\n  backButton: { y: screenSize.y * 0.3 },\n  page: { yStart: -screenSize.y * 0.3, ySpace: 150 },\n  pageTextConfig: { x: screenSize.x * 0.3, y: 0, oriX: 0.1, oriY: 0.5 },\n  pageArea: { x: -869, y: -412, width: screenSize.x * 0.72, height: screenSize.y * 0.77 }\n};\n\nexport default DashboardConstants;\n","export enum DashboardPage {\n  Log = 'Log',\n  Tasks = 'Tasks',\n  Collectibles = 'Collectibles',\n  Achievements = 'Achievements'\n}\n\nexport interface DashboardPageManager {\n  createUIContainer: () => Phaser.GameObjects.Container;\n}\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { IBaseScene, IGameUI } from '../commons/CommonTypes';\nimport { fadeAndDestroy } from '../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../effects/FlyEffect';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { createButton } from '../utils/ButtonUtils';\nimport { sleep } from '../utils/GameUtils';\nimport { calcListFormatPos } from '../utils/StyleUtils';\nimport DashboardConstants, { pageBannerTextStyle } from './GameDashboardConstants';\nimport { DashboardPage, DashboardPageManager } from './GameDashboardTypes';\n\n/**\n * Manager for the dashboard.\n *\n * Here, the dialogue log and task log are available for browsing.\n */\nclass GameDashboardManager implements IGameUI {\n  private scene: IBaseScene;\n  private pages: DashboardPage[];\n  private pageManagers: DashboardPageManager[];\n\n  private pageMask: Phaser.Display.Masks.GeometryMask;\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n  private pageChosenContainer: Phaser.GameObjects.Container | undefined;\n  private pageUIContainers: Phaser.GameObjects.Container[];\n  private currPageIndex: number;\n\n  constructor(scene: IBaseScene, pages: DashboardPage[], pageManagers: DashboardPageManager[]) {\n    this.scene = scene;\n    this.pages = pages;\n    this.pageManagers = pageManagers;\n    this.pageMask = this.createPageMask();\n    // Used to store each page's UI so they only get created once each time dashboard is opened.\n    this.pageUIContainers = new Array(pages.length);\n    this.currPageIndex = 0; // Use first page as starting page\n    this.scene.getPhaseManager().addPhaseToMap(GamePhaseType.Dashboard, this);\n  }\n\n  /**\n   * Creates the GeometryMask through which each page's UI can be seen.\n   */\n  private createPageMask() {\n    const shape = new Phaser.GameObjects.Graphics(this.scene);\n    // This is the rectangle of the background image\n    const { x, y, width, height } = DashboardConstants.pageArea;\n    shape.fillRect(x, y, width, height);\n    return shape.createGeometryMask();\n  }\n\n  /**\n   * Change the current page in view to a new page.\n   *\n   * Internally, create a container for each page when the page is first\n   * opened or retrieve the container from cache if opened before;\n   * also sets up the blue outline that denotes that the page is chosen.\n   *\n   * @param pageIndex new page\n   */\n  private setPage(pageIndex: number) {\n    if (this.uiContainer) {\n      if (this.pageChosenContainer) this.pageChosenContainer.destroy();\n\n      // Hide current page\n      const currPageUIContainer = this.pageUIContainers[this.currPageIndex];\n      // Only time currPageUIContainer does not exist here is when\n      // the dashboard is opened and the first page is set.\n      if (currPageUIContainer) {\n        currPageUIContainer.setVisible(false);\n      }\n\n      // Show selected page\n      this.currPageIndex = pageIndex;\n      let newPageUIContainer = this.pageUIContainers[this.currPageIndex];\n      if (!newPageUIContainer) {\n        // First time opening this page, UI container not created yet\n        newPageUIContainer = this.pageManagers[this.currPageIndex].createUIContainer();\n        newPageUIContainer.setMask(this.pageMask);\n        this.pageUIContainers[this.currPageIndex] = newPageUIContainer;\n        this.uiContainer.add(newPageUIContainer);\n      } else {\n        newPageUIContainer.setVisible(true);\n      }\n\n      // Set chosen page banner\n      const bannerPos = this.getPageOptPositions();\n      const chosenIdx = this.currPageIndex;\n      const bannerChosen = new Phaser.GameObjects.Sprite(\n        this.scene,\n        bannerPos[chosenIdx][0],\n        bannerPos[chosenIdx][1] + DashboardConstants.page.yStart,\n        ImageAssets.awardsPageChosen.key\n      );\n      this.pageChosenContainer = new Phaser.GameObjects.Container(this.scene, 0, 0, [bannerChosen]);\n      this.uiContainer.add(this.pageChosenContainer);\n    }\n  }\n\n  /**\n   * Create the container that encapsulate the 'Dashboard' UI.\n   */\n  private createUIContainer() {\n    const dashboardContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    const blackUnderlay = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      0,\n      0,\n      screenSize.x,\n      4 * screenSize.y,\n      0\n    )\n      .setAlpha(0.7)\n      .setInteractive();\n\n    const dashboardBg = new Phaser.GameObjects.Image(this.scene, 0, 0, ImageAssets.awardsMenu.key);\n    dashboardContainer.add([blackUnderlay, dashboardBg]);\n\n    // Add options\n    const pageOptButtons = this.pages.map((page, pageIndex) => {\n      return {\n        text: page,\n        callback: () => this.setPage(pageIndex)\n      };\n    });\n    const pageOptButtonPositions = this.getPageOptPositions();\n    dashboardContainer.add(\n      pageOptButtons.map((button, index) =>\n        this.createPageOpt(\n          button.text,\n          pageOptButtonPositions[index][0],\n          pageOptButtonPositions[index][1] + DashboardConstants.page.yStart,\n          button.callback\n        )\n      )\n    );\n\n    // Add back button\n    const backButton = this.createPageOpt('Back', 0, DashboardConstants.backButton.y, async () => {\n      if (this.scene.getPhaseManager().isCurrentPhase(GamePhaseType.Dashboard)) {\n        await this.scene.getPhaseManager().popPhase();\n      }\n    });\n    dashboardContainer.add(backButton);\n\n    return dashboardContainer;\n  }\n\n  /**\n   * Get positions of the page options.\n   */\n  private getPageOptPositions() {\n    return calcListFormatPos({\n      numOfItems: Object.keys(DashboardPage).length,\n      xSpacing: 0,\n      ySpacing: DashboardConstants.page.ySpace\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality. This button represent the page option button,\n   * whether it is 'log' or 'tasks'\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createPageOpt(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this.scene, {\n      assetKey: ImageAssets.awardsPage.key,\n      message: text,\n      textConfig: DashboardConstants.pageTextConfig,\n      bitMapTextStyle: pageBannerTextStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Activate the 'Dashboard' UI.\n   *\n   * Usually only called by the phase manager when 'Dashboard' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    this.uiContainer = this.createUIContainer();\n    this.scene.getLayerManager().addToLayer(Layer.Dashboard, this.uiContainer);\n    this.getSoundManager().playSound(SoundAssets.menuEnter.key);\n\n    // Set initial page\n    this.setPage(this.currPageIndex);\n\n    this.uiContainer.setPosition(screenCenter.x, -screenSize.y);\n    this.pageMask.geometryMask.setPosition(screenCenter.x, -screenSize.y);\n\n    this.scene.tweens.add({\n      targets: [this.uiContainer, this.pageMask.geometryMask],\n      ...entryTweenProps,\n      y: screenCenter.y\n    });\n  }\n\n  /**\n   * Deactivate the 'Dashboard' UI.\n   *\n   * Usually only called by the phase manager when 'Dashboard' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    if (this.uiContainer) {\n      // Reload page UIs next time dashboard is opened\n      this.pageUIContainers = new Array(this.pages.length);\n\n      this.uiContainer.setPosition(this.uiContainer.x, this.uiContainer.y);\n      this.getSoundManager().playSound(SoundAssets.menuExit.key);\n\n      this.scene.tweens.add({\n        targets: [this.uiContainer, this.pageMask.geometryMask],\n        ...exitTweenProps\n      });\n\n      await sleep(exitTweenProps.duration);\n      fadeAndDestroy(this.scene, this.uiContainer, { fadeDuration: 50 });\n    }\n  }\n\n  private getSoundManager = () => SourceAcademyGame.getInstance().getSoundManager();\n}\n\nexport default GameDashboardManager;\n","import GameActionConditionChecker from '../action/GameActionConditionChecker';\nimport { DialogueLine, DialogueObject, PartName } from './GameDialogueTypes';\n\n/**\n * Class for keeping track of which line, action, and speaker has to be shown next\n */\nexport default class DialogueGenerator {\n  private currPart: string;\n  private currLineNum: number;\n  private dialogueContent: DialogueObject;\n\n  /**\n   * @param dialogueContent the dialogue to keep track of and to play\n   */\n  public constructor(dialogueContent: DialogueObject) {\n    this.dialogueContent = dialogueContent;\n    this.currPart = dialogueContent.keys().next().value;\n    this.currLineNum = 0;\n  }\n\n  /**\n   * @returns {Promise<DialogueLine>} returns the dialgoueLine that is played next,\n   * based on what is dictated by the dialogueContent\n   */\n  public async generateNextLine(): Promise<DialogueLine> {\n    const dialogueLine = this.dialogueContent.get(this.currPart)![this.currLineNum];\n    if (!dialogueLine || !dialogueLine.line) {\n      return { line: '' };\n    }\n\n    if (dialogueLine.goto) {\n      let currPart: string | null = dialogueLine.goto.part;\n      const conditionCheck = await GameActionConditionChecker.checkAllConditionsSatisfied(\n        dialogueLine.goto.conditions\n      );\n      if (!conditionCheck) {\n        currPart = dialogueLine.goto.altPart;\n      }\n\n      if (!currPart) {\n        this.currLineNum++;\n      } else if (this.dialogueContent.get(currPart)) {\n        this.currPart = currPart;\n        this.currLineNum = 0;\n      } else {\n        return { line: '' };\n      }\n    } else {\n      this.currLineNum++;\n    }\n    return dialogueLine;\n  }\n\n  /**\n   * @param goto new PartName to change currPart to\n   */\n  public updateCurrPart(goto: PartName) {\n    this.currPart = goto;\n    this.currLineNum = 0;\n  }\n}\n","import GameInputManager from '../input/GameInputManager';\nimport GameLayerManager from '../layer/GameLayerManager';\nimport GamePhaseManager from '../phase/GamePhaseManager';\n\n/**\n * Encapsulate style of bitmap text.\n *\n * @prop {string} key - key to the bitmap text\n * @prop {number} size - font size\n * @prop {number} fill = text color, in hex\n * @prop {number} align - text alignment, from Phaser.GameObjects.BitmapText.ALIGN_*\n */\nexport type BitmapFontStyle = {\n  key: string;\n  size: number;\n  align: number;\n};\n\n/**\n * @typedef {string} ItemId - id associated with an item.\n * Item can be any of the following:\n * (Dialogue | ObjectProperty | BboxProperty | Character | Action | AwardProperty)\n */\nexport type ItemId = string;\n\n/** @typedef {string} AssetKey - key associated with an asset */\nexport type AssetKey = string;\n\n/** @typedef {string} AssetPath - path associated with an asset */\nexport type AssetPath = string;\n\n/**\n * Encapsulate tracked interaction.\n *\n * @prop {boolean} isInteractive whether an object is interactive\n * @prop {string} interactionId id of interaction. Must be unique across all interactions.\n */\nexport type TrackInteraction = {\n  isInteractive: boolean;\n  interactionId: string;\n};\n\n/**\n * Interface for classes that represents a UI.\n * The UI must be able to be activated and deactivated.\n *\n * @interface\n */\nexport interface IGameUI {\n  activateUI: () => Promise<void> | void;\n  deactivateUI: () => Promise<void> | void;\n}\n\n/**\n * Enum for common game positions.\n * @readonly\n * @enum {string}\n */\nexport enum GamePosition {\n  Left = 'Left',\n  Middle = 'Middle',\n  Right = 'Right'\n}\n\n/**\n * Enum for common game size.\n * @readonly\n * @enum {string}\n */\nexport enum GameSize {\n  Small = 'Small',\n  Medium = 'Medium',\n  Large = 'Large'\n}\n\n/**\n * Encapsulate text configuration.\n *\n * @prop {number} x x coordinate of the text\n * @prop {number} y y coordinate of the text\n * @prop {number} oriX originX of the text\n * @prop {number} oriY originY of the text\n */\nexport type TextConfig = { x: number; y: number; oriX: number; oriY: number };\n\n/**\n * Interface for basic scene, which incorporates input, phaser, and layer manager.\n * Due to the three managers, the scene should also provide a way to clean up\n * the necessary managers.\n *\n * @interface\n */\nexport interface IBaseScene extends Phaser.Scene {\n  getLayerManager: () => GameLayerManager;\n  getInputManager: () => GameInputManager;\n  getPhaseManager: () => GamePhaseManager;\n  cleanUp: () => void;\n}\n\n/**\n * Interface for scene which possess a layer manager.\n *\n * @interface\n */\nexport interface ILayeredScene extends Phaser.Scene {\n  getLayerManager: () => GameLayerManager;\n}\n","import { Constants } from '../commons/CommonConstants';\n\nexport default class StringUtils {\n  /**\n   * Splits text into several paragraphs, each containing header\n   * string and body string array\n   *\n   * Example input:\n   * [\"objectives\",\n   * \"    talkToHartin\"\n   * \"    completeTask\"]\n   *\n   * Example output:\n   * [ [\"objectives\"], [\"talkToHartin\", \"completeTask\"] ]\n   *\n   * @param lines raw text strings\n   * @returns {Array<[string, string[]]>} several parargraphs that have\n   *                                      been split into head and body\n   */\n  public static splitToParagraph(lines: string[]) {\n    const headerAndBodyLines: [string, string[]][] = [];\n    lines.forEach((line: string) => {\n      if (line.startsWith('\\t') || line.startsWith('    ')) {\n        const content = line.startsWith('\\t') ? line.slice(1) : line.slice(4);\n        if (headerAndBodyLines.length === 0) {\n          console.error('Unexpected tabs');\n          return;\n        }\n        const bodyLines = headerAndBodyLines[headerAndBodyLines.length - 1][1];\n        bodyLines.push(content);\n        return;\n      }\n      headerAndBodyLines.push([line.trim(), []]);\n    });\n    return headerAndBodyLines;\n  }\n\n  /**\n   * Given an array of lines, returns a Map where the keys are the headings\n   * and the value are the lines below each heading.\n   *\n   * @param lines lines to be processed\n   * @param isHeaderFunction predicate that determines the header syntax. This\n   *                         will be ran against every line, so take into account if you want\n   *                         to detect header in the middle of line/in between lines.\n   * @returns {Map<string, string>}\n   */\n  public static mapByHeader(\n    lines: string[],\n    isHeaderFunction: (line: string) => boolean\n  ): Map<string, string[]> {\n    const map = new Map<string, string[]>();\n    if (!isHeaderFunction(lines[0])) {\n      map.set('0', lines);\n      return map;\n    }\n    let currHeader = '';\n    lines.forEach(line => {\n      if (isHeaderFunction(line)) {\n        currHeader = line;\n        map.set(line, []);\n        return;\n      }\n      map.get(currHeader)!.push(line);\n    });\n    return map;\n  }\n\n  /**\n   * Split using separator, but limit number of separators to split with.\n   * After splitting, trim each entry to get rid of whitespaces.\n   *\n   * Example input: splitWithLimit(\"whatHappened, What Happened, Scottie?\\n\", \",\", 1)\n   * Example output: [\"whatHappened\", \"What Happened, Scottie?\"]\n   * Explanation: This splits the string only using the first 1 comma then trims whitespaces\n   *\n   * @param line line to be split\n   * @param sep separator to be used\n   * @param limit limit the number of separators to split the string, undefined if use all separators\n   * @returns {Array<string>}\n   */\n  public static splitWithLimit(line: string, sep: string, limit: number): string[] {\n    if (limit >= 0) {\n      const lines = line.split(sep);\n      const substrings = lines.slice(0, limit);\n      substrings.push(lines.slice(limit).join(sep));\n      return substrings.map((phrase: string) => phrase.trim());\n    }\n    return StringUtils.splitByChar(line, sep);\n  }\n\n  /**\n   * Split using separator. After splitting, trim each entry to get rid of whitespaces.\n   *\n   * @param line line to be split\n   * @param sep separator to be used\n   * @param {Array<string>}\n   */\n  public static splitByChar(line: string, sep: string): string[] {\n    return line.split(sep).map((phrase: string) => phrase.trim());\n  }\n\n  /**\n   * Splits text into string array and removes\n   * lines with only newlines.\n   *\n   * @param text text to split\n   * @returns {Array<string>}\n   */\n  public static splitToLines(text: string): string[] {\n    return text\n      .split('\\n')\n      .map(line => line.trimRight())\n      .filter(line => line !== '');\n  }\n\n  /**\n   * Splits text into string array, removes lines\n   * with only newlines and removes characters that\n   * are commented out in single and multi line\n   * comments\n   *\n   * @param text text to split\n   * @returns {Array<string>}\n   */\n  public static splitToLinesAndRemoveComments(text: string): string[] {\n    return this.removeMultiLineComments(text.split('\\n'), '/*', '*/')\n      .map(line => this.removeSingleLineComment(line, '//'))\n      .map(line => line.trimRight())\n      .filter(line => line !== '');\n  }\n\n  /**\n   * Removes characters from string before/after\n   * specified comment characters\n   *\n   * Example input:\n   * removeSingleLineComment('Hello # World','#',false)\n   *\n   * Example output:\n   * 'Hello '\n   *\n   * @param text text with single line comments\n   * @param commentChars characters to denote comment region\n   * @param removeAfter (optional) true - remove characters after commentChars,\n   *                              false - remove characters before commentChars\n   * @returns {string}\n   */\n  public static removeSingleLineComment(\n    text: string,\n    commentChars: string,\n    removeAfter: boolean = true\n  ) {\n    const commentIndex = text.indexOf(commentChars);\n    return commentIndex === -1\n      ? text\n      : removeAfter\n      ? text.slice(0, commentIndex)\n      : text.slice(commentIndex + commentChars.length);\n  }\n\n  /**\n   * Given an array of lines with a\n   * a subset of characters commented out\n   * by specified open and close comment\n   * characters, Returns an array of lines\n   * with characters inside commented regions\n   * removed\n   *\n   * Example input:\n   * removeMultiLineComments(\n   * ['objectives',\n   * '    checkedScreen',\n   * '    talkedToLokKim1',\n   * '/!    talkedToLokKim2',\n   * '    talkedToLokKim3!/'],\n   *  '/!', '!/');\n   *\n   * Example output:\n   * ['objectives',\n   * '    checkedScreen',\n   * '    talkedToLokKim1']\n   *\n   * @param lines lines to remove comments from\n   * @param openCommentChars characters to denote open comment\n   * @param closeCommentChars characters to denote close comment\n   * @returns {Array<string>}\n   */\n  public static removeMultiLineComments(\n    lines: string[],\n    openCommentChars: string,\n    closeCommentChars: string\n  ): string[] {\n    const newLines = [];\n    let commentOpen = false;\n\n    for (let l = 0; l < lines.length; l++) {\n      const line = lines[l];\n      const commentRegions: [number, number][] = [];\n      const openIns = this.findAllInstances(line, openCommentChars);\n      const closeIns = this.findAllInstances(line, closeCommentChars);\n      let activeIndex = -1; // current valid comment index in line\n      let openInd = 0; // open comment index in openIns\n      let closeInd = 0; // close comment index in closeIns\n      let region = commentOpen ? [0] : [];\n\n      while (openInd < openIns.length || closeInd < closeIns.length) {\n        const prevActive = activeIndex;\n        activeIndex = commentOpen\n          ? closeIns[closeInd++] + closeCommentChars.length\n          : openIns[openInd++];\n        if (activeIndex <= prevActive) {\n          console.error(`Comment mismatch: Line ${l + 1},  Pos ${activeIndex + 1}`);\n          activeIndex = prevActive;\n        } else {\n          region.push(activeIndex);\n          commentOpen = !commentOpen;\n        }\n        if (region.length === 2) {\n          commentRegions.push([region[0], region[1]]);\n          region = [];\n        }\n      }\n      if (region.length === 1) {\n        commentRegions.push([region[0], line.length]);\n      }\n      newLines.push(this.removeCommentRegions(line, commentRegions));\n    }\n    return newLines;\n  }\n\n  /**\n   * Return a string whose content within the regions is removed\n   * for each region; regions contain two elements: the index of\n   * the first character to ignore, and the index of the last character\n   * to ignore + 1, in the text string\n   *\n   * Example input (comment characters: '/!' and '!/'):\n   * removeCommentRegions('Sour/!ce Academ!/y', [[4,17]])\n   *\n   * Example output:\n   * 'Soury'\n   *\n   * @param text the text to be removed from\n   * @param regions contains all the regions of comments\n   * @returns {string}\n   */\n  public static removeCommentRegions(text: string, regions: [number, number][]) {\n    let newString = '';\n    let prevEnd = 0;\n    regions.forEach(arr => {\n      newString += text.slice(prevEnd, arr[0]);\n      prevEnd = arr[1];\n    });\n    newString += text.slice(prevEnd, text.length);\n    return newString;\n  }\n\n  /**\n   * Return an array of the starting indices of the substring within the text string\n   *\n   * @param text\n   * @param substring substring to search for\n   * @returns {Array<number>}\n   */\n  public static findAllInstances(text: string, substring: string): number[] {\n    const indices = [];\n    let index = text.indexOf(substring);\n    while (index !== -1) {\n      indices.push(index);\n      index = text.indexOf(substring, index + 1);\n    }\n    return indices;\n  }\n\n  /**\n   * Capitalise first letter.\n   *\n   * @param word text to be capitalized\n   * @returns {string}\n   */\n  public static capitalize(word: string) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n\n  /**\n   * Turns snake case to capitalized case.\n   * Only accounts for letters, i.e. numbers and symbols will be discarded.\n   * e.g. snake_case_to_capitalized -> Snake Case To Capitalized\n   *\n   * @param name text to be capitalized\n   * @returns {string}\n   */\n  public static toCapitalizedWords(name: string) {\n    const words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n    return words.map(StringUtils.capitalize).join(' ');\n  }\n\n  /**\n   * Converts the given number into string. The given number\n   * is rounded down.\n   *\n   * @param num number to be converted\n   */\n  public static toIntString(num: number) {\n    return Math.floor(num).toString();\n  }\n\n  /**\n   * Check whether given string is empty string.\n   *\n   * @param str string to check\n   */\n  public static isEmptyString(str: string) {\n    return str === Constants.nullInteractionId;\n  }\n}\n","import ImageAssets from '../assets/ImageAssets';\nimport { SpeakerDetail } from '../character/GameCharacterTypes';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport StringUtils from '../utils/StringUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport DialogueConstants, { speakerTextStyle } from './GameDialogueConstants';\n\n/**\n * Class that manages speakerbox portion of the dialgoue box\n * And renders the characters in Speaker Layer\n *\n */\nexport default class DialogueSpeakerRenderer {\n  private currentSpeakerId?: string;\n\n  /**\n   * Changes the speaker shown in the speaker box and the speaker rendered on screen\n   *\n   * @param newSpeakerDetail the details about the new speaker,\n   * including his characaterId, expression and position.\n   *\n   * Undefined - if no speaker changes are involved in the dialogue line.\n   * Null - if there is no speaker for the line\n   */\n  public changeSpeakerTo(newSpeakerDetail?: SpeakerDetail | null) {\n    if (newSpeakerDetail === undefined) return;\n\n    this.currentSpeakerId &&\n      GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Speaker, Layer.SpeakerBox]);\n    this.showNewSpeaker(newSpeakerDetail);\n  }\n\n  private showNewSpeaker(newSpeakerDetail: SpeakerDetail | null) {\n    if (newSpeakerDetail) {\n      this.drawSpeakerSprite(newSpeakerDetail);\n      this.drawSpeakerBox(newSpeakerDetail.speakerId);\n    }\n  }\n\n  private drawSpeakerBox(speakerId: ItemId) {\n    if (speakerId === 'narrator') return;\n    const speakerContainer =\n      speakerId === 'you'\n        ? this.createSpeakerBox(this.getUsername(), GamePosition.Right)\n        : this.createSpeakerBox(\n            GameGlobalAPI.getInstance().getCharacterById(speakerId).name,\n            GamePosition.Left\n          );\n    GameGlobalAPI.getInstance().addToLayer(Layer.SpeakerBox, speakerContainer);\n  }\n\n  private drawSpeakerSprite({ speakerId, speakerPosition, expression }: SpeakerDetail) {\n    this.currentSpeakerId = speakerId;\n    if (speakerId === 'you' || speakerId === 'narrator') {\n      return;\n    }\n    const speakerSprite = GameGlobalAPI.getInstance().createCharacterSprite(\n      speakerId,\n      expression,\n      speakerPosition\n    );\n    GameGlobalAPI.getInstance().addToLayer(Layer.Speaker, speakerSprite);\n  }\n\n  private createSpeakerBox(text: string, position: GamePosition) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n    const rectangle = new Phaser.GameObjects.Image(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.speakerBox.key\n    ).setAlpha(0.8);\n\n    const speakerText = createBitmapText(\n      gameManager,\n      '',\n      DialogueConstants.speakerTextConfig,\n      speakerTextStyle\n    );\n\n    if (position === GamePosition.Right) {\n      rectangle.displayWidth *= -1;\n      speakerText.x = screenSize.x - speakerText.x;\n    }\n\n    container.add([rectangle, speakerText]);\n    speakerText.text = StringUtils.capitalize(text);\n    return container;\n  }\n\n  public getUsername = () => SourceAcademyGame.getInstance().getAccountInfo().name;\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport { ItemId } from '../commons/CommonTypes';\nimport { promptWithChoices } from '../effects/Prompt';\nimport { keyboardShortcuts } from '../input/GameInputConstants';\nimport GameInputManager from '../input/GameInputManager';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { textTypeWriterStyle } from './GameDialogueConstants';\nimport DialogueGenerator from './GameDialogueGenerator';\nimport DialogueRenderer from './GameDialogueRenderer';\nimport DialogueSpeakerRenderer from './GameDialogueSpeakerRenderer';\n\n/**\n * Given a dialogue Id, this manager renders the correct dialogue.\n * It displays the lines, speakers, and performs actions\n * whenever players click on the dialogue box\n */\n\nexport default class DialogueManager {\n  private speakerRenderer?: DialogueSpeakerRenderer;\n  private dialogueRenderer?: DialogueRenderer;\n  private dialogueGenerator?: DialogueGenerator;\n  private gameInputManager?: GameInputManager = new GameInputManager(\n    GameGlobalAPI.getInstance().getGameManager()\n  );\n\n  /**\n   * @param dialogueId the dialogue Id of the dialogue you want to play\n   *\n   * @returns {Promise} the promise that resolves when the entire dialogue has been played\n   */\n  public async showDialogue(dialogueId: ItemId): Promise<void> {\n    const dialogue = GameGlobalAPI.getInstance().getDialogueById(dialogueId);\n\n    this.dialogueRenderer = new DialogueRenderer(textTypeWriterStyle);\n    this.dialogueGenerator = new DialogueGenerator(dialogue.content);\n    this.speakerRenderer = new DialogueSpeakerRenderer();\n\n    GameGlobalAPI.getInstance().addToLayer(\n      Layer.Dialogue,\n      this.dialogueRenderer.getDialogueContainer()\n    );\n\n    GameGlobalAPI.getInstance().fadeInLayer(Layer.Dialogue);\n    await new Promise(resolve => this.playWholeDialogue(resolve as () => void));\n    this.getDialogueRenderer().destroy();\n    this.getSpeakerRenderer().changeSpeakerTo(null);\n  }\n\n  private async playWholeDialogue(resolve: () => void) {\n    await this.showNextLine(resolve);\n    // add keyboard listener for dialogue box\n    this.getInputManager().registerKeyboardListener(keyboardShortcuts.Next, 'up', async () => {\n      // show the next line if dashboard or escape menu are not displayed\n      if (\n        !GameGlobalAPI.getInstance().getGameManager().getPhaseManager().isCurrentPhaseTerminal()\n      ) {\n        await this.showNextLine(resolve);\n      }\n    });\n    this.getDialogueRenderer()\n      .getDialogueBox()\n      .on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, async () => {\n        await this.showNextLine(resolve);\n      });\n  }\n\n  private async showNextLine(resolve: () => void) {\n    GameGlobalAPI.getInstance().playSound(SoundAssets.dialogueAdvance.key);\n    const { line, speakerDetail, actionIds, prompt } =\n      await this.getDialogueGenerator().generateNextLine();\n    const lineWithName = line.replace('{name}', this.getUsername());\n    this.getDialogueRenderer().changeText(lineWithName);\n    this.getSpeakerRenderer().changeSpeakerTo(speakerDetail);\n\n    // Store the current line into the storage\n    GameGlobalAPI.getInstance().storeDialogueLine(lineWithName, speakerDetail);\n\n    // Disable interactions while processing actions\n    GameGlobalAPI.getInstance().enableSprite(this.getDialogueRenderer().getDialogueBox(), false);\n\n    if (prompt) {\n      // disable keyboard input to prevent continue dialogue\n      this.getInputManager().enableKeyboardInput(false);\n      const response = await promptWithChoices(\n        GameGlobalAPI.getInstance().getGameManager(),\n        prompt.promptTitle,\n        prompt.choices.map(choice => choice[0])\n      );\n\n      this.getInputManager().enableKeyboardInput(true);\n      this.getDialogueGenerator().updateCurrPart(prompt.choices[response][1]);\n    }\n    await GameGlobalAPI.getInstance().processGameActionsInSamePhase(actionIds);\n    GameGlobalAPI.getInstance().enableSprite(this.getDialogueRenderer().getDialogueBox(), true);\n\n    if (!line) {\n      // clear keyboard listeners when dialogue ends\n      this.getInputManager().clearKeyboardListeners([keyboardShortcuts.Next]);\n      resolve();\n    }\n  }\n\n  private getDialogueGenerator = () => this.dialogueGenerator as DialogueGenerator;\n  private getDialogueRenderer = () => this.dialogueRenderer as DialogueRenderer;\n  private getSpeakerRenderer = () => this.speakerRenderer as DialogueSpeakerRenderer;\n  private getInputManager = () => this.gameInputManager as GameInputManager;\n\n  public getUsername = () => SourceAcademyGame.getInstance().getAccountInfo().name;\n}\n","import { SpeakerDetail } from '../character/GameCharacterTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { DialogueStorageLine } from './GameDialogueTypes';\n\n/**\n * Class for keeping track of all dialogue and actions shown to the player, in sequence.\n *\n * The storage is local to the instance, and should be reset when a user completes the\n * current checkpoint.\n */\nexport default class GameDialogueStorageManager {\n  private dialogueStorage?: Array<DialogueStorageLine>;\n\n  /**\n   * Stores a line of dialogue into the current storage instance.\n   * Only the dialogue line and the speaker details are passed into the method.\n   *\n   * @param newLine the dialogue line to be stored.\n   * @param newSpeakerDetail the SpeakerDetail object that contains the speaker id.\n   */\n  public storeLine(newLine: string, newSpeakerDetail?: SpeakerDetail | null) {\n    if (!newSpeakerDetail) return;\n\n    if (!this.dialogueStorage) {\n      this.dialogueStorage = new Array<DialogueStorageLine>();\n    }\n    const newDialogue = {\n      speaker: this.getSpeakerName(newSpeakerDetail),\n      line: newLine\n    };\n    this.dialogueStorage.push(newDialogue);\n  }\n\n  /**\n   * Gets the speaker name from the given SpeakerDetail object, by converting the speaker id\n   * stored in the SpeakerDetail object into a String containing the actual name of the Speaker,\n   * using the getCharacterById method available in GameGlobalAPI.\n   *\n   * @param speakerDetail the SpeakerDetail object that contains the speaker id.\n   *\n   * @returns the speaker name corresponding to the speaker id inside the given SpeakerDetail object.\n   */\n  private getSpeakerName(speakerDetail: SpeakerDetail | null) {\n    const speakerId = speakerDetail?.speakerId;\n\n    // Special cases are when the id is 'you', which is converted to the player's username, and 'narrator', which simply returns 'Narrator'.\n    // The getCharacterById method is primarily used to obtain the character name to be displayed on the game's dialogue box, and so the method returns '' when given 'narrator'.\n    return !speakerId\n      ? ''\n      : speakerId === 'you'\n      ? this.getUsername()\n      : speakerId === 'narrator'\n      ? 'Narrator'\n      : GameGlobalAPI.getInstance().getCharacterById(speakerId).name;\n  }\n\n  /**\n   * Clears the current iteration of the dialogue storage.\n   * This method should be called at the end of the chapter, when transitioning to the next checkpoint.\n   */\n  public clearDialogueStorage() {\n    this.dialogueStorage = new Array<DialogueStorageLine>();\n  }\n\n  /**\n   * Returns the current dialogue storage as an Array of strings.\n   *\n   * This method is called by the Dashboard in order to fetch the dialogues currently stored,\n   * and subsequently display them in order.\n   *\n   * @returns the Dialogue storage as an Array of strings.\n   */\n  public getDialogueStorage(): Array<String> {\n    if (!this.dialogueStorage) {\n      return new Array<String>();\n    }\n    return this.dialogueStorage.map(storageLine => `${storageLine.speaker}:\\n${storageLine.line}`);\n  }\n\n  public getUsername = () => SourceAcademyGame.getInstance().getAccountInfo().name;\n}\n","import { screenCenter } from '../commons/CommonConstants';\nimport { blackScreen } from './FadeEffect';\n\nconst barWidth = 320;\nconst barHeight = 50;\nconst padding = 10;\n\nconst innerWidth = barWidth - padding * 2;\nconst innerHeight = barHeight - padding * 2;\nconst barX = screenCenter.x - barWidth / 2;\nconst barY = screenCenter.y;\nconst innerBarX = barX + padding;\nconst innerBarY = barY + padding;\n\n/**\n * A function to display a loading bar while a scene's preload is in progress\n *\n * @param scene - the scene in which to add a loading screen when preload is occuring\n */\nexport function addLoadingScreen(scene: Phaser.Scene) {\n  let progressBar: Phaser.GameObjects.Graphics;\n  let progressBox: Phaser.GameObjects.Graphics;\n  let loadingScreenBg: Phaser.GameObjects.GameObject;\n\n  scene.load.on('start', () => {\n    loadingScreenBg = scene.add.existing(blackScreen(scene));\n    progressBar = scene.add.graphics();\n    progressBox = scene.add.graphics();\n    progressBox.fillStyle(0x222222, 0.8);\n    progressBox.fillRect(barX, barY, barWidth, barHeight);\n  });\n\n  scene.load.on('progress', (value: number) => {\n    progressBar.clear();\n    progressBar.fillStyle(0xffffff, 1);\n    progressBar.fillRect(innerBarX, innerBarY, innerWidth * value, innerHeight);\n  });\n\n  scene.load.on('complete', function () {\n    progressBar.destroy();\n    progressBox.destroy();\n    loadingScreenBg.destroy();\n  });\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { calcTableFormatPos, HexColor } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport { Constants, screenSize } from './CommonConstants';\nimport { AssetKey, BitmapFontStyle, TextConfig } from './CommonTypes';\n\ntype RadioButtonChoiceConfig = {\n  circleDim: number;\n  checkedDim: number;\n  outlineThickness: number;\n};\n\ntype RadioButtonConfig = {\n  choices: string[];\n  defaultChoiceIdx?: number;\n  maxXSpace?: number;\n  radioChoiceConfig?: RadioButtonChoiceConfig;\n  choiceTextConfig?: TextConfig;\n  bitmapTextStyle?: BitmapFontStyle;\n};\n\n/**\n * A container that is contains radio buttons.\n * Radio buttons only allows user to choose only one of the\n * predefined set of mutually exclusive options.\n *\n * The radio buttons will be arranged horizontally,\n * with even spacing.\n *\n * The radio button's choice will only be displayed when\n * the given radio button is selected so as to not clutter the display.\n */\nclass CommonRadioButton extends Phaser.GameObjects.Container {\n  private buttonClickSoundKey: AssetKey;\n\n  private activeChoice: Phaser.GameObjects.Container | undefined;\n  private activeChoiceIdx: number;\n  private choices: string[];\n  private buttonPositions: Array<[number, number]>;\n\n  private radioChoiceConfig: RadioButtonChoiceConfig;\n  private choiceTextConfig: TextConfig;\n  private bitmapTextStyle: BitmapFontStyle;\n\n  /**\n   * @param scene scene for the container to attach to\n   * @param choices displayed choices, in string, for the radio buttons.\n   * @param defaultChoiceIdx index of default choice, optional\n   * @param maxXSpace maximum horizontal space to be used by the radio buttons, optional\n   * @param circleDim diameter of the radio button, optional\n   * @param checkedDim diameter of the 'checked' radio button; commonly smaller than circleDim, optional\n   * @param outlineThickness if not 0, apply stroke effect on the radio button, optional\n   * @param choiceTextConfig text config to be applied to the displayed choice.\n   *                         The X, Y are relative to each individual radio button.\n   *                         Using this, we can specify where the choice should appear\n   *                         e.g. on top of the radio button, on the side of radio button, optional\n   * @param bitmapTextStyle style to be applied to the choices, optional\n   * @param x x coordinate of the container, optional\n   * @param y y coordinate of the container, optional\n   * @param soundManager if defined, the radio button will play sounds when clicked, optional\n   * @param buttonClickSoundKey require soundManager to be defined; Sound key to be played when\n   *                            button is clicked, optioanl\n   */\n  constructor(\n    scene: Phaser.Scene,\n    {\n      choices,\n      defaultChoiceIdx = 0,\n      maxXSpace = screenSize.x,\n      radioChoiceConfig = {\n        circleDim: 20,\n        checkedDim: 10,\n        outlineThickness: 5\n      },\n      choiceTextConfig = { x: 0, y: 0, oriX: 0.5, oriY: 0.5 },\n      bitmapTextStyle = Constants.defaultFontStyle\n    }: RadioButtonConfig,\n    x?: number,\n    y?: number,\n    buttonClickSoundKey: AssetKey = SoundAssets.radioButtonClick.key\n  ) {\n    super(scene, x, y);\n    this.activeChoiceIdx = defaultChoiceIdx;\n    this.choices = choices;\n    this.choiceTextConfig = choiceTextConfig;\n    this.bitmapTextStyle = bitmapTextStyle;\n    this.radioChoiceConfig = radioChoiceConfig;\n    this.buttonClickSoundKey = buttonClickSoundKey;\n\n    const buttons = this.getRadioButtons(choices);\n    this.buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      maxXSpace: maxXSpace\n    });\n\n    this.renderRadioButtons(buttons, this.buttonPositions, this.radioChoiceConfig);\n    this.activate(defaultChoiceIdx);\n  }\n\n  private getRadioButtons(choices: string[]) {\n    return choices.map((choice, index) => {\n      return {\n        text: choice,\n        callback: () => this.activate(index)\n      };\n    });\n  }\n\n  private renderRadioButtons(\n    buttons: { text: string; callback: any }[],\n    buttonPos: Array<[number, number]>,\n    radioChoiceConfig: RadioButtonChoiceConfig\n  ) {\n    this.add(\n      buttons.map((button, index) =>\n        this.createRadioButton(\n          buttonPos[index][0],\n          buttonPos[index][1],\n          button.callback,\n          radioChoiceConfig\n        )\n      )\n    );\n  }\n\n  private createRadioButton(\n    xPos: number,\n    yPos: number,\n    callback: any,\n    radioChoiceConfig: RadioButtonChoiceConfig\n  ) {\n    return new Phaser.GameObjects.Ellipse(\n      this.scene,\n      xPos,\n      yPos,\n      radioChoiceConfig.circleDim,\n      radioChoiceConfig.circleDim,\n      HexColor.lightBlue\n    )\n      .setStrokeStyle(radioChoiceConfig.outlineThickness, HexColor.darkBlue)\n      .setInteractive({ useHandCursor: true })\n      .addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => {\n        SourceAcademyGame.getInstance().getSoundManager().playSound(this.buttonClickSoundKey);\n        callback();\n      });\n  }\n\n  private activate(id: number): void {\n    this.activeChoiceIdx = id;\n\n    // Render checked option\n    if (this.activeChoice) this.activeChoice.destroy();\n\n    this.activeChoice = new Phaser.GameObjects.Container(\n      this.scene,\n      this.buttonPositions[id][0],\n      this.buttonPositions[id][1]\n    );\n    const choiceText = createBitmapText(\n      this.scene,\n      this.choices[id],\n      this.choiceTextConfig,\n      this.bitmapTextStyle\n    );\n    const optionChecked = new Phaser.GameObjects.Ellipse(\n      this.scene,\n      0,\n      0,\n      this.radioChoiceConfig.checkedDim,\n      this.radioChoiceConfig.checkedDim,\n      HexColor.darkBlue\n    );\n    this.activeChoice.add([choiceText, optionChecked]);\n\n    this.add(this.activeChoice);\n  }\n\n  public getValueIdx(): number {\n    return this.activeChoiceIdx;\n  }\n\n  public getChoices(): string[] {\n    return this.choices;\n  }\n\n  public getChosenChoice(): string {\n    if (this.activeChoiceIdx < this.choices.length) {\n      return this.choices[this.activeChoiceIdx];\n    }\n    return Constants.nullInteractionId;\n  }\n}\n\nexport default CommonRadioButton;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const optionTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const optionHeaderTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 35,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const applySettingsTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst SettingsConstants = {\n  optHeaderTextConfig: { x: screenSize.x * 0.25, y: 0, oriX: 0.5, oriY: 0.75 },\n  opt: { x: 140, xSpace: screenSize.x * 0.4, ySpace: screenSize.y * 0.7 },\n  radioButtonsTextConfig: { x: 0, y: -50, oriX: 0.5, oriY: 0.25 },\n  volContainerOpts: ['0', '0.25', '0.5', '1.0', '1.5', '2.0']\n};\n\nexport default SettingsConstants;\n","import FontAssets from '../assets/FontAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\n\nexport const escapeOptButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const volumeRadioOptTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 20,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const optTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst EscapeConstants = {\n  button: { y: screenSize.y * 0.15 },\n  escapeOptTextConfig: { x: 0, y: 0, oriX: 0.37, oriY: 0.75 },\n  settings: { yOffset: -screenCenter.y * 0.1, ySpace: screenSize.y * 0.3 },\n  settingsTextConfig: { x: screenSize.x * 0.38, y: -screenCenter.y * 0.1, oriX: 0.0, oriY: 0.5 },\n  radioButtons: { xSpace: screenSize.x * 0.2 },\n  radioChoiceTextConfig: { x: 0, y: -45, oriX: 0.5, oriY: 0.25 },\n  volOpt: { x: screenSize.x * 0.05 }\n};\n\nexport default EscapeConstants;\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport CommonRadioButton from '../commons/CommonRadioButton';\nimport { IBaseScene, IGameUI } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\nimport SettingsConstants from '../scenes/settings/SettingsConstants';\nimport SourceAcademyGame, { GameType } from '../SourceAcademyGame';\nimport { createButton } from '../utils/ButtonUtils';\nimport { calcTableFormatPos, Direction } from '../utils/StyleUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport EscapeConstants, {\n  escapeOptButtonStyle,\n  optTextStyle,\n  volumeRadioOptTextStyle\n} from './GameEscapeConstants';\n\n/**\n * Manager in charge of rendering and destroying the escape manager in a scene\n */\nclass GameEscapeManager implements IGameUI {\n  private bgmVolumeRadioButtons: CommonRadioButton | undefined;\n  private sfxVolumeRadioButtons: CommonRadioButton | undefined;\n  private scene: IBaseScene;\n\n  /**\n   * Initialises the escape manager UI\n   *\n   * @param scene - the scene to add escape manager\n   */\n  public constructor(scene: IBaseScene) {\n    this.scene = scene;\n    this.scene.getPhaseManager().addPhaseToMap(GamePhaseType.EscapeMenu, this);\n  }\n\n  /**\n   * Create the container that encapsulate the 'Escape Menu' UI,\n   * i.e. the background, the buttons, and the options.\n   */\n  private createUIContainer() {\n    const escapeMenuContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    const escapeMenuBg = new Phaser.GameObjects.Image(\n      this.scene,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.escapeMenuBackground.key\n    )\n      .setDisplaySize(screenSize.x, screenSize.y)\n      .setInteractive({ pixelPerfect: true });\n    escapeMenuContainer.add(escapeMenuBg);\n\n    // Settings header\n    const settings = this.getSettings();\n    const settingsPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: settings.length,\n      maxYSpace: EscapeConstants.settings.ySpace\n    });\n    escapeMenuContainer.add(\n      settings.map((setting, index) =>\n        createBitmapText(\n          this.scene,\n          setting,\n          {\n            ...EscapeConstants.settingsTextConfig,\n            y: settingsPos[index][1] + EscapeConstants.settingsTextConfig.y\n          },\n          optTextStyle\n        )\n      )\n    );\n\n    // Get user settings, to use as default choice in the radio buttons\n    const { bgmVolume, sfxVolume } = this.getSettingsSaveManager().getSettings();\n    const sfxVolIdx = SettingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === sfxVolume\n    );\n    const bgmVolIdx = SettingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === bgmVolume\n    );\n\n    // SFX Radio buttons\n    this.sfxVolumeRadioButtons = this.createSettingsRadioOptions(sfxVolIdx, settingsPos[0][1]);\n    // BGM Radio buttons\n    this.bgmVolumeRadioButtons = this.createSettingsRadioOptions(bgmVolIdx, settingsPos[1][1]);\n    escapeMenuContainer.add([this.sfxVolumeRadioButtons, this.bgmVolumeRadioButtons]);\n\n    // Get all the buttons\n    const buttons = this.getOptButtons();\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length\n    });\n\n    escapeMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createEscapeOptButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1] + EscapeConstants.button.y,\n          button.callback\n        )\n      )\n    );\n\n    return escapeMenuContainer;\n  }\n\n  /**\n   * Returns all the option available in the escape menu.\n   *\n   * For SFX and BGM, these are pure headers as the options, interactivity, and functionality\n   * are handled separately (radio buttons)\n   */\n  private getSettings() {\n    return ['SFX', 'BGM'];\n  }\n\n  /**\n   * Create radio buttons matching the escape menu style.\n   *\n   * @param defaultChoiceIdx default option for the radio button\n   * @param yPos y position of the radio buttons\n   */\n  private createSettingsRadioOptions(defaultChoiceIdx: number, yPos: number) {\n    return new CommonRadioButton(\n      this.scene,\n      {\n        choices: SettingsConstants.volContainerOpts,\n        defaultChoiceIdx: defaultChoiceIdx,\n        maxXSpace: EscapeConstants.radioButtons.xSpace,\n        radioChoiceConfig: {\n          circleDim: 15,\n          checkedDim: 10,\n          outlineThickness: 3\n        },\n        choiceTextConfig: EscapeConstants.radioChoiceTextConfig,\n        bitmapTextStyle: volumeRadioOptTextStyle\n      },\n      EscapeConstants.volOpt.x,\n      -screenCenter.y + yPos + EscapeConstants.settings.yOffset\n    );\n  }\n\n  /**\n   * Get the escape options buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality.\n   */\n  private getOptButtons() {\n    return [\n      {\n        text: 'Main Menu',\n        callback: () => {\n          this.cleanUp();\n          if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) {\n            this.scene.scene.start('GameSimulatorMenu');\n          } else {\n            this.scene.scene.start('MainMenu');\n          }\n        }\n      },\n      {\n        text: 'Continue',\n        callback: async () => {\n          if (this.scene.getPhaseManager().isCurrentPhase(GamePhaseType.EscapeMenu)) {\n            await this.scene.getPhaseManager().popPhase();\n          }\n        }\n      },\n      {\n        text: 'Apply Settings',\n        callback: () => this.applySettings()\n      }\n    ];\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createEscapeOptButton(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this.scene, {\n      assetKey: ImageAssets.mediumButton.key,\n      message: text,\n      textConfig: EscapeConstants.escapeOptTextConfig,\n      bitMapTextStyle: escapeOptButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Process the current settings on escape menu, save, and apply the settings.\n   * Escape Menu is responsible in contacting various managers to apply the settings.\n   */\n  private async applySettings() {\n    const sfxVol = this.sfxVolumeRadioButtons\n      ? parseFloat(this.sfxVolumeRadioButtons.getChosenChoice())\n      : 1;\n    const bgmVol = this.bgmVolumeRadioButtons\n      ? parseFloat(this.bgmVolumeRadioButtons.getChosenChoice())\n      : 1;\n\n    // Save settings\n    const newSettings = { bgmVolume: bgmVol, sfxVolume: sfxVol };\n    await this.getSettingsSaveManager().saveSettings(newSettings);\n\n    // Apply settings\n    SourceAcademyGame.getInstance().getSoundManager().applyUserSettings(newSettings);\n  }\n\n  /**\n   * Cleaning up of related managers.\n   */\n  private cleanUp() {\n    this.scene.getInputManager().clearListeners();\n    this.scene.getLayerManager().clearAllLayers();\n  }\n\n  /**\n   * Activate the 'Escape Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Escape' phase is\n   * pushed.\n   */\n  public activateUI() {\n    const escapeMenuContainer = this.createUIContainer();\n    this.getSoundManager().playSound(SoundAssets.menuEnter.key);\n    this.scene.getLayerManager().addToLayer(Layer.Escape, escapeMenuContainer);\n  }\n\n  /**\n   * Deactivate the 'Escape Menu' UI.\n   *\n   * Usually only called by the phase manager when 'Escape' phase is\n   * transitioned out.\n   */\n  public deactivateUI() {\n    this.getSoundManager().playSound(SoundAssets.menuExit.key);\n    this.scene.getLayerManager().clearSeveralLayers([Layer.Escape]);\n  }\n\n  private getSoundManager = () => SourceAcademyGame.getInstance().getSoundManager();\n  private getSettingsSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n}\n\nexport default GameEscapeManager;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { Constants } from '../commons/CommonConstants';\nimport { fadeIn, fadeOut } from '../effects/FadeEffect';\nimport { sleep } from '../utils/GameUtils';\nimport { defaultLayerSequence, Layer } from './GameLayerTypes';\n\n/**\n * Manager in charge of placing ordering the layers\n * as specified in Game Layer types\n */\nclass GameLayerManager {\n  private layers: Map<Layer, Phaser.GameObjects.Container>;\n\n  constructor(scene: Phaser.Scene) {\n    this.layers = new Map(\n      defaultLayerSequence.map(layer => [layer, new Phaser.GameObjects.Container(scene, 0, 0)])\n    );\n    this.layers.forEach(layer => scene.add.existing(layer));\n  }\n\n  /**\n   * Return a specific layer's container.\n   *\n   * @param layerType layer type to return\n   */\n  public getLayer(layerType: Layer) {\n    return this.layers.get(layerType);\n  }\n\n  /**\n   * Hide a specific layer.\n   *\n   * @param layerType layer type to hide\n   */\n  public hideLayer(layerType: Layer) {\n    const layerToHide = this.layers.get(layerType);\n    layerToHide && layerToHide.setVisible(false) && layerToHide.setAlpha(0);\n  }\n\n  /**\n   * Show a specific layer.\n   *\n   * @param layerType layer to show\n   */\n  public showLayer(layerType: Layer) {\n    const layerToShow = this.layers.get(layerType);\n    layerToShow && layerToShow.setVisible(true) && layerToShow.setAlpha(1);\n  }\n\n  /**\n   * Fade in a specific layer.\n   *\n   * @param layerType layer to fade in\n   * @param fadeDuration duration of fade\n   */\n  public async fadeInLayer(layerType: Layer, fadeDuration = Constants.fadeDuration) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const layerToFadeIn = this.layers.get(layerType)!;\n\n    layerToFadeIn.setVisible(true);\n    layerToFadeIn.setAlpha(0);\n    gameManager.tweens.add(fadeIn([layerToFadeIn], fadeDuration));\n    await sleep(fadeDuration);\n  }\n\n  /**\n   * Fade out a specific layer.\n   *\n   * @param layerType layer to fade out\n   * @param fadeDuration duration of fade\n   */\n  public async fadeOutLayer(layerType: Layer, fadeDuration = Constants.fadeDuration) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const layerToFadeOut = this.layers.get(layerType)!;\n\n    layerToFadeOut.setVisible(true);\n    layerToFadeOut.setAlpha(1);\n    gameManager.tweens.add(fadeOut([layerToFadeOut], fadeDuration));\n    await sleep(fadeDuration);\n  }\n\n  /**\n   * Add a game object to the specified layer.\n   *\n   * @param layerType layer to be added to\n   * @param gameObject game object to add\n   */\n  public addToLayer(layerType: Layer, gameObject: Phaser.GameObjects.GameObject) {\n    const layerContainer = this.layers.get(layerType);\n    if (!layerContainer) {\n      return;\n    }\n    layerContainer.add(gameObject);\n  }\n\n  /**\n   * Clear, by destroying, the content of several layers.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   *\n   * @param layerTypes layers to clear from\n   */\n  public clearSeveralLayers(layerTypes: Layer[]) {\n    layerTypes.forEach(layerType => this.clearLayerContents(layerType));\n  }\n\n  /**\n   * Clear, by destroying, the content of all layers.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   */\n  public clearAllLayers() {\n    this.layers.forEach((_, layerType) => this.clearLayerContents(layerType));\n  }\n\n  /**\n   * Clear, by destroying, the content of a layer.\n   *\n   * NOTE: This will cause any references to the content within the layers\n   * also point to a destroyed game object.\n   *\n   * @param layerType layer to clear from\n   */\n  public clearLayerContents(layerType: Layer) {\n    const layerContainer = this.layers.get(layerType);\n    if (!layerContainer) {\n      return;\n    }\n    while (layerContainer.list.length) {\n      layerContainer.list[0].destroy();\n    }\n  }\n}\n\nexport default GameLayerManager;\n","import FontAssets from '../assets/FontAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\n\nexport const logTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nconst scrollbarX = screenSize.x * 0.251;\nconst scrollbarWidth = 7;\n\nconst LogConstants = {\n  logTextConfig: { x: screenSize.x * -0.44, y: screenSize.y * -0.378, oriX: 0.0, oriY: 0.0 },\n  textMaxWidth: screenSize.x * 0.68,\n  logHeight: screenSize.y * 0.7632,\n  scrollbarTrack: {\n    x: scrollbarX,\n    y: screenSize.y * 0.005,\n    width: scrollbarWidth,\n    height: screenSize.y * 0.73,\n    color: 0x555555\n  },\n  scrollbarThumb: { x: scrollbarX, width: scrollbarWidth, color: 0x888888 },\n  scrollSpeed: 0.5\n};\n\nexport default LogConstants;\n","import { IBaseScene } from '../commons/CommonTypes';\nimport DashboardConstants from '../dashboard/GameDashboardConstants';\nimport { DashboardPageManager } from '../dashboard/GameDashboardTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { limitNumber } from '../utils/GameUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport LogConstants, { logTextStyle } from './GameLogConstants';\n\n/**\n * Manager in charge of creating the game log\n */\nclass GameLogManager implements DashboardPageManager {\n  private scene: IBaseScene;\n\n  /**\n   * Initialises the game log UI\n   *\n   * @param scene - the scene to add game log\n   */\n  public constructor(scene: IBaseScene) {\n    this.scene = scene;\n  }\n\n  /**\n   * Creates the container that encapsulates the 'Game Log' UI,\n   * i.e. the scrollable text and the scrollbar\n   */\n  public createUIContainer() {\n    const logContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    const textLog = GameGlobalAPI.getInstance().getDialogueStorage();\n    if (textLog.length === 0) {\n      // No text to show\n      return logContainer;\n    }\n\n    // Scrollable Text\n    const bitmapText = createBitmapText(\n      this.scene,\n      textLog.join('\\n\\n'),\n      LogConstants.logTextConfig,\n      logTextStyle\n    ).setMaxWidth(LogConstants.textMaxWidth);\n\n    const textMinY =\n      LogConstants.logTextConfig.y - Math.max(bitmapText.height - LogConstants.logHeight, 0);\n    bitmapText.y = textMinY; // Show most recent text on screen first\n    logContainer.add(bitmapText);\n\n    // Scrollbar\n    const scrollbarTrack = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      LogConstants.scrollbarTrack.x,\n      LogConstants.scrollbarTrack.y,\n      LogConstants.scrollbarTrack.width,\n      LogConstants.scrollbarTrack.height,\n      LogConstants.scrollbarTrack.color\n    );\n\n    const scrollbarThumbHeight = Math.max(\n      (LogConstants.logHeight / bitmapText.height) * LogConstants.scrollbarTrack.height,\n      LogConstants.scrollbarThumb.width * 4 // Limit how small thumb can be\n    );\n    const scrollbarThumbMaxY =\n      LogConstants.scrollbarTrack.y +\n      LogConstants.scrollbarTrack.height / 2 -\n      scrollbarThumbHeight / 2;\n    // The total distance the thumb can move\n    const thumbRange = LogConstants.scrollbarTrack.height - scrollbarThumbHeight;\n    // The ratio between how far the thumb moves to how far the text scrolls\n    const thumbTextScrollRatio = thumbRange / (LogConstants.logTextConfig.y - textMinY);\n\n    const scrollbarThumb = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      LogConstants.scrollbarThumb.x,\n      scrollbarThumbMaxY,\n      LogConstants.scrollbarThumb.width,\n      scrollbarThumbHeight,\n      LogConstants.scrollbarThumb.color\n    );\n\n    logContainer.add(scrollbarTrack);\n    logContainer.add(scrollbarThumb);\n\n    if (bitmapText.height <= LogConstants.logHeight) {\n      // Hide scrollbar if all text fits on screen\n      scrollbarTrack.setVisible(false);\n      scrollbarThumb.setVisible(false);\n    }\n\n    // Add scroll listener\n    const { x, y, width, height } = DashboardConstants.pageArea;\n    const scrollZone = new Phaser.GameObjects.Zone(\n      this.scene,\n      x + width / 2,\n      y + height / 2,\n      width,\n      height\n    );\n    scrollZone.setInteractive();\n    scrollZone.on(\n      'wheel',\n      (pointer: Phaser.Input.Pointer, deltaX: number, deltaY: number, deltaZ: number) => {\n        bitmapText.y = limitNumber(\n          bitmapText.y - deltaY * LogConstants.scrollSpeed,\n          textMinY,\n          LogConstants.logTextConfig.y\n        );\n        scrollbarThumb.y = scrollbarThumbMaxY - (bitmapText.y - textMinY) * thumbTextScrollRatio;\n      }\n    );\n    logContainer.add(scrollZone);\n\n    return logContainer;\n  }\n}\n\nexport default GameLogManager;\n","import { GamePhaseType } from '../phase/GamePhaseTypes';\n\nexport enum GameMode {\n  Move = 'Move',\n  Explore = 'Explore',\n  Talk = 'Talk',\n  Menu = 'Menu'\n}\n\nexport const gameModeToPhase = {\n  Move: GamePhaseType.Move,\n  Explore: GamePhaseType.Explore,\n  Talk: GamePhaseType.Talk,\n  Menu: GamePhaseType.Menu\n};\n","import { AssetType } from '../assets/AssetsTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { resize } from '../utils/SpriteUtils';\nimport { blink } from './FadeEffect';\n\n/**\n * Augments the Phaser.GameObjects.Image to enable glow effect\n * for an image. Glow effect enables an image to blink with a tint of yellow\n *\n * This is for the make_object_glow action\n */\nexport default class GlowingImage {\n  private scene: Phaser.Scene;\n  private container: Phaser.GameObjects.Container;\n  private imageGlow: Phaser.GameObjects.Image;\n  private clickArea: Phaser.GameObjects.Image;\n  private glowClearer?: () => void;\n  private blinkClearer?: () => void;\n\n  /**\n   * Constructor for a GlowingImage\n   *\n   * @param scene - the scene in which to add this object to\n   * @param x - the x coordinate of the center of the object\n   * @param y - the y coordinate of the center of the object\n   * @param assetKey - the asset key of the image to render this object\n   * @param width - optional display width of the object\n   * @param height - optional displayheight of the object\n   */\n  constructor(\n    scene: Phaser.Scene,\n    x: number,\n    y: number,\n    assetKey: string,\n    width?: number,\n    height?: number\n  ) {\n    this.scene = scene;\n    this.container = new Phaser.GameObjects.Container(scene, x, y);\n\n    this.imageGlow = new Phaser.GameObjects.Image(scene, 0, 0, assetKey)\n      .setAlpha(0)\n      .setBlendMode(Phaser.BlendModes.ADD);\n    this.clickArea = new Phaser.GameObjects.Image(scene, 0, 0, assetKey)\n      .setAlpha(0.01)\n      .setInteractive({ pixelPerfect: true });\n\n    const image = GameGlobalAPI.getInstance().getGameMap().getMapAssets().get(assetKey);\n    const animationManager = GameGlobalAPI.getInstance().getGameManager().getAnimationManager();\n    if (image) {\n      const imageAsset = animationManager.createImage(image, assetKey);\n      switch (image?.type) {\n        case AssetType.Sprite:\n          this.clickArea.setAlpha(0);\n          animationManager.startAnimation(image);\n          break;\n        case AssetType.Image:\n          if (width) {\n            resize(imageAsset, width, height);\n            resize(this.imageGlow, width, height);\n            resize(this.clickArea, width, height);\n          }\n          break;\n        default:\n          break;\n      }\n      this.container.add([imageAsset, this.imageGlow, this.clickArea]);\n    }\n  }\n\n  public startGlow() {\n    this.glowClearer && this.glowClearer();\n    this.glowClearer = blink(this.scene, this.imageGlow);\n    this.imageGlow.setAlpha(1);\n  }\n\n  public clearGlow() {\n    this.glowClearer && this.glowClearer();\n    this.imageGlow.setAlpha(0);\n  }\n\n  public startBlink() {\n    this.blinkClearer = blink(this.scene, this.getContainer());\n  }\n\n  public clearBlink() {\n    this.getContainer().setAlpha(1);\n    this.blinkClearer && this.blinkClearer();\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public getClickArea() {\n    return this.clickArea;\n  }\n}\n","import { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport { ItemId } from '../commons/CommonTypes';\nimport GlowingImage from '../effects/GlowingObject';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport { StateObserver } from '../state/GameStateTypes';\nimport { ActivatableSprite, ObjectProperty } from './GameObjectTypes';\n\n/**\n * Manager that renders objects in a location\n * and also attaches actions as onClick callbacks to objects\n *\n * It provides the activate/and deactivate interfaces\n * for Explore mode to call, as well as\n * provides API for make_object_glow and make_object_blink actions\n *\n * It is a subject/listener of GameStateManager.\n */\nclass GameObjectManager implements StateObserver {\n  private objects: Map<ItemId, ActivatableSprite>;\n\n  constructor() {\n    this.objects = new Map<ItemId, ActivatableSprite>();\n    GameGlobalAPI.getInstance().watchGameItemType(GameItemType.objects, this);\n  }\n\n  /**\n   * Clear the layers, and render all the objects available to the location.\n   * Will immediately be shown on the screen.\n   *\n   * @param locationId location in which to render objects at\n   */\n  public renderObjectsLayerContainer(locationId: LocationId): void {\n    GameGlobalAPI.getInstance().clearSeveralLayers([Layer.Objects]);\n    const objIdsToRender = GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.objects,\n      locationId\n    );\n\n    // Refresh mapping\n    this.objects.clear();\n\n    // Add all the objects\n    objIdsToRender.map(id => this.handleAdd(id));\n  }\n\n  /**\n   * Apply glowing effect around the object.\n   *\n   * @param objectId id of the object\n   */\n  public makeObjectGlow(objectId: ItemId, turnOn: boolean) {\n    const object = this.objects.get(objectId);\n    if (!object) {\n      return;\n    }\n    if (turnOn) {\n      (object.sprite as GlowingImage).startGlow();\n    } else {\n      (object.sprite as GlowingImage).clearGlow();\n    }\n  }\n\n  /**\n   * Apply blinking effect on the object.\n   *\n   * @param objectId id of the object\n   */\n  public makeObjectBlink(objectId: ItemId, turnOn: boolean) {\n    const object = this.objects.get(objectId);\n    if (!object) {\n      return;\n    }\n    if (turnOn) {\n      (object.sprite as GlowingImage).startBlink();\n    } else {\n      (object.sprite as GlowingImage).clearBlink();\n    }\n  }\n\n  /**\n   * Create the object from the given object property.\n   * Because we want this sprite to be activatable\n   * by Explore Mode UI, we expose its actionIds\n   * and interactionId\n   *\n   * @param objectProperty object property to be used\n   */\n  private createObject(objectProperty: ObjectProperty): ActivatableSprite {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const { assetKey, x, y, width, height, actionIds, interactionId } = objectProperty;\n    const object = new GlowingImage(gameManager, x, y, assetKey, width, height);\n\n    return {\n      sprite: object,\n      clickArea: object.getClickArea(),\n      actionIds,\n      interactionId\n    };\n  }\n\n  /**\n   * Add the object, specified by the ID, into the scene\n   * and keep track of it within the mapping.\n   *\n   * @param id id of object\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleAdd(id: ItemId): boolean {\n    const objectProp = GameGlobalAPI.getInstance().getObjectById(id);\n    const object = this.createObject(objectProp);\n    GameGlobalAPI.getInstance().addToLayer(\n      Layer.Objects,\n      (object.sprite as GlowingImage).getContainer()\n    );\n    this.objects.set(id, object);\n    return true;\n  }\n\n  /**\n   * Mutate the object of the given id.\n   *\n   * Internally, will delete and re-add the object with\n   * the updated property.\n   *\n   * @param id id of object\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleMutate(id: ItemId): boolean {\n    return this.handleDelete(id) && this.handleAdd(id);\n  }\n\n  /**\n   * Delete the object of the given id, if\n   * applicable.\n   *\n   * @param id id of the object\n   * @return {boolean} true if successful, false otherwise\n   */\n  public handleDelete(id: ItemId): boolean {\n    const object = this.objects.get(id);\n    if (object) {\n      this.objects.delete(id);\n      (object.sprite as GlowingImage).getContainer().destroy();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get all the rectanlge sprites which can be activated\n   * by external Explore Mode UI\n   */\n  public getActivatables() {\n    return Array.from(this.objects.values());\n  }\n}\n\nexport default GameObjectManager;\n","import { Constants } from '../commons/CommonConstants';\nimport { IGameUI } from '../commons/CommonTypes';\nimport GameInputManager from '../input/GameInputManager';\nimport { GamePhaseType, GameTerminalPhaseType } from './GamePhaseTypes';\n\n/**\n * State machine in charge of keeping track\n * of phases in the game, and is in charge of making phase\n * transitions from one phase to another.\n *\n * It keeps phases in a stack to keep track of states\n * that have been previously visited.\n *\n * For more, search for FSM (finite state machine).\n */\nexport default class GamePhaseManager {\n  public phaseMap: Map<GamePhaseType, IGameUI>;\n  private phaseStack: GamePhaseType[];\n  private inputManager: GameInputManager;\n  private interruptCheckCallback: (prevPhase: GamePhaseType, newPhase: GamePhaseType) => boolean;\n  private interruptTransitionCallback: (\n    prevPhase: GamePhaseType,\n    newPhase: GamePhaseType\n  ) => Promise<void>;\n  private transitionCallback: (prevPhase: GamePhaseType, newPhase: GamePhaseType) => void;\n\n  constructor(phaseMap: Map<GamePhaseType, IGameUI>, inputManager: GameInputManager) {\n    this.phaseStack = [GamePhaseType.None];\n    this.phaseMap = phaseMap;\n    this.interruptCheckCallback = () => false;\n    this.interruptTransitionCallback = async () => Constants.nullFunction();\n    this.transitionCallback = Constants.nullFunction;\n    this.inputManager = inputManager;\n  }\n\n  /**\n   * Add an additional phase into the phase map.\n   *\n   * @param gamePhaseType type of phase\n   * @param gameUI gameUI to be activated at the phase\n   */\n  public addPhaseToMap(gamePhaseType: GamePhaseType, gameUI: IGameUI) {\n    this.phaseMap.set(gamePhaseType, gameUI);\n  }\n\n  /**\n   * Set the interrupt check of the phase manager. Interrupt check is called\n   * to determine whether interrupt callback is called. The function\n   * signature must return a boolean.\n   *\n   * If the boolean returned is true, interrupt callback will be executed.\n   *\n   * @param fn callback\n   */\n  public setInterruptCheckCallback(\n    fn: (prevPhase: GamePhaseType, newPhase: GamePhaseType) => boolean\n  ) {\n    this.interruptCheckCallback = fn;\n  }\n\n  /**\n   * Set the interrupt callback of the phase manager.\n   * The callback will be executed before every phase transition.\n   *\n   * Will use the interruptCheck function to determine whether this function\n   * is executed. If executed, phase manager will not transition to the\n   * new phase i.e. interrupt the phase transition.\n   *\n   * @param fn callback\n   */\n  public setInterruptCallback(\n    fn: (prevPhase: GamePhaseType, newPhase: GamePhaseType) => Promise<void>\n  ) {\n    this.interruptTransitionCallback = fn;\n  }\n\n  /**\n   * Set the interrupt callback of the phase manager. The callback will be executed\n   * before every phase transition.\n   *\n   * @param fn callback\n   */\n  public setCallback(fn: (prevPhase: GamePhaseType, newPhase: GamePhaseType) => void) {\n    this.transitionCallback = fn;\n  }\n\n  /**\n   * Pop the current phase, and revert to the previous phase.\n   * The current phase will no longer be saved on the phase stack.\n   */\n  public async popPhase(): Promise<void> {\n    const prevPhase = this.phaseStack.pop()!;\n    await this.executePhaseTransition(prevPhase, this.getCurrentPhase());\n  }\n\n  /**\n   * Push a new phase; will cause previous phase to transition out\n   * and transition in the new phase. Previous phase will be stored within\n   * the phase stack.\n   *\n   * @param newPhase phase to transition to\n   */\n  public async pushPhase(newPhase: GamePhaseType): Promise<void> {\n    const prevPhase = this.getCurrentPhase();\n    if (newPhase === prevPhase) return;\n    this.phaseStack.push(newPhase);\n    await this.executePhaseTransition(prevPhase, newPhase);\n  }\n\n  /**\n   * Swap the previous phase to another phase. Previous phase will no\n   * longer be saved on the phase stack.\n   *\n   * @param newPhase phase to swap to\n   */\n  public async swapPhase(newPhase: GamePhaseType): Promise<void> {\n    const prevPhase = this.getCurrentPhase();\n    if (newPhase === prevPhase) return;\n    this.phaseStack.pop();\n    this.phaseStack.push(newPhase);\n    await this.executePhaseTransition(prevPhase, newPhase);\n  }\n\n  /**\n   * Handles the transition from one phase to another,\n   * by deactivating the previous phase followed by activating the new phase.\n   *\n   * During transition, all inputs are disabled (mouse and keyboard) to prevent\n   * user input which may mutate the phase stack during the transition.\n   *\n   * Mutating the stack during the transition leads to phaseStack not matching\n   * with what is shown on user screen; which leads to undefined behaviour.\n   *\n   * @param prevPhase previous phase to deactivate\n   * @param newPhase new phase to activate\n   */\n  private async executePhaseTransition(prevPhase: GamePhaseType, newPhase: GamePhaseType) {\n    // Disable inputs to avoid user input mutating the stack\n    this.inputManager.enableKeyboardInput(false);\n    this.inputManager.enableMouseInput(false);\n    await this.phaseMap.get(prevPhase)!.deactivateUI();\n\n    if (this.interruptCheckCallback(prevPhase, newPhase)) {\n      // Enable input in case interrupt transition callback needs it\n      this.inputManager.enableMouseInput(true);\n      this.inputManager.enableKeyboardInput(true);\n      await this.interruptTransitionCallback(prevPhase, newPhase);\n      return;\n    }\n\n    this.transitionCallback(prevPhase, newPhase);\n\n    // Transition to new phase\n    await this.phaseMap.get(newPhase)!.activateUI();\n    this.inputManager.enableMouseInput(true);\n    this.inputManager.enableKeyboardInput(true);\n  }\n\n  /**\n   * Checks whether the current phase is equal to the inquired phase\n   *\n   * @param phase phase to compare to\n   * @returns {boolean}\n   */\n  public isCurrentPhase(phase: GamePhaseType): boolean {\n    return this.getCurrentPhase() === phase;\n  }\n\n  /**\n   * Checks whether the current phase is a terminal phase.\n   *\n   * @returns {boolean}\n   */\n  public isCurrentPhaseTerminal(): boolean {\n    return Object.values(GameTerminalPhaseType).includes(this.getCurrentPhase());\n  }\n\n  /**\n   * Returns the current phase.\n   * If there is no phase, by default we return GamePhaseType.None.\n   *\n   * @return {GamePhaseType}\n   */\n  public getCurrentPhase(): GamePhaseType {\n    if (!this.phaseStack.length) {\n      this.phaseStack = [GamePhaseType.None];\n    }\n    return this.phaseStack[this.phaseStack.length - 1];\n  }\n}\n","/**\n * Generates a tween configuration for making objects open like a scroll,\n * ie stretch open downwards from zero-height to full height.\n *\n * @param targets - an array of game objects that you want to enter via scroll effect\n * @param duration - the duration of the scroll animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the scroll in animation\n */\nexport const scrollEntry = (targets: Phaser.GameObjects.GameObject[], duration = 500) => ({\n  scaleY: 1,\n  targets,\n  duration,\n  ease: 'Power1'\n});\n\n/**\n * Generates a tween configuration for making objects close like a scroll,\n * ie compress upwards from full height to zero height\n *\n * @param targets - an array of game objects that you want to exit via scroll effect\n * @param duration - the duration of the fascrollde animation\n * @returns {Phaser.Types.Tweens.TweenDataConfig} - the tween config for the scroll in animation\n */\nexport const scrollExit = (targets: Phaser.GameObjects.GameObject[], duration = 500) => ({\n  scaleY: 0,\n  targets,\n  duration,\n  ease: 'Power1'\n});\n","import { screenCenter, screenSize } from '../commons/CommonConstants';\n\nconst popUpXOffset = 400;\n\nconst PopUpConstants = {\n  image: { xOffset: 20, yOffset: 20 },\n  rect: {\n    x: { Left: popUpXOffset, Middle: screenCenter.x, Right: screenSize.x - popUpXOffset },\n    y: { Small: 325, Medium: 350, Large: 420 },\n    scale: { Small: 0.7, Medium: 1, Large: 1.5 },\n    width: 280,\n    height: 280\n  },\n  tweenDuration: 300\n};\n\nexport default PopUpConstants;\n","import ImageAssets from '../assets/ImageAssets';\nimport SoundAssets from '../assets/SoundAssets';\nimport { Constants } from '../commons/CommonConstants';\nimport { GamePosition, GameSize, ItemId } from '../commons/CommonTypes';\nimport { scrollEntry, scrollExit } from '../effects/ScrollEffect';\nimport { Layer } from '../layer/GameLayerTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { sleep } from '../utils/GameUtils';\nimport { resizeUnderflow } from '../utils/SpriteUtils';\nimport PopUpConstants from './GamePopUpConstants';\n\n/**\n * Manager in charge of keeping track of the the popups in\n * a game\n */\nclass GamePopUpManager {\n  private currPopUp: Map<GamePosition, Phaser.GameObjects.Container>;\n\n  constructor() {\n    this.currPopUp = new Map<GamePosition, Phaser.GameObjects.Container>();\n  }\n\n  /**\n   * Display a popup image on the screen.\n   * The image is based the given ID, while its position\n   * is based on the given position.\n   *\n   * @param itemId item ID to be shown on the pop up\n   * @param position position of the pop up\n   * @param duration duration in which the pop up to be shown. Afterwards, the popup will\n   *                 be destroyed.\n   * @param size size of the popup, defaulted to medium.\n   */\n  public async displayPopUp(\n    itemId: ItemId,\n    position: GamePosition,\n    duration = Constants.popUpDuration,\n    size: GameSize = GameSize.Medium\n  ) {\n    // Destroy previous pop up if any\n    this.destroyPopUp(position);\n\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const container = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Frame\n    const popUpFrameImg = new Phaser.GameObjects.Image(\n      gameManager,\n      PopUpConstants.rect.x[position],\n      PopUpConstants.rect.y[size],\n      ImageAssets.popUpFrame.key\n    ).setScale(PopUpConstants.rect.scale[size]);\n\n    // Get assetKey\n    const assetKey = this.getAssetKey(itemId);\n    if (!assetKey) return;\n\n    // Set up images\n    const popUpImage = new Phaser.GameObjects.Image(\n      gameManager,\n      PopUpConstants.rect.x[position] + PopUpConstants.image.xOffset,\n      PopUpConstants.rect.y[size] + PopUpConstants.image.yOffset,\n      assetKey\n    );\n    const newWidth = PopUpConstants.rect.width * PopUpConstants.rect.scale[size];\n    const newHeight = PopUpConstants.rect.height * PopUpConstants.rect.scale[size];\n    resizeUnderflow(popUpImage, newWidth, newHeight);\n\n    container.add([popUpFrameImg, popUpImage]);\n    this.currPopUp.set(position, container);\n    GameGlobalAPI.getInstance().addToLayer(Layer.PopUp, container);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.popUpEnter.key);\n\n    container.setActive(true);\n    container.setVisible(true);\n    container.setScale(1.0, 0);\n\n    gameManager.tweens.add(scrollEntry([container], PopUpConstants.tweenDuration));\n    await sleep(PopUpConstants.tweenDuration);\n\n    setTimeout(() => this.destroyPopUp(position), duration);\n  }\n\n  /**\n   * Destroy all active pop ups at all positions.\n   */\n  public destroyAllPopUps() {\n    this.currPopUp.forEach((popUp, position, map) => {\n      this.destroyPopUp(position);\n    });\n  }\n\n  /**\n   * Destroy a pop up at the given position, if any.\n   *\n   * @param position position of thhe pop up to be destroyed\n   */\n  public async destroyPopUp(position: GamePosition) {\n    const atPosContainer = this.currPopUp.get(position);\n    if (!atPosContainer) return;\n\n    GameGlobalAPI.getInstance()\n      .getGameManager()\n      .tweens.add(scrollExit([atPosContainer], PopUpConstants.tweenDuration));\n    await sleep(PopUpConstants.tweenDuration);\n\n    atPosContainer.setVisible(false);\n    atPosContainer.setActive(false);\n    atPosContainer.destroy();\n\n    this.currPopUp.delete(position);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.popUpExit.key);\n  }\n\n  /**\n   * Get the asset key of the item ID.\n   *\n   * @param itemId item ID\n   */\n  private getAssetKey(itemId: ItemId) {\n    const objectPropMap = GameGlobalAPI.getInstance().getGameMap().getObjectPropMap();\n    const objProp = objectPropMap.get(itemId);\n    if (objProp) {\n      return objProp.assetKey;\n    }\n    return undefined;\n  }\n}\n\nexport default GamePopUpManager;\n","import { GamePhaseType } from '../phase/GamePhaseTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { FullSaveState, GameSaveState } from './GameSaveTypes';\n\n/**\n * Function that saves game data as a 'snapshot' in FullSaveState\n * json format by collecting game data from game manager,\n * game state manager, user state manager, and phase manager\n *\n * @param prevGameState - the snapshot of the game the during the last save point\n * @param chapterNum - the chapterNumber of the game\n * @param checkpointNUm - the checkpoint of the game\n * @returns {FullSaveState} - the new 'snapshot' of the game\n */\nexport function gameStateToJson(\n  prevGameState: FullSaveState,\n  chapterNum: number,\n  checkpointNum: number\n): FullSaveState {\n  const gameManager = GameGlobalAPI.getInstance().getGameManager();\n  const gameStateManager = gameManager.getStateManager();\n  const phaseManager = gameManager.getPhaseManager();\n\n  return {\n    gameSaveStates: {\n      ...prevGameState.gameSaveStates,\n      [chapterNum]: {\n        lastCheckpointPlayed: checkpointNum,\n        currentLocation: gameManager.currentLocationId,\n        currentPhase: phaseManager.getCurrentPhase(),\n        chapterNewlyCompleted: gameStateManager.getChapterNewlyCompleted(),\n        incompleteTasks: gameStateManager.getIncompleteTasks(),\n        completedTasks: gameStateManager.getCompletedTasks(),\n        completedObjectives: gameStateManager.getCompletedObjectives(),\n        triggeredInteractions: gameStateManager.getTriggeredInteractions(),\n        triggeredStateChangeActions: gameStateManager.getTriggeredStateChangeActions()\n      }\n    },\n    userSaveState: {\n      settings: prevGameState.userSaveState.settings,\n      recentlyPlayedCheckpoint: [chapterNum, checkpointNum],\n      collectibles: SourceAcademyGame.getInstance().getUserStateManager().getCollectibles(),\n      largestCompletedChapter: prevGameState.userSaveState.largestCompletedChapter\n    }\n  };\n}\n\n/**\n * Function to create an empty full save state\n * Used for resetting game data of students\n *\n * @returns {FullSaveState} - an empty save state for starting players\n */\nexport const createEmptySaveState = (): FullSaveState => {\n  return {\n    gameSaveStates: {},\n    userSaveState: {\n      collectibles: [],\n      settings: { bgmVolume: 1, sfxVolume: 1 },\n      recentlyPlayedCheckpoint: [-1, -1],\n      largestCompletedChapter: -1\n    }\n  };\n};\n\n/**\n * Function to create an empty game save state\n * Used for resetting game data of students\n *\n * @returns {GameSaveState} - an empty save state for starting the game\n */\nexport const createEmptyGameSaveState = (): GameSaveState => {\n  return {\n    lastCheckpointPlayed: 0,\n    currentLocation: undefined,\n    currentPhase: GamePhaseType.Menu,\n    chapterNewlyCompleted: false,\n    incompleteTasks: [],\n    completedTasks: [],\n    completedObjectives: [],\n    triggeredInteractions: [],\n    triggeredStateChangeActions: []\n  };\n};\n\n/**\n * Converts a map, where some items have been triggered\n * into an array containing all the items that have been triggered.\n *\n * @param completionMap map containing string elements to boolean indicating\n *                      which elements have been completed/triggerd\n */\nexport function convertMapToArray(completionMap: Map<string, boolean>) {\n  return Array.from(completionMap)\n    .filter(([_objective, boolean]: [string, boolean]) => boolean)\n    .map(([objective]: [string, boolean]) => objective);\n}\n","import { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { GameCheckpoint } from '../chapter/GameChapterTypes';\nimport { GamePosition, ItemId } from '../commons/CommonTypes';\nimport GameMap from '../location/GameMap';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport GameObjective from '../objective/GameObjective';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport { convertMapToArray } from '../save/GameSaveHelper';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport GameTask from '../task/GameTask';\nimport { TaskDetail } from '../task/GameTaskTypes';\nimport { mandatory } from '../utils/GameUtils';\nimport { StateObserver } from './GameStateTypes';\n\n/**\n * Manages all states related to story, chapter, or checkpoint;\n * e.g. checkpoint objectives, objects' property, bboxes' property.\n *\n * Other than this manager, all other manager should not need to\n * manage their own state.\n *\n * Employs observer pattern, and notifies its subjects on state update.\n */\n\nclass GameStateManager {\n  // Subscribers\n  private subscribers: Map<GameItemType, StateObserver>;\n\n  // Game State\n  private gameMap: GameMap;\n  private checkpointObjective: GameObjective;\n  private checkpointTask: GameTask;\n  private chapterNewlyCompleted: boolean;\n\n  // Triggered Interactions\n  private updatedLocations: Set<LocationId>;\n  private triggeredInteractions: Map<ItemId, boolean>;\n  private triggeredStateChangeActions: ItemId[];\n\n  constructor(gameCheckpoint: GameCheckpoint) {\n    this.subscribers = new Map<GameItemType, StateObserver>();\n\n    this.gameMap = gameCheckpoint.map;\n    this.checkpointObjective = gameCheckpoint.objectives;\n    this.checkpointTask = gameCheckpoint.tasks;\n    this.chapterNewlyCompleted = false;\n\n    this.updatedLocations = new Set(this.gameMap.getLocationIds());\n    this.triggeredInteractions = new Map<ItemId, boolean>();\n    this.triggeredStateChangeActions = [];\n\n    this.loadStatesFromSaveManager();\n  }\n\n  /**\n   * Loads some game states from the save manager\n   */\n  private loadStatesFromSaveManager() {\n    this.triggeredStateChangeActions = this.getSaveManager().getTriggeredStateChangeActions();\n\n    this.getSaveManager()\n      .getTriggeredInteractions()\n      .forEach(interactionId => this.triggerInteraction(interactionId));\n\n    this.getSaveManager()\n      .getCompletedObjectives()\n      .forEach(objective => this.checkpointObjective.setObjective(objective, true));\n\n    this.getSaveManager()\n      .getCompletedTasks()\n      .forEach(task => {\n        this.checkpointTask.setTask(task, true);\n        this.checkpointTask.showTask(task);\n      });\n\n    this.getSaveManager()\n      .getIncompleteTasks()\n      .forEach(task => {\n        this.checkpointTask.setTask(task, false);\n        this.checkpointTask.showTask(task);\n      });\n\n    this.chapterNewlyCompleted = this.getSaveManager().getChapterNewlyCompleted();\n  }\n\n  ///////////////////////////////\n  //        Subscribers        //\n  ///////////////////////////////\n\n  /**\n   * This function is called to set state observers\n   *\n   * @param gameItemType Type of game item the observer wants to watch\n   * @param stateObserver reference to state observer\n   */\n  public watchGameItemType(gameItemType: GameItemType, stateObserver: StateObserver) {\n    this.subscribers.set(gameItemType, stateObserver);\n  }\n\n  /**\n   * Obtains the subscriber that watches the game item\n   *\n   * @param gameItemType the type of item being watched\n   */\n  private getSubscriberForItemType(gameItemType: GameItemType) {\n    return this.subscribers.get(gameItemType);\n  }\n\n  ///////////////////////////////\n  //        Interaction        //\n  ///////////////////////////////\n\n  /**\n   * Record that an interaction has been triggered.\n   *\n   * @param id id of interaction\n   */\n  public triggerInteraction(id: string): void {\n    this.triggeredInteractions.set(id, true);\n  }\n\n  /**\n   * Record a state-change action that has been triggered.\n   * State-change actions refer to actions that modify the map's\n   * original state\n   *\n   * @param actionId actionId of interaction\n   */\n  public triggerStateChangeAction(actionId: ItemId): void {\n    this.triggeredStateChangeActions.push(actionId);\n  }\n\n  /**\n   * Checks whether an interaction ID has been triggered or not.\n   *\n   * @param id id of interaction\n   * @returns {boolean}\n   */\n  public hasTriggeredInteraction(id: string): boolean | undefined {\n    return this.triggeredInteractions.get(id);\n  }\n\n  ///////////////////////////////\n  //          Notifs          //\n  ///////////////////////////////\n\n  /**\n   * Adds a location notification for a locationId\n   *\n   * @param locationId locationId of location you want to add notif to\n   */\n  public addLocationNotif(locationId: LocationId) {\n    this.updatedLocations.add(locationId);\n  }\n\n  /**\n   * Removes a location notification for a locationId\n   *\n   * @param locationId locationId of location you want to remove notif of\n   */\n  public removeLocationNotif(locationId: LocationId) {\n    this.updatedLocations.delete(locationId);\n  }\n\n  /**\n   * Gets whether or not the location has a notif\n   *\n   * @param locationId locationId of location you want to find out if got notif\n   */\n  public hasLocationNotif(locationId: LocationId) {\n    return this.updatedLocations.has(locationId);\n  }\n\n  /**\n   * Function to check if current location is the given locationId\n   *\n   * @param locationId locationId that you want to check whether is current one\n   */\n  public isCurrentLocation(locationId: LocationId) {\n    return locationId === GameGlobalAPI.getInstance().getCurrLocId();\n  }\n\n  ///////////////////////////////\n  //       Location Mode       //\n  ///////////////////////////////\n\n  /**\n   * Get modes available to a location based on the location ID.\n   *\n   * @param locationId location ID\n   * @returns {GameMode[]} game modes\n   */\n  public getLocationModes(locationId: LocationId): GameMode[] {\n    return Array.from(this.gameMap.getLocationAtId(locationId).modes) || [];\n  }\n\n  /**\n   * Add a mode to a location. If this is not the current location,\n   * then add a notification.\n   *\n   * @param locationId location ID\n   * @param mode game mode to add\n   */\n  public addLocationMode(locationId: LocationId, mode: GameMode) {\n    this.gameMap.getLocationAtId(locationId).modes.add(mode);\n    !this.isCurrentLocation(locationId) && this.addLocationNotif(locationId);\n  }\n\n  /**\n   * Remove a mode from a location. If this is not the current location,\n   * then add a notification.\n   *\n   * @param locationId location ID\n   * @param mode game mode to remove\n   */\n  public removeLocationMode(locationId: LocationId, mode: GameMode) {\n    this.gameMap.getLocationAtId(locationId).modes.delete(mode);\n    !this.isCurrentLocation(locationId) && this.addLocationNotif(locationId);\n  }\n\n  ///////////////////////////////\n  //        State Check        //\n  ///////////////////////////////\n\n  /**\n   * Get all IDs of a type of game item in a location.\n   *\n   * @param gameItemType type of game item\n   * @param locationId id of location\n   * @returns {ItemId[]} items IDS of all game items of that type in the location\n   */\n  public getGameItemsInLocation(gameItemType: GameItemType, locationId: LocationId): ItemId[] {\n    return Array.from(this.gameMap.getLocationAtId(locationId)[gameItemType]) || [];\n  }\n\n  /**\n   * Add an item ID of a game item type in gamemap's location.\n   *\n   * Either render the change instantly, or place a notification inside another location\n   *\n   * @param gameItemType type of game item\n   * @param locationId id of location to add items to\n   * @param itemId item ID to be added\n   */\n  public addItem(gameItemType: GameItemType, locationId: LocationId, itemId: ItemId) {\n    this.gameMap.getLocationAtId(locationId)[gameItemType]?.add(itemId);\n\n    this.isCurrentLocation(locationId)\n      ? this.getSubscriberForItemType(gameItemType)?.handleAdd(itemId)\n      : this.addLocationNotif(locationId);\n  }\n\n  /**\n   * Remove an item ID from game items in gamemap's location.\n   * If ID is not found within the game item list, nothing will be executed.\n   *\n   * Either render the change instantly, or place a notification inside another location\n   *\n   * @param gameItemType type of game item to remove\n   * @param locationId id of location to remove items from\n   * @param itemId item ID to be removed\n   */\n  public removeItem(gameItemType: GameItemType, locationId: LocationId, itemId: string) {\n    this.gameMap.getLocationAtId(locationId)[gameItemType]?.delete(itemId);\n\n    this.isCurrentLocation(locationId)\n      ? this.getSubscriberForItemType(gameItemType)?.handleDelete(itemId)\n      : this.addLocationNotif(locationId);\n  }\n\n  /**\n   * Replace an object property of the given ID with the new object\n   * property. Commonly used to update a specific object property.\n   *\n   * @param id id of object to change\n   * @param newObjProp new object property to replace the old one\n   */\n  public setObjProperty(id: ItemId, newObjProp: ObjectProperty) {\n    this.gameMap.setItemInMap(GameItemType.objects, id, newObjProp);\n\n    // Update every location that has the object\n    this.gameMap.getLocations().forEach((location, locId) => {\n      if (!location.objects.has(id)) return;\n\n      this.isCurrentLocation(locId)\n        ? this.getSubscriberForItemType(GameItemType.objects)?.handleMutate(id)\n        : this.addLocationNotif(locId);\n    });\n  }\n\n  /**\n   * Replace a bbox property of the given ID with the new bbox\n   * property. Commonly used to update a specific bbox property.\n   *\n   * @param id id of object to change\n   * @param newBBoxProp new object property to replace the old one\n   */\n  public setBBoxProperty(id: ItemId, newBBoxProp: BBoxProperty) {\n    this.gameMap.setItemInMap(GameItemType.boundingBoxes, id, newBBoxProp);\n\n    // Update every location that has the bbox\n    this.gameMap.getLocations().forEach((location, locId) => {\n      if (!location.boundingBoxes.has(id)) return;\n\n      this.isCurrentLocation(locId)\n        ? this.getSubscriberForItemType(GameItemType.boundingBoxes)?.handleMutate(id)\n        : this.addLocationNotif(locId);\n    });\n  }\n\n  /**\n   * Moves a character to another location and another position\n   *\n   * @param id id of character to change\n   * @param newLocation new location to put this character inside of\n   * @param newPosition new position of the character\n   */\n  public moveCharacter(id: ItemId, newLocation: LocationId, newPosition: GamePosition) {\n    // Move position\n    this.getCharacterAtId(id).defaultPosition = newPosition;\n\n    // Find location with character and remove him\n    this.gameMap.getLocations().forEach((location, locId) => {\n      if (!location.characters.has(id)) return;\n      this.removeItem(GameItemType.characters, locId, id);\n    });\n\n    // Add updated character to new location\n    this.addItem(GameItemType.characters, newLocation, id);\n  }\n\n  /**\n   * Changes the default expression of a character\n   *\n   * @param id id of character to change\n   * @param newExpression new expression of the character\n   */\n  public updateCharacter(id: ItemId, newExpression: string) {\n    this.getCharacterAtId(id).defaultExpression = newExpression;\n\n    // Update every location that has the character\n    this.gameMap.getLocations().forEach((location, locId) => {\n      if (!location.characters.has(id)) return;\n\n      this.isCurrentLocation(locId)\n        ? this.getSubscriberForItemType(GameItemType.characters)?.handleMutate(id)\n        : this.addLocationNotif(locId);\n    });\n  }\n\n  ///////////////////////////////\n  //    Chapter Objectives     //\n  ///////////////////////////////\n\n  /**\n   * Checks whether all the checkpoint objectives has been completed.\n   * @returns {boolean}\n   */\n  public areAllObjectivesComplete(): boolean {\n    return this.checkpointObjective.isAllComplete();\n  }\n\n  /**\n   * Checks whether a specific objective has been completed.\n   * If the objective does not exist, this method still returns true.\n   *\n   * @param key objective name\n   * @returns {boolean}\n   */\n  public isObjectiveComplete(key: string): boolean {\n    return this.checkpointObjective.getObjectiveState(key);\n  }\n\n  /**\n   * Check whether the objectives are complete or not.\n   * All specified objectives must be complete for this method\n   * to return true.\n   *\n   * @param keys objective names\n   * @returns {boolean}\n   */\n  public areObjectivesComplete(keys: string[]): boolean {\n    let result = true;\n    keys.forEach(key => (result = result && this.isObjectiveComplete(key)));\n    return result;\n  }\n\n  /**\n   * Record that an objective has been completed.\n   *\n   * @param key objective name\n   */\n  public completeObjective(key: string): void {\n    this.checkpointObjective.setObjective(key, true);\n  }\n\n  ///////////////////////////////\n  //    Chapter Tasks          //\n  ///////////////////////////////\n\n  /**\n   * Checks whether a specific task has been completed.\n   * If the task does not exist, this method still returns true.\n   *\n   * @param key task id\n   * @returns {boolean}\n   */\n  public isTaskComplete(key: string): boolean {\n    return this.checkpointTask.getTaskState(key);\n  }\n\n  /**\n   * Check whether the tasks are complete or not.\n   * All specified tasks must be complete for this method\n   * to return true.\n   *\n   * @param keys task ids\n   * @returns {boolean}\n   */\n  public areTasksComplete(keys: string[]): boolean {\n    let result = true;\n    keys.forEach(key => (result = result && this.isTaskComplete(key)));\n    return result;\n  }\n\n  /**\n   * Record that a task has been completed.\n   *\n   * @param key task id\n   */\n  public completeTask(key: string): void {\n    this.checkpointTask.setTask(key, true);\n  }\n\n  /**\n   * Indicate that a task should be shown to the user.\n   *\n   * @param key task id\n   */\n  public showTask(key: string): void {\n    this.checkpointTask.showTask(key);\n  }\n\n  public getAllVisibleTaskData(): Array<[TaskDetail, boolean]> {\n    return this.checkpointTask.getAllVisibleTaskData();\n  }\n\n  ///////////////////////////////\n  //          Saving           //\n  ///////////////////////////////\n\n  /**\n   * Gets array of all objectives that have been completed.\n   *\n   * @returns {ItemId[]}\n   */\n  public getCompletedObjectives(): ItemId[] {\n    return convertMapToArray(this.checkpointObjective.getObjectives());\n  }\n\n  /**\n   * Gets array of all tasks that have been completed.\n   *\n   * @returns {ItemId[]}\n   */\n  public getCompletedTasks(): ItemId[] {\n    return convertMapToArray(this.checkpointTask.getAllTasks());\n  }\n\n  /**\n   * Gets array of all tasks that have been displayed but yet to be completed.\n   *\n   * @returns {ItemId[]}\n   */\n  public getIncompleteTasks(): ItemId[] {\n    return this.checkpointTask.getAllIncompleteTasks();\n  }\n\n  /**\n   * Return an array interactions that have been triggered\n   *\n   * @returns {string[]}\n   */\n  public getTriggeredInteractions(): string[] {\n    return convertMapToArray(this.triggeredInteractions);\n  }\n\n  /**\n   * Return an array interactions of state-change actions that have been triggered\n   * State-change actions refer to actions that modify the game map's original state\n   *\n   * @returns {string[]}\n   */\n  public getTriggeredStateChangeActions(): string[] {\n    return this.triggeredStateChangeActions;\n  }\n\n  public getGameMap = () => this.gameMap;\n  public getCharacterAtId = (id: ItemId) => mandatory(this.gameMap.getCharacterMap().get(id));\n\n  private getSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n  public getChapterNewlyCompleted = () => this.chapterNewlyCompleted;\n}\n\nexport default GameStateManager;\n","import FontAssets from '../assets/FontAssets';\nimport ImageAssets from '../assets/ImageAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { BitmapFontStyle } from '../commons/CommonTypes';\n\nexport const taskTextStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nconst scrollbarX = screenSize.x * 0.251;\nconst scrollbarWidth = 7;\n\nconst TaskLogConstants = {\n  taskTextConfig: { x: screenSize.x * -0.42, y: screenSize.y * -0.378, oriX: 0.0, oriY: 0.0 },\n  textMaxWidth: screenSize.x * 0.66,\n  checkMark: {\n    x: screenSize.x * -0.202,\n    y: screenSize.y * -0.369,\n    imageUrl: ImageAssets.talkOptCheck.key\n  },\n  logHeight: screenSize.y * 0.7632,\n  scrollbarTrack: {\n    x: scrollbarX,\n    y: screenSize.y * 0.005,\n    width: scrollbarWidth,\n    height: screenSize.y * 0.73,\n    color: 0x555555\n  },\n  scrollbarThumb: { x: scrollbarX, width: scrollbarWidth, color: 0x888888 },\n  scrollSpeed: 0.5\n};\n\nexport default TaskLogConstants;\n","import { IBaseScene } from '../commons/CommonTypes';\nimport DashboardConstants from '../dashboard/GameDashboardConstants';\nimport { DashboardPageManager } from '../dashboard/GameDashboardTypes';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport { limitNumber } from '../utils/GameUtils';\nimport { createBitmapText } from '../utils/TextUtils';\nimport TaskLogConstants, { taskTextStyle } from './GameTaskLogConstants';\n\n/**\n * Manager in charge of creating the task log\n */\nclass GameTaskLogManager implements DashboardPageManager {\n  private scene: IBaseScene;\n\n  /**\n   * Initialises the task log UI\n   *\n   * @param scene - the scene to add task log\n   */\n  public constructor(scene: IBaseScene) {\n    this.scene = scene;\n  }\n\n  /**\n   * Creates the container that encapsulates the 'Task Log' UI,\n   * i.e. the scrollable text, the check marks and the scrollbar\n   */\n  public createUIContainer() {\n    const taskLogContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    // Scrollable Text and Check Marks\n    const tasksData = GameGlobalAPI.getInstance().getAllVisibleTaskData();\n    const taskListContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n    let totalTextHeight = 0;\n\n    if (tasksData.length === 0) {\n      // No tasks to show\n      const message = createBitmapText(\n        this.scene,\n        'No tasks available.',\n        TaskLogConstants.taskTextConfig,\n        taskTextStyle\n      ).setMaxWidth(TaskLogConstants.textMaxWidth);\n      taskListContainer.add(message);\n      totalTextHeight = message.height;\n    } else {\n      for (let i = 0; i < tasksData.length; i++) {\n        const task = tasksData[i][0];\n        const taskIsDone = tasksData[i][1];\n\n        if (taskIsDone) {\n          // Show a check mark next to completed tasks\n          const checkMark = new Phaser.GameObjects.Image(\n            this.scene,\n            TaskLogConstants.checkMark.x,\n            TaskLogConstants.checkMark.y + totalTextHeight,\n            TaskLogConstants.checkMark.imageUrl\n          );\n          taskListContainer.add(checkMark);\n        }\n\n        const taskTitle = createBitmapText(\n          this.scene,\n          task.title,\n          {\n            ...TaskLogConstants.taskTextConfig,\n            y: TaskLogConstants.taskTextConfig.y + totalTextHeight\n          },\n          taskTextStyle\n        ).setMaxWidth(TaskLogConstants.textMaxWidth);\n\n        // Underline the task title using a stretched underscore\n        // (Note: this will not underline subsequent lines if title longer than 1 line)\n        const underline = createBitmapText(\n          this.scene,\n          '_',\n          {\n            ...TaskLogConstants.taskTextConfig,\n            y: TaskLogConstants.taskTextConfig.y + totalTextHeight\n          },\n          taskTextStyle\n        );\n        underline.setScale(taskTitle.width / underline.width, 1);\n\n        taskListContainer.add(taskTitle);\n        taskListContainer.add(underline);\n        totalTextHeight += taskTitle.height;\n\n        const taskDescription = createBitmapText(\n          this.scene,\n          task.description + (i < tasksData.length - 1 ? '\\n ' : ''), // Line break between tasks\n          {\n            ...TaskLogConstants.taskTextConfig,\n            y: TaskLogConstants.taskTextConfig.y + totalTextHeight\n          },\n          taskTextStyle\n        ).setMaxWidth(TaskLogConstants.textMaxWidth);\n\n        taskListContainer.add(taskDescription);\n        totalTextHeight += taskDescription.height;\n      }\n    }\n\n    const taskListContainerMinY = -Math.max(totalTextHeight - TaskLogConstants.logHeight, 0);\n    taskListContainer.y = taskListContainerMinY; // Show newest tasks on screen first\n    taskLogContainer.add(taskListContainer);\n\n    // Scrollbar\n    const scrollbarTrack = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      TaskLogConstants.scrollbarTrack.x,\n      TaskLogConstants.scrollbarTrack.y,\n      TaskLogConstants.scrollbarTrack.width,\n      TaskLogConstants.scrollbarTrack.height,\n      TaskLogConstants.scrollbarTrack.color\n    );\n\n    const scrollbarThumbHeight = Math.max(\n      (TaskLogConstants.logHeight / totalTextHeight) * TaskLogConstants.scrollbarTrack.height,\n      TaskLogConstants.scrollbarThumb.width * 4 // Limit how small thumb can be\n    );\n    const scrollbarThumbMaxY =\n      TaskLogConstants.scrollbarTrack.y +\n      TaskLogConstants.scrollbarTrack.height / 2 -\n      scrollbarThumbHeight / 2;\n    // The total distance the thumb can move\n    const thumbRange = TaskLogConstants.scrollbarTrack.height - scrollbarThumbHeight;\n    // The ratio between how far the thumb moves to how far the text scrolls\n    const thumbTextScrollRatio = thumbRange / -taskListContainerMinY;\n\n    const scrollbarThumb = new Phaser.GameObjects.Rectangle(\n      this.scene,\n      TaskLogConstants.scrollbarThumb.x,\n      scrollbarThumbMaxY,\n      TaskLogConstants.scrollbarThumb.width,\n      scrollbarThumbHeight,\n      TaskLogConstants.scrollbarThumb.color\n    );\n\n    taskLogContainer.add(scrollbarTrack);\n    taskLogContainer.add(scrollbarThumb);\n\n    if (totalTextHeight <= TaskLogConstants.logHeight) {\n      // Hide scrollbar if all text fits on screen\n      scrollbarTrack.setVisible(false);\n      scrollbarThumb.setVisible(false);\n    }\n\n    // Add scroll listener\n    const { x, y, width, height } = DashboardConstants.pageArea;\n    const scrollZone = new Phaser.GameObjects.Zone(\n      this.scene,\n      x + width / 2,\n      y + height / 2,\n      width,\n      height\n    );\n    scrollZone.setInteractive();\n    scrollZone.on(\n      'wheel',\n      (pointer: Phaser.Input.Pointer, deltaX: number, deltaY: number, deltaZ: number) => {\n        taskListContainer.y = limitNumber(\n          taskListContainer.y - deltaY * TaskLogConstants.scrollSpeed,\n          taskListContainerMinY,\n          0\n        );\n        scrollbarThumb.y =\n          scrollbarThumbMaxY - (taskListContainer.y - taskListContainerMinY) * thumbTextScrollRatio;\n      }\n    );\n    taskLogContainer.add(scrollZone);\n\n    return taskLogContainer;\n  }\n}\n\nexport default GameTaskLogManager;\n","import ImageAssets from '../assets/ImageAssets';\nimport { screenSize } from '../commons/CommonConstants';\nimport { AssetKey, IBaseScene } from '../commons/CommonTypes';\nimport { GamePhaseType } from '../phase/GamePhaseTypes';\n\nexport type ToolbarButtonConfig = {\n  assetKey: AssetKey;\n  onUp: (scene: IBaseScene) => () => void;\n};\n\n// From rightmost to leftmost\nconst buttonConfigs: ToolbarButtonConfig[] = [\n  {\n    // Escape menu button\n    assetKey: ImageAssets.gear.key,\n    onUp: scene => async () => {\n      const phaseManager = scene.getPhaseManager();\n      if (phaseManager.isCurrentPhase(GamePhaseType.EscapeMenu)) {\n        await phaseManager.popPhase();\n      } else if (phaseManager.isCurrentPhaseTerminal()) {\n        await phaseManager.swapPhase(GamePhaseType.EscapeMenu);\n      } else {\n        await phaseManager.pushPhase(GamePhaseType.EscapeMenu);\n      }\n    }\n  },\n  {\n    // Dashboard button\n    assetKey: ImageAssets.journal.key,\n    onUp: scene => async () => {\n      const phaseManager = scene.getPhaseManager();\n      if (phaseManager.isCurrentPhase(GamePhaseType.Dashboard)) {\n        await phaseManager.popPhase();\n      } else if (phaseManager.isCurrentPhaseTerminal()) {\n        await phaseManager.swapPhase(GamePhaseType.Dashboard);\n      } else {\n        await phaseManager.pushPhase(GamePhaseType.Dashboard);\n      }\n    }\n  }\n];\n\nconst ToolbarConstants = {\n  firstButton: { x: screenSize.x - 37, y: 37 },\n  xOffset: 64,\n  buttonConfigs\n};\n\nexport default ToolbarConstants;\n","import { IBaseScene } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport { createButton } from '../utils/ButtonUtils';\nimport ToolbarConstants, { ToolbarButtonConfig } from './GameToolbarConstants';\n\n/**\n * Manager for the toolbar buttons in the top right corner of the screen\n *\n * It calls the phase mangager when the toolbar buttons are clicked\n * to bring up the approriate menu\n */\nclass GameToolbarManager {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n  private scene: IBaseScene;\n\n  /**\n   * Initialises the toolbar manager UI\n   *\n   * @param scene - the scene to add toolbar manager\n   */\n  public constructor(scene: IBaseScene) {\n    this.scene = scene;\n  }\n\n  /**\n   * Create the container that encapsulates the toolbar UI\n   */\n  private createUIContainer() {\n    const toolbarContainer = new Phaser.GameObjects.Container(this.scene, 0, 0);\n\n    toolbarContainer.add(\n      ToolbarConstants.buttonConfigs.map((buttonConfig, index) =>\n        this.createToolbarButton(\n          ToolbarConstants.firstButton.x - ToolbarConstants.xOffset * index,\n          ToolbarConstants.firstButton.y,\n          buttonConfig\n        )\n      )\n    );\n    return toolbarContainer;\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param buttonConfig config details of the button\n   */\n  private createToolbarButton(xPos: number, yPos: number, buttonConfig: ToolbarButtonConfig) {\n    return createButton(this.scene, {\n      assetKey: buttonConfig.assetKey,\n      onUp: buttonConfig.onUp(this.scene)\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Render the toolbar UI.\n   *\n   * Called by the GameManager in every location\n   */\n  public async renderToolbarContainer(): Promise<void> {\n    this.uiContainer = this.createUIContainer();\n    this.scene.getLayerManager().addToLayer(Layer.UI, this.uiContainer);\n  }\n}\n\nexport default GameToolbarManager;\n","import FontAssets from '../assets/FontAssets';\nimport ImageAssets from '../assets/ImageAssets';\nimport { createButton } from '../utils/ButtonUtils';\nimport { screenCenter } from './CommonConstants';\nimport { BitmapFontStyle } from './CommonTypes';\n\nconst backText = 'Back';\nconst backTextYPos = -screenCenter.y * 0.975;\nconst backButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonDarkFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\n/**\n * A container that is a back button that is located\n * at the top, center of the screen.\n *\n * The style and colours are fixed.\n * It is not recommended to change the position of the container.\n */\nclass CommonBackButton extends Phaser.GameObjects.Container {\n  /**\n   * @param scene scene for the button to be attached to\n   * @param callback callback to be executed on onClick\n   */\n  constructor(scene: Phaser.Scene, callback: any) {\n    super(scene, 0, 0);\n    this.renderBackButton(callback);\n  }\n\n  private renderBackButton(callback: any) {\n    const backButton = createButton(this.scene, {\n      assetKey: ImageAssets.topButton.key,\n      message: backText,\n      textConfig: { x: 0, y: backTextYPos, oriX: 0.5, oriY: 0.25 },\n      bitMapTextStyle: backButtonStyle,\n      onUp: callback\n    }).setPosition(screenCenter.x, screenCenter.y);\n    this.add(backButton);\n  }\n}\n\nexport default CommonBackButton;\n","import { toS3Path } from '../../utils/GameUtils';\n\nconst ExploreModeConstants = {\n  normal: `url(${toS3Path('/ui/magnifying.png', false)}), pointer`,\n  hover: `url(${toS3Path('/ui/magnifying_trigg.png', false)}), pointer`,\n  checked: `url(${toS3Path('/ui/magnifying_check.png', false)}), pointer`\n};\n\nexport default ExploreModeConstants;\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { Constants, screenSize } from '../../commons/CommonConstants';\nimport { IGameUI, ItemId } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { ActivatableSprite } from '../../objects/GameObjectTypes';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport { sleep } from '../../utils/GameUtils';\nimport ExploreModeConstants from './GameModeExploreConstants';\n\n/**\n * The class in charge of showing \"Explore\" mode UI\n * which comprises back button, attaching magnifying glass cursor and\n * making objects and bounding boxes active during Explore mode\n */\nclass GameModeExplore implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Create the container that encapsulate the 'Explore' mode UI,\n   * i.e. the back button.\n   */\n  public createUIContainer(): Phaser.GameObjects.Container {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const exploreMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    const backButton = new CommonBackButton(\n      gameManager,\n      async () => await GameGlobalAPI.getInstance().swapPhase(GamePhaseType.Menu)\n    );\n    exploreMenuContainer.add(backButton);\n    return exploreMenuContainer;\n  }\n\n  /**\n   * Activate the 'Explore' mode UI.\n   *\n   * Usually only called by the phase manager when 'Explore' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n\n    this.enableInteractions();\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps\n    });\n\n    // Change default icon\n    GameGlobalAPI.getInstance().setDefaultCursor(ExploreModeConstants.normal);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Explore' mode UI.\n   *\n   * Usually only called by the phase manager when 'Explore' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    // Reset the cursor\n    GameGlobalAPI.getInstance().setDefaultCursor(Constants.defaultCursor);\n\n    this.disableInteractions();\n\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n\n  /**\n   * This function enables all the activatable sprites (objects/bboxes)\n   * that are currently being rendered on the map to have mouse events\n   *\n   * It changes the default cursor of the hover/click to a magnifying glass\n   * It also adds enables the activatable's actions to be played when clicked\n   */\n  private enableInteractions() {\n    GameGlobalAPI.getInstance()\n      .getAllActivatables()\n      .forEach((activatable: ActivatableSprite) => {\n        if (!activatable.actionIds || !activatable.actionIds.length) {\n          return;\n        }\n        activatable.clickArea.on('pointerout', () => this.explorePointerOut());\n        activatable.clickArea.on('pointerover', () =>\n          this.explorePointerOver(activatable.interactionId)\n        );\n        activatable.clickArea.on('pointerup', async () => {\n          this.explorePointerUp(activatable.interactionId);\n          await GameGlobalAPI.getInstance().processGameActions(activatable.actionIds);\n        });\n      });\n  }\n\n  /**\n   * This function disables all the activatable sprites (objects/bboxes)\n   * that are currently being rendered on the map\n   */\n  private disableInteractions() {\n    GameGlobalAPI.getInstance()\n      .getAllActivatables()\n      .forEach((activatable: ActivatableSprite) => {\n        activatable.clickArea.off('pointerout');\n        activatable.clickArea.off('pointerover');\n        activatable.clickArea.off('pointerup');\n      });\n  }\n\n  /**\n   * Function to be executed when user hover upon interactable object/bbox.\n   * It sets the cursor to different icons based on wheter user has ever\n   * interacted with it previously.\n   *\n   * @param id id of the object, to be used to check whether it has been\n   *           triggered before\n   */\n  private explorePointerOver(id: ItemId) {\n    const hasTriggered = GameGlobalAPI.getInstance().hasTriggeredInteraction(id);\n    if (hasTriggered) {\n      GameGlobalAPI.getInstance().setDefaultCursor(ExploreModeConstants.checked);\n    } else {\n      GameGlobalAPI.getInstance().setDefaultCursor(ExploreModeConstants.hover);\n    }\n  }\n\n  /**\n   * Function to be executed when user off hover upon interactable object/bbox.\n   * It sets the cursor back to 'Explore' mode cursor.\n   */\n  private explorePointerOut() {\n    GameGlobalAPI.getInstance().setDefaultCursor(ExploreModeConstants.normal);\n  }\n\n  /**\n   * Function to be executed when user click on the interatable object/bbox.\n   *\n   * It will prompt GameStateManager to record that this interaction has\n   * been triggered.\n   *\n   * @param id id of the object, to be used to inform GameStateManager\n   */\n  private explorePointerUp(id: string) {\n    GameGlobalAPI.getInstance().setDefaultCursor(Constants.defaultCursor);\n    GameGlobalAPI.getInstance().triggerInteraction(id);\n    GameGlobalAPI.getInstance().setDefaultCursor(ExploreModeConstants.normal);\n  }\n}\n\nexport default GameModeExplore;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const modeButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 45,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst MenuModeConstants = {\n  button: { yOffset: screenSize.y * 0.3 },\n  entryTweenProps: {\n    y: 0,\n    duration: 500,\n    ease: 'Power2'\n  },\n  exitTweenProps: {\n    y: screenSize.y * 0.4,\n    duration: 300,\n    ease: 'Power2'\n  }\n};\n\nexport default MenuModeConstants;\n\nexport const MenuLineConstants = {\n  x: 0,\n  y: 15,\n  lineLength: 20,\n  lineWidth: 4,\n  exploreOffset: -68,\n  moveOffset: 20,\n  talkOffset: -30,\n  yOffset: 20,\n  color: 0xbce7da\n};\n","import GameGlobalAPI from 'src/features/game/scenes/gameManager/GameGlobalAPI';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { IGameUI } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameItemType } from '../../location/GameMapTypes';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { sleep } from '../../utils/GameUtils';\nimport { calcTableFormatPos } from '../../utils/StyleUtils';\nimport { GameMode, gameModeToPhase } from '../GameModeTypes';\nimport MenuModeConstants, { MenuLineConstants, modeButtonStyle } from './GameModeMenuConstants';\n\n/**\n * The class in charge of showing the \"Menu\" mode UI\n * which displays the menu for players\n * to choose the game mode they want to play\n * in a location\n */\nclass GameModeMenu implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Fetches the game modes of the current location id.\n   */\n  private getLatestLocationModes() {\n    const currLocId = GameGlobalAPI.getInstance().getCurrLocId();\n    let latestModesInLoc = GameGlobalAPI.getInstance().getLocationModes(currLocId);\n    const talkTopics = GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.talkTopics,\n      currLocId\n    );\n\n    // Remove talk mode if there is no talk topics\n    if (talkTopics.length === 0) {\n      latestModesInLoc = latestModesInLoc.filter(mode => mode !== GameMode.Talk);\n    }\n\n    return latestModesInLoc;\n  }\n\n  /**\n   * Create the container that encapsulate the 'Menu' mode UI,\n   * i.e. the modes selection.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const modeMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    const modeBanner = new Phaser.GameObjects.Image(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.modeMenuBanner.key\n    );\n    modeMenuContainer.add(modeBanner);\n\n    const modes = this.getLatestLocationModes();\n    const buttons = this.getModeButtons(modes);\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length\n    });\n\n    const lineList: Phaser.GameObjects.Line[] = buttons.map((button, index) =>\n      this.createLine(\n        buttonPositions[index][0],\n        buttonPositions[index][1] + MenuModeConstants.button.yOffset + MenuLineConstants.yOffset,\n        button\n      )\n    );\n\n    modeMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createModeButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1] + MenuModeConstants.button.yOffset,\n          button.callback\n        )\n      )\n    );\n\n    modeMenuContainer.add(lineList);\n\n    return modeMenuContainer;\n  }\n\n  /**\n   * Create underline for each button.\n   */\n  private createLine(\n    xPos: number,\n    yPos: number,\n    button: {\n      text: GameMode;\n      callback: () => Promise<void>;\n    }\n  ) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    if (button.text === GameMode.Explore) {\n      xPos += MenuLineConstants.exploreOffset;\n    } else if (button.text === GameMode.Move) {\n      xPos += MenuLineConstants.moveOffset;\n    } else {\n      xPos += MenuLineConstants.talkOffset;\n    }\n    const line: Phaser.GameObjects.Line = gameManager.add.line(\n      MenuLineConstants.x,\n      MenuLineConstants.y,\n      xPos,\n      yPos,\n      xPos + MenuLineConstants.lineLength,\n      yPos,\n      MenuLineConstants.color\n    );\n    line.setLineWidth(MenuLineConstants.lineWidth);\n    return line;\n  }\n\n  /**\n   * Get the mode buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (phase change callback).\n   *\n   * @param modes modes to be shown\n   */\n  private getModeButtons(modes: GameMode[]) {\n    return modes.sort().map(mode => {\n      return {\n        text: mode,\n        callback: async () => await GameGlobalAPI.getInstance().swapPhase(gameModeToPhase[mode])\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createModeButton(text: string, xPos: number, yPos: number, callback: any) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.shortButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.25 },\n      bitMapTextStyle: modeButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Activate the 'Menu' mode UI.\n   *\n   * Usually only called by the phase manager when 'Menu' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addToLayer(Layer.UI, this.uiContainer);\n\n    this.uiContainer.setPosition(this.uiContainer.x, screenSize.y);\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...MenuModeConstants.entryTweenProps\n    });\n    await sleep(500);\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Deactivate the 'Menu' mode UI.\n   *\n   * Usually only called by the phase manager when 'Menu' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...MenuModeConstants.exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n}\n\nexport default GameModeMenu;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const moveButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst MoveModeConstants = {\n  button: { xOffSet: screenSize.x * 0.25, ySpace: screenSize.y * 0.8 },\n  preview: {\n    rect: {\n      x: screenSize.x * 0.3125,\n      y: screenSize.y * 0.515,\n      width: screenSize.x * 0.473,\n      height: screenSize.y * 0.56\n    },\n    frame: { x: screenSize.x * 0.3 }\n  }\n};\n\nexport default MoveModeConstants;\n","import ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { IGameUI } from '../../commons/CommonTypes';\nimport { ItemId } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { keyboardShortcuts } from '../../input/GameInputConstants';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameItemType, LocationId } from '../../location/GameMapTypes';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport GameGlobalAPI from '../../scenes/gameManager/GameGlobalAPI';\nimport { createButton, createButtonText } from '../../utils/ButtonUtils';\nimport { sleep } from '../../utils/GameUtils';\nimport { calcTableFormatPos } from '../../utils/StyleUtils';\nimport MoveModeConstants, { moveButtonStyle } from './GameModeMoveConstants';\n\n/**\n * The class in charge of showing the \"Move\" UI\n * to show the images and titles of navigable\n * locations from one location\n */\nclass GameModeMove implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Set the location preview sprite to the given asset key.\n   *\n   * @param sprite sprite for which its texture will be replaced with the new preview\n   * @param assetKey asset key of the new preview\n   */\n  private setPreview(sprite: Phaser.GameObjects.Sprite, assetKey: string) {\n    sprite\n      .setTexture(assetKey)\n      .setDisplaySize(MoveModeConstants.preview.rect.width, MoveModeConstants.preview.rect.height)\n      .setPosition(MoveModeConstants.preview.rect.x, MoveModeConstants.preview.rect.y);\n  }\n\n  /**\n   * Fetches the navigations of the current location id.\n   */\n  private getLatestNavigations(): ItemId[] {\n    return GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.navigation,\n      GameGlobalAPI.getInstance().getCurrLocId()\n    );\n  }\n\n  /**\n   * Create the container that encapsulate the 'Move' mode UI,\n   * i.e. the navigation, the back button, as well the preview of\n   * the location.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const moveMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Preview\n    const previewFrame = new Phaser.GameObjects.Sprite(\n      gameManager,\n      MoveModeConstants.preview.frame.x,\n      screenCenter.y,\n      ImageAssets.locationPreviewFrame.key\n    );\n    const previewFill = new Phaser.GameObjects.Sprite(\n      gameManager,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.locationPreviewFill.key\n    );\n    moveMenuContainer.add([previewFrame, previewFill]);\n\n    // Add all navigation buttons\n    const navigations = this.getLatestNavigations();\n    const buttons = this.getMoveButtons(navigations, previewFill);\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      numItemLimit: 1,\n      maxYSpace: MoveModeConstants.button.ySpace\n    });\n\n    moveMenuContainer.add(\n      buttons.map((button, index) => {\n        return this.createMoveButton(\n          createButtonText(index + 1, button.text),\n          buttonPositions[index][0] + MoveModeConstants.button.xOffSet,\n          buttonPositions[index][1],\n          button.callback,\n          button.onHover,\n          button.onOut\n        );\n      })\n    );\n\n    const backButton = new CommonBackButton(\n      gameManager,\n      async () => await GameGlobalAPI.getInstance().swapPhase(GamePhaseType.Menu)\n    );\n    moveMenuContainer.add(backButton);\n\n    // Initial setting\n    this.setPreview(previewFill, ImageAssets.defaultLocationImg.key);\n\n    return moveMenuContainer;\n  }\n\n  /**\n   * Get the move buttons preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (change location callback).\n   *\n   * @param navigations navigations from the current location\n   * @param previewSprite the sprite in which to show the location preview, to be included\n   *                      in the callback\n   */\n  private getMoveButtons(navigations: LocationId[], previewSprite: Phaser.GameObjects.Sprite) {\n    const previewLoc = (assetKey: string) => this.setPreview(previewSprite, assetKey);\n    const previewDefault = () => this.setPreview(previewSprite, ImageAssets.defaultLocationImg.key);\n\n    return navigations.map(nav => {\n      const location = GameGlobalAPI.getInstance().getLocationAtId(nav);\n      return {\n        text: location.name,\n        callback: async () => {\n          await GameGlobalAPI.getInstance().swapPhase(GamePhaseType.Sequence);\n          await GameGlobalAPI.getInstance().changeLocationTo(nav);\n        },\n        onHover: () => previewLoc(location.previewKey || location.assetKey),\n        onOut: () => previewDefault()\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   * @param onHover callback to be executed on hover\n   * @param onOut callback to be executed on out hover\n   */\n  private createMoveButton(\n    text: string,\n    xPos: number,\n    yPos: number,\n    callback: any,\n    onHover: any,\n    onOut: any\n  ) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.longButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.4, oriY: 0.15 },\n      bitMapTextStyle: moveButtonStyle,\n      onUp: callback,\n      onHover: onHover,\n      onOut: onOut\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Register keyboard listeners for location selection.\n   * Called by activateUI function.\n   */\n  private registerKeyboardListener(): void {\n    const inputManager = GameGlobalAPI.getInstance().getGameManager().getInputManager();\n    const navList: string[] = this.getLatestNavigations();\n\n    navList.forEach((nav, index) => {\n      inputManager.registerKeyboardListener(keyboardShortcuts.Options[index], 'up', async () => {\n        await GameGlobalAPI.getInstance().swapPhase(GamePhaseType.Sequence);\n        await GameGlobalAPI.getInstance().changeLocationTo(nav);\n      });\n    });\n  }\n\n  /**\n   * Activate the 'Move' mode UI.\n   *\n   * Usually only called by the phase manager when 'Move' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addToLayer(Layer.UI, this.uiContainer);\n\n    this.registerKeyboardListener();\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps\n    });\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Remove keyboard listners for location selection\n   * when Move mode is transitioned out.\n   */\n  private removeKeyboardListener(): void {\n    const inputManager = GameGlobalAPI.getInstance().getGameManager().getInputManager();\n    inputManager.clearKeyboardListeners(keyboardShortcuts.Options);\n  }\n\n  /**\n   * Deactivate the 'Move' mode UI.\n   *\n   * Usually only called by the phase manager when 'Move' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.removeKeyboardListener();\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n}\n\nexport default GameModeMove;\n","import { IGameUI } from '../../commons/CommonTypes';\n\n/**\n * This is the phase that is active when none of\n * the mode UI's are being shown.\n *\n * It is used for dialogue/popups and notifications\n */\nclass GameModeSequence implements IGameUI {\n  public activateUI() {}\n  public deactivateUI() {}\n}\n\nexport default GameModeSequence;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const talkButtonStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst TalkModeConstants = {\n  button: { ySpace: screenSize.y * 0.7 }\n};\n\nexport default TalkModeConstants;\n","import ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { IGameUI, ItemId } from '../../commons/CommonTypes';\nimport { fadeAndDestroy } from '../../effects/FadeEffect';\nimport { entryTweenProps, exitTweenProps } from '../../effects/FlyEffect';\nimport { keyboardShortcuts } from '../../input/GameInputConstants';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { GameItemType } from '../../location/GameMapTypes';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport GameGlobalAPI from '../../scenes/gameManager/GameGlobalAPI';\nimport { createButton, createButtonText } from '../../utils/ButtonUtils';\nimport { mandatory, sleep } from '../../utils/GameUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport TalkModeConstants, { talkButtonStyle } from './GameModeTalkConstants';\n\n/**\n * The class renders the \"Talk\" UI which displays\n * a selection of all the dialogues that players can\n * talk about in a location.\n */\nclass GameModeTalk implements IGameUI {\n  private uiContainer: Phaser.GameObjects.Container | undefined;\n\n  /**\n   * Fetches the talk topics of the current location id.\n   */\n  private getLatestTalkTopics() {\n    return GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.talkTopics,\n      GameGlobalAPI.getInstance().getCurrLocId()\n    );\n  }\n\n  /**\n   * Create the container that encapsulate the 'Talk' mode UI,\n   * i.e. the talk topics, the back button, as well the checked\n   * icon for triggered talk topics.\n   */\n  private createUIContainer() {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    const talkMenuContainer = new Phaser.GameObjects.Container(gameManager, 0, 0);\n\n    // Add talk topics of the location\n    const talkTopics = this.getLatestTalkTopics();\n    const buttons = this.getTalkTopicButtons(talkTopics);\n    const buttonPositions = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: buttons.length,\n      maxYSpace: TalkModeConstants.button.ySpace\n    });\n\n    talkMenuContainer.add(\n      buttons.map((button, index) =>\n        this.createTalkTopicButton(\n          createButtonText(index + 1, button.text),\n          buttonPositions[index][0],\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n    // Add check for interacted talk topics\n    buttons.forEach((button, index) => {\n      const checkedSprite = new Phaser.GameObjects.Sprite(\n        gameManager,\n        buttonPositions[index][0],\n        buttonPositions[index][1],\n        ImageAssets.talkOptCheck.key\n      );\n\n      const isTriggeredTopic =\n        !!button.interactionId &&\n        GameGlobalAPI.getInstance().hasTriggeredInteraction(button.interactionId);\n\n      if (isTriggeredTopic) {\n        talkMenuContainer.add(checkedSprite);\n      }\n    });\n\n    const backButton = new CommonBackButton(\n      gameManager,\n      async () => await GameGlobalAPI.getInstance().swapPhase(GamePhaseType.Menu)\n    );\n    talkMenuContainer.add(backButton);\n    return talkMenuContainer;\n  }\n\n  /**\n   * Get the talk topics button preset to be formatted later.\n   * The preset includes the text to be displayed on the button and\n   * its functionality (dialogue callback).\n   *\n   * @param dialogueIds dialogue IDs to create talk topics from\n   */\n  private getTalkTopicButtons(dialogueIds: ItemId[]) {\n    return dialogueIds.map(dialogueId => {\n      const dialogue = mandatory(GameGlobalAPI.getInstance().getDialogueById(dialogueId));\n      return {\n        text: dialogue.title,\n        callback: async () => {\n          GameGlobalAPI.getInstance().triggerInteraction(dialogueId);\n          await GameGlobalAPI.getInstance().showDialogue(dialogueId);\n        },\n        interactionId: dialogueId\n      };\n    });\n  }\n\n  /**\n   * Format the button information to a UI container, complete with\n   * styling and functionality.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be executed on click\n   */\n  private createTalkTopicButton(text: string, xPos: number, yPos: number, callback: any) {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    return createButton(gameManager, {\n      assetKey: ImageAssets.talkOptButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.2 },\n      bitMapTextStyle: talkButtonStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  /**\n   * Register keyboard listners for talk topic selection.\n   * Called by the activeUI function.\n   */\n  private registerKeyboardListener(): void {\n    const talkTopics: ItemId[] = this.getLatestTalkTopics();\n    const inputManager = GameGlobalAPI.getInstance().getGameManager().getInputManager();\n    talkTopics.forEach((dialogueId: ItemId, index) => {\n      inputManager.registerKeyboardListener(keyboardShortcuts.Options[index], 'up', async () => {\n        GameGlobalAPI.getInstance().triggerInteraction(dialogueId);\n        await GameGlobalAPI.getInstance().showDialogue(dialogueId);\n      });\n    });\n  }\n\n  /**\n   * Activate the 'Talk' mode UI.\n   *\n   * Usually only called by the phase manager when 'Talk' phase is\n   * pushed.\n   */\n  public async activateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.uiContainer = this.createUIContainer();\n    GameGlobalAPI.getInstance().addToLayer(Layer.UI, this.uiContainer);\n\n    this.registerKeyboardListener();\n\n    this.uiContainer.setPosition(this.uiContainer.x, -screenSize.y);\n\n    gameManager.tweens.add({\n      targets: this.uiContainer,\n      ...entryTweenProps\n    });\n    GameGlobalAPI.getInstance().playSound(SoundAssets.modeEnter.key);\n  }\n\n  /**\n   * Remove keyboard listners for topic selection.\n   * Called by the deactiveUI function.\n   */\n  private removeKeyboardListener(): void {\n    const inputManager = GameGlobalAPI.getInstance().getGameManager().getInputManager();\n    inputManager.clearKeyboardListeners(keyboardShortcuts.Options);\n  }\n\n  /**\n   * Deactivate the 'Talk' mode UI.\n   *\n   * Usually only called by the phase manager when 'Talk' phase is\n   * transitioned out.\n   */\n  public async deactivateUI(): Promise<void> {\n    const gameManager = GameGlobalAPI.getInstance().getGameManager();\n    this.removeKeyboardListener();\n    if (this.uiContainer) {\n      this.uiContainer.setPosition(this.uiContainer.x, 0);\n\n      gameManager.tweens.add({\n        targets: this.uiContainer,\n        ...exitTweenProps\n      });\n\n      await sleep(500);\n      fadeAndDestroy(gameManager, this.uiContainer);\n    }\n  }\n}\n\nexport default GameModeTalk;\n","import GameActionManager from '../../action/GameActionManager';\nimport GameAnimationManager from '../../animations/GameAnimationManager';\nimport { AssetType, ImageAsset } from '../../assets/AssetsTypes';\nimport GameAwardsManager from '../../awards/GameAwardsManager';\nimport GameBackgroundManager from '../../background/GameBackgroundManager';\nimport GameBBoxManager from '../../boundingBoxes/GameBoundingBoxManager';\nimport { GameCheckpoint } from '../../chapter/GameChapterTypes';\nimport GameCharacterManager from '../../character/GameCharacterManager';\nimport { Constants } from '../../commons/CommonConstants';\nimport { AssetKey } from '../../commons/CommonTypes';\nimport GameDashboardManager from '../../dashboard/GameDashboardManager';\nimport { DashboardPage } from '../../dashboard/GameDashboardTypes';\nimport GameDialogueManager from '../../dialogue/GameDialogueManager';\nimport GameDialogueStorageManager from '../../dialogue/GameDialogueStorageManager';\nimport { blackFade, blackScreen, fadeIn } from '../../effects/FadeEffect';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport { keyboardShortcuts } from '../../input/GameInputConstants';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { LocationId } from '../../location/GameMapTypes';\nimport { GameItemType } from '../../location/GameMapTypes';\nimport GameLogManager from '../../log/GameLogManager';\nimport { GameMode } from '../../mode/GameModeTypes';\nimport GameObjectManager from '../../objects/GameObjectManager';\nimport GamePhaseManager from '../../phase/GamePhaseManager';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport GamePopUpManager from '../../popUp/GamePopUpManager';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport GameStateManager from '../../state/GameStateManager';\nimport GameTaskLogManager from '../../task/GameTaskLogManager';\nimport GameToolbarManager from '../../toolbar/GameToolbarManager';\nimport { mandatory, sleep, toS3Path } from '../../utils/GameUtils';\nimport GameGlobalAPI from './GameGlobalAPI';\nimport { createGamePhases } from './GameManagerHelper';\n\ntype GameManagerProps = {\n  continueGame: boolean;\n  chapterNum: number;\n  checkpointNum: number;\n  gameCheckpoint: GameCheckpoint;\n};\n\n/**\n * Main scene that plays the checkpoint.\n *\n * It processes checkpoint objects and loads\n * the chapter exclusive assets (location image, sounds).\n *\n * It also handles main gameplay loop, e.g. switching between modes,\n * activation of escape or collectible menu, location switching,\n * triggering actions, etc.\n */\nclass GameManager extends Phaser.Scene {\n  public currentLocationId: LocationId;\n  public hasTransitioned: boolean;\n  private stateManager?: GameStateManager;\n  private layerManager?: GameLayerManager;\n  private objectManager?: GameObjectManager;\n  private characterManager?: GameCharacterManager;\n  private dialogueManager?: GameDialogueManager;\n  private actionManager?: GameActionManager;\n  private boundingBoxManager?: GameBBoxManager;\n  private popUpManager?: GamePopUpManager;\n  private phaseManager?: GamePhaseManager;\n  private backgroundManager?: GameBackgroundManager;\n  private animationManager?: GameAnimationManager;\n  private inputManager?: GameInputManager;\n  private escapeManager?: GameEscapeManager;\n  private collectibleManager?: GameAwardsManager;\n  private achievementManager?: GameAwardsManager;\n  private logManager?: GameLogManager;\n  private dialogueStorageManager?: GameDialogueStorageManager;\n  private toolbarManager?: GameToolbarManager;\n  private taskLogManager?: GameTaskLogManager;\n  private dashboardManager?: GameDashboardManager;\n\n  constructor() {\n    super('GameManager');\n    this.currentLocationId = Constants.nullInteractionId;\n    this.hasTransitioned = false;\n  }\n\n  public init({ gameCheckpoint, continueGame, chapterNum, checkpointNum }: GameManagerProps) {\n    GameGlobalAPI.getInstance().setGameManager(this);\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.getSaveManager().registerGameInfo(chapterNum, checkpointNum, continueGame);\n    this.currentLocationId =\n      this.getSaveManager().getLoadedLocation() || gameCheckpoint.startingLoc;\n    this.hasTransitioned = false;\n\n    this.stateManager = new GameStateManager(gameCheckpoint);\n    this.layerManager = new GameLayerManager(this);\n    this.inputManager = new GameInputManager(this);\n    this.phaseManager = new GamePhaseManager(createGamePhases(), this.inputManager);\n    this.characterManager = new GameCharacterManager();\n    this.objectManager = new GameObjectManager();\n    this.dialogueManager = new GameDialogueManager();\n    this.actionManager = new GameActionManager();\n    this.boundingBoxManager = new GameBBoxManager();\n    this.backgroundManager = new GameBackgroundManager();\n    this.animationManager = new GameAnimationManager();\n    this.popUpManager = new GamePopUpManager();\n    this.escapeManager = new GameEscapeManager(this);\n    this.collectibleManager = new GameAwardsManager(\n      this,\n      SourceAcademyGame.getInstance().getUserStateManager().getCollectibles\n    );\n    this.achievementManager = new GameAwardsManager(\n      this,\n      SourceAcademyGame.getInstance().getUserStateManager().getAchievements\n    );\n    this.logManager = new GameLogManager(this);\n    this.dialogueStorageManager = new GameDialogueStorageManager();\n    this.toolbarManager = new GameToolbarManager(this);\n    this.taskLogManager = new GameTaskLogManager(this);\n    this.dashboardManager = new GameDashboardManager(\n      this,\n      [\n        DashboardPage.Log,\n        DashboardPage.Tasks,\n        DashboardPage.Collectibles,\n        DashboardPage.Achievements\n      ],\n      [this.logManager, this.taskLogManager, this.collectibleManager, this.achievementManager]\n    );\n  }\n\n  //////////////////////\n  //    Preload       //\n  //////////////////////\n\n  public preload() {\n    addLoadingScreen(this);\n    this.getPhaseManager().setInterruptCheckCallback(\n      (prevPhase: GamePhaseType, newPhase: GamePhaseType) =>\n        this.transitionChecker(prevPhase, newPhase)\n    );\n    this.getPhaseManager().setInterruptCallback(\n      async (prevPhase: GamePhaseType, newPhase: GamePhaseType) => await this.checkpointTransition()\n    );\n    this.getPhaseManager().setCallback(\n      async (prevPhase: GamePhaseType, newPhase: GamePhaseType) =>\n        await this.handleCharacterLayer(prevPhase, newPhase)\n    );\n    this.preloadLocationsAssets();\n    this.bindKeyboardTriggers();\n  }\n\n  /**\n   * Preload all assets (image and sounds) exclusive to the checkpoint's gamemap.\n   */\n  private preloadLocationsAssets() {\n    const gameMap = this.getStateManager().getGameMap();\n    GameGlobalAPI.getInstance().loadSounds(gameMap.getSoundAssets());\n    gameMap.getMapAssets().forEach((image, assetKey) => {\n      this.loadImage(image, assetKey);\n    });\n  }\n\n  /**\n   * Loads each asset type (image, sprite) appropriately\n   *\n   * @param image ImageAsset object to be loaded\n   * @param assetKey asset key of ImageAsset\n   */\n  private loadImage(image: ImageAsset, assetKey: AssetKey) {\n    switch (image.type) {\n      case AssetType.Image:\n        this.load.image(assetKey, toS3Path(image.path, true));\n        break;\n      case AssetType.Sprite:\n        this.load.spritesheet(assetKey, toS3Path(image.path, true), image.config);\n        break;\n      default:\n        break;\n    }\n  }\n\n  //////////////////////\n  // Location Helpers //\n  //////////////////////\n\n  public async create() {\n    GameGlobalAPI.getInstance().hideLayer(Layer.Character);\n    await this.changeLocationTo(this.currentLocationId, true);\n    await GameGlobalAPI.getInstance().saveGame();\n  }\n\n  /**\n   * Render a location, the assets related to it (objects, character);\n   * before executing the following in order (if available):\n   *\n   * Start Action, Notification, Cutscene\n   *\n   * Start action is only played when startAction argument is set to true;\n   * commonly only the first time user loads the checkpoint.\n   *\n   * @param locationId id of the location to render\n   * @param startAction if set to true, startAction will be executed\n   */\n  private async renderLocation(locationId: LocationId, startAction: boolean) {\n    const gameLocation = GameGlobalAPI.getInstance().getLocationAtId(locationId);\n\n    // Render the toolbar in every location\n    this.getToolbarManager().renderToolbarContainer();\n\n    // Play the BGM attached to the location\n    await GameGlobalAPI.getInstance().playBgMusic(gameLocation.bgmKey);\n\n    // Render all assets related to the location\n    this.getBackgroundManager().renderBackgroundLayerContainer(locationId);\n    this.getObjectManager().renderObjectsLayerContainer(locationId);\n    this.getBBoxManager().renderBBoxLayerContainer(locationId);\n    this.getCharacterManager().renderCharacterLayerContainer(locationId);\n\n    await this.getPhaseManager().swapPhase(GamePhaseType.Sequence);\n\n    if (startAction) {\n      // Execute fast forward actions\n      await this.getActionManager().fastForwardGameActions(\n        this.getStateManager().getTriggeredStateChangeActions()\n      );\n      // Game start actions\n      await this.getActionManager().processGameActions(\n        this.getStateManager().getGameMap().getGameStartActions()\n      );\n    }\n\n    // Location cutscene\n    await this.getActionManager().processGameActions(gameLocation.actionIds);\n\n    // Location notification\n    if (this.getStateManager().hasLocationNotif(locationId)) {\n      await GameGlobalAPI.getInstance().bringUpUpdateNotif(gameLocation.name);\n      this.getStateManager().removeLocationNotif(locationId);\n    }\n\n    if (this.getPhaseManager().isCurrentPhase(GamePhaseType.Sequence)) {\n      await this.getPhaseManager().swapPhase(GamePhaseType.Menu);\n    }\n  }\n\n  /**\n   * Change the current location to another location, based on the ID.\n   * This will properly clean up the previous location. It is highly\n   * encouraged to only change location of the game using this method.\n   *\n   * @param locationId id of location to be changed into\n   * @param startAction if set to true, start action will be triggered\n   */\n  public async changeLocationTo(locationId: LocationId, startAction: boolean = false) {\n    this.currentLocationId = locationId;\n\n    // Transition to the new location\n    await blackFade(this, 300, 500, async () => {\n      await this.getLayerManager().clearAllLayers();\n      await this.renderLocation(locationId, startAction);\n    });\n\n    // Update state after location is fully rendered, location has been visited\n    this.getStateManager().triggerInteraction(locationId);\n  }\n\n  /**\n   * Bind escape menu, dashboard, and mode selections to keyboard triggers.\n   */\n  private bindKeyboardTriggers() {\n    this.getInputManager().registerKeyboardListener(keyboardShortcuts.Menu, 'up', async () => {\n      if (this.getPhaseManager().isCurrentPhaseTerminal()) {\n        await this.getPhaseManager().popPhase();\n      } else {\n        await this.getPhaseManager().pushPhase(GamePhaseType.EscapeMenu);\n      }\n    });\n    this.getInputManager().registerKeyboardListener(keyboardShortcuts.Dashboard, 'up', async () => {\n      if (this.getPhaseManager().isCurrentPhase(GamePhaseType.Dashboard)) {\n        await this.getPhaseManager().popPhase();\n      } else if (this.getPhaseManager().isCurrentPhaseTerminal()) {\n        await this.getPhaseManager().swapPhase(GamePhaseType.Dashboard);\n      } else {\n        await this.getPhaseManager().pushPhase(GamePhaseType.Dashboard);\n      }\n    });\n    this.registerMenuKeyboardListener(\n      keyboardShortcuts.Explore,\n      GameMode.Explore,\n      GamePhaseType.Explore\n    );\n    this.registerMenuKeyboardListener(keyboardShortcuts.Move, GameMode.Move, GamePhaseType.Move);\n    this.registerMenuKeyboardListener(keyboardShortcuts.Talk, GameMode.Talk, GamePhaseType.Talk);\n  }\n\n  /**\n   * Helper function to register keyboard listeners for mode selections.\n   */\n  private registerMenuKeyboardListener(shortcut: number, mode: GameMode, phase: GamePhaseType) {\n    this.getInputManager().registerKeyboardListener(shortcut, 'up', async () => {\n      const modes = this.getCurrentLocationModes();\n      if (modes.includes(mode) && this.getPhaseManager().isCurrentPhase(GamePhaseType.Menu)) {\n        await this.getPhaseManager().pushPhase(phase);\n      } else if (this.getPhaseManager().isCurrentPhase(phase)) {\n        await this.getPhaseManager().swapPhase(GamePhaseType.Menu);\n      }\n    });\n  }\n\n  /**\n   * the same method from GameModeMenu to get the available modes under current location\n   */\n  private getCurrentLocationModes() {\n    const currLocId = this.currentLocationId;\n    let latestModesInLoc = this.getStateManager().getLocationModes(currLocId);\n    const talkTopics = GameGlobalAPI.getInstance().getGameItemsInLocation(\n      GameItemType.talkTopics,\n      currLocId\n    );\n\n    // Remove talk mode if there is no talk topics\n    if (talkTopics.length === 0) {\n      latestModesInLoc = latestModesInLoc.filter(mode => mode !== GameMode.Talk);\n    }\n\n    return latestModesInLoc;\n  }\n\n  /**\n   * Clean up on related managers\n   */\n  public cleanUp() {\n    this.getInputManager().clearListeners();\n    this.getLayerManager().clearAllLayers();\n    this.getDialogueStorageManager().clearDialogueStorage();\n  }\n\n  /**\n   * Checks whether game is able to transition to the next checkpoint.\n   * Game is only able to transition to the next checkpoint\n   * if all of the objectives of the current checkpoint has been cleared.\n   *\n   * We also do not want to go Transition scene if players have just\n   * completed the chapter so that they can don't get kicked out of the\n   * chapter if they've already finished it before.\n   * This is unless they press replay, which sets their chapNewlyCompleted back to false.\n   *\n   * Additionally, game will only transition if the newPhase is not Sequence phase;\n   * in order to ensure that we don't transition to the next checkpoint\n   * during dialogue/cutscene.\n   *\n   * This method is passed to the phase manager, as the interrupt checker.\n   *\n   * @param prevPhase previous phase to transition from\n   * @param newPhase new phase to transition to\n   */\n  public transitionChecker(prevPhase: GamePhaseType, newPhase: GamePhaseType) {\n    return (\n      !this.hasTransitioned &&\n      newPhase !== GamePhaseType.Sequence &&\n      GameGlobalAPI.getInstance().areAllObjectivesComplete() &&\n      !this.getStateManager().getChapterNewlyCompleted()\n    );\n  }\n\n  /**\n   * Transition to the next checkpoint and resets the input setting.\n   *\n   * This method is passed to the phase manager\n   * as the interrupt transition callback.\n   */\n  public async checkpointTransition() {\n    this.hasTransitioned = true;\n\n    await this.getActionManager().processGameActions(\n      this.getStateManager().getGameMap().getCheckpointCompleteActions()\n    );\n\n    // Reset input and cursor, in case it is changed after story complete actions\n    this.getInputManager().setDefaultCursor(Constants.defaultCursor);\n    this.getInputManager().enableMouseInput(true);\n    this.getInputManager().enableKeyboardInput(true);\n\n    this.tweens.add(fadeIn([blackScreen(this).setAlpha(0)], Constants.fadeDuration));\n    await sleep(Constants.fadeDuration);\n\n    // Clean up all layers & current storage\n    this.cleanUp();\n\n    // Start the next Checkpoint\n    this.scene.start('CheckpointTransition');\n  }\n\n  /**\n   * Handle when character layer should be shown and hidden.\n   * Character layer should only be shown when student is at\n   * Menu Mode.\n   *\n   * This method is passed to the phase manager, to be executed on\n   * every phase transition.\n   *\n   * @param prevPhase previous phase to transition from\n   * @param newPhase new phase to transition to\n   */\n  public async handleCharacterLayer(prevPhase: GamePhaseType, newPhase: GamePhaseType) {\n    if (prevPhase === GamePhaseType.Menu) {\n      GameGlobalAPI.getInstance().fadeOutLayer(Layer.Character);\n    }\n\n    if (newPhase === GamePhaseType.Menu) {\n      GameGlobalAPI.getInstance().fadeInLayer(Layer.Character);\n    }\n  }\n\n  public getSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n  public getStateManager = () => mandatory(this.stateManager);\n  public getObjectManager = () => mandatory(this.objectManager);\n  public getDialogueManager = () => mandatory(this.dialogueManager);\n  public getCharacterManager = () => mandatory(this.characterManager);\n  public getBBoxManager = () => mandatory(this.boundingBoxManager);\n  public getActionManager = () => mandatory(this.actionManager);\n  public getInputManager = () => mandatory(this.inputManager);\n  public getLayerManager = () => mandatory(this.layerManager);\n  public getPhaseManager = () => mandatory(this.phaseManager);\n  public getBackgroundManager = () => mandatory(this.backgroundManager);\n  public getAnimationManager = () => mandatory(this.animationManager);\n  public getPopupManager = () => mandatory(this.popUpManager);\n  public getEscapeManager = () => mandatory(this.escapeManager);\n  public getCollectibleManager = () => mandatory(this.collectibleManager);\n  public getAchievementManager = () => mandatory(this.achievementManager);\n  public getLogManager = () => mandatory(this.logManager);\n  public getDialogueStorageManager = () => mandatory(this.dialogueStorageManager);\n  public getToolbarManager = () => mandatory(this.toolbarManager);\n  public getTaskLogManager = () => mandatory(this.taskLogManager);\n  public getDashboardManager = () => mandatory(this.dashboardManager);\n}\n\nexport default GameManager;\n","import GameModeExplore from '../../mode/explore/GameModeExplore';\nimport GameModeMenu from '../../mode/menu/GameModeMenu';\nimport GameModeMove from '../../mode/move/GameModeMove';\nimport GameModeSequence from '../../mode/sequence/GameModeSequence';\nimport GameModeTalk from '../../mode/talk/GameModeTalk';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\n\n/**\n * Game Manager phases, for the phase manager.\n */\nexport const createGamePhases = () => {\n  return new Map([\n    [GamePhaseType.Menu, new GameModeMenu()],\n    [GamePhaseType.Move, new GameModeMove()],\n    [GamePhaseType.Explore, new GameModeExplore()],\n    [GamePhaseType.Talk, new GameModeTalk()],\n    [GamePhaseType.Sequence, new GameModeSequence()],\n    [GamePhaseType.None, new GameModeSequence()]\n  ]);\n};\n","import GameManager from '../scenes/gameManager/GameManager';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { mandatory } from '../utils/GameUtils';\nimport { createEmptyGameSaveState, createEmptySaveState, gameStateToJson } from './GameSaveHelper';\nimport { loadData, saveData } from './GameSaveRequests';\nimport { FullSaveState, GameSaveState, SettingsJson } from './GameSaveTypes';\n\n/**\n * The manager provides API for loading and saving data from the backend\n * and is in charge of keeping record of the last save point, so that\n * players can make new save data based on the last one.\n */\nexport default class GameSaveManager {\n  private fullSaveState: FullSaveState;\n\n  private chapterNum?: number;\n  private checkpointNum?: number;\n\n  constructor() {\n    this.fullSaveState = createEmptySaveState();\n  }\n\n  /**\n   * Fetches the FullSaveState of the student at the start of the game\n   * and stores this internally as full save state\n   */\n  public async loadLastSaveState() {\n    this.fullSaveState = await loadData();\n  }\n\n  /**\n   * Updates the save manager with chapter number and checkpoint number\n   * if player has chosen a chapter/checkpoint to play with.\n   *\n   * Chapter number and checkpoint number can be -1 if inside the Game Simulator,\n   *\n   * @param chapterNum chapter number\n   * @param checkpointNum checkpoint number\n   * @param continueGame whether user wants to continue or restart the chapter.\n   */\n  public registerGameInfo(chapterNum: number, checkpointNum: number, continueGame: boolean) {\n    this.chapterNum = chapterNum;\n    this.checkpointNum = checkpointNum;\n    if (!continueGame) {\n      this.fullSaveState.gameSaveStates[chapterNum] = createEmptyGameSaveState();\n    }\n  }\n\n  ///////////////////////////////\n  //          Saving          //\n  ///////////////////////////////\n\n  /**\n   * Save the current game state as a JSON 'snapshot' to the backend.\n   * Can only be called inside the GameManager scene because this function retrieves\n   * informtion from GameManager, GameStateManager, or other in-game managers,\n   * and converts them into JSON format to be saved to backend.\n   *\n   * Only called when playing the Game (not Game Simulator), because Game Simulator\n   * shouldn't save game state to backend.\n   */\n  public async saveGame() {\n    if (SourceAcademyGame.getInstance().getCurrentSceneRef() instanceof GameManager) {\n      this.fullSaveState = gameStateToJson(\n        this.fullSaveState,\n        this.getChapterNum(),\n        this.getCheckpointNum()\n      );\n      await saveData(this.fullSaveState);\n    }\n  }\n\n  /**\n   * This function is called during CheckpointTransition to update\n   * and save that largest chapter that the player has completed\n   * so far.\n   *\n   * @param completedChapter the number of the completed chapter\n   */\n  public async saveChapterComplete(completedChapter: number) {\n    this.fullSaveState.gameSaveStates[completedChapter].chapterNewlyCompleted = true;\n    if (completedChapter > this.getLargestCompletedChapterNum()) {\n      this.fullSaveState.userSaveState.largestCompletedChapter = completedChapter;\n    }\n    await saveData(this.fullSaveState);\n  }\n\n  /**\n   * This function is called by the Escape Manager and Settings scene\n   * to store new user settings to the backend\n   *\n   * @param settingsJson the newest settings of the user\n   */\n  public async saveSettings(settingsJson: SettingsJson) {\n    this.fullSaveState.userSaveState.settings = settingsJson;\n    await saveData(this.fullSaveState);\n  }\n\n  ///////////////////////////////\n  //         Getters           //\n  ///////////////////////////////\n\n  /**\n   * Obtains user settings from full save state\n   *\n   * @returns User settings\n   */\n  public getSettings(): SettingsJson {\n    return this.fullSaveState.userSaveState.settings;\n  }\n\n  /**\n   * Obtains user state from full save state\n   */\n  public getLoadedUserState() {\n    return this.fullSaveState.userSaveState;\n  }\n\n  /**\n   * Obtains the largest completed chapter number by the player\n   */\n  public getLargestCompletedChapterNum(): number {\n    return this.fullSaveState.userSaveState.largestCompletedChapter;\n  }\n\n  /**\n   * Gets user's gamestate for this chapter\n   */\n  public getGameSaveState(): GameSaveState {\n    return this.fullSaveState.gameSaveStates[this.getChapterNum()] || createEmptyGameSaveState();\n  }\n\n  /**\n   * Gets user's location for this chapter if chapter has been created\n   */\n  public getLoadedLocation() {\n    return this.getGameSaveState().currentLocation;\n  }\n  /**\n   * Returns the save state for a particular chapter, if no data, then create an empty save state\n   */\n  public getChapterSaveState(index: number) {\n    return this.fullSaveState.gameSaveStates[index] || createEmptyGameSaveState();\n  }\n\n  public getTriggeredStateChangeActions = () => this.getGameSaveState().triggeredStateChangeActions;\n  public getTriggeredInteractions = () => this.getGameSaveState().triggeredInteractions;\n  public getCompletedObjectives = () => this.getGameSaveState().completedObjectives;\n  public getCompletedTasks = () => this.getGameSaveState().completedTasks;\n  public getIncompleteTasks = () => this.getGameSaveState().incompleteTasks;\n  public getLoadedPhase = () => this.getGameSaveState().currentPhase;\n  public getChapterNewlyCompleted = () => this.getGameSaveState().chapterNewlyCompleted;\n\n  public getChapterNum = () => mandatory(this.chapterNum);\n  public getCheckpointNum = () => mandatory(this.checkpointNum);\n  public getFullSaveState = () => this.fullSaveState;\n}\n","import _ from 'lodash';\nimport Constants from 'src/commons/utils/Constants';\n\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { courseId } from '../utils/GameUtils';\nimport { createEmptySaveState } from './GameSaveHelper';\nimport { FullSaveState } from './GameSaveTypes';\n\n/**\n * This function saves data to the backend under user's game state.\n *\n * @param fullSaveState - the entire game data that needs to be saved, including game state and userstate\n */\nexport async function saveData(fullSaveState: FullSaveState) {\n  if (SourceAcademyGame.getInstance().getAccountInfo().role !== 'student') {\n    return;\n  }\n\n  const options = {\n    method: 'PUT',\n    headers: createHeaders(SourceAcademyGame.getInstance().getAccountInfo().accessToken),\n    body: JSON.stringify({\n      gameStates: fullSaveState\n    })\n  };\n\n  const resp = await fetch(\n    `${Constants.backendUrl}/v2/courses/${courseId()}/user/game_states`,\n    options\n  );\n\n  if (resp && resp.ok) {\n    return resp;\n  }\n  return;\n}\n\n/**\n * This function fetches data from the backend.\n */\nexport async function loadData(): Promise<FullSaveState> {\n  const options = {\n    method: 'GET',\n    headers: createHeaders(SourceAcademyGame.getInstance().getAccountInfo().accessToken)\n  };\n\n  const resp = await fetch(`${Constants.backendUrl}/v2/user`, options);\n  const message = await resp.text();\n\n  const json = JSON.parse(message).courseRegistration?.gameStates;\n  return _.isEmpty(json) ? createEmptySaveState() : json;\n}\n\n/**\n * Format a header object.\n *\n * @param accessToken access token to be used\n */\nfunction createHeaders(accessToken: string): Headers {\n  const headers = new Headers();\n  headers.append('Accept', 'application/json');\n  headers.append('Authorization', `Bearer ${accessToken}`);\n  headers.append('Content-Type', 'application/json');\n  return headers;\n}\n","import FontAssets from '../assets/FontAssets';\nimport { BitmapFontStyle, ILayeredScene, TextConfig } from '../commons/CommonTypes';\nimport { createBitmapText } from '../utils/TextUtils';\n\nconst defaultGlitchStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\n/**\n * Create a bitmap text that glitches.\n *\n * Internally, we make use of multiple bitmap texts and apply\n * random small displacement to the individual bitmap texts.\n *\n * Returns an array of the individual bitmap texts.\n *\n * @param scene scene to attach it to\n * @param text text to show on the screen\n * @param baseTextConfig text config to be applied as the base to the text.\n *                       All random displacement is relative to this config\n * @param style style of the bitmap text\n * @param numOfFrames number of bitmap text to be created. The larger it is,\n *                    the more glitchy it becomes; but the more expensive is the effect\n * @param maxXDisplacement maximum horizontal displacement to be applied to the text\n * @param maxYDisplacement maximum vertical displacement to be applied to the text\n */\nexport function createGlitchBitmapText(\n  scene: ILayeredScene,\n  text: string,\n  baseTextConfig: TextConfig = { x: 0, y: 0, oriX: 0.5, oriY: 0.5 },\n  style: BitmapFontStyle = defaultGlitchStyle,\n  numOfFrames: number = 4,\n  maxXDisplacement: number = 5,\n  maxYDisplacement: number = 3\n) {\n  const textFrames = [];\n  for (let i = 0; i < numOfFrames; i++) {\n    const textConfig = {\n      x: baseTextConfig.x + maxXDisplacement * Math.random(),\n      y: baseTextConfig.y + maxYDisplacement * Math.random(),\n      oriX: baseTextConfig.oriX,\n      oriY: baseTextConfig.oriY\n    };\n    const bitmapText = createBitmapText(scene, text, textConfig, style);\n    bitmapText.setAlpha(0.4).setBlendMode(Phaser.BlendModes.SCREEN);\n    textFrames.push(bitmapText);\n  }\n\n  textFrames.forEach(bitmapText => {\n    scene.tweens.add({\n      targets: bitmapText,\n      x: bitmapText.x + maxXDisplacement * Math.random(),\n      y: bitmapText.y + maxYDisplacement * Math.random(),\n      alpha: 0.5,\n      duration: 20,\n      yoyo: true,\n      loop: -1,\n      loopDelay: 1000 * Math.random()\n    });\n  });\n\n  return textFrames;\n}\n","import SoundAssets from '../assets/SoundAssets';\nimport { Constants, screenCenter } from '../commons/CommonConstants';\nimport { ILayeredScene } from '../commons/CommonTypes';\nimport { Layer } from '../layer/GameLayerTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { sleep } from '../utils/GameUtils';\nimport { calcListFormatPos } from '../utils/StyleUtils';\nimport { blackScreen, fadeAndDestroy, fadeIn } from './FadeEffect';\nimport { createGlitchBitmapText } from './Glitch';\n\nconst workerALines = [\n  'Clang. Thud. One hit to the wall, one hit to my flesh.',\n  '',\n  'They told me I was to be the pillar of this',\n  'spaceship - who knew they meant it literally?',\n  '- A. Halim'\n];\n\nconst workerTLines = [\n  'I blink synchronously with the screen;',\n  'I breathe as the machine steams on and off.',\n  '',\n  'Behind this closed space, my very blood fuels',\n  'these engines - hoping for you to find me.',\n  '- T. S. Chong'\n];\n\nconst WorkerConstants = {\n  yInterval: 80,\n  messageDuration: 5000\n};\n\n/**\n * Create a hidden interactive box that shows\n * the worker message when interacted with.\n *\n * Also adds it to the scene.\n *\n * @param scene scene for the box to be attached to\n * @param workerId either string 'A' or any other letter, represent which message to show\n * @param x top left hand corner of the hidden box\n * @param y top left hand corner of the hidden box\n * @param width width ot the box\n * @param height height of the box\n */\nexport function putWorkerMessage(\n  scene: ILayeredScene,\n  workerId: string,\n  x: number,\n  y: number,\n  width: number = 50,\n  height: number = 50\n) {\n  const rect = new Phaser.GameObjects.Rectangle(scene, x, y, width, height, 0, 0);\n  const lines = workerId === 'A' ? workerALines : workerTLines;\n\n  rect.setInteractive({ useHandCursor: true });\n  rect.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, () => showLines(scene, lines));\n\n  scene.getLayerManager().addToLayer(Layer.UI, rect);\n}\n\n/**\n * Takes array of strings, and format them line by line on the screen.\n * Automatically fade in with a black screen, add glitch effect\n * to the text, followed by fade and destroy of all the objects created.\n *\n * @param scene scene to be attached to\n * @param lines lines to show on the screen, glitched\n */\nasync function showLines(scene: ILayeredScene, lines: string[]) {\n  // Set interactive to block mouse inputs on the screen\n  const blackOverlay = blackScreen(scene).setInteractive().setAlpha(0);\n\n  const linesPos = calcListFormatPos({\n    numOfItems: lines.length,\n    xSpacing: 0,\n    ySpacing: WorkerConstants.yInterval\n  });\n\n  // Each line has different Y position\n  const textConfig = { x: screenCenter.x, y: 0, oriX: 0.5, oriY: 0.5 };\n  const yStartPos = screenCenter.y - lines.length * WorkerConstants.yInterval * 0.5;\n\n  scene.getLayerManager().addToLayer(Layer.WorkerMessage, blackOverlay);\n  scene.add.tween(fadeIn([blackOverlay], Constants.fadeDuration));\n\n  // Play SFX\n  SourceAcademyGame.getInstance().getSoundManager().playSound(SoundAssets.radioStatic.key);\n\n  await sleep(Constants.fadeDuration);\n\n  // Create and add the texts, line by line\n  lines.forEach((line, index) => {\n    const textFrames = createGlitchBitmapText(scene, line, {\n      ...textConfig,\n      y: linesPos[index][1] + yStartPos\n    });\n    textFrames.forEach(frame => scene.getLayerManager().addToLayer(Layer.WorkerMessage, frame));\n    setTimeout(() => textFrames.forEach(frame => frame.destroy()), WorkerConstants.messageDuration);\n  });\n\n  await sleep(WorkerConstants.messageDuration);\n\n  fadeAndDestroy(scene, blackOverlay);\n}\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\nimport { Color } from '../../utils/StyleUtils';\n\nexport const AwardsHallConstants = {\n  scrollSpeed: 20,\n  tileDim: 2048,\n  maxAwardsPerCol: 2,\n  arrow: { xOffset: 875 },\n  award: { xSpace: 300, yStart: 300, ySpace: screenCenter.y - 50, dim: 200 },\n  awardInfo: { width: 300 },\n  banner: { xOffset: -screenSize.x * 0.28 },\n  bannerTextConfig: { x: 30, y: 0, oriX: 0.0, oriY: 0.5 }\n};\n\nexport const awardBannerTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienLeagueFont.key,\n  size: 35,\n  align: Phaser.GameObjects.BitmapText.ALIGN_LEFT\n};\n\nexport const awardNoAssetTitleStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '30px',\n  fill: Color.lightBlue,\n  align: 'center',\n  wordWrap: { width: AwardsHallConstants.award.dim - 20 }\n};\n\nexport const awardHoverTitleStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '20px',\n  fill: Color.lightBlue,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.awardInfo.width - 20 }\n};\n\nexport const awardHoverKeyStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '15px',\n  fill: Color.offWhite,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.awardInfo.width - 20 }\n};\n\nexport const awardHoverDescStyle = {\n  fontFamily: 'Verdana',\n  fontSize: '15px',\n  fill: Color.lightBlue,\n  align: 'left',\n  wordWrap: { width: AwardsHallConstants.awardInfo.width - 20 }\n};\n","import ImageAssets from '../../assets/ImageAssets';\nimport { getAwardProps } from '../../awards/GameAwardsHelper';\nimport { AwardProperty } from '../../awards/GameAwardsTypes';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { Constants, screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport { putWorkerMessage } from '../../effects/WorkerMessage';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { limitNumber, mandatory } from '../../utils/GameUtils';\nimport { resizeUnderflow } from '../../utils/SpriteUtils';\nimport { calcTableFormatPos, Direction, HexColor } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport {\n  awardBannerTextStyle,\n  awardNoAssetTitleStyle,\n  AwardsHallConstants\n} from './AwardsHallConstants';\nimport { createAwardsHoverContainer } from './AwardsHallHelper';\n\n/**\n * This scenes display all students awards (collectibles and achievements).\n */\nclass AwardsHall extends Phaser.Scene {\n  public layerManager?: GameLayerManager;\n  public inputManager?: GameInputManager;\n\n  private backgroundTile: Phaser.GameObjects.TileSprite | undefined;\n  private awardsContainer: Phaser.GameObjects.Container | undefined;\n\n  private isScrollLeft: boolean;\n  private isScrollRight: boolean;\n  private scrollLim: number;\n  private awardXSpace: number;\n\n  constructor() {\n    super('AwardsHall');\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n\n    this.isScrollLeft = false;\n    this.isScrollRight = false;\n    this.scrollLim = 0;\n    this.awardXSpace = 0;\n  }\n\n  public init() {\n    this.layerManager = new GameLayerManager(this);\n    this.inputManager = new GameInputManager(this);\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n  }\n\n  public async create() {\n    // Calculate the maximum horizontal space required based\n    // on maximum number of achievement/collectible\n    const achievementLength = this.getUserStateManager().getAchievements().length;\n    const collectibleLength = this.getUserStateManager().getCollectibles().length;\n    this.awardXSpace =\n      Math.ceil(\n        Math.max(achievementLength, collectibleLength) / AwardsHallConstants.maxAwardsPerCol\n      ) * AwardsHallConstants.award.xSpace;\n\n    // Scroll limit is anything that exceed the screen size\n    this.scrollLim = this.awardXSpace < screenSize.x ? 0 : this.awardXSpace - screenSize.x;\n    this.renderBackground();\n    this.renderAwards();\n\n    putWorkerMessage(this, 'A', screenSize.x * 0.95, screenSize.y * 0.99);\n  }\n\n  public update() {\n    if (!this.backgroundTile || !this.awardsContainer) return;\n\n    // Scroll the awards hall if button is currently clicked/held down\n    let newXPos = this.awardsContainer.x;\n    if (this.isScrollRight) {\n      newXPos -= AwardsHallConstants.scrollSpeed;\n    } else if (this.isScrollLeft) {\n      newXPos += AwardsHallConstants.scrollSpeed;\n    }\n    newXPos = limitNumber(newXPos, -this.scrollLim, 0);\n\n    // To achieve seamless background, we need to scroll on .tilePosition for background\n    this.backgroundTile.tilePositionX = -newXPos;\n    this.awardsContainer.x = newXPos;\n  }\n\n  /**\n   * Render background of this scene, as well as its\n   * UI elements (arrows, backbutton, as well as the 'Collectible' and 'Achievement' banner).\n   */\n  private renderBackground() {\n    if (this.backgroundTile) this.backgroundTile.destroy();\n\n    this.backgroundTile = new Phaser.GameObjects.TileSprite(\n      this,\n      0,\n      0,\n      AwardsHallConstants.tileDim,\n      AwardsHallConstants.tileDim,\n      ImageAssets.awardsBackground.key\n    ).setOrigin(0, 0.25);\n    this.getLayerManager().addToLayer(Layer.Background, this.backgroundTile);\n\n    // Add banners\n    const banners = ['Achievements', 'Collectibles'];\n    const bannerPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: banners.length\n    });\n    banners.forEach((banner, index) => {\n      const bannerCont = this.createBanner(banner, bannerPos[index][1]);\n      this.getLayerManager().addToLayer(Layer.UI, bannerCont);\n    });\n\n    const leftArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollLeft = true),\n      onUp: () => (this.isScrollLeft = false),\n      onOut: () => (this.isScrollLeft = false)\n    }).setPosition(screenCenter.x - AwardsHallConstants.arrow.xOffset, screenCenter.y);\n\n    const rightArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onDown: () => (this.isScrollRight = true),\n      onUp: () => (this.isScrollRight = false),\n      onOut: () => (this.isScrollRight = false)\n    })\n      .setPosition(screenCenter.x + AwardsHallConstants.arrow.xOffset, screenCenter.y)\n      .setScale(-1, 1);\n\n    const backButton = new CommonBackButton(this, () => {\n      this.cleanUp();\n      this.scene.start('MainMenu');\n    });\n\n    this.getLayerManager().addToLayer(Layer.UI, leftArrow);\n    this.getLayerManager().addToLayer(Layer.UI, rightArrow);\n    this.getLayerManager().addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Render all the awards that student has.\n   */\n  private renderAwards() {\n    if (this.awardsContainer) this.awardsContainer.destroy();\n\n    this.awardsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n\n    // Achievement\n    const achievements = this.getAwards(this.getUserStateManager().getAchievements());\n    const achievementsPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: achievements.length,\n      numItemLimit: AwardsHallConstants.maxAwardsPerCol,\n      redistributeLast: false,\n      maxXSpace: this.awardXSpace,\n      maxYSpace: AwardsHallConstants.award.ySpace\n    });\n\n    // Achievement is positioned on the upper half of the screen\n    this.awardsContainer.add(\n      achievements.map((achievement, index) =>\n        this.createAward(\n          achievement,\n          achievementsPos[index][0],\n          achievementsPos[index][1] + AwardsHallConstants.award.yStart - screenCenter.y\n        )\n      )\n    );\n\n    // Collectible\n    const collectibles = this.getAwards(this.getUserStateManager().getCollectibles());\n    const collectiblesPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: collectibles.length,\n      numItemLimit: AwardsHallConstants.maxAwardsPerCol,\n      redistributeLast: false,\n      maxXSpace: this.awardXSpace,\n      maxYSpace: AwardsHallConstants.award.ySpace\n    });\n\n    // Collectible is positioned on the lower half of the screen\n    this.awardsContainer.add(\n      collectibles.map((collectible, index) =>\n        this.createAward(\n          collectible,\n          collectiblesPos[index][0],\n          collectiblesPos[index][1] + AwardsHallConstants.award.yStart\n        )\n      )\n    );\n\n    this.getLayerManager().addToLayer(Layer.Objects, this.awardsContainer);\n  }\n\n  /**\n   * Fetch awardProps based on the type string[]\n   * @param keys\n   */\n  private getAwards(keys: string[]) {\n    const awardProps = getAwardProps(keys);\n    return awardProps;\n  }\n\n  /**\n   * Format the given award; giving it a pop up hover of its\n   * description, resize it to the correct size, and position it\n   * based on the given xPos and yPos.\n   *\n   * @param award awardProperty to be used\n   * @param xPos x position of the award\n   * @param yPos y position of the award\n   */\n  private createAward(award: AwardProperty, xPos: number, yPos: number) {\n    const awardCont = new Phaser.GameObjects.Container(this, xPos, yPos);\n\n    let image;\n    if (award.assetKey === Constants.nullInteractionId) {\n      // No asset is associated with the award\n      image = new Phaser.GameObjects.Rectangle(\n        this,\n        0,\n        0,\n        AwardsHallConstants.award.dim,\n        AwardsHallConstants.award.dim,\n        HexColor.darkBlue,\n        0.8\n      );\n      image.setInteractive();\n\n      const text = new Phaser.GameObjects.Text(\n        this,\n        0,\n        0,\n        award.title,\n        awardNoAssetTitleStyle\n      ).setOrigin(0.5, 0.5);\n      awardCont.add([image, text]);\n    } else {\n      image = new Phaser.GameObjects.Sprite(this, 0, 0, award.assetKey).setOrigin(0.5);\n      resizeUnderflow(image, AwardsHallConstants.award.dim, AwardsHallConstants.award.dim);\n      image.setInteractive({ pixelPerfect: true, useHandCursor: true });\n\n      awardCont.add(image);\n    }\n\n    // Add black tint if award is not completed\n    const blackTint = new Phaser.GameObjects.Rectangle(\n      this,\n      0,\n      0,\n      AwardsHallConstants.award.dim,\n      AwardsHallConstants.award.dim,\n      0\n    ).setAlpha(award.completed ? 0 : 0.8);\n    awardCont.add(blackTint);\n\n    // Set up the pop up\n    const hoverCont = createAwardsHoverContainer(this, award);\n    image.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () =>\n      hoverCont.setVisible(true)\n    );\n    image.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () =>\n      hoverCont.setVisible(false)\n    );\n    image.addListener(\n      Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n      (pointer: Phaser.Input.Pointer) => {\n        hoverCont.x = pointer.x + 10;\n        hoverCont.y = pointer.y - 10;\n      }\n    );\n\n    this.getLayerManager().addToLayer(Layer.UI, hoverCont);\n    return awardCont;\n  }\n\n  /**\n   * Clean up of related managers\n   */\n  private cleanUp() {\n    this.getInputManager().clearListeners();\n    this.getLayerManager().clearAllLayers();\n  }\n\n  /**\n   * Format the given text with banner style.\n   *\n   * In-game, this is the achievement & collectible banner\n   * that is positioned on the left hand side.\n   *\n   * @param text text to be put on the banner\n   * @param yPos y position of the banner\n   */\n  private createBanner(text: string, yPos: number) {\n    const bannerContainer = new Phaser.GameObjects.Container(this, 0, yPos);\n    const bannerBg = new Phaser.GameObjects.Sprite(\n      this,\n      AwardsHallConstants.banner.xOffset,\n      0,\n      ImageAssets.awardsPage.key\n    );\n    const bannerText = createBitmapText(\n      this,\n      text,\n      AwardsHallConstants.bannerTextConfig,\n      awardBannerTextStyle\n    );\n    bannerContainer.add([bannerBg, bannerText]);\n    return bannerContainer;\n  }\n\n  public getUserStateManager = () => SourceAcademyGame.getInstance().getUserStateManager();\n  public getInputManager = () => mandatory(this.inputManager);\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default AwardsHall;\n","import ImageAssets from '../../assets/ImageAssets';\nimport { AwardProperty } from '../../awards/GameAwardsTypes';\nimport { HexColor } from '../../utils/StyleUtils';\nimport {\n  awardHoverDescStyle,\n  awardHoverKeyStyle,\n  awardHoverTitleStyle,\n  AwardsHallConstants\n} from './AwardsHallConstants';\n\n/**\n * Create a pop up text that appear when user hover over an award.\n * The hover container will display information based on the award property;\n * e.g. its title, its asset-key, as well as its description.\n *\n * @param scene scene for the hover to attach to\n * @param award awardProperty to be used\n * @returns {Phaser.GameObjects.Container}\n */\nexport const createAwardsHoverContainer = (scene: Phaser.Scene, award: AwardProperty) => {\n  const hoverContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  const awardTitle = new Phaser.GameObjects.Text(scene, 20, 20, award.title, awardHoverTitleStyle);\n  const awardAssetKey = new Phaser.GameObjects.Text(\n    scene,\n    20,\n    awardTitle.getBounds().bottom + 20,\n    award.assetKey,\n    awardHoverKeyStyle\n  );\n  const awardDesc = new Phaser.GameObjects.Text(\n    scene,\n    20,\n    awardAssetKey.getBounds().bottom + 20,\n    award.description,\n    awardHoverDescStyle\n  );\n\n  const hoverTextBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    AwardsHallConstants.awardInfo.width,\n    awardDesc.getBounds().bottom + 20,\n    HexColor.darkBlue\n  )\n    .setOrigin(0.0, 0.0)\n    .setAlpha(0.8);\n\n  const scrollFrameTop = new Phaser.GameObjects.Sprite(\n    scene,\n    AwardsHallConstants.awardInfo.width / 2,\n    0,\n    ImageAssets.scrollFrame.key\n  );\n  const scrollFrameBot = new Phaser.GameObjects.Sprite(\n    scene,\n    AwardsHallConstants.awardInfo.width / 2,\n    hoverTextBg.getBounds().bottom,\n    ImageAssets.scrollFrame.key\n  );\n\n  hoverContainer.add([hoverTextBg, awardTitle, awardDesc, scrollFrameTop, scrollFrameBot]);\n\n  // Only show asset key if award is completed\n  award.completed && hoverContainer.add(awardAssetKey);\n\n  hoverContainer.setVisible(false);\n  return hoverContainer;\n};\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const BindingConstants = {\n  keyTextConfig: { x: screenCenter.x - 100, y: 0, oriX: 0.5, oriY: 0.5 },\n  keyDescTextConfig: { x: screenCenter.x + 100, y: 0, oriX: 0.5, oriY: 0.5 },\n  key: {\n    xOffset: screenSize.x / 5,\n    yOffset1: screenCenter.y - screenSize.y / 4,\n    yOffset2: screenCenter.y - screenSize.y / 1.5,\n    yInterval: 150\n  },\n  icon: { x: screenCenter.x - 100 }\n};\n\nexport const keyStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const keyDescStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n","import ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport { mandatory } from '../../utils/GameUtils';\nimport { calcListFormatPos } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { BindingConstants, keyDescStyle, keyStyle } from './BindingsConstants';\n\n/**\n * Displays various bindings of the game.\n * Static scene.\n */\nclass Bindings extends Phaser.Scene {\n  public layerManager?: GameLayerManager;\n  public inputManager?: GameInputManager;\n\n  constructor() {\n    super('Bindings');\n  }\n\n  public init() {\n    this.layerManager = new GameLayerManager(this);\n    this.inputManager = new GameInputManager(this);\n  }\n\n  public create() {\n    this.renderBackground();\n    this.renderBindings();\n  }\n\n  /**\n   * Render the background of the scene\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.spaceshipBg.key\n    );\n    const blackOverlay = new Phaser.GameObjects.Rectangle(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      screenSize.x,\n      screenSize.y,\n      0\n    ).setAlpha(0.3);\n    this.getLayerManager().addToLayer(Layer.Background, background);\n    this.getLayerManager().addToLayer(Layer.Background, blackOverlay);\n  }\n\n  /**\n   * Render the various binding and add it to the scene.\n   */\n  private renderBindings() {\n    const bindingsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n\n    const bindings = this.getBindings();\n    const bindingPositions = calcListFormatPos({\n      numOfItems: bindings.length,\n      xSpacing: 0,\n      ySpacing: BindingConstants.key.yInterval\n    });\n\n    bindingsContainer.add(\n      bindings.map((binding, index) => {\n        return this.createBinding(\n          binding.key,\n          binding.text,\n          bindingPositions[index][1] < 450\n            ? bindingPositions[index][0] - BindingConstants.key.xOffset\n            : bindingPositions[index][0] + BindingConstants.key.xOffset,\n          bindingPositions[index][1] < 450\n            ? bindingPositions[index][1] + BindingConstants.key.yOffset1\n            : bindingPositions[index][1] + BindingConstants.key.yOffset2\n        );\n      })\n    );\n    const backButton = new CommonBackButton(this, () => {\n      this.getLayerManager().clearAllLayers();\n      this.scene.start('MainMenu');\n    });\n\n    this.getLayerManager().addToLayer(Layer.UI, bindingsContainer);\n    this.getLayerManager().addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Encapsulate information of the available bindings within the game.\n   */\n  private getBindings() {\n    return [\n      {\n        key: 'Esc',\n        text: 'Escape Menu'\n      },\n      {\n        key: 'Tab',\n        text: 'Dashboard'\n      },\n      {\n        key: 'Space',\n        text: 'Next dialogue'\n      },\n      {\n        key: 'E',\n        text: 'Explore mode'\n      },\n      {\n        key: 'V',\n        text: 'Move mode'\n      },\n      {\n        key: 'T',\n        text: 'Talk mode'\n      },\n      {\n        key: '<Number>',\n        text: '       Select topics/locations'\n      }\n    ];\n  }\n\n  /**\n   * Formats the binding information and add it to the scene.\n   *\n   * @param key name of the keyboard key associated with the description\n   * @param desc description to be shown next to the binding\n   * @param xPos x position of the container\n   * @param yPos y position of the container\n   * @returns {Phaser.GameObjects.Container}\n   */\n  private createBinding(key: string, desc: string, xPos: number, yPos: number) {\n    const bindingContainer = new Phaser.GameObjects.Container(this, xPos, yPos);\n\n    // Different keys may use different key icon\n    const keyIcon = new Phaser.GameObjects.Sprite(\n      this,\n      BindingConstants.icon.x,\n      0,\n      ImageAssets.squareKeyboardIcon.key\n    );\n    switch (key) {\n      case 'Tab':\n        keyIcon.setTexture(ImageAssets.medKeyboardIcon.key);\n        break;\n      default:\n        break;\n    }\n    switch (key) {\n      case 'Space':\n        keyIcon.setTexture(ImageAssets.medKeyboardIcon.key);\n        break;\n      default:\n        break;\n    }\n    switch (key) {\n      case '<Number>':\n        keyIcon.setTexture(ImageAssets.medKeyboardIcon.key);\n        break;\n      default:\n        break;\n    }\n\n    const keyText = createBitmapText(this, key, BindingConstants.keyTextConfig, keyStyle);\n    const keyDesc = createBitmapText(this, desc, BindingConstants.keyDescTextConfig, keyDescStyle);\n\n    bindingContainer.add([keyIcon, keyText, keyDesc]);\n    return bindingContainer;\n  }\n  public getInputManager = () => mandatory(this.inputManager);\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default Bindings;\n","import { AssetKey, AssetPath } from 'src/features/game/commons/CommonTypes';\n\n/**\n * The functions below loads assets, and and only resolves\n * once the assets are loaded.\n * If the assets have already been loaded previously,\n * then the promise is resolved instantly.\n *\n * To use these functions, call the line \"await loadImage(...)\"\n * inside an async function\n */\n\n/**\n * Waits for an image (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when image is loaded.\n */\nexport const loadImage = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.textures.get(assetKey).key !== '__MISSING') {\n      resolve(assetKey);\n    } else {\n      scene.load.image(assetKey, assetPath);\n      scene.load.once(`filecomplete-image-${assetKey}`, resolve);\n      scene.load.once(`loaderror`, resolve);\n      scene.load.start();\n    }\n  });\n\n/**\n * Waits for a text (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when text is loaded.\n */\nexport const loadText = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.cache.text.exists(assetKey)) {\n      resolve(assetKey);\n    } else {\n      scene.load.text(assetKey, assetPath);\n      scene.load.once(`filecomplete-text-${assetKey}`, resolve);\n      scene.load.start();\n    }\n  });\n\n/**\n * Waits for a sound (with assetkey, assetpath) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @returns {Promise} promise that resolves when sound is loaded.\n */\nexport const loadSound = (scene: Phaser.Scene, assetKey: AssetKey, assetPath: AssetPath) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.sound.get(assetKey) !== null) {\n      resolve(assetKey);\n    } else {\n      scene.load.audio(assetKey, assetPath).on('filecomplete', resolve);\n      scene.load.start();\n    }\n  });\n\n/**\n * Waits for an spritesheet (with assetkey, assetpath, and config) to load in scene\n *\n * @param scene scene where to load this asset\n * @param assetKey the key to be used\n * @param assetPath the path to the file\n * @param config spritesheet config\n * @returns {Promise} promise that resolves when spritesheet is loaded.\n */\nexport const loadSpritesheet = (\n  scene: Phaser.Scene,\n  assetKey: AssetKey,\n  assetPath: AssetPath,\n  config: any\n) =>\n  new Promise<AssetKey>(resolve => {\n    if (scene.textures.get(assetKey).key !== '__MISSING') {\n      resolve(assetKey);\n    } else {\n      scene.load.spritesheet(assetKey, assetPath, config);\n      scene.load.once(`filecomplete-spritesheet-${assetKey}`, resolve);\n      scene.load.once(`loaderror`, resolve);\n      scene.load.start();\n    }\n  });\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const chapterIndexStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const chapterTitleStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const pageNumberStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 25,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\n// These are the original chapter preview image and frame dimensions\nconst originalImageRectWidth = 500;\nconst originalImageRectHeight = 700;\n// Use these to change the size of each chapter's image and frame\nconst imageScaleX = 0.8;\nconst imageScaleY = 0.4;\n\nconst chapPerRow = 3;\nconst chapPerCol = 3;\n\nconst chapConstants = {\n  arrow: { xOffset: 875 },\n  buttons: { scale: 0.65 },\n  resetButton: { xOffset: 135, yOffset: 85 },\n  playButton: { xOffset: 55, yOffset: 85 },\n  frame: { xOffset: 15 * imageScaleX, yOffset: -10 * imageScaleY },\n  scrollSpeed: 100,\n  indexTextConfig: { x: 0, y: -110, oriX: 0.5, oriY: 0.5 },\n  titleTextConfig: { x: 0, y: -50, oriX: 0.5, oriY: 0.5 },\n  pageNumberTextConfig: { x: screenCenter.x, y: screenSize.y - 30, oriX: 0.5, oriY: 0.5 },\n  imageRect: {\n    width: originalImageRectWidth * imageScaleX,\n    height: originalImageRectHeight * imageScaleY\n  },\n  imageScale: {\n    x: imageScaleX,\n    y: imageScaleY\n  },\n  chapComplete: {\n    y: 10,\n    height: 30,\n    text: 'Chapter Completed'\n  },\n  grid: {\n    chapPerRow,\n    chapPerCol,\n    chapPerPage: chapPerRow * chapPerCol,\n    chapGapX: 50,\n    chapGapY: 50\n  }\n};\n\nexport default chapConstants;\n","import { toS3Path } from '../utils/GameUtils';\n\nexport const toTxtPath = (path: string) => toS3Path(`/stories/${path}`, true);\n\nconst TextAssets = {\n  defaultCheckpoint: { key: 'default-chap', path: toTxtPath('defaultCheckpoint.txt') },\n  awardsMapping: { key: 'awards-mapping', path: toTxtPath('awardsMapping.txt') },\n  roomPreviewMapping: { key: 'room-prev-mapping', path: toTxtPath('roomPreviewMapping.txt') }\n};\n\nexport const MockTextAssets = {\n  defaultCheckpoint: { key: 'mock-default-chap', path: '../../assets/mockDefaultCheckpoint.txt' },\n  awardsMapping: { key: 'mock-awards-mapping', path: '../../assets/mockAwardsMapping.txt' },\n  roomPreviewMapping: {\n    key: 'mock-room-prev-mapping',\n    path: '../../assets/mockRoomPreviewMapping.txt'\n  }\n};\n\nexport default TextAssets;\n","import { GameAction } from '../action/GameActionTypes';\nimport { ImageAsset, SoundAsset } from '../assets/AssetsTypes';\nimport { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { Character } from '../character/GameCharacterTypes';\nimport { AssetKey, ItemId } from '../commons/CommonTypes';\nimport { Dialogue } from '../dialogue/GameDialogueTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport { mandatory } from '../utils/GameUtils';\nimport { AnyId, GameItemType, GameLocation, LocationId } from './GameMapTypes';\n\n/**\n * Game map is the class that encapsulates data about\n * all the locations and items in the map in a checkpoint\n *\n * Mainly used by game checkpoint.\n *\n * All possible assets should be stored within the soundAssets\n * and mapAssets; while mapping from ItemId to other properties\n * are stored separately.\n *\n * Lastly, the GameLocation should only refer to the ItemIDs,\n * and not the actual property.\n *\n * GameManager, along other managers, will process this class\n * as when as its needed.\n */\nclass GameMap {\n  private soundAssets: SoundAsset[];\n  private mapAssets: Map<AssetKey, ImageAsset>;\n  private locations: Map<LocationId, GameLocation>;\n  private dialogues: Map<ItemId, Dialogue>;\n  private objects: Map<ItemId, ObjectProperty>;\n  private boundingBoxes: Map<ItemId, BBoxProperty>;\n  private characters: Map<ItemId, Character>;\n  private actions: Map<ItemId, GameAction>;\n  private gameStartActions: ItemId[];\n  private checkpointCompleteActions: ItemId[];\n\n  constructor() {\n    this.soundAssets = [];\n    this.mapAssets = new Map<AssetKey, ImageAsset>();\n\n    this.locations = new Map<LocationId, GameLocation>();\n    this.dialogues = new Map<ItemId, Dialogue>();\n    this.objects = new Map<ItemId, ObjectProperty>();\n    this.boundingBoxes = new Map<ItemId, BBoxProperty>();\n    this.characters = new Map<ItemId, Character>();\n    this.actions = new Map<ItemId, GameAction>();\n\n    this.gameStartActions = [];\n    this.checkpointCompleteActions = [];\n  }\n\n  public addSoundAsset(soundAsset: SoundAsset) {\n    this.soundAssets.push(soundAsset);\n  }\n\n  public addMapAsset(assetKey: AssetKey, imageAsset: ImageAsset) {\n    this.mapAssets.set(assetKey, imageAsset);\n  }\n\n  public getMapAssets(): Map<AssetKey, ImageAsset> {\n    return this.mapAssets;\n  }\n\n  public addLocation(locationId: LocationId, location: GameLocation): void {\n    this.locations.set(locationId, location);\n  }\n\n  public setModesAt(id: LocationId, modes: GameMode[]) {\n    this.getLocationAtId(id).modes = new Set(modes);\n  }\n\n  public setNavigationFrom(id: LocationId, navigation: string[]) {\n    this.getLocationAtId(id).navigation = new Set(navigation);\n  }\n\n  public getNavigationFrom(id: LocationId): Set<string> | undefined {\n    return this.getLocationAtId(id).navigation;\n  }\n\n  public setGameStartActions(actionIds: ItemId[]) {\n    this.gameStartActions = actionIds;\n  }\n\n  public setCheckpointCompleteActions(actionIds: ItemId[]) {\n    this.checkpointCompleteActions = actionIds;\n  }\n\n  public getGameStartActions() {\n    return this.gameStartActions;\n  }\n\n  public getCheckpointCompleteActions() {\n    return this.checkpointCompleteActions;\n  }\n\n  public getLocations(): Map<LocationId, GameLocation> {\n    return this.locations;\n  }\n\n  public getObjectPropMap(): Map<ItemId, ObjectProperty> {\n    return this.objects;\n  }\n\n  public getBBoxPropMap(): Map<ItemId, BBoxProperty> {\n    return this.boundingBoxes;\n  }\n\n  public getDialogueMap(): Map<ItemId, Dialogue> {\n    return this.dialogues;\n  }\n\n  public getCharacterMap(): Map<ItemId, Character> {\n    return this.characters;\n  }\n\n  public getActionMap(): Map<ItemId, GameAction> {\n    return this.actions;\n  }\n\n  public getSoundAssets(): SoundAsset[] {\n    return this.soundAssets;\n  }\n\n  public setItemInMap(gameItemType: GameItemType, itemId: string, item: any) {\n    this[gameItemType].set(itemId, item);\n  }\n\n  public addItemToLocation(locId: LocationId, gameItemType: GameItemType, itemId: string) {\n    this.getLocationAtId(locId)[gameItemType].add(itemId);\n  }\n\n  public setBGMusicAt(locId: LocationId, soundKey: AssetKey) {\n    this.getLocationAtId(locId).bgmKey = soundKey;\n  }\n\n  public getLocationAtId = (locId: LocationId) =>\n    mandatory(this.locations.get(locId), `Location ${locId} was not found!`);\n\n  public getAssetByKey = (key: AssetKey) =>\n    mandatory(this.mapAssets.get(key), `Asset ${key} not found!`);\n\n  public getLocationIds(): LocationId[] {\n    return Array.from(this.locations.keys());\n  }\n\n  public getAssetKeyFromId(id: AnyId): AssetKey {\n    return mandatory(\n      this.objects.get(id)?.assetKey || this.locations.get(id)?.assetKey,\n      `Id ${id} not found!`\n    );\n  }\n}\n\nexport default GameMap;\n","/**\n * The class encapsulates data on all the objective ids\n * that players must complete and keeps track of which\n * objectives have already been completed.\n *\n * One of the components of game checkpoint.\n */\nclass GameObjective {\n  private objective: Map<string, boolean>;\n  private totalNumOfObjectives: number;\n  private numOfCompletedObjectives: number;\n\n  constructor() {\n    this.objective = new Map<string, boolean>();\n    this.totalNumOfObjectives = 0;\n    this.numOfCompletedObjectives = 0;\n  }\n\n  /**\n   * Set an objective to a boolean value.\n   *\n   * @param key key of the objective\n   * @param value boolean value to set to\n   */\n  public setObjective(key: string, value: boolean): void {\n    const prevState = this.objective.get(key);\n    this.objective.set(key, value);\n    // Handle repeated calls\n    if (prevState !== undefined && prevState !== value) {\n      this.numOfCompletedObjectives++;\n    }\n  }\n\n  /**\n   * Add an objective tied to the given string.\n   *\n   * @param key key of the objective\n   */\n  public addObjective(key: string): void {\n    this.objective.set(key, false);\n    this.totalNumOfObjectives++;\n  }\n\n  /**\n   * Add multiple objectives.\n   *\n   * @param keys objective keys\n   */\n  public addObjectives(keys: string[]): void {\n    keys.forEach(key => this.addObjective(key));\n  }\n\n  /**\n   * Check whether all the objectives are complete.\n   */\n  public isAllComplete(): boolean {\n    return this.numOfCompletedObjectives >= this.totalNumOfObjectives;\n  }\n\n  /**\n   * Check the state of a specific objective.\n   * If objective is not present, will return undefined instead.\n   *\n   * @param key key of the objective\n   */\n  public getObjectiveState(key: string): boolean {\n    const objState = this.objective.get(key);\n    if (objState === undefined) {\n      throw new Error(`Cannot find objective with the given task id \"${key}\"`);\n    }\n    return objState;\n  }\n\n  /**\n   * Returns all the objectives.\n   */\n  public getObjectives() {\n    return this.objective;\n  }\n\n  /**\n   * Set the objective to the given parameter directly.\n   *\n   * @param objective map of objective keys(string) to its value (boolean)\n   */\n  public setObjectives(objective: Map<string, boolean>) {\n    this.objective = objective;\n  }\n}\n\nexport default GameObjective;\n","import { TaskDetail } from './GameTaskTypes';\n\n/**\n * The class encapsulates data on all the task ids\n * that players can optionally complete, and keeps track of\n * which tasks have already been completed.\n *\n * One of the components of game checkpoint.\n */\nclass GameTask {\n  private tasks: Map<string, boolean>;\n  private taskDetails: Map<string, TaskDetail>;\n\n  constructor() {\n    this.tasks = new Map<string, boolean>();\n    this.taskDetails = new Map<string, TaskDetail>();\n  }\n\n  /**\n   * Set a task to a boolean value.\n   *\n   * @param key key of the task\n   * @param value boolean value to set to\n   *\n   */\n  public setTask(key: string, value: boolean): void {\n    this.tasks.set(key, value);\n  }\n\n  /**\n   * Indicate that the players should be able to see this task.\n   *\n   * @param key key of the task\n   */\n  public showTask(key: string): void {\n    const prevDetail = this.taskDetails.get(key);\n\n    // Handle repeated calls\n    if (prevDetail !== undefined) {\n      const newDetail: TaskDetail = {\n        ...prevDetail,\n        visible: true\n      };\n      this.taskDetails.set(key, newDetail);\n    }\n  }\n\n  /**\n   * Add a task tied to the given string.\n   *\n   * @param task the new task containing the task id (key) and task data\n   */\n  public addTask(newTask: TaskDetail): void {\n    const key = newTask.taskId;\n    this.tasks.set(key, false);\n    this.taskDetails.set(key, newTask);\n  }\n\n  /**\n   * Add multiple tasks.\n   *\n   * @param newTasks an array of tasks, each containing a task id (key) and task detail\n   */\n  public addTasks(newTasks: TaskDetail[]): void {\n    newTasks.forEach(task => this.addTask(task));\n  }\n\n  /**\n   * Check the state of a specific task.\n   * If task is not present, will return undefined instead.\n   *\n   * @param key key of the task\n   */\n  public getTaskState(key: string): boolean {\n    const taskState = this.tasks.get(key);\n    if (taskState === undefined) {\n      throw new Error(`Cannot find task with the given task id \"${key}\"`);\n    }\n    return taskState;\n  }\n\n  /**\n   * Retrieve the data of a specific task.\n   * If task is not present, will return undefined instead.\n   *\n   * @param key key of the task\n   */\n  public getTaskDetail(key: string): TaskDetail {\n    const taskDetail = this.taskDetails.get(key);\n    if (taskDetail === undefined) {\n      throw new Error(`Cannot find task with the given task id \"${key}\"`);\n    }\n    return taskDetail;\n  }\n\n  /**\n   * Returns all the tasks.\n   */\n  public getAllTasks(): Map<string, boolean> {\n    return this.tasks;\n  }\n\n  /**\n   * Returns all incomplete tasks.\n   */\n  public getAllIncompleteTasks(): Array<string> {\n    const incompleteTasks: Array<string> = new Array<string>();\n    for (const key of this.tasks.keys()) {\n      if (!this.tasks.get(key) && this.taskDetails.get(key)?.visible) {\n        incompleteTasks.push(key);\n      }\n    }\n    return incompleteTasks;\n  }\n\n  /**\n   * Returns all the task data, including the task id, title, description, and the state.\n   */\n  public getAllVisibleTaskData(): Array<[TaskDetail, boolean]> {\n    const allVisibleTask: Array<[TaskDetail, boolean]> = new Array<[TaskDetail, boolean]>();\n    for (const key of this.tasks.keys()) {\n      const taskState = this.getTaskState(key);\n      const taskDetail = this.getTaskDetail(key);\n      if (taskState !== undefined && taskDetail !== undefined && taskDetail.visible) {\n        allVisibleTask.push([taskDetail, taskState]);\n      }\n    }\n    return allVisibleTask;\n  }\n}\n\nexport default GameTask;\n","import { GameActionType } from '../action/GameActionTypes';\nimport { GamePosition, GameSize } from '../commons/CommonTypes';\nimport { GameItemType } from '../location/GameMapTypes';\nimport { GameMode } from '../mode/GameModeTypes';\nimport { GameStateStorage, UserStateType } from '../state/GameStateTypes';\nimport { mandatory } from '../utils/GameUtils';\n\nconst stringToSizeMap = {\n  small: GameSize.Small,\n  medium: GameSize.Medium,\n  large: GameSize.Large\n};\n\nconst stringToPositionMap = {\n  left: GamePosition.Left,\n  middle: GamePosition.Middle,\n  right: GamePosition.Right\n};\n\nconst stringToGameModeMap = {\n  talk: GameMode.Talk,\n  explore: GameMode.Explore,\n  move: GameMode.Move,\n  menu: GameMode.Menu\n};\n\nconst stringToGameItemMap = {\n  navigation: GameItemType.navigation,\n  talkTopics: GameItemType.talkTopics,\n  objects: GameItemType.objects,\n  boundingBoxes: GameItemType.boundingBoxes,\n  characters: GameItemType.characters,\n  actions: GameItemType.actions,\n  bgmKey: GameItemType.bgmKey,\n  collectibles: GameItemType.collectibles\n};\n\nconst stringToActionTypeMap = {\n  move_character: GameActionType.MoveCharacter,\n  update_character: GameActionType.UpdateCharacter,\n  obtain_collectible: GameActionType.ObtainCollectible,\n  complete_objective: GameActionType.CompleteObjective,\n  complete_task: GameActionType.CompleteTask,\n  show_task: GameActionType.ShowTask,\n  add_item: GameActionType.AddItem,\n  remove_item: GameActionType.RemoveItem,\n  change_background: GameActionType.ChangeBackground,\n  start_animation: GameActionType.StartAnimation,\n  stop_animation: GameActionType.StopAnimation,\n  show_dialogue: GameActionType.ShowDialogue,\n  add_mode: GameActionType.AddLocationMode,\n  remove_mode: GameActionType.RemoveLocationMode,\n  add_popup: GameActionType.AddPopup,\n  make_object_glow: GameActionType.MakeObjectGlow,\n  make_object_blink: GameActionType.MakeObjectBlink,\n  play_bgm: GameActionType.PlayBGM,\n  play_sfx: GameActionType.PlaySFX,\n  preview_location: GameActionType.PreviewLocation,\n  show_object_layer: GameActionType.ShowObjectLayer,\n  navigate_to_assessment: GameActionType.NavigateToAssessment,\n  update_assessment_status: GameActionType.UpdateAssessmentStatus,\n  delay: GameActionType.Delay\n};\n\nconst stringToGameStateStorageMap = {\n  checklist: GameStateStorage.ChecklistState,\n  tasklist: GameStateStorage.TasklistState,\n  userstate: GameStateStorage.UserState\n};\n\nconst stringToUserStateTypeMap = {\n  assessments: UserStateType.assessments,\n  achievements: UserStateType.achievements,\n  collectibles: UserStateType.collectibles\n};\n\n/**\n * This class is in charge of converting strings from\n * the txt into enums that can be stored in the Checkpoint\n * object, which can be read and played by the game engine.\n *\n * This also acts as a validity checker to ensure that\n * strings such as action types (eg 'show_dialogue') and\n * game modes (eg 'explore') are actually valid enums\n */\nexport default class ParserConverter {\n  public static stringToSize(str: string) {\n    return stringToSizeMap[str] || GameSize.Medium;\n  }\n\n  public static stringToPosition(str: string) {\n    return stringToPositionMap[str] || GamePosition.Middle;\n  }\n\n  public static stringToGameMode(str: string) {\n    return mandatory(stringToGameModeMap[str], `Invalid location mode, ${str}`);\n  }\n\n  public static stringToActionType(str: string) {\n    return mandatory(stringToActionTypeMap[str], `Invalid action type, ${str}`);\n  }\n\n  public static stringToGameStateStorage(str: string) {\n    return mandatory(stringToGameStateStorageMap[str], `Invalid condition type, ${str}`);\n  }\n\n  public static stringToGameItemType(str: string) {\n    return mandatory(stringToGameItemMap[str], `Invalid entity type, ${str}`);\n  }\n\n  public static stringToBoolean(str: string) {\n    return str === 'false' ? false : true;\n  }\n\n  public static stringToUserStateType(str: string) {\n    return mandatory(stringToUserStateTypeMap[str], `Invalid user state type ${str}`);\n  }\n}\n","import { ItemId } from '../commons/CommonTypes';\nimport { GameItemType } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport Parser from './Parser';\n\nexport enum GameEntityType {\n  locations = 'locations',\n  objectives = 'objectives',\n  tasks = 'tasks',\n  bgms = 'bgms',\n  sfxs = 'sfxs'\n}\n\ntype AssertionDetail = {\n  itemId: string;\n  actionType?: string;\n};\n\n/**\n * Parser Validator has two functions:\n *\n * A. Duplicate ID checker\n * Asserts that there are no duplicated IDs in the text file\n *\n * Implementation: Keep a set of IDs declared.\n * As IDs are added onto the set, check and throw error if ID\n * is added twice onto the set.\n *\n * B. Type assertion manager\n * Assert that all the IDs used are declared somewhere in the text file.\n *\n * e.g.\n * Say make_object_glow(door) is called\n * Since make_object_glow takes in an Object Id as parameter,\n * we assert that \"door\" is an Object ID declared in the text.\n *\n * Implementation: Store all the assertions by type when ID is used.\n * At the end of the parsing process, verify that all type assertions exist\n * by counterchecking with items in the Checkpoint Object.\n *\n * Note the two types of assertions:\n * Game item assertions - Item ID e.g. Dialogue, Object, Bbox, Character, Action, Award\n * Game entity assertions - Entity ID e.g. Location, Bgm, Sfx, Objectives\n */\nexport default class ParserValidator {\n  private gameItemAsserts: Map<GameItemType, AssertionDetail[]>;\n  private gameEntityAsserts: Map<GameEntityType, AssertionDetail[]>;\n  private gameAnimAsserts: AssertionDetail[];\n  private gameAnimMaps = [\n    // Game Locations Map\n    Parser.checkpoint.map.getLocations(),\n    // Game Object Prop Map\n    Parser.checkpoint.map[GameItemType.objects]\n  ];\n  private allItemIds: Set<string>;\n\n  constructor() {\n    this.gameItemAsserts = new Map<GameItemType, AssertionDetail[]>();\n    this.gameEntityAsserts = new Map<GameEntityType, AssertionDetail[]>();\n    this.gameAnimAsserts = [];\n    this.allItemIds = new Set();\n  }\n\n  ////////////////////////////\n  //  Duplicate ID Checker  //\n  ////////////////////////////\n\n  /**\n   * We register item id to check for possible duplicates\n   * with other item ids.\n   *\n   * @param {string} id an object ID e.g. ItemId / Location ID / Objective ID / BGM ID / SFX ID\n   */\n  public registerId(id: string) {\n    if (this.allItemIds.has(id)) {\n      throw new Error(`Duplicate item id ${id}`);\n    }\n    this.allItemIds.add(id);\n  }\n\n  /////////////////////////////\n  //  Type assertion manager //\n  /////////////////////////////\n\n  public verifyAssertions() {\n    this.verifyGameItemAssert();\n    this.verifyGameEntityAsserts();\n    this.verifyGameAnimAsserts();\n  }\n\n  //////////////////////////////////////////////\n  //  Type assertion manager - Game Item Type //\n  //////////////////////////////////////////////\n\n  /**\n   * This function stores game item type assertions.\n   *\n   * @param gameItemType the attribute that the itemId needs to be\n   * @param itemId the itemId that needs to be checked for validity\n   * @param actionType action type e.g. make_object_glow if the assertion\n   *                   was made while parsing an action\n   */\n  public assertItemType(gameItemType: GameItemType, itemId: ItemId, actionType?: string) {\n    if (gameItemType === GameItemType.talkTopics) {\n      gameItemType = GameItemType.dialogues;\n    } else if (gameItemType === GameItemType.navigation) {\n      gameItemType = GameItemType.locations;\n    }\n    if (!this.gameItemAsserts.get(gameItemType)) {\n      this.gameItemAsserts.set(gameItemType, []);\n    }\n    this.gameItemAsserts.get(gameItemType)!.push({ itemId, actionType });\n  }\n\n  /**\n   * This function verifies all game item type assertions,\n   * ensuring that each ID used belongs to the correct type.\n   */\n  private verifyGameItemAssert() {\n    this.gameItemAsserts.forEach(\n      (assertionDetails: AssertionDetail[], gameItemType: GameItemType) => {\n        assertionDetails.forEach((assertionDetail: AssertionDetail) => {\n          const { itemId, actionType } = assertionDetail;\n          if (!Parser.checkpoint.map[gameItemType].has(itemId)) {\n            if (actionType) {\n              this.actionAssertionError(itemId, gameItemType, actionType);\n            }\n            throw new Error(`Cannot find id \"${itemId}\" under ${gameItemType} entity type`);\n          }\n        });\n      }\n    );\n  }\n\n  /**\n   * Similar to assert item type, but used for asserting multiple game item types at once.\n   *\n   * @param gameItemType item type that the ID must be\n   * @param itemIds item IDs of the item to assert\n   * @param actionType action type e.g. make_object_glow if the assertion\n   *                   was made while parsing an action\n   */\n  public assertItemTypes(gameItemType: GameItemType, itemIds: string[], actionType?: string) {\n    itemIds.forEach(itemId => this.assertItemType(gameItemType, itemId, actionType));\n  }\n\n  ////////////////////////////////////////////////\n  //  Type assertion manager - Game Entity Type //\n  ////////////////////////////////////////////////\n\n  /**\n   * This function stores game entity type assertions.\n   * ensures that 'room' is of locations type.\n   *\n   * @param gameEntityType the attribute that the id needs to be\n   * @param id the itemId that needs to be checked for validity\n   * @param actionType action type e.g. make_object_glow if the assertion\n   *                   was made while parsing an action\n   */\n  public assertEntityType(gameEntityType: GameEntityType, id: string, actionType?: string) {\n    if (!this.gameEntityAsserts.get(gameEntityType)) {\n      this.gameEntityAsserts.set(gameEntityType, []);\n    }\n    this.gameEntityAsserts.get(gameEntityType)!.push({ itemId: id, actionType });\n  }\n\n  /**\n   * This function verifies game entity assertions that have been stored.\n   * ensures that 'room' is of locations type.\n   *\n   * @param gameEntityType the attribute that the id needs to be\n   * @param id the itemId that needs to be checked for validity\n   * @param actionType action type e.g. make_object_glow if the assertion\n   *                   was made while parsing an action\n   */\n  private verifyGameEntityAsserts() {\n    this.gameEntityAsserts.forEach(\n      (assertionDetails: AssertionDetail[], gameEntityType: GameEntityType) => {\n        assertionDetails.forEach((assertionDetail: AssertionDetail) => {\n          const { itemId, actionType } = assertionDetail;\n          switch (gameEntityType) {\n            case GameEntityType.locations:\n              Parser.checkpoint.map.getLocationAtId(itemId);\n              break;\n\n            case GameEntityType.objectives:\n              if (Parser.checkpoint.objectives.getObjectives().get(itemId) === undefined) {\n                if (actionType) {\n                  this.actionAssertionError(itemId, gameEntityType, actionType);\n                }\n                throw new Error(`Cannot find objective id \"${itemId}\"`);\n              }\n              break;\n\n            case GameEntityType.tasks:\n              if (Parser.checkpoint.tasks.getAllTasks().get(itemId) === undefined) {\n                if (actionType) {\n                  this.actionAssertionError(itemId, gameEntityType, actionType);\n                }\n                throw new Error(`Cannot find task id \"${itemId}\"`);\n              }\n              break;\n\n            case GameEntityType.bgms:\n              const numberOfBgm = Parser.checkpoint.map\n                .getSoundAssets()\n                .filter(\n                  sound => sound.soundType === GameSoundType.BGM && sound.key === itemId\n                ).length;\n              if (numberOfBgm === 0) {\n                throw new Error(`Cannot find bgm key \"${itemId}\"`);\n              } else if (numberOfBgm > 1) {\n                throw new Error(`More than 1 bgm key \"${itemId}\"`);\n              }\n              break;\n\n            case GameEntityType.sfxs:\n              const numberOfSfx = Parser.checkpoint.map\n                .getSoundAssets()\n                .filter(\n                  sound => sound.soundType === GameSoundType.SFX && sound.key === itemId\n                ).length;\n              if (numberOfSfx === 0) {\n                throw new Error(`Cannot find sfx key \"${itemId}\"`);\n              } else if (numberOfSfx > 1) {\n                throw new Error(`More than 1 sfx key \"${itemId}\"`);\n              }\n              break;\n          }\n        });\n      }\n    );\n  }\n\n  //////////////////////////////////////////////\n  //  Type assertion manager - Game Anim Type //\n  //////////////////////////////////////////////\n\n  /**\n   * This function stores game anim type assertions.\n   *\n   * @param itemId id of item that needs to be checked\n   * @param actionType action type e.g. start_animation\n   */\n  public assertAnimType(itemId: ItemId, actionType: string) {\n    this.gameAnimAsserts.push({ itemId, actionType });\n  }\n\n  /**\n   * This function verifies game entity assertions that have\n   * been stored, by ensuring that the itemIds are declared\n   * in at least one of the animation types.\n   */\n  private verifyGameAnimAsserts() {\n    this.gameAnimAsserts.forEach((assertionDetail: AssertionDetail) => {\n      const { itemId, actionType } = assertionDetail;\n      let idFound = false;\n      this.gameAnimMaps.forEach(map => {\n        if (map.get(itemId)) {\n          idFound = true;\n        }\n      });\n      if (!idFound) {\n        this.actionAssertionError(itemId, 'locationId or itemId', actionType!);\n      }\n    });\n  }\n\n  private actionAssertionError(itemId: string, attribute: string, actionType: string) {\n    throw new Error(\n      `Expected type of \"${attribute}\" as argument for \"${actionType}\", obtained \"${itemId}\" which is either undefined or the wrong id.`\n    );\n  }\n}\n","import { ActionCondition } from '../action/GameActionTypes';\nimport { GameStateStorage } from '../state/GameStateTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameEntityType } from './ParserValidator';\n\n/**\n * This parser is in charge of parsing conditionals\n */\nexport default class ConditionParser {\n  /**\n   * This function creates an ActionCondition object, given a condition string\n   *\n   * @param conditionDetails A conditional string such as \"!if userstate.assessments.301\"\n   * @returns {ActionCondition} encapsulating the information on the conditional\n   */\n  public static parse(conditionDetails: string): ActionCondition {\n    const hasExclamation = conditionDetails[0] === '!';\n    if (hasExclamation) {\n      conditionDetails = conditionDetails.slice(1);\n    }\n    const [gameStateStorage, ...condParams] = StringUtils.splitByChar(conditionDetails, '.');\n    switch (ParserConverter.stringToGameStateStorage(gameStateStorage)) {\n      case GameStateStorage.ChecklistState:\n        Parser.validator.assertEntityType(GameEntityType.objectives, condParams[0]);\n        return {\n          state: GameStateStorage.ChecklistState,\n          conditionParams: {\n            id: condParams[0]\n          },\n          boolean: !hasExclamation\n        };\n\n      case GameStateStorage.TasklistState:\n        Parser.validator.assertEntityType(GameEntityType.tasks, condParams[0]);\n        return {\n          state: GameStateStorage.TasklistState,\n          conditionParams: {\n            id: condParams[0]\n          },\n          boolean: !hasExclamation\n        };\n\n      case GameStateStorage.UserState:\n        return {\n          state: GameStateStorage.UserState,\n          conditionParams: {\n            userStateType: ParserConverter.stringToUserStateType(condParams[0]),\n            id: condParams[1]\n          },\n          boolean: !hasExclamation\n        };\n      default:\n        throw new Error('Parsing error: Invalid condition param');\n    }\n  }\n}\n","import { GameAction, GameActionType } from '../action/GameActionTypes';\nimport { ItemId } from '../commons/CommonTypes';\nimport { GameItemType } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ConditionParser from './ConditionParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameEntityType } from './ParserValidator';\n\n/**\n * The Action Parser parses actions for all entities.\n * This class takes in action strings to produce GameAction objects,\n * which store information about action type and\n * action params (much like React actions)\n */\nexport default class ActionParser {\n  /**\n   * Parses many action strings, stores resulting Game Action objects\n   * inside the game map, and returns the corresponding actionIds.\n   *\n   * @param fullActionStrings raw action strings, eg [\"show_dialogue(done)\", \"change_location(room) if gamestate.finish\"]\n   * @returns {Array<ItemId>} returns actionIds of the parsed actions with actions are stored in the game map.\n   */\n  public static parseActions(fullActionStrings: string[]): ItemId[] {\n    return fullActionStrings.map(fullActionString => this.parseAction(fullActionString));\n  }\n\n  /**\n   * Parses an action string, stores resulting Game Action object\n   * inside the game map, and returns the corresponding actionId.\n   *\n   * @param rawActionString raw action string eg \"show_dialogue(done) if gamestate.finish\"\n   * @returns {ItemId} returns actionId of the parsed actions, as action is stored in the game map.\n   */\n  public static parseAction(rawActionString: string): ItemId {\n    const [actionString, conditionalsString] = StringUtils.splitByChar(rawActionString, 'if');\n\n    const gameAction = this.parseActionContent(actionString);\n    if (conditionalsString) {\n      gameAction.actionConditions = StringUtils.splitByChar(conditionalsString, 'AND').map(\n        condition => ConditionParser.parse(condition)\n      );\n    }\n\n    Parser.checkpoint.map.setItemInMap(GameItemType.actions, gameAction.interactionId, gameAction);\n\n    return gameAction.interactionId;\n  }\n\n  /**\n   * This funciton converts action strings eg \"show_dialogue(hello)\"\n   * (excluding conditionals) into Game Action objects\n   *\n   * Note that this function also validates the parameters to make\n   * sure that they are used correctly.\n   *\n   * @param actionString the action string to be parsed\n   * @returns {GameAction} resulting action that can be stored in the game map\n   */\n  public static parseActionContent(actionString: string): GameAction {\n    const [action, actionParamString] = StringUtils.splitByChar(actionString, '(');\n    let repeatable = false;\n    let actionType = action;\n    if (action[action.length - 1] === '*') {\n      repeatable = true;\n      actionType = actionType.slice(0, -1);\n    }\n\n    const gameActionType = ParserConverter.stringToActionType(actionType);\n    const actionParams = StringUtils.splitByChar(actionParamString.slice(0, -1), ',');\n    const actionParamObj: any = {};\n\n    switch (gameActionType) {\n      case GameActionType.ObtainCollectible:\n        actionParamObj.id = actionParams[0];\n        break;\n\n      case GameActionType.CompleteObjective:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.objectives, actionParams[0], actionType);\n        break;\n\n      case GameActionType.CompleteTask:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.tasks, actionParams[0], actionType);\n        break;\n\n      case GameActionType.ShowTask:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.tasks, actionParams[0], actionType);\n        break;\n\n      case GameActionType.PreviewLocation:\n      case GameActionType.ChangeBackground:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.locations, actionParams[0], actionType);\n        break;\n      case GameActionType.StartAnimation:\n        actionParamObj.id = actionParams[0];\n        actionParamObj.startFrame = +actionParams[1];\n        actionParamObj.frameRate = +actionParams[2];\n        actionParamObj.assetCategory = actionParams[3];\n        Parser.validator.assertAnimType(actionParams[0], actionType);\n        break;\n      case GameActionType.StopAnimation:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertAnimType(actionParams[0], actionType);\n        break;\n      case GameActionType.ShowDialogue:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertItemType(GameItemType.dialogues, actionParams[0], actionType);\n        break;\n\n      case GameActionType.AddItem:\n      case GameActionType.RemoveItem:\n        const gameItemType = ParserConverter.stringToGameItemType(actionParams[0]);\n        actionParamObj.gameItemType = gameItemType;\n\n        actionParamObj.locationId = actionParams[1];\n        Parser.validator.assertEntityType(GameEntityType.locations, actionParams[1], actionType);\n\n        actionParamObj.id = actionParams[2];\n        Parser.validator.assertItemType(gameItemType, actionParams[2], actionType);\n        break;\n\n      case GameActionType.AddLocationMode:\n      case GameActionType.RemoveLocationMode:\n        Parser.validator.assertEntityType(GameEntityType.locations, actionParams[0], actionType);\n        actionParamObj.locationId = actionParams[0];\n        actionParamObj.mode = ParserConverter.stringToGameMode(actionParams[1]);\n        break;\n\n      case GameActionType.AddPopup:\n        Parser.validator.assertItemType(GameItemType.objects, actionParams[0], actionType);\n        actionParamObj.id = actionParams[0];\n        actionParamObj.position = ParserConverter.stringToPosition(actionParams[1]);\n        actionParams[2] && (actionParamObj.duration = parseInt(actionParams[2]) * 1000);\n        actionParams[3] && (actionParamObj.size = ParserConverter.stringToSize(actionParams[3]));\n        break;\n\n      case GameActionType.MakeObjectBlink:\n        Parser.validator.assertItemType(GameItemType.objects, actionParams[0], actionType);\n        actionParamObj.id = actionParams[0];\n        actionParamObj.turnOn = ParserConverter.stringToBoolean(actionParams[1]);\n        break;\n\n      case GameActionType.MakeObjectGlow:\n        Parser.validator.assertItemType(GameItemType.objects, actionParams[0], actionType);\n        actionParamObj.id = actionParams[0];\n        actionParamObj.turnOn = ParserConverter.stringToBoolean(actionParams[1]);\n        break;\n\n      case GameActionType.PlayBGM:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.bgms, actionParams[0], actionType);\n        break;\n\n      case GameActionType.PlaySFX:\n        actionParamObj.id = actionParams[0];\n        Parser.validator.assertEntityType(GameEntityType.sfxs, actionParams[0], actionType);\n        break;\n\n      case GameActionType.ShowObjectLayer:\n        actionParamObj.show = ParserConverter.stringToBoolean(actionParams[0]);\n        break;\n\n      case GameActionType.UpdateCharacter:\n        Parser.validator.assertItemType(GameItemType.characters, actionParams[0], actionType);\n        actionParamObj.id = actionParams[0];\n        actionParamObj.expression = actionParams[1];\n        break;\n\n      case GameActionType.MoveCharacter:\n        Parser.validator.assertItemType(GameItemType.characters, actionParams[0], actionType);\n        Parser.validator.assertEntityType(GameEntityType.locations, actionParams[1], actionType);\n        actionParamObj.id = actionParams[0];\n        actionParamObj.locationId = actionParams[1];\n        actionParamObj.position = ParserConverter.stringToPosition(actionParams[2]);\n        break;\n\n      case GameActionType.NavigateToAssessment:\n        actionParamObj.assessmentId = actionParams[0];\n        break;\n\n      case GameActionType.Delay:\n        actionParamObj.duration = parseInt(actionParams[0]) * 1000;\n        break;\n    }\n\n    const actionId = Parser.generateActionId();\n    return {\n      actionType: gameActionType,\n      actionParams: actionParamObj,\n      actionConditions: [],\n      interactionId: actionId,\n      isInteractive: false,\n      isRepeatable: repeatable\n    };\n  }\n}\n","import { Prompt } from '../dialogue/GameDialogueTypes';\nimport StringUtils from '../utils/StringUtils';\n\n/**\n * This class parses prompt and creates Prompt\n * objects stored that are stored in a DialogueLine\n */\nexport default class PromptParser {\n  /**\n   * Parses title and choice strings and returns a\n   * Prompt object with this information\n   * @param title title of prompt to give context\n   * @param choices raw choice strings, eg [\"Yes -> goto 4\", \"No -> goto 5\"]\n   * @returns {Prompt} returns prompt object with associated information\n   */\n  public static parsePrompt(title: string, choices: string[]): Prompt {\n    const prompt = {\n      promptTitle: title.split('prompt:')[1].trim(),\n      choices: choices.map(this.splitChoice)\n    };\n    return prompt;\n  }\n\n  /**\n   * Split a choice string into a Choice option and\n   * PartName\n   * @param rawChoice raw choice string, eg \"Yes -> goto 4\"\n   * @returns {[string, string]} returns a 2-element array, the\n   * first element a choice option and the second element the\n   * corresponding goto\n   */\n  public static splitChoice(rawChoice: string): [string, string] {\n    const choice = StringUtils.splitWithLimit(rawChoice, '->', 1);\n    return [choice[0].trim(), choice[1].split(' ')[1].trim()];\n  }\n}\n","import { AssetType } from '../assets/AssetsTypes';\nimport { Character } from '../character/GameCharacterTypes';\nimport { AssetKey, ItemId } from '../commons/CommonTypes';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\n\n/**\n * This class is in charge of parsing Character entities\n * from character lines\n */\nexport default class CharacterParser {\n  /**\n   * This class parses the character paragraph into\n   * Characters and places them in the game map\n   *\n   * @param locationId Location where the character lines are found\n   * @param characterList the list of character CSV lines\n   */\n  public static parse(locationId: LocationId, characterList: string[]) {\n    characterList.forEach(characterDetails =>\n      this.parseCharacterDetails(locationId, characterDetails)\n    );\n  }\n\n  /**\n   * Generates the asset key for a character and expression\n   *\n   * @param characterId the character's id, which is also the folder of the character in /avatars folder\n   * @param expression the expression of the character, which is also present in filename\n   */\n  public static characterAssetKey(characterId: ItemId, expression: string) {\n    return characterId + '-' + expression;\n  }\n\n  /**\n   * Generates the short asset path for a character and an expression\n   *\n   * @param characterId the character's id, which is also the folder of the character in /avatars folder\n   * @param expression the expression of the character, which is also present in filename\n   */\n  public static characterAssetPath(characterId: ItemId, expression: string) {\n    return `/avatars/${characterId}/${characterId}.${expression}.png`;\n  }\n\n  /**\n   * This function parses character CSVs and returns Characters\n   * and places the characters inside the game map\n   *\n   * @param locationId the character's location\n   * @param characterDetails the CSV string containing character details\n   */\n  private static parseCharacterDetails(locationId: LocationId, characterDetails: string) {\n    const addToLoc = characterDetails[0] === '+';\n    if (addToLoc) {\n      characterDetails = characterDetails.slice(1);\n    }\n\n    const [id, name, defaultExpression, defaultPosition, scale] = StringUtils.splitByChar(\n      characterDetails,\n      ','\n    );\n    Parser.validator.registerId(id);\n\n    const expressions = new Map<string, AssetKey>();\n\n    const character: Character = {\n      id,\n      name,\n      expressions,\n      defaultExpression,\n      defaultPosition: ParserConverter.stringToPosition(defaultPosition),\n      scale: scale ? parseFloat(scale) : 1\n    };\n\n    // Add asset key to expression map\n    expressions.set(defaultExpression, this.characterAssetKey(id, defaultExpression));\n\n    // Add asset keys to expression map\n    Parser.checkpoint.map.addMapAsset(this.characterAssetKey(id, defaultExpression), {\n      type: AssetType.Image,\n      path: this.characterAssetPath(id, defaultExpression),\n      key: id\n    });\n\n    // Add character to map\n    Parser.checkpoint.map.setItemInMap(GameItemType.characters, id, character);\n\n    // Add character to location\n    if (addToLoc) {\n      Parser.checkpoint.map.addItemToLocation(locationId, GameItemType.characters, id);\n    }\n  }\n}\n","import { AssetType } from '../assets/AssetsTypes';\nimport { SpeakerDetail } from '../character/GameCharacterTypes';\nimport StringUtils from '../utils/StringUtils';\nimport CharacterParser from './CharacterParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\n\n/**\n * This classes parses the speaker portion of the dialogue\n * and returns SpeakerDetail object encapsulating information\n * about speakers in a dialogue.\n *\n * This class also loads the character expressions into the\n * Character entity in the game map\n */\nexport default class SpeakerParser {\n  /**\n   * The character parses one line containing the speaker details\n   * and returns a speaker detail object which is a property of some DialogueLine's.\n   *\n   * @param rawStr the string containing the character ids and expressions\n   * @returns {SpeakerDetail} associated with that string\n   */\n  public static parse(rawStr: string): SpeakerDetail {\n    const [speakerId, expression, speakerPositionStr] = StringUtils.splitByChar(\n      rawStr.slice(1), // remove the @\n      ','\n    );\n    const speakerPosition = ParserConverter.stringToPosition(speakerPositionStr);\n\n    this.addCharacterExprToMap(speakerId, expression);\n\n    return {\n      speakerId,\n      expression,\n      speakerPosition\n    };\n  }\n\n  /**\n   * This line adds the  expression into the expression map of an\n   * existing Character in the game map. This ensures that\n   * images of the characters' various expressions are loaded properly\n   * into the game map.\n   *\n   * @param charId the character Id of that character, also the asset folder of the character inside /avatars folder\n   * @param expression the expression of character to be loaded into the expression map of the character\n   */\n  private static addCharacterExprToMap(charId: string, expression: string) {\n    if (charId === 'you' || charId === 'narrator') {\n      return;\n    }\n    const character = Parser.checkpoint.map.getCharacterMap().get(charId);\n\n    if (!character) {\n      throw new Error(`Character \"${charId}\" not in map`);\n    }\n\n    const charExpression = expression || character.defaultExpression;\n\n    character.expressions.set(\n      expression,\n      CharacterParser.characterAssetKey(charId, expression || charExpression)\n    );\n\n    Parser.checkpoint.map.addMapAsset(CharacterParser.characterAssetKey(charId, charExpression), {\n      path: CharacterParser.characterAssetPath(charId, charExpression),\n      type: AssetType.Image,\n      key: charId\n    });\n  }\n}\n","import { Dialogue, DialogueLine, PartName } from '../dialogue/GameDialogueTypes';\nimport { GameItemType } from '../location/GameMapTypes';\nimport { mapValues } from '../utils/GameUtils';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport ConditionParser from './ConditionParser';\nimport Parser from './Parser';\nimport PromptParser from './PromptParser';\nimport SpeakerParser from './SpeakerParser';\n\n/**\n * This class parses dialogues and creates\n * Dialogue Objects which can be read by the\n * Dialogue Generator\n */\nexport default class DialogueParser {\n  /**\n   * This function reads the entire text under the \"dialogue\" heading,\n   * converts dialogues listed underneath into Dialogue entities,\n   * and stores these dialogues in the game map.\n   *\n   * @param dialogueText the entire dialogue text beneath Dialogue\n   */\n  public static parse(dialogueText: string[]) {\n    const dialoguesParagraphs = StringUtils.splitToParagraph(dialogueText);\n\n    dialoguesParagraphs.forEach(([dialogueDetails, dialogueBody]: [string, string[]]) => {\n      if (dialogueBody.length === 0) {\n        console.error('No dialogue found for dialogueId');\n        return;\n      }\n      this.parseDialogue(dialogueDetails, dialogueBody);\n    });\n  }\n\n  /**\n   * This function parses one dialogue and stores it into the game map\n   *\n   * @param dialogueDetails the string containing dialogue Id and/or dialouge title\n   * @param dialogueBody the body of the dialogue containing its contents\n   */\n  private static parseDialogue(dialogueDetails: string, dialogueBody: string[]) {\n    const [dialogueId, title] = StringUtils.splitWithLimit(dialogueDetails, ',', 1);\n    Parser.validator.registerId(dialogueId);\n\n    const content = this.parseDialogueContent(dialogueBody);\n    const dialogue: Dialogue = { title, content };\n\n    // Add fallback title\n    if (!dialogue.title) {\n      dialogue.title = StringUtils.toCapitalizedWords(dialogueId);\n    }\n\n    Parser.checkpoint.map.setItemInMap(GameItemType.dialogues, dialogueId, dialogue);\n  }\n\n  /**\n   * This function parses the dialogue's body and\n   * converts each into a Dialogue object.\n   *\n   * This function's main task is to separate a dialogue into\n   * parts (or part if just one), and then uses  createDialogueLines to parse each part.\n   *\n   * @param dialogueBody The entire dialogue body\n   */\n  private static parseDialogueContent(dialogueBody: string[]) {\n    const rawDialogueContent: Map<PartName, string[]> = StringUtils.mapByHeader(\n      dialogueBody,\n      isInteger\n    );\n\n    const dialogueObject: Map<PartName, DialogueLine[]> = mapValues(\n      rawDialogueContent,\n      this.createDialogueLines\n    );\n    return dialogueObject;\n  }\n\n  /**\n   * This function parses one \"part\" of a dialogue,\n   * and converts them into a series of DialogueLine's,\n   * where DialogueLine encapsulates data on the text,\n   * (as well as speaker change, actions, gotos and prompts if any)\n   *\n   * @param {Array<string>} lines the lines inside one part of a dialogue\n   * @returns {Array<DialogueLine>}\n   */\n  private static createDialogueLines(lines: string[]): DialogueLine[] {\n    const dialogueLines: DialogueLine[] = [];\n    let currIndex = 0;\n\n    while (currIndex !== lines.length) {\n      const rawStr = lines[currIndex];\n      switch (true) {\n        case isGotoLabel(rawStr):\n          const [gotoString, postpend] = StringUtils.splitByChar(rawStr, 'if');\n          const [conditionalsString, altPart] = postpend\n            ? StringUtils.splitByChar(postpend, 'else')\n            : [null, null];\n          const conditions = conditionalsString\n            ? StringUtils.splitByChar(conditionalsString, 'AND').map(condition =>\n                ConditionParser.parse(condition)\n              )\n            : [];\n          dialogueLines[dialogueLines.length - 1].goto = {\n            conditions,\n            part: gotoString.split(' ')[1],\n            altPart: altPart\n          };\n          break;\n        case isPrompt(rawStr):\n          const rawTitle = rawStr;\n          const rawChoices: string[] = [];\n          while (lines[currIndex + 1] && isPromptChoice(lines[currIndex + 1])) {\n            currIndex++;\n            rawChoices.push(lines[currIndex].trim());\n          }\n          const prompt = PromptParser.parsePrompt(rawTitle, rawChoices);\n          dialogueLines[dialogueLines.length - 1].prompt = prompt;\n          break;\n        case isActionLabel(rawStr):\n          const lastLine = dialogueLines[dialogueLines.length - 1];\n          !lastLine.actionIds && (lastLine.actionIds = []);\n          lastLine.actionIds.push(ActionParser.parseAction(rawStr));\n          break;\n        case isSpeaker(rawStr):\n          currIndex++;\n          const nextLine = lines[currIndex];\n          if (!nextLine) {\n            throw new Error('Parsing error: Cannot change speaker without next line');\n          }\n          dialogueLines.push({ line: nextLine });\n          dialogueLines[dialogueLines.length - 1].speakerDetail = SpeakerParser.parse(rawStr);\n          break;\n        default:\n          // Dialogue lines without speaker are by default treated as lines by narrator\n          // This also ensures that lines without speaker are displayed on the dialogue log\n          dialogueLines.push({ line: rawStr });\n          dialogueLines[dialogueLines.length - 1].speakerDetail = SpeakerParser.parse('@narrator');\n          break;\n      }\n      currIndex++;\n    }\n    return dialogueLines;\n  }\n}\n\nconst isInteger = (line: string) => new RegExp(/^[0-9]+$/).test(line);\nconst isGotoLabel = (line: string) => new RegExp(/^goto [0-9]+.*$/).test(line);\nconst isActionLabel = (line: string) => line && (line[0] === '\\t' || line.slice(0, 4) === '    ');\nconst isSpeaker = (line: string) => line && line[0] === '@';\nconst isPrompt = (line: string) => line.trim().startsWith('prompt:');\nconst isPromptChoice = (line: string) => new RegExp(/-> +goto/).test(line);\n","import { AnimType, AssetType } from '../assets/AssetsTypes';\nimport { screenCenter, screenSize } from '../commons/CommonConstants';\nimport { createEmptyLocation } from '../location/GameMapHelper';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\n\n/**\n * This class parses the \"locations\" paragraphs,\n * and creates all the game locations declared\n * in the paragraph.\n */\nexport default class LocationDetailsParser {\n  /**\n   * This function parses location strings\n   * and adds GameLocations to the map based on location\n   * descriptions\n   *\n   * @param locationDetails the CSV lines containing descriptions about game locations\n   */\n  public static parse(locationDetails: string[]) {\n    locationDetails.forEach(locationDetail => {\n      const [id, shortPath, name, type, frame] = StringUtils.splitByChar(locationDetail, ',');\n      Parser.validator.registerId(id);\n\n      Parser.checkpoint.map.addLocation(id, {\n        ...createEmptyLocation(),\n        id,\n        name,\n        assetKey: this.locationAssetKey(shortPath)\n      });\n\n      Parser.checkpoint.map.addMapAsset(this.locationAssetKey(shortPath), {\n        type: AssetType[type] || AssetType.Image,\n        key: id,\n        path: this.locationPath(shortPath),\n        config: {\n          frameWidth: screenSize.x,\n          frameHeight: screenSize.y,\n          centreX: screenCenter.x,\n          centreY: screenCenter.y,\n          endFrame: parseInt(frame) - 1 || 0,\n          animType: AnimType.Background\n        }\n      });\n    });\n  }\n\n  /**\n   * Genrates an asset key for the location\n   *\n   * @param shortPath the path to the location\n   */\n  private static locationAssetKey(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * Genrates an asset path for the location\n   *\n   * @param shortPath the path to the location\n   */\n  private static locationPath(shortPath: string) {\n    return shortPath;\n  }\n}\n","import { GameLocation } from './GameMapTypes';\n\n/**\n * Intialises an an empty location\n */\nexport function createEmptyLocation(): GameLocation {\n  return {\n    id: '',\n    name: '',\n    assetKey: '',\n    previewKey: null,\n    modes: new Set([]),\n    navigation: new Set([]),\n    talkTopics: new Set([]),\n    objects: new Set([]),\n    boundingBoxes: new Set([]),\n    bgmKey: '',\n    characters: new Set([])\n  };\n}\n","import { BBoxProperty } from '../boundingBoxes/GameBoundingBoxTypes';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport Parser from './Parser';\n\n/**\n * This class is in charge of parsing the boundingBoxes paragraph\n */\nexport default class BoundingBoxParser {\n  /**\n   * This parses the boundingBoxes paragraph (with actions) into Bounding Box Properties\n   * and stores them in the correct location in the game map\n   *\n   * @param locationId locationId where the boundingBox paragraph is\n   * @param boundingBoxList the list of raw bounding box strings in the paragraph\n   */\n  public static parse(locationId: LocationId, boundingBoxList: string[]) {\n    const boundingBoxParagraphs = StringUtils.splitToParagraph(boundingBoxList);\n\n    boundingBoxParagraphs.forEach(([header, body]: [string, string[]]) => {\n      const boundingBox = this.parseBBoxConfig(locationId, header);\n      if (body.length) {\n        boundingBox.isInteractive = true;\n        boundingBox.actionIds = ActionParser.parseActions(body);\n      }\n    });\n  }\n\n  /**\n   * This class parses one bounding box CSV and produces a\n   * Bounding box property from that bounding box string\n   *\n   * @param locationId LocationId where the bounding box paragraph is\n   * @param bboxDetails One bounding box CSV line\n   * @returns {BBoxProperty} corresponding bbox property produced from that CSV line\n   */\n  private static parseBBoxConfig(locationId: LocationId, bboxDetails: string): BBoxProperty {\n    const addToLoc = bboxDetails[0] === '+';\n    if (addToLoc) {\n      bboxDetails = bboxDetails.slice(1);\n    }\n\n    const [bboxId, x, y, width, height] = StringUtils.splitByChar(bboxDetails, ',');\n    const bboxProperty: BBoxProperty = {\n      x: parseInt(x),\n      y: parseInt(y),\n      width: parseInt(width),\n      height: parseInt(height),\n      isInteractive: false,\n      interactionId: bboxId\n    };\n\n    Parser.validator.registerId(bboxId);\n    Parser.checkpoint.map.setItemInMap(GameItemType.boundingBoxes, bboxId, bboxProperty);\n    if (addToLoc) {\n      Parser.checkpoint.map.addItemToLocation(locationId, GameItemType.boundingBoxes, bboxId);\n    }\n\n    return bboxProperty;\n  }\n}\n","import { LocationId } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\n\n/**\n * This class contains the parser for the BGM and SFX paragraphs\n * within a location\n */\nexport default class MusicParser {\n  /**\n   * This function parses a series of sounds and updates\n   * the sound assets included in the game map.\n   *\n   * It also parses the first BGM as the bgm of the location\n   *\n   * @param locationId The locationId of the BGM/SFX you want to parse\n   * @param soundList the list of sounds to be added as assets\n   * @param soundType Whether it's BGM or SFX\n   */\n  public static parse(locationId: LocationId, soundList: string[], soundType: GameSoundType) {\n    soundList.forEach((musicDetails, musicIndex) => {\n      const [id, assetPath, volume] = StringUtils.splitByChar(musicDetails, ',');\n      Parser.validator.registerId(id);\n\n      Parser.checkpoint.map.addSoundAsset({\n        key: id,\n        path: assetPath,\n        config: {\n          volume: parseFloat(volume),\n          loop: soundType === GameSoundType.BGM\n        },\n        soundType\n      });\n\n      if (soundType === GameSoundType.BGM && musicIndex === 0) {\n        Parser.checkpoint.map.setBGMusicAt(locationId, id);\n      }\n    });\n  }\n}\n","import { AnimType, AssetType } from '../assets/AssetsTypes';\nimport { GameItemType, LocationId } from '../location/GameMapTypes';\nimport { ObjectProperty } from '../objects/GameObjectTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport Parser from './Parser';\n\n/**\n * This class parses object CSV's into Object Properties\n */\nexport default class ObjectParser {\n  /**\n   * This function parses object CSVs in a location,\n   * and creates Object Properties corresponding to the each object CSV,\n   * and stores these Object Properties into the game map.\n   *\n   * The class also parses actions of objects if any.\n   *\n   * @param locationId the location where the object paragraph can be found\n   * @param objectList the list of lines describing objects in the location, including actions\n   */\n  public static parse(locationId: LocationId, objectList: string[]) {\n    const objectParagraphs = StringUtils.splitToParagraph(objectList);\n\n    objectParagraphs.forEach(([header, body]: [string, string[]]) => {\n      const object = this.parseObjectConfig(locationId, header);\n      if (body.length) {\n        object.isInteractive = true;\n        object.actionIds = ActionParser.parseActions(body);\n      }\n    });\n  }\n\n  /**\n   * Generates an asset key based on the object path\n   *\n   * @param shortPath path to the object\n   */\n  private static objectAssetKey(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * Generates an asset path based on the object path\n   *\n   * @param shortPath path to the object\n   */\n  private static objectPath(shortPath: string) {\n    return shortPath;\n  }\n\n  /**\n   * This function parses one object CSV into an Object Property,\n   * and places the object inside the game map.\n   *\n   * It also returns the reference to the object property, so that\n   * actionIds can be added to it.\n   *\n   * @param locationId The location id\n   * @param objectDetails One line containing an object CSV\n   * @returns {ObjectProperty} the object property created\n   */\n  private static parseObjectConfig(locationId: LocationId, objectDetails: string): ObjectProperty {\n    const addToLoc = objectDetails[0] === '+';\n    if (addToLoc) {\n      objectDetails = objectDetails.slice(1);\n    }\n\n    const [objectId, shortPath, x, y, width, height, type, frame] = StringUtils.splitByChar(\n      objectDetails,\n      ','\n    );\n    Parser.validator.registerId(objectId);\n\n    const objectProperty: ObjectProperty = {\n      assetKey: this.objectAssetKey(shortPath),\n      x: parseInt(x),\n      y: parseInt(y),\n      width: parseInt(width) || undefined,\n      height: parseInt(height) || undefined,\n      isInteractive: false,\n      interactionId: objectId\n    };\n\n    Parser.checkpoint.map.addMapAsset(this.objectAssetKey(shortPath), {\n      type: AssetType[type] || AssetType.Image,\n      key: objectId,\n      path: this.objectPath(shortPath),\n      config: {\n        frameHeight: parseInt(height) || -1,\n        frameWidth: parseInt(width) || -1,\n        centreX: 0,\n        centreY: 0,\n        endFrame: parseInt(frame) - 1 || 0,\n        animType: AnimType.Object\n      }\n    });\n\n    Parser.checkpoint.map.setItemInMap(GameItemType.objects, objectId, objectProperty);\n    if (addToLoc) {\n      Parser.checkpoint.map.addItemToLocation(locationId, GameItemType.objects, objectId);\n    }\n\n    return objectProperty;\n  }\n}\n","import { AssetType } from '../assets/AssetsTypes';\nimport { GameItemType, GameLocation, LocationId } from '../location/GameMapTypes';\nimport { GameSoundType } from '../sound/GameSoundTypes';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport BoundingBoxParser from './BoundingBoxParser';\nimport CharacterParser from './CharacterParser';\nimport MusicParser from './MusicParser';\nimport ObjectParser from './ObjectParser';\nimport Parser from './Parser';\nimport ParserConverter from './ParserConverter';\nimport { GameEntityType } from './ParserValidator';\n\n/**\n * This class parses data for one specific location.\n */\nexport default class LocationParser {\n  /**\n   * This function reads the entire location body and\n   * updates the location in the game map based on details inside\n   * including charcters, objects, boundingBoxes etc.\n   *\n   * @param locationId The location id for the location to parse\n   * @param locationBody The entire body of the location as string array\n   */\n  public static parse(locationId: LocationId, locationBody: string[]) {\n    const location = Parser.checkpoint.map.getLocationAtId(locationId);\n    const locationParagraphs = StringUtils.splitToParagraph(locationBody);\n\n    locationParagraphs.forEach(([header, body]: [string, string[]]) => {\n      if (body.length === 0 && header.includes(':')) {\n        this.parseLocationConfig(location, header);\n      } else {\n        this.parseLocationParagraphs(location, header, body);\n      }\n    });\n  }\n\n  /**\n   * This paragraph parses all the config details in a specific location\n   * ie lines containing the ':' to specify gameplay details about the location\n   *\n   * @param location The reference game location that we want to update\n   * @param locationConfig The config string about the location\n   */\n  private static parseLocationConfig(location: GameLocation, locationConfig: string) {\n    const [key, value] = StringUtils.splitByChar(locationConfig, ':');\n    const configValues = StringUtils.splitByChar(value, ',');\n    switch (key) {\n      case 'modes':\n        configValues.forEach(mode => {\n          const gameMode = ParserConverter.stringToGameMode(mode);\n          location.modes.add(gameMode);\n        });\n        break;\n      case 'nav':\n        configValues.forEach(otherLocationId => {\n          Parser.validator.assertEntityType(GameEntityType.locations, otherLocationId);\n          location.navigation.add(otherLocationId);\n        });\n        break;\n      case 'talkTopics':\n        const talkTopics = configValues;\n        Parser.validator.assertItemTypes(GameItemType.dialogues, talkTopics);\n        location.talkTopics = new Set(talkTopics);\n        break;\n      case 'preview':\n        const [previewPath] = configValues;\n        if (previewPath) {\n          const previewKey = '/preview' + previewPath;\n          Parser.checkpoint.map.addMapAsset(previewKey, {\n            type: AssetType.Image,\n            key: location.id + 'Preview',\n            path: previewPath\n          });\n          location.previewKey = previewKey;\n        }\n        break;\n      default:\n        throw new Error(`Invalid config key \"${key}\" specified under location \"${location.id}\"`);\n    }\n  }\n\n  /**\n   * This paragraph parses all the paragraphs inside a specific location\n   * ie lines paragraphs headed by 'objects', 'boundingBoxes', etc.\n   *\n   * @param location The reference game location that we want to update\n   * @param entityHeader The header of the entity we want to parse in the location\n   * @param body The body paragraph underneath the entity header\n   */\n  private static parseLocationParagraphs(\n    location: GameLocation,\n    entityHeader: string,\n    body: string[]\n  ) {\n    switch (entityHeader) {\n      case 'objects':\n        ObjectParser.parse(location.id, body);\n        break;\n      case 'boundingBoxes':\n        BoundingBoxParser.parse(location.id, body);\n        break;\n      case 'characters':\n        CharacterParser.parse(location.id, body);\n        break;\n      case 'bgm':\n        MusicParser.parse(location.id, body, GameSoundType.BGM);\n        break;\n      case 'sfx':\n        MusicParser.parse(location.id, body, GameSoundType.SFX);\n        break;\n      case 'actions':\n        location.actionIds = ActionParser.parseActions(body);\n        break;\n      default:\n        throw new Error(`Invalid location paragraph header \"${entityHeader}\"`);\n    }\n  }\n}\n","import { TaskDetail } from '../task/GameTaskTypes';\nimport StringUtils from '../utils/StringUtils';\nimport Parser from './Parser';\n\n/**\n * This class parses the \"tasks\" paragraphs,\n * and creates the indicated tasks to be displayed\n * to the user on the Task Log.\n */\nexport default class TasksParser {\n  /**\n   * This function parses the strings and creates each task\n   * based on three parameters:\n   *\n   * (1) The specified task id\n   * (2) The title of the task\n   * (3) The description of the task\n   *\n   * E.g.\n   *\n   * tasks\n   *     taskTalkToScottie, Talk to Scottie, Have a chat with your best friend, Scottie!\n   *     taskCheckScreen, Check the monitor, Go to your room and check for further instructions!\n   *\n   * @param taskDetails the CSV lines containing descriptions about the tasks\n   */\n  public static parse(taskDetails: string[]) {\n    const tasks: TaskDetail[] = [];\n    taskDetails.forEach(taskDetail => {\n      const [taskId, title, desc] = StringUtils.splitWithLimit(taskDetail, ',', 2);\n      const newTask: TaskDetail = {\n        taskId: taskId,\n        title: title,\n        description: desc,\n        visible: false\n      };\n      tasks.push(newTask);\n    });\n    Parser.checkpoint.tasks.addTasks(tasks);\n  }\n}\n","import { GameCheckpoint } from '../chapter/GameChapterTypes';\nimport GameMap from '../location/GameMap';\nimport GameObjective from '../objective/GameObjective';\nimport GameTask from '../task/GameTask';\nimport StringUtils from '../utils/StringUtils';\nimport ActionParser from './ActionParser';\nimport DialoguesParser from './DialogueParser';\nimport LocationsParser from './LocationDetailsParser';\nimport LocationParser from './LocationParser';\nimport ParserValidator, { GameEntityType } from './ParserValidator';\nimport TasksParser from './TasksParser';\n\n/**\n * This class converts a checkpoint txt file into a Checkpoint\n * object.\n *\n * A Checkpoint object encapsulates data about the map including all\n * the locations inside it, as well as the objectives in that checkpoint,\n * basically everything the game engine needs to know to render\n * the entire checkpoint for players to play.\n *\n */\nclass Parser {\n  public static checkpoint: GameCheckpoint;\n  private static actionIdNum: number;\n  public static validator: ParserValidator;\n\n  public static generateActionId() {\n    Parser.actionIdNum++;\n    return `action#${Parser.actionIdNum}`;\n  }\n\n  public static init() {\n    Parser.actionIdNum = 0;\n\n    Parser.checkpoint = {\n      map: new GameMap(),\n      startingLoc: '',\n      objectives: new GameObjective(),\n      tasks: new GameTask()\n    };\n\n    Parser.validator = new ParserValidator();\n  }\n\n  public static parse(chapterText: string, continueParse = false) {\n    if (!continueParse) {\n      Parser.init();\n    }\n\n    const checkPointLines = StringUtils.splitToLinesAndRemoveComments(chapterText);\n    const checkPointParagraphs = StringUtils.splitToParagraph(checkPointLines);\n\n    checkPointParagraphs.forEach(([header, body]: [string, string[]]) => {\n      if (body.length === 0 && header.includes(':')) {\n        Parser.parseCheckpointConfig(header);\n      } else {\n        Parser.parseCheckpointParagraphs(header, body) || LocationParser.parse(header, body);\n      }\n    });\n\n    Parser.validator.verifyAssertions();\n  }\n\n  private static parseCheckpointConfig(checkpointConfig: string) {\n    const [key, value] = StringUtils.splitByChar(checkpointConfig, ':');\n    switch (key) {\n      case 'startingLoc':\n        Parser.validator.assertEntityType(GameEntityType.locations, value);\n        Parser.checkpoint.startingLoc = value;\n        break;\n      default:\n        throw new Error(`Invalid checkpoint config key, \"${checkpointConfig}\"`);\n    }\n  }\n\n  private static parseCheckpointParagraphs(header: string, body: string[]) {\n    switch (header) {\n      case 'objectives':\n        Parser.checkpoint.objectives.addObjectives(body);\n        break;\n      case 'tasks':\n        TasksParser.parse(body);\n        break;\n      case 'locations':\n        LocationsParser.parse(body);\n        break;\n      case 'gameStartActions':\n        Parser.checkpoint.map.setGameStartActions(ActionParser.parseActions(body));\n        break;\n      case 'checkpointCompleteActions':\n        Parser.checkpoint.map.setCheckpointCompleteActions(ActionParser.parseActions(body));\n        break;\n      case 'dialogues':\n        DialoguesParser.parse(body);\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n}\n\nexport default Parser;\n","import TextAssets, { MockTextAssets, toTxtPath } from '../assets/TextAssets';\nimport Parser from '../parser/Parser';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { loadText } from './LoaderUtils';\n\n/**\n * Starts a new checkpoint with the given chapter number\n * and checkpoint number. The chapter/checkpoint file\n * will also be appended with the default checkpoint text.\n *\n * @param continueGame if true, will load the last checkpoint. Else, restart the chapter.\n * @param chapterNum chapter number\n * @param checkpointNum checkpoint number\n */\nexport async function callGameManagerOnTxtLoad(\n  continueGame: boolean,\n  chapterNum: number,\n  checkpointNum: number\n) {\n  const textAssets = SourceAcademyGame.getInstance().getIsUsingMock() ? MockTextAssets : TextAssets;\n  const scene = SourceAcademyGame.getInstance().getCurrentSceneRef();\n  const gameChapters = SourceAcademyGame.getInstance().getGameChapters();\n  const filename = gameChapters[chapterNum].filenames[checkpointNum];\n  if (!filename) {\n    return;\n  }\n\n  await loadText(scene, filename, filename);\n  await loadText(scene, textAssets.defaultCheckpoint.key, textAssets.defaultCheckpoint.path);\n\n  const text = scene.cache.text.get(filename);\n  const defaultCheckpointText = scene.cache.text.get(textAssets.defaultCheckpoint.key);\n\n  Parser.parse(defaultCheckpointText);\n  Parser.parse(text, true);\n  const gameCheckpoint = Parser.checkpoint;\n\n  scene.scene.start('GameManager', {\n    gameCheckpoint,\n    continueGame,\n    chapterNum,\n    checkpointNum\n  });\n}\n\n/**\n * Starts a new checkpoint using the next checkpoint in the\n * the chapter simulator stack\n */\nexport async function callGameManagerForSim() {\n  const scene = SourceAcademyGame.getInstance().getCurrentSceneRef();\n  const checkpointFilenames = SourceAcademyGame.getInstance().getSSChapterSimFilenames();\n  if (!checkpointFilenames.length) {\n    scene.scene.start('GameSimulatorMenu');\n    return;\n  }\n  const filename = checkpointFilenames.pop() as string;\n  await loadText(scene, filename, toTxtPath(filename));\n  await loadText(scene, TextAssets.defaultCheckpoint.key, TextAssets.defaultCheckpoint.path);\n\n  const text = scene.cache.text.get(filename);\n  const defaultCheckpointText = scene.cache.text.get(TextAssets.defaultCheckpoint.key);\n\n  Parser.parse(defaultCheckpointText);\n  Parser.parse(text, true);\n  const gameCheckpoint = Parser.checkpoint;\n\n  scene.scene.start('GameManager', {\n    gameCheckpoint,\n    chapterNum: -1,\n    checkpointNum: -1\n  });\n  return true;\n}\n","import ImageAssets from '../../assets/ImageAssets';\nimport { GameChapter } from '../../chapter/GameChapterTypes';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport CommonTextHover from '../../commons/CommonTextHover';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { callGameManagerOnTxtLoad } from '../../utils/TxtLoaderUtils';\nimport ChapterSelect from './ChapterSelect';\nimport chapConstants, { chapterIndexStyle, chapterTitleStyle } from './ChapterSelectConstants';\n\n/**\n * Create a chapter selection and formats it.\n *\n * It will use the chapter preview background and set it as the\n * chapter selection background.\n *\n * Additionally, this method attach a 'Play/Continue' button and\n * 'Reset Progress' button to the chapter selection; with an already\n * set up button functionality.\n *\n * @param scene scene for the chapter selection container to attach to\n * @param title title of the chapter\n * @param imageUrl url of the preview image\n * @param index index of chapter\n * @param lastCheckpointsIdx last checkpoint to continue users' progression from\n */\nexport function createChapter(\n  scene: ChapterSelect,\n  { title, imageUrl }: GameChapter,\n  index: number\n) {\n  const [x, y] = getCoorByChapter(index);\n  const chapterContainer = new Phaser.GameObjects.Container(scene, x, y);\n\n  const chapterDone =\n    index <= SourceAcademyGame.getInstance().getSaveManager().getLargestCompletedChapterNum();\n\n  // Chapter Preview\n  const chapterPreview = new Phaser.GameObjects.Image(scene, 0, 0, imageUrl).setDisplaySize(\n    chapConstants.imageRect.width,\n    chapConstants.imageRect.height\n  );\n\n  // Chapter Frame + blue tint\n  const chapterFrame = new Phaser.GameObjects.Sprite(\n    scene,\n    chapConstants.frame.xOffset,\n    chapConstants.frame.yOffset,\n    ImageAssets.chapterSelectFrame.key\n  ).setScale(0.99 * chapConstants.imageScale.x, 0.99 * chapConstants.imageScale.y);\n\n  // Chapter completed rectangle\n  const chapCompleteRect = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    chapConstants.chapComplete.y,\n    chapConstants.imageRect.width,\n    chapConstants.chapComplete.height,\n    0\n  )\n    .setOrigin(0.5)\n    .setAlpha(0.7)\n    .setInteractive()\n    .setVisible(chapterDone);\n\n  // Chapter complete text\n  const chapCompleteText = createBitmapText(\n    scene,\n    chapConstants.chapComplete.text,\n    { x: 0, y: chapConstants.chapComplete.y, oriX: 0.5, oriY: 0.5 },\n    chapterIndexStyle\n  ).setVisible(chapterDone);\n\n  // Chapter Action Popup\n  const chapterRepeatHover = new CommonTextHover(\n    scene,\n    chapConstants.resetButton.xOffset + 8,\n    chapConstants.resetButton.yOffset - 20,\n    'Reset progress'\n  );\n  const chapterContinueHover = new CommonTextHover(\n    scene,\n    chapConstants.playButton.xOffset + 8,\n    chapConstants.playButton.yOffset - 20,\n    'Play/Continue'\n  );\n\n  // Chapter Actions\n  const chapterRepeat = createButton(scene, {\n    assetKey: ImageAssets.chapterRepeatButton.key,\n    onUp: async () => await callGameManagerOnTxtLoad(false, index, 0),\n    onHover: () => chapterRepeatHover.setVisible(true),\n    onOut: () => chapterRepeatHover.setVisible(false)\n  })\n    .setPosition(chapConstants.resetButton.xOffset, chapConstants.resetButton.yOffset)\n    .setScale(chapConstants.buttons.scale);\n\n  const lastCheckpointPlayed = SourceAcademyGame.getInstance()\n    .getSaveManager()\n    .getChapterSaveState(index).lastCheckpointPlayed;\n\n  const chapterContinue = createButton(scene, {\n    assetKey: ImageAssets.chapterContinueButton.key,\n    onUp: async () => await callGameManagerOnTxtLoad(true, index, lastCheckpointPlayed),\n    onHover: () => chapterContinueHover.setVisible(true),\n    onOut: () => chapterContinueHover.setVisible(false)\n  })\n    .setPosition(chapConstants.playButton.xOffset, chapConstants.playButton.yOffset)\n    .setScale(chapConstants.buttons.scale);\n\n  // Chapter Text\n  const chapterIndexText = createBitmapText(\n    scene,\n    `Chapter ${index}`,\n    chapConstants.indexTextConfig,\n    chapterIndexStyle\n  );\n\n  const chapterTitleText = createBitmapText(\n    scene,\n    title,\n    chapConstants.titleTextConfig,\n    chapterTitleStyle\n  );\n\n  const chapterAccessible =\n    index <= SourceAcademyGame.getInstance().getSaveManager().getLargestCompletedChapterNum() + 1;\n\n  const blackTint = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    chapConstants.imageRect.width,\n    chapConstants.imageRect.height,\n    0\n  )\n    .setOrigin(0.5)\n    .setAlpha(chapterAccessible ? 0 : 0.8)\n    .setInteractive();\n\n  chapterContainer.add([\n    chapterPreview,\n    chapterFrame,\n    chapCompleteRect,\n    chapCompleteText,\n    chapterRepeat,\n    chapterContinue,\n    chapterRepeatHover,\n    chapterContinueHover,\n    chapterIndexText,\n    chapterTitleText,\n    blackTint\n  ]);\n\n  return chapterContainer;\n}\n\nfunction getCoorByChapter(chapterNum: number) {\n  const page = Math.floor(chapterNum / chapConstants.grid.chapPerPage);\n  chapterNum %= chapConstants.grid.chapPerPage;\n  const row = Math.floor(chapterNum / chapConstants.grid.chapPerRow);\n  const col = chapterNum % chapConstants.grid.chapPerRow;\n\n  const centreCol = (chapConstants.grid.chapPerRow - 1) / 2;\n  const centreRow = (chapConstants.grid.chapPerCol - 1) / 2;\n\n  let x = page * screenSize.x + screenCenter.x;\n  x += (col - centreCol) * (chapConstants.imageRect.width + chapConstants.grid.chapGapX);\n  let y = screenCenter.y;\n  y += (row - centreRow) * (chapConstants.imageRect.height + chapConstants.grid.chapGapY);\n\n  return [x, y];\n}\n","import { screenCenter, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { mandatory, toS3Path } from 'src/features/game/utils/GameUtils';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { loadImage } from '../../utils/LoaderUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport chapConstants, { pageNumberStyle } from './ChapterSelectConstants';\nimport { createChapter } from './ChapterSelectHelper';\n\n/**\n * The Chapter Select scene.\n * Player is able to choose which chapter to play from here.\n */\nclass ChapterSelect extends Phaser.Scene {\n  public layerManager?: GameLayerManager;\n\n  private chaptersContainer: Phaser.GameObjects.Container | undefined;\n  private backButtonContainer: Phaser.GameObjects.Container | undefined;\n  private pageNumberText: Phaser.GameObjects.BitmapText | undefined;\n  private targetPage: number;\n\n  constructor() {\n    super('ChapterSelect');\n\n    this.chaptersContainer = undefined;\n    this.backButtonContainer = undefined;\n    this.pageNumberText = undefined;\n    this.targetPage = 0; // First page is page 0 (but is displayed as page 1)\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n  }\n\n  public async create() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager = new GameLayerManager(this);\n    await this.preloadChapterAssets();\n    this.renderBackground();\n    this.renderChapters();\n  }\n\n  public update() {\n    if (!this.chaptersContainer) return;\n\n    const targetX = -this.targetPage * screenSize.x;\n    if (this.chaptersContainer.x > targetX) {\n      // Scroll right\n      const newXPos = this.chaptersContainer.x - chapConstants.scrollSpeed;\n      this.chaptersContainer.x = Math.max(newXPos, targetX);\n    } else if (targetX > this.chaptersContainer.x) {\n      // Scroll left\n      const newXPos = this.chaptersContainer.x + chapConstants.scrollSpeed;\n      this.chaptersContainer.x = Math.min(newXPos, targetX);\n    }\n  }\n\n  /**\n   * Clean up of related managers.\n   */\n  public cleanUp() {\n    this.getLayerManager().clearAllLayers();\n  }\n\n  /**\n   * Load the chapter previews assets to be shown.\n   */\n  private async preloadChapterAssets() {\n    await Promise.all(\n      this.getGameChapters().map(\n        async chapterDetail =>\n          await loadImage(this, chapterDetail.imageUrl, toS3Path(chapterDetail.imageUrl, true))\n      )\n    );\n  }\n\n  /**\n   * Render the background of this scene.\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.spaceshipBg.key\n    );\n    const blackOverlay = new Phaser.GameObjects.Rectangle(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      screenSize.x,\n      screenSize.y,\n      0\n    ).setAlpha(0.3);\n    this.getLayerManager().addToLayer(Layer.Background, background);\n    this.getLayerManager().addToLayer(Layer.Background, blackOverlay);\n  }\n\n  /**\n   * Render all the chapter selections and UI elements\n   * (the gray frame, the left and right arrow, back button, page number)\n   */\n  private renderChapters() {\n    this.backButtonContainer = new CommonBackButton(this, () => {\n      this.cleanUp();\n      this.scene.start('MainMenu');\n    });\n    this.chaptersContainer = this.createChaptersContainer();\n\n    this.pageNumberText = createBitmapText(\n      this,\n      `1 / ${this.numPages()}`,\n      chapConstants.pageNumberTextConfig,\n      pageNumberStyle\n    );\n\n    // Prepare to autoscroll to smallest incomplete chapter\n    const latestChapter = Math.min(\n      SourceAcademyGame.getInstance().getSaveManager().getLargestCompletedChapterNum() + 1,\n      this.getGameChapters().length - 1\n    );\n    this.targetPage = Math.floor(latestChapter / chapConstants.grid.chapPerPage);\n    if (this.targetPage < 0) {\n      // Only happens when this.getGameChapters().length === 0\n      this.targetPage = 0;\n    }\n    this.pageNumberText.setText(`${this.targetPage + 1} / ${this.numPages()}`);\n\n    const border = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.chapterSelectBorder.key\n    );\n\n    const leftArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onUp: () => this.scrollPrevPage()\n    }).setPosition(screenCenter.x - chapConstants.arrow.xOffset, screenCenter.y);\n\n    const rightArrow = createButton(this, {\n      assetKey: ImageAssets.chapterSelectArrow.key,\n      onUp: () => this.scrollNextPage()\n    })\n      .setPosition(screenCenter.x + chapConstants.arrow.xOffset, screenCenter.y)\n      .setScale(-1, 1);\n\n    this.getLayerManager().addToLayer(Layer.UI, this.chaptersContainer);\n    this.getLayerManager().addToLayer(Layer.UI, this.backButtonContainer);\n    this.getLayerManager().addToLayer(Layer.UI, this.pageNumberText);\n    this.getLayerManager().addToLayer(Layer.UI, border);\n    this.getLayerManager().addToLayer(Layer.UI, leftArrow);\n    this.getLayerManager().addToLayer(Layer.UI, rightArrow);\n  }\n\n  /**\n   * Create a chapter selection based on its detail; as well as\n   * attach it with the necessary information (user progress).\n   *\n   * The information will be used/mutated depending on whether\n   * the user decides to continue or reset the progress.\n   */\n  private createChaptersContainer() {\n    const chaptersContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    chaptersContainer\n      .add(\n        this.getGameChapters().map((chapterDetail, chapterIndex) => {\n          return createChapter(this, chapterDetail, chapterIndex);\n        })\n      )\n      .sort('depth')\n      .reverse(); // Ensures hover text correctly render over other objects in container\n    return chaptersContainer;\n  }\n\n  private getGameChapters = () => SourceAcademyGame.getInstance().getGameChapters();\n\n  /**\n   * Returns the number of pages of chapters\n   */\n  private numPages() {\n    const pages = Math.ceil(this.getGameChapters().length / chapConstants.grid.chapPerPage);\n    return Math.max(pages, 1); // Always have at least 1 page, even when 0 chapters\n  }\n\n  /**\n   * Scroll the screen to the previous page of chapters\n   */\n  private scrollPrevPage() {\n    this.targetPage = Math.max(this.targetPage - 1, 0);\n    this.pageNumberText?.setText(`${this.targetPage + 1} / ${this.numPages()}`);\n  }\n\n  /**\n   * Scroll the screen to the next page of chapters\n   */\n  private scrollNextPage() {\n    const numPages = this.numPages();\n    this.targetPage = Math.min(this.targetPage + 1, numPages - 1);\n    this.pageNumberText?.setText(`${this.targetPage + 1} / ${numPages}`);\n  }\n\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default ChapterSelect;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const transitionTextStyle: BitmapFontStyle = {\n  key: FontAssets.alienCowsFont.key,\n  size: 80,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst tweenDuration = 1500;\n\nconst CheckpointConstants = {\n  text: { chapter: 'Chapter completed.', checkpoint: 'Checkpoint reached.' },\n  transitionTextConfig: { x: screenCenter.x, y: screenCenter.y, oriX: 0.5, oriY: 0.5 },\n  tweenDuration: tweenDuration,\n  entryTween: {\n    alpha: 1,\n    duration: tweenDuration,\n    ease: 'Power2'\n  },\n  exitTween: {\n    alpha: 0,\n    duration: tweenDuration,\n    ease: 'Power2'\n  }\n};\n\nexport default CheckpointConstants;\n","import { GameChapter } from '../../chapter/GameChapterTypes';\nimport SourceAcademyGame, { GameType } from '../../SourceAcademyGame';\nimport { sleep } from '../../utils/GameUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport { callGameManagerForSim, callGameManagerOnTxtLoad } from '../../utils/TxtLoaderUtils';\nimport CheckpointConstants, { transitionTextStyle } from './CheckpointTransitionConstants';\n\n/**\n * This scene is triggered in between checkpoints/chapters.\n * From user's perspective, it is when the in-between scene that is triggered\n * after they completed a checkpoint.\n *\n * Internally, we use this scene to fully load the next checkpoint,\n * before finally loading the next scene.\n *\n * In Game simulator, the next checkpoint is loaded based on the\n * chapterSimStack using the callGameManagerForSim function.\n *\n * We cannot load these informations at the start of GameManager as\n * it can alter the sequencing of preload() and create() in the GameManager.\n */\nclass CheckpointTransition extends Phaser.Scene {\n  constructor() {\n    super('CheckpointTransition');\n  }\n\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n  }\n\n  public async create() {\n    if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) {\n      await this.showTransitionText(CheckpointConstants.text.checkpoint);\n      await callGameManagerForSim();\n      return;\n    }\n\n    // Fetch all the necessary informations: save state and chapter details.\n    const loadedGameState = SourceAcademyGame.getInstance().getSaveManager().getFullSaveState();\n    const chapterDetails = SourceAcademyGame.getInstance().getGameChapters();\n\n    const [currChapter, currCheckpoint] = loadedGameState.userSaveState.recentlyPlayedCheckpoint;\n\n    if (this.isLastCheckpoint(chapterDetails, currChapter, currCheckpoint)) {\n      // If it is the last checkpoint, we mark that chapter is completed\n      await SourceAcademyGame.getInstance().getSaveManager().saveChapterComplete(currChapter);\n      await this.showTransitionText(CheckpointConstants.text.chapter);\n      if (this.isLastChapter(chapterDetails, currChapter)) {\n        // No more chapter, transition to chapter select instead\n        this.scene.start('ChapterSelect');\n        return;\n      } else {\n        // Transition to the next chapter, first checkpoint\n        await callGameManagerOnTxtLoad(true, currChapter + 1, 0);\n        return;\n      }\n    } else {\n      // Transition to the next checkpoint\n      await this.showTransitionText(CheckpointConstants.text.checkpoint);\n      await callGameManagerOnTxtLoad(false, currChapter, currCheckpoint + 1);\n      return;\n    }\n  }\n\n  /**\n   * In-game text to be shown during the checkpoint transition.\n   *\n   * @param text text to show\n   */\n  private async showTransitionText(text: string) {\n    const transitionText = createBitmapText(\n      this,\n      text,\n      CheckpointConstants.transitionTextConfig,\n      transitionTextStyle\n    ).setAlpha(0);\n\n    this.add.existing(transitionText);\n\n    // Fade in\n    this.tweens.add({\n      targets: transitionText,\n      ...CheckpointConstants.entryTween\n    });\n\n    await sleep(CheckpointConstants.tweenDuration * 2);\n\n    // Fade out\n    this.tweens.add({\n      targets: transitionText,\n      ...CheckpointConstants.exitTween\n    });\n\n    await sleep(CheckpointConstants.tweenDuration);\n  }\n\n  /**\n   * Checks whether the given checkpoint is the last checkpoint\n   * of the chapter.\n   *\n   * @param chapterDetails the entire story collection of chapters' information\n   * @param currChapter current chapter\n   * @param currCheckpoint current checkpoint\n   */\n  private isLastCheckpoint(\n    chapterDetails: GameChapter[],\n    currChapter: number,\n    currCheckpoint: number\n  ) {\n    return currCheckpoint >= chapterDetails[currChapter].filenames.length - 1;\n  }\n\n  /**\n   * Checks whether the given chapter is the last chapter of the story.\n   *\n   * @param chapterDetails the entire story collection of chapters' information\n   * @param currChapter current chapter\n   */\n  public isLastChapter(chapterDetails: GameChapter[], currChapter: number) {\n    return currChapter >= chapterDetails.length - 1;\n  }\n}\n\nexport default CheckpointTransition;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const mainMenuStyle: BitmapFontStyle = {\n  key: FontAssets.zektonFont.key,\n  size: 30,\n  align: Phaser.GameObjects.BitmapText.ALIGN_RIGHT\n};\n\nconst bannerShow = 200;\nconst bannerHide = 300;\n\nconst MainMenuConstants = {\n  text: {\n    chapterSelect: 'Play Chapter',\n    studentRoom: 'Go to My Room',\n    awards: 'Awards Hall',\n    settings: 'Settings',\n    bindings: 'Key Bindings'\n  },\n  button: { ySpace: screenSize.y * 0.5 },\n  buttonTextConfig: { x: 600, y: 0, oriX: 1.0, oriY: 0.1 },\n  banner: { xHide: bannerHide },\n  onFocusTween: {\n    x: screenCenter.x + bannerShow,\n    duration: 200,\n    ease: 'Power2'\n  },\n  outFocusTween: {\n    x: screenCenter.x + bannerHide,\n    duration: 200,\n    ease: 'Power2'\n  },\n  saBanner: { x: screenSize.x * 0.3, y: screenSize.y * 0.9 }\n};\n\nexport default MainMenuConstants;\n","import ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport { blackScreen } from '../../effects/FadeEffect';\nimport { putWorkerMessage } from '../../effects/WorkerMessage';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { mandatory } from '../../utils/GameUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport MainMenuConstants, { mainMenuStyle } from './MainMenuConstants';\n\n/**\n * Main Menu\n *\n * User can navigate to other scenes from here.\n */\nclass MainMenu extends Phaser.Scene {\n  private layerManager?: GameLayerManager;\n\n  constructor() {\n    super('MainMenu');\n  }\n\n  public async create() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager = new GameLayerManager(this);\n    this.renderBackground();\n    this.renderOptionButtons();\n\n    putWorkerMessage(this, 'T', screenCenter.x * 1.12, screenCenter.y * 1.1);\n\n    SourceAcademyGame.getInstance().getSoundManager().playBgMusic(SoundAssets.galacticHarmony.key);\n  }\n\n  /**\n   * Render background image for the main menu.\n   */\n  private renderBackground() {\n    const backgroundImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.spaceshipBg.key\n    ).setDisplaySize(screenSize.x, screenSize.y);\n    const blackOverlay = blackScreen(this).setAlpha(0.15);\n    const saBanner = new Phaser.GameObjects.Image(\n      this,\n      MainMenuConstants.saBanner.x,\n      MainMenuConstants.saBanner.y,\n      ImageAssets.saBanner.key\n    ).setAlpha(0.7);\n    this.getLayerManager().addToLayer(Layer.Background, backgroundImg);\n    this.getLayerManager().addToLayer(Layer.Background, blackOverlay);\n    this.getLayerManager().addToLayer(Layer.Background, saBanner);\n  }\n\n  /**\n   * Render all the buttons for the main menu.\n   * Selection of buttons is detailed at getOptionButtons().\n   */\n  private renderOptionButtons() {\n    const optionsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    const buttons = this.getOptionButtons();\n\n    const buttonPositions = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: buttons.length,\n      maxYSpace: MainMenuConstants.button.ySpace\n    });\n\n    optionsContainer.add(\n      buttons.map((button, index) =>\n        this.createOptionButton(\n          button.text,\n          buttonPositions[index][0] + MainMenuConstants.banner.xHide,\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n\n    this.getLayerManager().addToLayer(Layer.UI, optionsContainer);\n  }\n\n  /**\n   * Format a main menu button with the given text; attach a callback\n   * and position it at the given xPos and yPos.\n   *\n   * @param text text to be displayed on the button\n   * @param xPos x position of the button\n   * @param yPos y position of the button\n   * @param callback callback to be attached to the button\n   */\n  private createOptionButton(text: string, xPos: number, yPos: number, callback: any) {\n    // Animation to trigger on Hover and off Hover\n    const tweenOnHover = (target: Phaser.GameObjects.Container) => {\n      this.tweens.add({\n        targets: target,\n        ...MainMenuConstants.onFocusTween\n      });\n    };\n    const tweenOffHover = (target: Phaser.GameObjects.Container) => {\n      this.tweens.add({\n        targets: target,\n        ...MainMenuConstants.outFocusTween\n      });\n    };\n\n    // Create button with main menu style\n    const optButton: Phaser.GameObjects.Container = createButton(this, {\n      assetKey: ImageAssets.mainMenuOptBanner.key,\n      message: text,\n      textConfig: MainMenuConstants.buttonTextConfig,\n      bitMapTextStyle: mainMenuStyle,\n      onUp: callback,\n      onHover: () => tweenOnHover(optButton),\n      onOut: () => tweenOffHover(optButton),\n      onHoverEffect: false\n    }).setPosition(xPos, yPos);\n\n    return optButton;\n  }\n\n  /**\n   * Return all the buttons available at main menu,\n   * as well as their callbacks.\n   */\n  private getOptionButtons() {\n    return [\n      {\n        text: MainMenuConstants.text.chapterSelect,\n        callback: () => {\n          this.getLayerManager().clearAllLayers();\n          this.scene.start('ChapterSelect');\n        }\n      },\n      {\n        text: MainMenuConstants.text.awards,\n        callback: () => {\n          this.getLayerManager().clearAllLayers();\n          this.scene.start('AwardsHall');\n        }\n      },\n      {\n        text: MainMenuConstants.text.studentRoom,\n        callback: () => {\n          this.getLayerManager().clearAllLayers();\n          this.scene.start('RoomPreview');\n        }\n      },\n      {\n        text: MainMenuConstants.text.settings,\n        callback: () => {\n          this.getLayerManager().clearAllLayers();\n          this.scene.start('Settings');\n        }\n      },\n      {\n        text: MainMenuConstants.text.bindings,\n        callback: () => {\n          this.getLayerManager().clearAllLayers();\n          this.scene.start('Bindings');\n        }\n      }\n    ];\n  }\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default MainMenu;\n","import FontAssets from '../../assets/FontAssets';\nimport { screenSize } from '../../commons/CommonConstants';\nimport { BitmapFontStyle } from '../../commons/CommonTypes';\n\nexport const roomDefaultCode = `\nimport { prepend_remote_url, get_screen_width, get_screen_height, load_image, create_image, create_text, create_rect, add, set_display_size, set_alpha, set_origin } from 'game';\n\nfunction preload() {\n    load_image(\"galaxy\", prepend_remote_url(\"/locations/galaxy/normal.png\"));\n}\n\nfunction create() {\n    const width = get_screen_width();\n    const height = get_screen_height();\n    const centre_x = width / 2;\n    const centre_y = height / 2;\n\n    const image = create_image(centre_x, centre_y, \"galaxy\");\n    const image_resized = set_display_size(image, width, height);\n\n    const black_tint = create_rect(centre_x, centre_y, width, height, 0x000011);\n    const black_tint_alpha = set_alpha(black_tint, 0.5);\n\n    const text = create_text(centre_x, centre_y, \"Unable to fetch mission!\");\n    const text_repos = set_origin(text, 0.5, 0.5);\n\n    add(image_resized);\n    add(black_tint_alpha);\n    add(text_repos);\n}\n\nfunction update() {}\n`;\n\nexport const verifiedStyle: BitmapFontStyle = {\n  key: FontAssets.pixelFont.key,\n  size: 20,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nexport const RoomConstants = {\n  assessmentNumber: 'MYROOM',\n  verifiedText: 'VERIFIED',\n  tag: { width: 128, height: 50 },\n  hoverTagTextConfig: { x: 64, y: 0, oriX: 0.5, oriY: 0.55 },\n  refreshButton: { x: 0.95 * screenSize.x, y: 0.92 * screenSize.y }\n};\n","import { Assessment, IProgrammingQuestion } from 'src/commons/assessment/AssessmentTypes';\nimport { getAssessment, getAssessmentOverviews } from 'src/commons/sagas/RequestsSaga';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport GameModeSequence from '../../mode/sequence/GameModeSequence';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { HexColor } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport RoomPreview from './RoomPreview';\nimport { RoomConstants, roomDefaultCode, verifiedStyle } from './RoomPreviewConstants';\n\n/**\n * Async function that obtains students code for Create-My-Room mission\n *\n * @param {AccountInfo} accInfo - students' account information\n * @returns {Promise<string>} - promise of students code\n */\nexport async function getRoomPreviewCode(): Promise<string> {\n  const roomAssessmentId = await getRoomAssessmentId();\n  if (!roomAssessmentId) {\n    // Get default room code.\n    return getStudentRoomCode(null);\n  }\n  const mission = await getAssessment(\n    roomAssessmentId,\n    SourceAcademyGame.getInstance().getAccountInfo()\n  );\n  const studentCode = getStudentRoomCode(mission);\n  return studentCode;\n}\n\n/**\n * Function that generates the correct assessment id of students\n *\n * @param {AccountInfo} accInfo - students' account information\n */\nasync function getRoomAssessmentId() {\n  const assessments = await getAssessmentOverviews(\n    SourceAcademyGame.getInstance().getAccountInfo()\n  );\n  const roomAssessment = (assessments || []).find(\n    assessment => assessment.number === RoomConstants.assessmentNumber\n  );\n  return roomAssessment ? roomAssessment.id : null;\n}\n\n/**\n * Fetches the student code based on the mission.\n * If student has not attempted the mission; will return\n * the answer template instead.\n *\n * If the mission is invalid (e.g. invalid ID, typo), the\n * default code for the room will be returned instead.\n *\n * @param mission\n */\nfunction getStudentRoomCode(mission: Assessment | null) {\n  if (mission) {\n    const progQn = mission.questions[0] as IProgrammingQuestion;\n    const answer = progQn.answer;\n    return answer ? (answer as string) : progQn.solutionTemplate;\n  }\n  return roomDefaultCode;\n}\n\n/**\n * CMR Game Phases for the phase manager.\n */\nexport const createCMRGamePhases = () => {\n  return new Map([[GamePhaseType.None, new GameModeSequence()]]);\n};\n\n/**\n * Create a verification container.\n *\n * @param scene room preview scene\n * @returns {Phaser.GameObjects.Container} verification container\n */\nexport const createVerifiedHoverContainer = (scene: RoomPreview) => {\n  const hoverContainer = new Phaser.GameObjects.Container(scene, 0, 0);\n\n  const hoverTextBg = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    0,\n    RoomConstants.tag.width,\n    RoomConstants.tag.height,\n    HexColor.darkBlue\n  )\n    .setOrigin(0.0, 0.5)\n    .setAlpha(0.8);\n\n  const hoverTextFrame = new Phaser.GameObjects.Sprite(\n    scene,\n    0,\n    0,\n    ImageAssets.verifiedFrame.key\n  ).setOrigin(0.0, 0.5);\n\n  const hoverLine = new Phaser.GameObjects.Rectangle(\n    scene,\n    0,\n    -hoverTextBg.height * 0.5,\n    hoverTextBg.width,\n    hoverTextBg.height * 0.05,\n    HexColor.offWhite\n  ).setOrigin(0.0, 0.0);\n\n  const hoverText = createBitmapText(\n    scene,\n    RoomConstants.verifiedText,\n    RoomConstants.hoverTagTextConfig,\n    verifiedStyle\n  ).setBlendMode(Phaser.BlendModes.DIFFERENCE);\n\n  scene.tweens.add({\n    targets: hoverLine,\n    alpha: 0.2,\n    y: hoverTextBg.height * 0.35,\n    duration: 2000,\n    ease: 'Power0',\n    yoyo: true,\n    loop: -1\n  });\n\n  hoverContainer.add([hoverTextBg, hoverText, hoverLine, hoverTextFrame]);\n  hoverContainer.setVisible(false);\n  return hoverContainer;\n};\n","import { Context, runInContext } from 'js-slang';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport { createContext } from 'src/commons/utils/JsSlangHelper';\n\nimport ImageAssets from '../../assets/ImageAssets';\nimport { getAwardProp } from '../../awards/GameAwardsHelper';\nimport GameAwardsManager from '../../awards/GameAwardsManager';\nimport { Constants, screenCenter, screenSize } from '../../commons/CommonConstants';\nimport CommonTextHover from '../../commons/CommonTextHover';\nimport { ItemId } from '../../commons/CommonTypes';\nimport GameDashboardManager from '../../dashboard/GameDashboardManager';\nimport { DashboardPage } from '../../dashboard/GameDashboardTypes';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport GameEscapeManager from '../../escape/GameEscapeManager';\nimport GameInputManager from '../../input/GameInputManager';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport GamePhaseManager from '../../phase/GamePhaseManager';\nimport { GamePhaseType } from '../../phase/GamePhaseTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport GameToolbarManager from '../../toolbar/GameToolbarManager';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { mandatory, toS3Path } from '../../utils/GameUtils';\nimport { loadImage, loadSound, loadSpritesheet } from '../../utils/LoaderUtils';\nimport { resizeOverflow } from '../../utils/SpriteUtils';\nimport { RoomConstants, roomDefaultCode } from './RoomPreviewConstants';\nimport { createCMRGamePhases, createVerifiedHoverContainer } from './RoomPreviewHelper';\n\n/**\n * This scene uses the students code as part of its code.\n *\n * Additionally, the scene shares some common functionality as\n * GameManager, in that it incorporates escape menu and collectible\n * menu.\n *\n * Student code is not executed within a layer manager as\n * there are features that do not work well with container\n * e.g. mask, animations.\n *\n * Hence, student code will be executed and added to the scene\n * as per normal. Meanwhile, UI parts of this scene will still\n * make use of the layer manager; separate from student code.\n */\nexport default class RoomPreview extends Phaser.Scene {\n  private layerManager?: GameLayerManager;\n  private inputManager?: GameInputManager;\n  private phaseManager?: GamePhaseManager;\n  private escapeManager?: GameEscapeManager;\n  private collectibleManager?: GameAwardsManager;\n  private achievementManager?: GameAwardsManager;\n  private toolbarManager?: GameToolbarManager;\n  private dashboardManager?: GameDashboardManager;\n\n  private studentCode: string;\n  private preloadImageMap: Map<string, string>;\n  private preloadSoundMap: Map<string, string>;\n  private preloadSpritesheetMap: Map<string, [string, object]>;\n\n  private verifCont: Phaser.GameObjects.Container | undefined;\n\n  private context?: Context;\n  private sceneLoaded = false;\n\n  constructor() {\n    super('RoomPreview');\n    this.preloadImageMap = new Map<string, string>();\n    this.preloadSoundMap = new Map<string, string>();\n    this.preloadSpritesheetMap = new Map<string, [string, object]>();\n    this.studentCode = roomDefaultCode;\n  }\n\n  public init() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.studentCode = SourceAcademyGame.getInstance().getRoomCode();\n    this.createContext();\n  }\n\n  public preload() {\n    addLoadingScreen(this);\n\n    // Initialise one verified tag to be used throughout the CMR\n    this.verifCont = createVerifiedHoverContainer(this);\n  }\n\n  public async create() {\n    // Run student code once to update the context\n    await this.eval(this.studentCode);\n\n    this.renderDefaultBackground();\n\n    /**\n     * We don't use .eval('preload();') at preload() as\n     * .eval() is not awaited by the preload() method i.e. it does not\n     * wait for student's preload function to finish.\n     *\n     * Instead, the students' 'preload()' function simply populate a map\n     * of assets key and path to be loaded.\n     *\n     * We await the students .eval('preload();') at create()\n     * to ensure that the .eval('preload();') is fully resolved.\n     */\n    await this.eval(`preload();`);\n\n    // Preload all necessary assets\n    await Promise.all(\n      Array.from(this.preloadImageMap).map(async ([key, path]) => {\n        await loadImage(this, key, path);\n      })\n    );\n    await Promise.all(\n      Array.from(this.preloadSoundMap).map(async ([key, path]) => {\n        await loadSound(this, key, path);\n      })\n    );\n    await Promise.all(\n      Array.from(this.preloadSpritesheetMap).map(async ([key, [path, config]]) => {\n        await loadSpritesheet(this, key, path, config);\n      })\n    );\n\n    const roomRefreshHover = new CommonTextHover(\n      this,\n      RoomConstants.refreshButton.x - 200,\n      RoomConstants.refreshButton.y - 30,\n      'Refresh Room'\n    );\n\n    const refreshButton = createButton(this, {\n      assetKey: ImageAssets.chapterRepeatButton.key,\n      onUp: async () => {\n        await SourceAcademyGame.getInstance().loadRoomCode();\n        this.studentCode = SourceAcademyGame.getInstance().getRoomCode();\n        this.getLayerManager().clearAllLayers();\n        this.sound.stopAll();\n        this.sceneLoaded = false;\n        this.scene.restart();\n      },\n      onHover: () => roomRefreshHover.setVisible(true),\n      onOut: () => roomRefreshHover.setVisible(false)\n    }).setPosition(RoomConstants.refreshButton.x, RoomConstants.refreshButton.y);\n\n    // Execute create\n    await this.eval(`create();`);\n    SourceAcademyGame.getInstance().getSoundManager().playBgMusic(Constants.nullInteractionId);\n\n    // Initialise managers after students `create()`\n    // This is primarily to ensure layer manager's layer\n    // are on top of the displayed room objects\n    this.initialiseManagers();\n\n    // Binding keyboard triggers require managers to be initialised\n    this.bindKeyboardTriggers();\n\n    // Add verified tag\n    this.getLayerManager().addToLayer(Layer.UI, this.getVerifCont());\n    this.getLayerManager().addToLayer(Layer.UI, refreshButton);\n    this.getLayerManager().addToLayer(Layer.UI, roomRefreshHover);\n\n    this.getToolbarManager().renderToolbarContainer();\n    this.sceneLoaded = true;\n  }\n\n  public update() {\n    /**\n     * runInContext appends new frame everytime it is run,\n     * which leads to out of memory error when we run\n     * runInContext as often as FPS of the game for `update()`.\n     *\n     * Hence, we replace the scope instead of appending\n     * new one each time.\n     */\n    if (this.sceneLoaded) {\n      this.eval(`update();`);\n    }\n  }\n\n  public createContext() {\n    this.context = createContext(Chapter.SOURCE_4, [], 'playground', Variant.DEFAULT);\n    this.context.moduleContexts.game = {\n      tabs: null,\n      state: {\n        scene: this,\n        preloadImageMap: this.preloadImageMap,\n        preloadSoundMap: this.preloadSoundMap,\n        preloadSpritesheetMap: this.preloadSpritesheetMap,\n        remotePath: (file: string) => toS3Path(file, true),\n        screenSize: screenSize,\n        createAward: (x: number, y: number, key: ItemId) => this.createAward(x, y, key)\n      }\n    };\n  }\n\n  private async eval(code: string) {\n    // runInContext also automatically updates the context\n    await runInContext(code, this.context!);\n  }\n\n  /**\n   * Bind the escape menu and dashboard to keyboard keys.\n   */\n  private bindKeyboardTriggers() {\n    this.getInputManager().registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.ESC,\n      'up',\n      async () => {\n        if (this.getPhaseManager().isCurrentPhaseTerminal()) {\n          await this.getPhaseManager().popPhase();\n        } else {\n          await this.getPhaseManager().pushPhase(GamePhaseType.EscapeMenu);\n        }\n      }\n    );\n    this.getInputManager().registerKeyboardListener(\n      Phaser.Input.Keyboard.KeyCodes.TAB,\n      'up',\n      async () => {\n        if (this.getPhaseManager().isCurrentPhase(GamePhaseType.Dashboard)) {\n          await this.getPhaseManager().popPhase();\n        } else if (this.getPhaseManager().isCurrentPhaseTerminal()) {\n          await this.getPhaseManager().swapPhase(GamePhaseType.Dashboard);\n        } else {\n          await this.getPhaseManager().pushPhase(GamePhaseType.Dashboard);\n        }\n      }\n    );\n  }\n\n  /**\n   * Clean up on related managers\n   */\n  public cleanUp() {\n    this.getInputManager().clearListeners();\n    this.getLayerManager().clearAllLayers();\n  }\n\n  /**\n   * Create an award based on the given award key.\n   * The award key is associated with an awardProperty,\n   * which in turn will be used as the source of information for\n   * the award.\n   *\n   * If the award is a valid key and the student already has\n   * the award, the resulting object will have a verification\n   * tag that pops up when student hovers over it.\n   *\n   * Else, we return a default image of a cookie; without\n   * the verification tag.\n   *\n   * @param x x position of the award\n   * @param y y position of the award\n   * @param awardKey key associated with the award\n   */\n  private createAward(x: number, y: number, awardKey: ItemId) {\n    const achievements = this.getUserStateManager().getAchievements();\n    const collectibles = this.getUserStateManager().getCollectibles();\n    const defaultAward = new Phaser.GameObjects.Sprite(this, x, y, ImageAssets.cookies.key);\n\n    if (!achievements.includes(awardKey) && !collectibles.includes(awardKey)) return defaultAward;\n\n    const awardProp = getAwardProp(awardKey);\n    if (!awardProp.completed) return defaultAward;\n\n    const award = new Phaser.GameObjects.Sprite(this, x, y, awardProp.assetKey);\n    return this.attachVerificationTag(award);\n  }\n\n  /**\n   * Attach a verification tag to the sprite.\n   * When user hovers on the sprite, a verification will appear\n   * on the image.\n   *\n   * Used to verify autheticity of the award.\n   *\n   * @param sprite sprite to attach the verification tag to\n   */\n  private attachVerificationTag(sprite: Phaser.GameObjects.Sprite) {\n    const verifCont = this.getVerifCont();\n\n    sprite.setInteractive({ pixelPerfect: true, useHandCursor: true });\n    sprite.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OVER, () =>\n      verifCont.setVisible(true)\n    );\n    sprite.addListener(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, () =>\n      verifCont.setVisible(false)\n    );\n    sprite.addListener(\n      Phaser.Input.Events.GAMEOBJECT_POINTER_MOVE,\n      (pointer: Phaser.Input.Pointer) => {\n        verifCont.x = pointer.x + 10;\n        verifCont.y = pointer.y - 10;\n      }\n    );\n    return sprite;\n  }\n\n  /**\n   * Render starting background for the room.\n   */\n  private renderDefaultBackground() {\n    const backgroundAsset = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      this.getDefaultBackgroundKey()\n    );\n    resizeOverflow(backgroundAsset, screenSize.x, screenSize.y);\n\n    // Don't use layer manager because it does not exist at this point\n    this.add.existing(backgroundAsset);\n  }\n\n  /**\n   * Returns the background key to be used, based on the user's assessment\n   * progression.\n   */\n  private getDefaultBackgroundKey() {\n    // Once reversed, the first element is the submitted assessment with the most recent close date\n    const completedAssessmentIds = this.getUserStateManager().getAssessments().reverse();\n    const backgroundMapping = SourceAcademyGame.getInstance().getRoomPreviewMapping();\n\n    // Iterative search for assessment with valid mapping\n    for (let i = 0; i < completedAssessmentIds.length; i++) {\n      if (backgroundMapping.has(completedAssessmentIds[i])) {\n        return completedAssessmentIds[i];\n      }\n    }\n\n    // If there is no valid mapping, we use default background image\n    return ImageAssets.sourceCrashedPod.key;\n  }\n\n  /**\n   * Construct the necessary managers for this scene\n   */\n  private initialiseManagers() {\n    this.layerManager = new GameLayerManager(this);\n    this.inputManager = new GameInputManager(this);\n    this.phaseManager = new GamePhaseManager(createCMRGamePhases(), this.inputManager);\n    this.escapeManager = new GameEscapeManager(this);\n    this.collectibleManager = new GameAwardsManager(\n      this,\n      SourceAcademyGame.getInstance().getUserStateManager().getCollectibles\n    );\n    this.achievementManager = new GameAwardsManager(\n      this,\n      SourceAcademyGame.getInstance().getUserStateManager().getAchievements\n    );\n    this.toolbarManager = new GameToolbarManager(this);\n    this.dashboardManager = new GameDashboardManager(\n      this,\n      [DashboardPage.Collectibles, DashboardPage.Achievements],\n      [this.collectibleManager, this.achievementManager]\n    );\n  }\n\n  private getVerifCont = () => mandatory(this.verifCont);\n  private getUserStateManager = () => SourceAcademyGame.getInstance().getUserStateManager();\n\n  public getInputManager = () => mandatory(this.inputManager);\n  public getLayerManager = () => mandatory(this.layerManager);\n  public getPhaseManager = () => mandatory(this.phaseManager);\n  public getEscapeManager = () => mandatory(this.escapeManager);\n  public getCollectibleManager = () => mandatory(this.collectibleManager);\n  public getAchievementManager = () => mandatory(this.achievementManager);\n  public getToolbarManager = () => mandatory(this.toolbarManager);\n  public getDashboardManager = () => mandatory(this.dashboardManager);\n}\n","import ImageAssets from '../../assets/ImageAssets';\nimport CommonBackButton from '../../commons/CommonBackButton';\nimport { screenCenter, screenSize } from '../../commons/CommonConstants';\nimport CommonRadioButton from '../../commons/CommonRadioButton';\nimport GameLayerManager from '../../layer/GameLayerManager';\nimport { Layer } from '../../layer/GameLayerTypes';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { createButton } from '../../utils/ButtonUtils';\nimport { mandatory } from '../../utils/GameUtils';\nimport { calcTableFormatPos, Direction } from '../../utils/StyleUtils';\nimport { createBitmapText } from '../../utils/TextUtils';\nimport SettingsConstants, {\n  applySettingsTextStyle,\n  optionHeaderTextStyle,\n  optionTextStyle\n} from './SettingsConstants';\n\n/**\n * Settings scene, in which students can control\n * different settings of the game.\n */\nclass Settings extends Phaser.Scene {\n  private bgmVolumeRadioButtons: CommonRadioButton | undefined;\n  private sfxVolumeRadioButtons: CommonRadioButton | undefined;\n  private layerManager?: GameLayerManager;\n\n  constructor() {\n    super('Settings');\n  }\n\n  public async create() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager = new GameLayerManager(this);\n    this.renderBackground();\n    this.renderOptions();\n  }\n\n  /**\n   * Set up the background and add it to the background layer.\n   */\n  private renderBackground() {\n    const background = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.spaceshipBg.key\n    );\n\n    const settingBgImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      ImageAssets.settingBanner.key\n    );\n    this.getLayerManager().addToLayer(Layer.Background, background);\n    this.getLayerManager().addToLayer(Layer.Background, settingBgImg);\n  }\n\n  /**\n   * Add various settings that user can use.\n   * Sets up the header and the radio buttons, and add it to the screen.\n   */\n  private renderOptions() {\n    // Create Headers\n    const optCont = new Phaser.GameObjects.Container(this, 0, 0);\n    const optHeader = this.getSettingsHeader();\n    const optHeaderPos = calcTableFormatPos({\n      direction: Direction.Column,\n      numOfItems: optHeader.length,\n      maxYSpace: SettingsConstants.opt.ySpace\n    });\n    optCont.add(\n      optHeader.map((header, index) => this.createOptionHeader(header, optHeaderPos[index][1]))\n    );\n\n    // Get user default choice\n    const { bgmVolume, sfxVolume } = this.getSaveManager().getSettings();\n    const sfxVolIdx = SettingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === sfxVolume\n    );\n    const bgmVolIdx = SettingsConstants.volContainerOpts.findIndex(\n      value => parseFloat(value) === bgmVolume\n    );\n\n    // Create SFX Radio Buttons\n    this.sfxVolumeRadioButtons = this.createOptRadioOptions(sfxVolIdx, optHeaderPos[0][1]);\n    // Create BGM Radio Buttons\n    this.bgmVolumeRadioButtons = this.createOptRadioOptions(bgmVolIdx, optHeaderPos[1][1]);\n\n    // Create apply settings button\n    const applySettingsButton = createButton(this, {\n      assetKey: ImageAssets.mediumButton.key,\n      message: 'Apply Settings',\n      textConfig: { x: 0, y: 0, oriX: 0.33, oriY: 0.85 },\n      bitMapTextStyle: applySettingsTextStyle,\n      onUp: () => this.applySettings()\n    }).setPosition(screenCenter.x, screenSize.y * 0.925);\n\n    // Create back button to main menu\n    const backButton = new CommonBackButton(this, () => {\n      this.getLayerManager().clearAllLayers();\n      this.scene.start('MainMenu');\n    });\n\n    this.getLayerManager().addToLayer(Layer.UI, optCont);\n    this.getLayerManager().addToLayer(Layer.UI, this.sfxVolumeRadioButtons);\n    this.getLayerManager().addToLayer(Layer.UI, this.bgmVolumeRadioButtons);\n    this.getLayerManager().addToLayer(Layer.UI, applySettingsButton);\n    this.getLayerManager().addToLayer(Layer.UI, backButton);\n  }\n\n  /**\n   * Options header to display.\n   */\n  private getSettingsHeader() {\n    return ['SFX', 'BGM'];\n  }\n\n  /**\n   * Formats the header text as well as the blue arrow and\n   * underline, and place it based on the given yPos.\n   *\n   * @param header text for the header\n   * @param yPos y position of the option\n   */\n  private createOptionHeader(header: string, yPos: number) {\n    const optHeaderCont = new Phaser.GameObjects.Container(this, 0, yPos);\n    const headerDiv = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      0,\n      ImageAssets.settingOption.key\n    );\n    const headerText = createBitmapText(\n      this,\n      header,\n      SettingsConstants.optHeaderTextConfig,\n      optionHeaderTextStyle\n    );\n    optHeaderCont.add([headerDiv, headerText]);\n    return optHeaderCont;\n  }\n\n  /**\n   * Create a radio buttons, formatted with settings' style.\n   *\n   * @param defaultChoiceIdx default choice of the radio button\n   * @param yPos y position of the radio button\n   */\n  private createOptRadioOptions(defaultChoiceIdx: number, yPos: number) {\n    return new CommonRadioButton(\n      this,\n      {\n        choices: SettingsConstants.volContainerOpts,\n        defaultChoiceIdx: defaultChoiceIdx,\n        maxXSpace: SettingsConstants.opt.xSpace,\n        choiceTextConfig: SettingsConstants.radioButtonsTextConfig,\n        bitmapTextStyle: optionTextStyle\n      },\n      SettingsConstants.opt.x,\n      -screenCenter.y + yPos\n    );\n  }\n\n  /**\n   * Fetch the current radio buttons value, save it, then apply it.\n   *\n   * This method is responsible in contacting the managers that\n   * need to be aware of the update.\n   */\n  public async applySettings() {\n    const sfxVol = this.sfxVolumeRadioButtons\n      ? parseFloat(this.sfxVolumeRadioButtons.getChosenChoice())\n      : 1;\n    const bgmVol = this.bgmVolumeRadioButtons\n      ? parseFloat(this.bgmVolumeRadioButtons.getChosenChoice())\n      : 1;\n\n    // Save settings\n    await this.getSaveManager().saveSettings({ bgmVolume: bgmVol, sfxVolume: sfxVol });\n\n    // Apply settings\n    SourceAcademyGame.getInstance()\n      .getSoundManager()\n      .applyUserSettings(this.getSaveManager().getSettings());\n  }\n\n  public getSaveManager = () => SourceAcademyGame.getInstance().getSaveManager();\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default Settings;\n","import { AssetMap, SoundAsset } from '../assets/AssetsTypes';\nimport { Constants } from '../commons/CommonConstants';\nimport { AssetKey, AssetPath } from '../commons/CommonTypes';\nimport { SettingsJson } from '../save/GameSaveTypes';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { mandatory, toS3Path } from '../utils/GameUtils';\nimport { bgMusicFadeDuration, musicFadeOutTween } from './GameSoundTypes';\n\n/**\n * This class manages the sounds for the entire game\n * It proxies the game's sound manager\n */\nclass GameSoundManager {\n  private soundAssetMap: Map<AssetKey, SoundAsset>;\n  private bgmVol: number;\n  private sfxVol: number;\n\n  private currBgMusicKey: AssetKey;\n  private currBgMusic: Phaser.Sound.WebAudioSound | undefined;\n\n  constructor() {\n    this.soundAssetMap = new Map<AssetKey, SoundAsset>();\n    this.bgmVol = 1;\n    this.sfxVol = 1;\n    this.currBgMusicKey = Constants.nullInteractionId;\n  }\n\n  /**\n   * Apply user settings to the sound manager;\n   * namely the sfxVolume and bgmVolume.\n   *\n   * In the case the volumes are not defined, it will\n   * be defaulted to 1 (max volume).\n   *\n   * @param settings user settings\n   */\n  public applyUserSettings(settings: SettingsJson) {\n    this.bgmVol = settings.bgmVolume !== undefined ? settings.bgmVolume : 1;\n    this.sfxVol = settings.sfxVolume !== undefined ? settings.sfxVolume : 1;\n\n    // Modify currently playing BGM, if any\n    if (this.currBgMusic && this.currBgMusic.isPlaying) {\n      const soundAsset = mandatory(this.getSoundAsset(this.currBgMusicKey));\n      const bgmVol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n      this.currBgMusic.setVolume(bgmVol * this.bgmVol);\n    }\n  }\n\n  /**\n   * Store the sound asset within the sound manager.\n   * Sound asset is stored as it is used when playing the\n   * sound (to apply the sound config).\n   *\n   * @param soundAsset sound asset\n   */\n  private addSoundAsset(soundAsset: SoundAsset) {\n    this.soundAssetMap.set(soundAsset.key, soundAsset);\n  }\n\n  /**\n   * Return a sound asset based on its key.\n   * If there is none, return undefined.\n   *\n   * @param key sound asset key\n   */\n  private getSoundAsset(key: AssetKey) {\n    return this.soundAssetMap.get(key);\n  }\n\n  /**\n   * Preload sound assets into the sound manager.\n   *\n   * @param soundAssets array of sound assets\n   */\n  public loadSounds(soundAssets: SoundAsset[]) {\n    soundAssets.forEach(asset => {\n      this.addSoundAsset(asset);\n      this.loadSound(asset.key, toS3Path(asset.path, true));\n    });\n  }\n\n  /**\n   * Preload sound assets into the sound manager.\n   *\n   * @param assetMap AssetMap of sound assets\n   */\n  public loadSoundAssetMap(assetMap: AssetMap<SoundAsset>) {\n    Object.values(assetMap).forEach(asset => {\n      this.addSoundAsset(asset);\n      this.loadSound(asset.key, toS3Path(asset.path, false));\n    });\n  }\n\n  /**\n   * Preload sound asset into the sound manager.\n   *\n   * @param assetKey key to be associated with the sound\n   * @param assetPath path to the sound file\n   */\n  private loadSound(assetKey: AssetKey, assetPath: AssetPath) {\n    this.getCurrentScene().load.audio(assetKey, assetPath);\n  }\n\n  /**\n   * Play a sound, usually an SFX.\n   * The sound will be added, played, and destroyed afterwards; hence\n   * there is no need to keep any reference to it.\n   *\n   * Its volume will be multipled by the current user's SFX volume.\n   *\n   * @param soundKey key associated with the sound.\n   */\n  public playSound(soundKey: AssetKey) {\n    const soundAsset = this.getSoundAsset(soundKey);\n    if (soundAsset) {\n      const vol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n      this.getBaseSoundManager().play(soundAsset.key, {\n        ...soundAsset.config,\n        volume: vol * this.sfxVol\n      });\n    }\n  }\n\n  /**\n   * Play a background music. Only one background music is able\n   * to be played at any one time; hence calling this method will\n   * also stop the previous background music.\n   *\n   * If the provided soundKey is the same as the the currently\n   * playing background music, it will be skipped (to avoid strange\n   * stopping and playing of the same music).\n   *\n   * To play no music, the parameter can be set to empty string i.e. ''.\n   *\n   * @param soundKey key to the background music to be played.\n   * @param fadeDuration duration to fade out previous background music\n   */\n  public playBgMusic(soundKey: AssetKey, fadeDuration?: number) {\n    // Game is no longer mounted, do not play the music\n    if (!SourceAcademyGame.getInstance().isMounted) {\n      return;\n    }\n\n    // If same music is already playing, skip\n    if (this.currBgMusicKey === soundKey) {\n      return;\n    }\n\n    // Requested soundKey is empty, stop current BGM\n    if (soundKey === Constants.nullInteractionId && this.currBgMusic) {\n      this.fadeOutAndDestroyMusic(this.currBgMusic, fadeDuration);\n      this.currBgMusic = undefined;\n      this.currBgMusicKey = soundKey;\n      return;\n    }\n\n    // Stop previous BgMusic\n    if (this.currBgMusic) this.fadeOutAndDestroyMusic(this.currBgMusic);\n\n    // Update BGM and key\n    const soundAsset = mandatory(this.getSoundAsset(soundKey));\n    const bgmVol = soundAsset.config.volume !== undefined ? soundAsset.config.volume : 1;\n\n    this.currBgMusic = this.getBaseSoundManager().add(soundAsset.key, {\n      ...soundAsset.config,\n      volume: bgmVol * this.bgmVol\n    }) as Phaser.Sound.WebAudioSound;\n    this.currBgMusicKey = soundAsset.key;\n\n    // Finally, play it\n    this.currBgMusic.play();\n  }\n\n  /**\n   * Fade out a sound and destroy it.\n   *\n   * @param sound sound to be destroyed\n   * @param fadeDuration duration of fade out\n   */\n  private fadeOutAndDestroyMusic(\n    sound: Phaser.Sound.BaseSound,\n    fadeDuration: number = bgMusicFadeDuration\n  ) {\n    this.getCurrentScene().tweens.add({\n      targets: sound,\n      ...musicFadeOutTween,\n      duration: fadeDuration\n    });\n\n    // TODO: fix `TypeError: Cannot read property 'disconnect' of null` error\n    // when user navigates away from game scene before fadeDuration * 2\n    setTimeout(() => sound.destroy(), fadeDuration * 2);\n  }\n\n  /**\n   * Stop all currently playing sounds.\n   */\n  public stopAllSound() {\n    this.getBaseSoundManager().stopAll();\n  }\n\n  /**\n   * Pause currently playing BGM music, if it is playing.\n   */\n  public pauseCurrBgMusic() {\n    if (this.getCurrentScene() && this.currBgMusic && this.currBgMusic.isPlaying) {\n      this.currBgMusic.pause();\n    }\n  }\n\n  /**\n   * Continue currently playing BGM music, if it is paused.\n   */\n  public continueCurrBgMusic() {\n    if (this.getCurrentScene() && this.currBgMusic && this.currBgMusic.isPaused) {\n      this.currBgMusic.play();\n    }\n  }\n\n  /**\n   * We do not use `this.game.sound` as it often\n   * results in crash, due to audio not being present into audio cache.\n   * i.e. calling `.add()` while the sound is not in cache.audio will\n   * result in crash.\n   *\n   * From observation, the audio cache used by `this.game.sound`\n   * and `this.scene.sound` can be different.\n   *\n   * From observation, `loadSound()` loads the audio into\n   * `this.scene.sound.game.cache.audio`; and not into\n   * `this.game.sound.game.cache.audio`.\n   *\n   * Hence, we use `this.getCurrentScene().sound.add` in order to refer\n   * to the correct audio cache.\n   *\n   * NOTE: To check the audio cache, compare between:\n   *  - this.game.sound.game.cache.audio\n   *  - this.scene.sound.game.cache.audio\n   */\n  public getBaseSoundManager = () =>\n    this.getCurrentScene().sound as Phaser.Sound.WebAudioSoundManager;\n  public getCurrentScene = () => mandatory(SourceAcademyGame.getInstance().getCurrentSceneRef());\n}\n\nexport default GameSoundManager;\n","import { GameChapter } from './GameChapterTypes';\n\nconst GameChapterMocks: GameChapter[] = [\n  {\n    title: 'Spaceship Emergency',\n    imageUrl: '/locations/planet-y-orbit/crashing.png',\n    filenames: ['../../assets/mockChapter0.txt', '../../assets/mockChapter0.1.txt']\n  },\n  {\n    title: 'Alien Attack',\n    imageUrl: '/locations/telebay/emergency.png',\n    filenames: ['../../assets/mockChapter1.txt']\n  },\n  {\n    title: 'Jedi Master',\n    imageUrl: '/locations/classroom/normal.png',\n    filenames: ['../../assets/mockChapter2.txt']\n  }\n];\nexport default GameChapterMocks;\n","import { AwardProperty } from '../awards/GameAwardsTypes';\nimport { ItemId } from '../commons/CommonTypes';\nimport { toS3Path } from '../utils/GameUtils';\nimport StringUtils from '../utils/StringUtils';\n\n/**\n * This class parses the awardsMapping.txt, and creates a\n * map of each item id to their corresponding award properties.\n */\nclass AwardParser {\n  public static awardsMapping: Map<ItemId, AwardProperty>;\n\n  /**\n   * This function parses the awards and produces the mapping of award id to award properties.\n   *\n   * @param assetText the entire txt file\n   * @returns {Map<ItemId, AwardProperty>} the mapping of the assets and details corresponding to each award id\n   *                                       the award id may either refer to collectible id or achievement id\n   */\n  public static parse(assetText: string): Map<ItemId, AwardProperty> {\n    AwardParser.awardsMapping = new Map<ItemId, AwardProperty>();\n\n    const assetLines = StringUtils.splitToLines(assetText);\n    const assetParagraphs = StringUtils.splitToParagraph(assetLines);\n\n    assetParagraphs.forEach(([, awardBody]: [string, string[]]) => {\n      AwardParser.parseAwardParagraphs(awardBody);\n    });\n    return this.awardsMapping;\n  }\n\n  /**\n   * This parses the each award paragraph and stores award properties into the award mapping\n   *\n   * @param awardType whether the type is collectible or achievement\n   * @param awardBody whether this is a\n   */\n  private static parseAwardParagraphs(awardBody: string[]) {\n    const awardParagraph = StringUtils.splitToParagraph(awardBody);\n    awardParagraph.forEach(([id, awardProperties]: [ItemId, string[]]) => {\n      const [assetKey, assetPath, title, description] = StringUtils.splitWithLimit(\n        awardProperties[0],\n        ',',\n        3\n      );\n      AwardParser.awardsMapping.set(id, {\n        id,\n        assetKey,\n        assetPath: toS3Path(assetPath, true),\n        title,\n        description,\n        completed: true\n      });\n    });\n  }\n}\n\nexport default AwardParser;\n","import { AssetPath, ItemId } from '../commons/CommonTypes';\nimport { toS3Path } from '../utils/GameUtils';\nimport StringUtils from '../utils/StringUtils';\n\n/**\n * This class parses the roomPreviewMapping.txt, and creates a\n * map of each assesment id to their corresponding background.\n */\nclass RoomPreviewParser {\n  public static backgroundMapping: Map<ItemId, AssetPath>;\n\n  /**\n   * This function parses the text and produces the mapping of assessment id to background key.\n   *\n   * @param assetText the entire txt file\n   * @returns {Map<ItemId, AssetPath>} the mapping of the assessment id to the background key\n   */\n  public static parse(assetText: string): Map<ItemId, AssetPath> {\n    RoomPreviewParser.backgroundMapping = new Map<ItemId, AssetPath>();\n\n    const assetLines = StringUtils.splitToLines(assetText);\n    const assetParagraphs = StringUtils.splitToParagraph(assetLines);\n\n    assetParagraphs.forEach(([assesmentId, assetPath]: [string, string[]]) => {\n      RoomPreviewParser.backgroundMapping.set(assesmentId, toS3Path(assetPath[0], true));\n    });\n    return RoomPreviewParser.backgroundMapping;\n  }\n}\n\nexport default RoomPreviewParser;\n","import FontAssets from '../../assets/FontAssets';\nimport ImageAssets from '../../assets/ImageAssets';\nimport SoundAssets from '../../assets/SoundAssets';\nimport TextAssets from '../../assets/TextAssets';\nimport { addLoadingScreen } from '../../effects/LoadingScreen';\nimport AwardParser from '../../parser/AwardParser';\nimport RoomPreviewParser from '../../parser/RoomPreviewParser';\nimport SourceAcademyGame from '../../SourceAcademyGame';\nimport { toS3Path } from '../../utils/GameUtils';\nimport { loadImage } from '../../utils/LoaderUtils';\n\n/**\n * User entry point into the game.\n *\n * This is where all the fetching happens\n */\nclass Entry extends Phaser.Scene {\n  constructor() {\n    super('Entry');\n  }\n\n  public async preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.preloadAssets();\n    addLoadingScreen(this);\n\n    await SourceAcademyGame.getInstance().loadGameChapters();\n    await SourceAcademyGame.getInstance().loadRoomCode();\n    await SourceAcademyGame.getInstance().getSaveManager().loadLastSaveState();\n  }\n\n  public async create() {\n    await this.preloadAwards();\n    await SourceAcademyGame.getInstance().getUserStateManager().loadUserState();\n    await this.preloadRoomPreviewBackgrounds();\n\n    this.applyLoadedSettings();\n\n    this.scene.start('MainMenu');\n  }\n\n  /**\n   * Load save state and settings; then applying them.\n   */\n  private applyLoadedSettings() {\n    const userSettings = SourceAcademyGame.getInstance().getSaveManager().getSettings();\n    SourceAcademyGame.getInstance().getSoundManager().applyUserSettings(userSettings);\n  }\n\n  /**\n   * Fetch the awardsMapping text, set it as global variable,\n   * and load all the necessary assets.\n   */\n  private async preloadAwards() {\n    const awardsMappingTxt = this.cache.text.get(TextAssets.awardsMapping.key) || '';\n    const awardsMapping = AwardParser.parse(awardsMappingTxt);\n    SourceAcademyGame.getInstance().setAwardsMapping(awardsMapping);\n    await Promise.all(\n      Array.from(awardsMapping.values()).map(\n        async awardInfo => await loadImage(this, awardInfo.assetKey, awardInfo.assetPath)\n      )\n    );\n  }\n\n  /**\n   * Fetch the roomPreviewMapping text, set it as global variable,\n   * and load all the necessary assets.\n   */\n  private async preloadRoomPreviewBackgrounds() {\n    const roomPreviewMappingTxt = this.cache.text.get(TextAssets.roomPreviewMapping.key) || '';\n    const roomPreviewMapping = RoomPreviewParser.parse(roomPreviewMappingTxt);\n    SourceAcademyGame.getInstance().setRoomPreviewMapping(roomPreviewMapping);\n    await Promise.all(\n      Array.from(roomPreviewMapping.entries()).map(\n        async ([key, value]) => await loadImage(this, key, value)\n      )\n    );\n  }\n\n  /**\n   * Preload all image assets, font assets, and sound assets into the game.\n   */\n  private preloadAssets() {\n    SourceAcademyGame.getInstance().getSoundManager().loadSoundAssetMap(SoundAssets);\n    Object.values(ImageAssets).forEach(asset =>\n      this.load.image(asset.key, toS3Path(asset.path, false))\n    );\n    Object.values(FontAssets).forEach(asset =>\n      this.load.bitmapFont(asset.key, asset.pngPath, asset.fntPath)\n    );\n    Object.values(TextAssets).forEach(asset => this.load.text(asset.key, asset.path));\n  }\n}\n\nexport default Entry;\n","import { getAssessmentOverviews } from 'src/commons/sagas/RequestsSaga';\nimport { AchievementGoal } from 'src/features/achievement/AchievementTypes';\n\nimport { ItemId } from '../commons/CommonTypes';\nimport { promptWithChoices } from '../effects/Prompt';\nimport GameGlobalAPI from '../scenes/gameManager/GameGlobalAPI';\nimport SourceAcademyGame, { GameType } from '../SourceAcademyGame';\nimport StringUtils from '../utils/StringUtils';\nimport { UserStateType } from './GameStateTypes';\n\n/**\n * Manages all states related to user, but not related to the\n * particular story or chapter; e.g. collectibles, achievements, and assessments.\n */\nexport default class GameUserStateManager {\n  private collectibles: Set<string>;\n  private achievements: Set<string>;\n  private assessments: Set<string>;\n\n  constructor() {\n    this.collectibles = new Set([]);\n    this.achievements = new Set([]);\n    this.assessments = new Set([]);\n  }\n\n  public async loadUserState() {\n    if (SourceAcademyGame.getInstance().isGameType(GameType.Simulator)) return;\n    await this.loadAchievements();\n    await this.loadAssessments();\n    this.collectibles = new Set(\n      SourceAcademyGame.getInstance().getSaveManager().getLoadedUserState().collectibles\n    );\n  }\n\n  /**\n   * Adds the given id to the collectible list\n   *\n   * @param collectibleId - collectible you want to check if present\n   */\n  public addCollectible(collectibleId: ItemId) {\n    this.collectibles.add(collectibleId);\n  }\n\n  /**\n   * Fetches assessment overview of the student; based on\n   * the account information. Only include submitted assessments' ids.\n   *\n   * IMPT: The assessments are ordered from earliest close date.\n   */\n  public async loadAssessments() {\n    const assessments = await getAssessmentOverviews(\n      SourceAcademyGame.getInstance().getAccountInfo()\n    );\n    this.assessments = new Set(\n      (assessments || [])\n        .filter(assessment => assessment.status === 'submitted')\n        .sort((a, b) => (a.closeAt <= b.closeAt ? -1 : 1))\n        .map(assessment => assessment.id.toString())\n    );\n  }\n\n  /**\n   * This function checks for the existence of a certain\n   * item ID inside one of the user state lists\n   *\n   * @param userStateType which of the user states you want to check\n   * @param id the item ID of the state you want to check\n   * @returns {Promise<boolean>} true if item ID is found in the user state list\n   */\n  public async isInUserState(userStateType: UserStateType, id: ItemId): Promise<boolean> {\n    if (SourceAcademyGame.getInstance().isGameType(GameType.Game)) {\n      return this[userStateType].has(id);\n    } else {\n      const response = await promptWithChoices(\n        GameGlobalAPI.getInstance().getGameManager(),\n        `${StringUtils.capitalize(userStateType)} ${id}?`,\n        ['Yes', 'No']\n      );\n      return response === 0;\n    }\n  }\n\n  /**\n   * Fetches achievements of the student;\n   */\n  public async loadAchievements() {\n    const awardsMapping = SourceAcademyGame.getInstance().getAwardsMapping();\n    const achievements = SourceAcademyGame.getInstance().getAchievements();\n    const goals = SourceAcademyGame.getInstance().getGoals();\n\n    // Convert goals to map\n    const goalMapping = new Map<string, AchievementGoal>();\n    goals.forEach(goal => goalMapping.set(goal.uuid, goal));\n\n    achievements.forEach(achievement => {\n      const achievementUuid = achievement.uuid.toString();\n      const isCompleted = achievement.goalUuids.reduce(\n        (result, goalUuid) => result && !!goalMapping.get(goalUuid)?.completed,\n        true\n      );\n      const awardProp = awardsMapping.get(achievementUuid);\n\n      if (awardProp) {\n        // If there is mapping, we update the complete attribute\n        const newAwardProp = { ...awardProp, completed: isCompleted };\n        SourceAcademyGame.getInstance().addAwardMapping(newAwardProp.assetKey, newAwardProp);\n        this.achievements.add(newAwardProp.assetKey);\n      }\n    });\n  }\n\n  public getCollectibles = () => Array.from(this.collectibles);\n  public getAchievements = () => Array.from(this.achievements);\n  public getAssessments = () => Array.from(this.assessments);\n}\n","import * as Phaser from 'phaser';\nimport { AwardProperty } from 'src/features/game/awards/GameAwardsTypes';\nimport { Constants, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { AssetPath, ItemId } from 'src/features/game/commons/CommonTypes';\nimport GameSaveManager from 'src/features/game/save/GameSaveManager';\nimport AwardsHall from 'src/features/game/scenes/awardsHall/AwardsHall';\nimport Bindings from 'src/features/game/scenes/bindings/Bindings';\nimport ChapterSelect from 'src/features/game/scenes/chapterSelect/ChapterSelect';\nimport CheckpointTransition from 'src/features/game/scenes/checkpointTransition/CheckpointTransition';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\nimport MainMenu from 'src/features/game/scenes/mainMenu/MainMenu';\nimport RoomPreview from 'src/features/game/scenes/roomPreview/RoomPreview';\nimport Settings from 'src/features/game/scenes/settings/Settings';\nimport GameSoundManager from 'src/features/game/sound/GameSoundManager';\nimport { mandatory } from 'src/features/game/utils/GameUtils';\nimport { GameSimState } from 'src/features/gameSimulator/GameSimulatorTypes';\n\nimport { AchievementGoal, AchievementItem } from '../achievement/AchievementTypes';\nimport { fetchGameChapters } from './chapter/GameChapterHelpers';\nimport GameChapterMocks from './chapter/GameChapterMocks';\nimport { GameChapter } from './chapter/GameChapterTypes';\nimport Entry from './scenes/entry/Entry';\nimport { getRoomPreviewCode } from './scenes/roomPreview/RoomPreviewHelper';\nimport GameUserStateManager from './state/GameUserStateManager';\n\nexport type AccountInfo = {\n  accessToken: string;\n  refreshToken: string;\n  role: string;\n  name: string;\n};\n\nexport enum GameType {\n  Simulator = 'Simulator',\n  Game = 'Game'\n}\n\ntype GlobalGameProps = {\n  accountInfo: AccountInfo | undefined;\n  achievements: AchievementItem[] | undefined;\n  awardsMapping: Map<ItemId, AwardProperty>;\n  currentSceneRef?: Phaser.Scene;\n  gameChapters: GameChapter[];\n  gameType: GameType;\n  goals: AchievementGoal[] | undefined;\n  isUsingMock: boolean;\n  roomCode: string;\n  roomPreviewMapping: Map<ItemId, AssetPath>;\n  saveManager: GameSaveManager;\n  setGameSimState: (value: React.SetStateAction<string>) => void;\n  soundManager: GameSoundManager;\n  ssChapterSimFilenames: string[];\n  userStateManager: GameUserStateManager;\n};\n\nexport default class SourceAcademyGame extends Phaser.Game {\n  static instance: SourceAcademyGame;\n  protected global: GlobalGameProps;\n  public isMounted: boolean;\n\n  constructor(config: Phaser.Types.Core.GameConfig, gameType: GameType) {\n    super(config);\n    SourceAcademyGame.instance = this;\n    this.isMounted = true;\n    this.global = {\n      awardsMapping: new Map<ItemId, AwardProperty>(),\n      accountInfo: undefined,\n      achievements: undefined,\n      currentSceneRef: undefined,\n      gameChapters: [],\n      gameType: gameType,\n      goals: undefined,\n      isUsingMock: false,\n      roomCode: '',\n      roomPreviewMapping: new Map<ItemId, AssetPath>(),\n      saveManager: new GameSaveManager(),\n      setGameSimState: Constants.nullFunction,\n      soundManager: new GameSoundManager(),\n      ssChapterSimFilenames: [],\n      userStateManager: new GameUserStateManager()\n    };\n  }\n\n  static getInstance = () => mandatory(SourceAcademyGame.instance);\n\n  public stopAllSounds() {\n    this.sound.stopAll();\n  }\n\n  public setAccountInfo(acc: AccountInfo | undefined) {\n    this.global.accountInfo = acc;\n  }\n\n  public setAchievements(achievements: AchievementItem[]) {\n    this.global.achievements = achievements;\n  }\n\n  public setAwardsMapping(awardsMapping: Map<ItemId, AwardProperty>) {\n    this.global.awardsMapping = awardsMapping;\n  }\n\n  public addAwardMapping(awardId: ItemId, awardProp: AwardProperty) {\n    this.global.awardsMapping.set(awardId, awardProp);\n  }\n\n  public setGoals(goals: AchievementGoal[]) {\n    this.global.goals = goals;\n  }\n\n  public setGameSimStateSetter(setGameSimState: (value: React.SetStateAction<string>) => void) {\n    this.setGameSimState = setGameSimState;\n  }\n\n  public setRoomPreviewMapping(mapping: Map<ItemId, AssetPath>) {\n    this.global.roomPreviewMapping = mapping;\n  }\n\n  public async loadGameChapters() {\n    this.global.gameChapters = await fetchGameChapters();\n  }\n\n  public async loadRoomCode() {\n    this.global.roomCode = await getRoomPreviewCode();\n  }\n\n  public setGameSimState(state: GameSimState) {\n    this.global.setGameSimState(state);\n  }\n\n  public setCurrentSceneRef(scene: Phaser.Scene) {\n    this.global.currentSceneRef = scene;\n  }\n\n  public toggleUsingMock(value?: boolean) {\n    if (value === undefined) {\n      this.global.isUsingMock = !this.global.isUsingMock;\n    } else {\n      this.global.isUsingMock = value;\n    }\n  }\n\n  public setChapterSimStack(checkpointFilenames: string[]) {\n    this.global.ssChapterSimFilenames = checkpointFilenames.reverse();\n  }\n\n  public getAwardsMapping = () => mandatory(this.global.awardsMapping);\n  public getAccountInfo = () => mandatory(this.global.accountInfo);\n  public getAchievements = () => mandatory(this.global.achievements);\n  public getSoundManager = () => mandatory(this.global.soundManager);\n  public getGoals = () => mandatory(this.global.goals);\n  public getRoomPreviewMapping = () => mandatory(this.global.roomPreviewMapping);\n  public getUserStateManager = () => mandatory(this.global.userStateManager);\n  public getSaveManager = () => mandatory(this.global.saveManager);\n  public getCurrentSceneRef = () => mandatory(this.global.currentSceneRef);\n  public isGameType = (gameType: GameType) => this.global.gameType === gameType;\n  public getSSChapterSimFilenames = () => this.global.ssChapterSimFilenames;\n  public getIsUsingMock = () => this.global.isUsingMock;\n  public getRoomCode = () => this.global.roomCode;\n  public getGameChapters = () =>\n    this.global.isUsingMock ? GameChapterMocks : this.global.gameChapters;\n}\n\nconst config = {\n  debug: true,\n  type: Phaser.CANVAS,\n  width: screenSize.x,\n  height: screenSize.y,\n  physics: {\n    default: 'arcade'\n  },\n  scale: {\n    mode: Phaser.Scale.FIT,\n    parent: 'game-display'\n  },\n  fps: {\n    target: 24\n  },\n  scene: [\n    Entry,\n    MainMenu,\n    Settings,\n    ChapterSelect,\n    GameManager,\n    CheckpointTransition,\n    AwardsHall,\n    RoomPreview,\n    Bindings\n  ]\n};\n\nexport const createSourceAcademyGame = () => {\n  return new SourceAcademyGame(config, GameType.Game);\n};\n","import _ from 'lodash';\nimport { request } from 'src/commons/utils/RequestHelper';\n\nimport { store } from '../../../pages/createStore';\nimport { toTxtPath } from '../assets/TextAssets';\nimport SourceAcademyGame from '../SourceAcademyGame';\nimport { GameChapter } from './GameChapterTypes';\n\n/**\n * Fetches all chapters from the backend\n *\n * @returns {Promise<GameChapter[]>} - All the chapter objects in a list\n */\nexport async function fetchGameChapters(): Promise<GameChapter[]> {\n  const courseId = store.getState().session.courseId;\n  const response = await request(`courses/${courseId}/stories`, 'GET', {\n    accessToken: SourceAcademyGame.getInstance().getAccountInfo().accessToken,\n    refreshToken: SourceAcademyGame.getInstance().getAccountInfo().refreshToken\n  });\n  if (!response) return [];\n  const chapterDetails = response.status === 200 ? await response.json() : [];\n  const sortedChapters = _.sortBy(chapterDetails, chapterDetail => new Date(chapterDetail.openAt));\n  sortedChapters.forEach(chapter => (chapter.filenames = chapter.filenames.map(toTxtPath)));\n  return sortedChapters;\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport { getAchievements, getOwnGoals } from 'src/features/achievement/AchievementActions';\nimport { saveData } from 'src/features/game/save/GameSaveRequests';\nimport { FullSaveState } from 'src/features/game/save/GameSaveTypes';\nimport SourceAcademyGame, {\n  AccountInfo,\n  createSourceAcademyGame\n} from 'src/features/game/SourceAcademyGame';\n\nfunction Game() {\n  const session = useTypedSelector(state => state.session);\n  const dispatch = useDispatch();\n\n  const achievements = useTypedSelector(state => state.achievement.achievements);\n  const goals = useTypedSelector(state => state.achievement.goals);\n\n  const [isTestStudent, setIsTestStudent] = React.useState(false);\n  const [isUsingMock, setIsUsingMock] = React.useState(false);\n\n  React.useEffect(() => {\n    dispatch(getAchievements());\n    dispatch(getOwnGoals());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    const game = createSourceAcademyGame();\n    return () => {\n      game.isMounted = false;\n      game.stopAllSounds();\n      game.destroy(true);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    SourceAcademyGame.getInstance().setAccountInfo({\n      accessToken: session.accessToken,\n      refreshToken: session.refreshToken,\n      role: session.role,\n      name: session.name\n    } as AccountInfo);\n    SourceAcademyGame.getInstance().setAchievements(achievements);\n    SourceAcademyGame.getInstance().setGoals(goals);\n\n    if (process.env.NODE_ENV === 'development') {\n      setIsTestStudent(true);\n      setIsUsingMock(true);\n      SourceAcademyGame.getInstance().toggleUsingMock(true);\n    }\n  }, [session, achievements, goals]);\n\n  return (\n    <>\n      <div id=\"game-display\"></div>\n      {isTestStudent && (\n        <div className=\"Horizontal\">\n          <button\n            onClick={async () => {\n              await saveData({} as FullSaveState);\n              alert('Game cleared! Please refresh');\n            }}\n          >\n            Clear data\n          </button>\n          <button\n            onClick={() => {\n              setIsUsingMock(!isUsingMock);\n              SourceAcademyGame.getInstance().toggleUsingMock();\n            }}\n          >\n            {isUsingMock ? 'Use Game Chapters' : 'Use Mock Chapters'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Game;\n","export enum GameSimState {\n  Default = 'Default',\n  AssetUploader = 'AssetUploader',\n  CheckpointSim = 'CheckpointSim',\n  ChapterSim = 'ChapterSim'\n}\n\nexport type ChapterDetail = {\n  id: string;\n  openAt: string;\n  closeAt: string;\n  title: string;\n  filenames: string[];\n  isPublished: boolean;\n  imageUrl: string;\n};\n","import Constants from '../../commons/utils/Constants';\nimport SourceAcademyGame from '../game/SourceAcademyGame';\nimport { courseId } from '../game/utils/GameUtils';\n\nconst sendRequest =\n  (route: string) =>\n  async (\n    requestPath: string,\n    method: string,\n    headerConfig: object = {},\n    requestDetails: object = {}\n  ) => {\n    try {\n      const accessToken = SourceAcademyGame.getInstance().getAccountInfo().accessToken || '';\n\n      const headers = createHeaders(accessToken);\n      Object.entries(headerConfig).forEach(([key, value]: string[]) => {\n        headers.append(key, value);\n      });\n\n      const config = {\n        method,\n        headers,\n        ...requestDetails\n      };\n\n      return fetch(\n        Constants.backendUrl + `/v2/courses/${courseId()}/${route}/` + requestPath,\n        config\n      );\n    } finally {\n    }\n  };\n\nexport const sendAssetRequest = sendRequest(`admin/assets`);\nexport const sendStoryRequest = sendRequest(`stories`);\nexport const sendAdminStoryRequest = sendRequest(`admin/stories`);\n\nexport function createHeaders(accessToken: string): Headers {\n  const headers = new Headers();\n  headers.append('Accept', 'application/json');\n  headers.append('Authorization', `Bearer ${accessToken}`);\n  return headers;\n}\n","import _ from 'lodash';\n\nimport { sendAdminStoryRequest, sendAssetRequest, sendStoryRequest } from './GameSimulatorRequest';\nimport { ChapterDetail } from './GameSimulatorTypes';\n\n/**\n * List of all folders to fetch S3 assets from\n */\nexport const s3AssetFolders = [\n  'locations',\n  'objects',\n  'images',\n  'avatars',\n  'ui',\n  'sfx',\n  'bgm',\n  'stories'\n];\n\nexport function obtainTextAssets(assetPaths: string[]) {\n  return assetPaths\n    .filter(assetPath => assetPath.startsWith('stories') && assetPath.endsWith('txt'))\n    .map(\n      assetPath => assetPath.slice(8) // remove /stories\n    );\n}\n\nexport const fetchTextAssets = async () => obtainTextAssets(await fetchFolder('stories'));\n\n/**\n * Request to fetches assets from all S3 folders\n *\n * @returns {Promise<string[]>} - full concatenated list of files in the given S3 folders\n */\nexport async function fetchAssetPaths(): Promise<string[]> {\n  const files = await Promise.all(\n    s3AssetFolders.map(async folderName => {\n      const files = await fetchFolder(folderName);\n      return files.length ? files : [`${folderName}`];\n    })\n  );\n  return files.reduce((combinedList, newList) => combinedList.concat(newList), []);\n}\n\n/**\n * Request to fetches assets from one S3 folders\n *\n * @param folderName - S3 folder to fetch from\n * @returns {Promise<string[]>} - list of files in S3 folder\n */\nasync function fetchFolder(folderName: string) {\n  const response = await sendAssetRequest(folderName, 'GET', {\n    'Content-Type': 'application/json'\n  });\n  return response.status === 200 ? response.json() : [];\n}\n\n/**\n * Request to delete an S3 file\n *\n * @param assetPath - file path to delete\n * @returns {Promise<string>} - request response\n */\nexport async function deleteS3File(assetPath: string) {\n  const response = await sendAssetRequest(assetPath, 'DELETE');\n  const message = await response.text();\n  return message || 'Successfully Deleted';\n}\n\n/**\n * Request to upload a group of files into a chosen S3 folder\n *\n * @param fileList - the files to upload\n * @param folderName - which folder to upload to\n * @returns {Promise<string>} - Request responses, concatentated together\n */\nexport async function uploadAssetsToS3(fileList: FileList, folderName: string) {\n  const responses = await Promise.all(\n    Array.from(fileList).map(async file => {\n      const response = await uploadAssetToS3(file, folderName);\n      return file.name + ' => ' + response;\n    })\n  );\n  return responses.join('\\n');\n}\n\n/**\n * Uploads just one file into S3 folder\n *\n * @param file - file to delete\n * @param folderName - file path to delete\n * @returns {Promise<string>} - Request response\n */\nexport async function uploadAssetToS3(file: File, folderName: string) {\n  const formData = new FormData();\n  formData.set('upload', file);\n\n  const response = await sendAssetRequest(\n    `${folderName}/${file.name}`,\n    'POST',\n    {},\n    { body: formData, mode: 'cors' }\n  );\n\n  return response ? response.text() : '';\n}\n\n/**\n * Fetches all chapters from the backend\n *\n * @param accessToken - staff access token\n * @returns {Promise<object[]>} - All the chapter objects in a list\n */\nexport async function fetchChapters(): Promise<ChapterDetail[]> {\n  const response = await sendStoryRequest('', 'GET');\n  const chapterDetails = response.status === 200 ? await response.json() : [];\n  return _.sortBy(chapterDetails, (chapterDetail: ChapterDetail) => new Date(chapterDetail.openAt));\n}\n\n/**\n * Creates or updates a chapter\n *\n * @returns {Promise<string>} - Response\n */\nexport async function updateChapterRequest(id: string, body: object) {\n  const response = await sendAdminStoryRequest(\n    id,\n    'POST',\n    {\n      'Content-Type': 'application/json'\n    },\n    {\n      body: JSON.stringify(body)\n    }\n  );\n  return response.status === 200 ? 'Chapter successfully created/updated' : response.text();\n}\n\n/**\n * Creates a chapter\n *\n * @returns {Promise<string>} - Response\n */\nexport async function deleteChapterRequest(id: string) {\n  const response = await sendAdminStoryRequest(id, 'DELETE');\n  return response.status === 204 ? 'Chapter successfully deleted' : response.text();\n}\n","import { Button, InputGroup, Menu, MenuItem, Position } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { s3AssetFolders, uploadAssetsToS3 } from 'src/features/gameSimulator/GameSimulatorService';\n\nconst specifyFolderText = 'Specify own folder...';\nconst folderOverwritePlaceholder = \"Or specify your own, e.g. 'locations/hallway'\";\n\n/**\n * This is component allows storywriters to upload any assets into to\n * specific folders into Game Sim's Asset Uploader\n */\nconst AssetFileUploader = () => {\n  const [fileList, setFileList] = React.useState<FileList>();\n  const [uploadFolder, setUploadFolder] = React.useState<string>(s3AssetFolders[0]);\n\n  const [folderOverwrite, setFolderOverwrite] = React.useState<string>();\n  const [showfolderOverwrite, setShowFolderOverwrite] = React.useState<boolean>(false);\n\n  function handleLoadFile(e: any) {\n    if (!e.target.files) return;\n    const loadedFiles = e.target.files;\n    setFileList(loadedFiles);\n  }\n\n  async function handleUploadButtonClick() {\n    const finalFolder = folderOverwrite || uploadFolder;\n    if (!fileList || !finalFolder) return;\n    const response = await uploadAssetsToS3(fileList, finalFolder);\n    alert(response);\n  }\n\n  function handleChangeUploadFolder(e: any) {\n    if (!e.target.innerText) return;\n    setUploadFolder(e.target.innerText);\n    setShowFolderOverwrite(false);\n  }\n\n  function handleChangeFolderOverwrite(e: any) {\n    setFolderOverwrite(e.target.value);\n  }\n\n  function showSpecifyFolder(e: any) {\n    if (!e.target.innerText) return;\n    setUploadFolder(e.target.innerText);\n    setShowFolderOverwrite(true);\n  }\n\n  const uploadButtonPopoverContent = (\n    <Menu>\n      {s3AssetFolders.map(folder => (\n        <MenuItem onClick={handleChangeUploadFolder} id={folder} key={folder} text={folder} />\n      ))}\n      <MenuItem\n        onClick={showSpecifyFolder}\n        id={specifyFolderText}\n        key={specifyFolderText}\n        text={specifyFolderText}\n      ></MenuItem>\n    </Menu>\n  );\n  return (\n    <div className=\"LeftAlign\">\n      <h4>Choose Folder</h4>\n      <Popover2 placement={Position.BOTTOM} content={uploadButtonPopoverContent}>\n        <Button text={uploadFolder} />\n      </Popover2>\n      {showfolderOverwrite && (\n        <InputGroup\n          placeholder={folderOverwritePlaceholder}\n          onChange={handleChangeFolderOverwrite}\n        />\n      )}\n      <br />\n      <h4>Choose File</h4>\n      <input type=\"file\" multiple onChange={handleLoadFile} />\n      <Button onClick={handleUploadButtonClick}>Upload</Button>\n    </div>\n  );\n};\n\nexport default AssetFileUploader;\n","import { TreeNodeInfo } from '@blueprintjs/core';\nimport _ from 'lodash';\n\n/**\n * This function applies a function fn to every node in a blueprint core Tree\n *\n * @param nodes All parent nodes of the blueprint core tree\n * @param fn Function to apply to every element in the tree\n */\nexport function treeMap(nodes: TreeNodeInfo[] | undefined, fn: (node: TreeNodeInfo) => void) {\n  nodes &&\n    nodes.forEach(node => {\n      fn(node);\n      treeMap(node.childNodes, fn);\n    });\n}\n\n/**\n * This function takes a list of filepaths\n * (e.g. [\"locations/hallway/normal.png\", \"locations/hallway/emergency.png\"]) and returns\n * blueprint core tree nodes, where each node represents a folder/file.\n *\n * The child of each folder node are the files/folders inside it.\n *\n * @param assetPaths - a list of all filepaths\n * @param iconRenderer - Function that dictates what JSX Element/icon to render beside\n *                       all blueprint core nodes basded on the file path\n * @param rootFolders - a default list of parent folder names that you want to display regardless of\n *                      whether or not they have contents\n * @returns {TreeNodeInfo[]} - a blueprint core tree parent nodes\n */\nexport function assetPathsToTree(\n  assetPaths: string[],\n  iconRenderer: (pathName: string) => JSX.Element,\n  rootFolders: string[] = []\n): TreeNodeInfo[] {\n  const assetObj = {};\n  assetPaths.forEach(assetPath => _.set(assetObj, assetPath.split('/'), 'FILE'));\n  rootFolders.forEach(folder => {\n    if (!assetObj[folder] || assetObj[folder] === 'FILE') {\n      assetObj[folder] = [];\n    }\n  });\n\n  function helper(parentFolders: string[], assetObj: object | Array<string>): TreeNodeInfo[] {\n    return Object.keys(assetObj).map(file => {\n      const shortPath = '/' + parentFolders.join('/') + '/' + file;\n      return {\n        id: shortPath,\n        label: file,\n        secondaryLabel: iconRenderer(shortPath),\n        childNodes:\n          assetObj[file] === 'FILE' ? undefined : helper([...parentFolders, file], assetObj[file])\n      };\n    });\n  }\n  return helper([], assetObj);\n}\n","import { memo } from 'react';\nimport { Constants } from 'src/features/game/commons/CommonConstants';\nimport { toS3Path } from 'src/features/game/utils/GameUtils';\n\ntype AssetProps = {\n  assetPath: string;\n};\n\n/**\n * This file renders one asset path so that story writers can preview\n * the asset\n *\n * @assetPath - the asset to render/preview\n */\nconst AssetViewer = memo(({ assetPath }: AssetProps) => {\n  const displayAssetPath = assetPath || Constants.defaultAssetPath;\n  return (\n    <img\n      alt=\"asset\"\n      crossOrigin={'anonymous'}\n      src={toS3Path(displayAssetPath, !!assetPath)}\n      width=\"150px\"\n      onError={e => {\n        (e.target as any).onerror = null;\n        (e.target as any).src = toS3Path(Constants.defaultAssetPath, false);\n      }}\n    />\n  );\n});\n\nexport default AssetViewer;\n","import { Icon, Tree, TreeNodeInfo } from '@blueprintjs/core';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { useRequest } from 'src/commons/utils/Hooks';\nimport {\n  deleteS3File,\n  fetchAssetPaths,\n  s3AssetFolders\n} from 'src/features/gameSimulator/GameSimulatorService';\n\nimport { assetPathsToTree, treeMap } from './GameSimulatorAssetSelectionHelper';\nimport GameSimulatorAssetViewer from './GameSimulatorAssetViewer';\n\ntype TreeState = {\n  nodes: TreeNodeInfo[];\n};\n\n/**\n * This component provides a preview of all the S3 asset files.\n *\n * When a image is selected, the filename of the image is stored in session storage,\n * so Game Simulator's Object Placement can read the filename and load the image.\n */\nconst GameSimulatorAssetSelection = () => {\n  const { value: assetPaths } = useRequest<string[]>(fetchAssetPaths, []);\n\n  const [currentAsset, setCurrentAsset] = React.useState('');\n  const [assetTree, setAssetTree] = React.useState<TreeState>({ nodes: [] });\n\n  React.useEffect(() => {\n    setAssetTree({ nodes: assetPathsToTree(assetPaths, toolIcons, s3AssetFolders) });\n  }, [assetPaths]);\n\n  const handleNodeClick = (nodeData: TreeNodeInfo) => {\n    treeMap(assetTree.nodes, (node: TreeNodeInfo) => (node.isSelected = false));\n    nodeData.isSelected = !nodeData.isSelected;\n    nodeData.isExpanded = !nodeData.isExpanded;\n    const selectedPath = nodeData.id.toString();\n    if (!nodeData.childNodes) {\n      setCurrentAsset(selectedPath);\n      sessionStorage.setItem('selectedAsset', selectedPath);\n    }\n    setAssetTree({ ...assetTree });\n  };\n\n  return (\n    <>\n      <GameSimulatorAssetViewer assetPath={currentAsset} />\n      <Tree contents={assetTree.nodes} onNodeClick={handleNodeClick} />\n    </>\n  );\n};\n\n/**\n * Tools that are added to asset selection, includes: trash-can delete tool\n *\n * @param filePath the path to asset you want to supply tools for\n * @returns {JSX.Element} A trash can that deletes the file given the asset path\n */\nconst toolIcons = (filePath: string) => (\n  <Tooltip2 content=\"Delete\">\n    <Icon icon=\"trash\" onClick={deleteFile(filePath)} />\n  </Tooltip2>\n);\n\n/**\n * This function deletes an S3 file given the short filepath\n *\n * @param filePath - the file path e.g. \"stories/chapter0.txt\"\n */\nconst deleteFile = (filePath: string) => async () => {\n  const confirm = window.confirm(\n    `Are you sure you want to delete ${filePath}?\\nThere is no undoing this action!`\n  );\n  alert(confirm ? await deleteS3File(filePath) : 'Whew');\n};\n\nexport default GameSimulatorAssetSelection;\n","import { Button } from '@blueprintjs/core';\nimport { arrayMoveImmutable } from 'array-move';\nimport React from 'react';\nimport {\n  SortableContainer,\n  SortableContainerProps,\n  SortableElement,\n  SortableElementProps\n} from 'react-sortable-hoc';\n\ntype SortableItemProps = SortableElementProps & {\n  value: any;\n};\n\nconst SortableItem = React.memo(\n  SortableElement<SortableItemProps>(({ value }: any) => (\n    <div>\n      <Button>{value}</Button>\n    </div>\n  ))\n);\n\ntype SortableListProps = SortableContainerProps & {\n  items: string[];\n};\n\nexport const SortableList = React.memo(\n  SortableContainer<SortableListProps>(({ items }: any) => {\n    return (\n      <div>\n        {items &&\n          items.map((value: any, index: number) => (\n            <SortableItem key={`item-${value}`} index={index} value={value} />\n          ))}\n      </div>\n    );\n  })\n);\n\nexport const useSortableList = () => {\n  const [items, setItems] = React.useState<string[]>([]);\n\n  const onSortEnd = React.useCallback(({ oldIndex, newIndex }: any) => {\n    setItems(prevState => arrayMoveImmutable(prevState, oldIndex, newIndex));\n  }, []);\n\n  return {\n    items,\n    setItems,\n    onSortEnd\n  };\n};\n","import { Button, Intent, Switch } from '@blueprintjs/core';\nimport { DatePicker } from '@blueprintjs/datetime';\nimport React from 'react';\nimport { getStandardDateTime } from 'src/commons/utils/DateHelper';\nimport { useInput } from 'src/commons/utils/Hooks';\nimport { SortableList, useSortableList } from 'src/commons/utils/SortableList';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { toS3Path } from 'src/features/game/utils/GameUtils';\nimport { callGameManagerForSim } from 'src/features/game/utils/TxtLoaderUtils';\nimport {\n  deleteChapterRequest,\n  updateChapterRequest\n} from 'src/features/gameSimulator/GameSimulatorService';\nimport { ChapterDetail } from 'src/features/gameSimulator/GameSimulatorTypes';\n\nimport { createChapterIndex, inAYear } from './GameSimulatorChapterSim';\n\ntype ChapterSimProps = {\n  chapterDetail: ChapterDetail;\n  checkpointFilenames?: string[];\n};\n\n/**\n * This is the Chapter Editor Form that\n * storywriters use to either create\n * or udpate chapters for the game.\n *\n * @param chapterDetail the starting state of the form,\n *                      either loaded from defaultChapter if user wants to create a new chapter\n *                      or loaded from the existing chapter if user wants to edit the chapter\n * @param checkpointFilenames the list of all checkpoint text files to choose from\n */\nconst ChapterEditor = React.memo(({ chapterDetail, checkpointFilenames }: ChapterSimProps) => {\n  const { id } = chapterDetail;\n  const { value: title, setValue: setTitle, inputProps: titleProps } = useInput('');\n  const { value: imageUrl, setValue: setImageUrl, inputProps: imageUrlProps } = useInput('');\n  const { items: chosenFiles, setItems: setChosenFiles, onSortEnd } = useSortableList();\n\n  const [isPublished, setIsPublished] = React.useState(false);\n  const [openDate, setOpenDate] = React.useState<Date>(new Date());\n  const [txtsNotChosen, setTxtsNotChosen] = React.useState<string[]>([]);\n  const [rerender, setRender] = React.useState(false);\n\n  React.useEffect(() => {\n    setTitle(chapterDetail.title);\n    setImageUrl(chapterDetail.imageUrl);\n    setOpenDate(new Date(chapterDetail.openAt));\n    setChosenFiles(chapterDetail.filenames);\n    setIsPublished(chapterDetail.isPublished);\n    setTxtsNotChosen(\n      (checkpointFilenames || []).filter(textAsset => !chapterDetail.filenames.includes(textAsset))\n    );\n  }, [\n    chapterDetail,\n    setChosenFiles,\n    setImageUrl,\n    setOpenDate,\n    setTitle,\n    checkpointFilenames,\n    rerender\n  ]);\n\n  const deleteAllFromChosen = () => chosenFiles.map(deleteFileFromChosen);\n\n  const deleteFileFromChosen = React.useCallback(\n    (txtFile: string) => {\n      setChosenFiles(prevItemList => prevItemList.filter(item => item !== txtFile));\n      setTxtsNotChosen(prevItemList => [...prevItemList, txtFile]);\n    },\n    [setChosenFiles]\n  );\n\n  const addFileToChosen = React.useCallback(\n    (txtFile: string) => {\n      setChosenFiles(prevItemList => [...prevItemList, txtFile]);\n      setTxtsNotChosen(prevItemList => prevItemList.filter(item => item !== txtFile));\n    },\n    [setChosenFiles]\n  );\n\n  const saveChapter = async () => {\n    const updatedChapter = {\n      openAt: openDate.toISOString(),\n      closeAt: inAYear(openDate).toISOString(),\n      title,\n      filenames: chosenFiles,\n      imageUrl,\n      isPublished\n    };\n\n    const confirm = window.confirm(\n      `Are you sure you want to save changes to ${JSON.stringify(updatedChapter)}`\n    );\n    if (!confirm) {\n      return;\n    }\n    const response =\n      parseInt(id) === createChapterIndex\n        ? await updateChapterRequest('', { story: updatedChapter })\n        : await updateChapterRequest(id, { story: updatedChapter });\n\n    alert(response);\n  };\n\n  const deleteChapter = async () => {\n    const confirm = window.confirm('Are you sure you want to delete this chapter?');\n    if (confirm) {\n      const response = await deleteChapterRequest(id);\n      alert(response);\n    }\n  };\n\n  const clearChanges = () => {\n    const confirm = window.confirm('Are you you want to clear changes for this chapter?');\n    if (confirm) {\n      setRender(!rerender);\n      alert('Cleared changes');\n    }\n  };\n\n  const simulateChapter = async () => {\n    SourceAcademyGame.getInstance().setChapterSimStack(chosenFiles);\n    await callGameManagerForSim();\n  };\n\n  return (\n    <>\n      <h4>\n        Title: <input className=\"bp4-input\" type=\"text\" {...titleProps} />\n      </h4>\n      <b>Open date: </b>\n      {openDate && getStandardDateTime(openDate.toISOString())}\n      <DatePicker\n        onChange={(date: Date) => {\n          date && setOpenDate(date);\n        }}\n      />\n      <h4>\n        Image url: <input className=\"bp4-input\" type=\"text\" {...imageUrlProps} />\n        <Button onClick={(_: any) => window.open(toS3Path(imageUrl, true))}>View</Button>\n      </h4>\n      <b>Checkpoint Txt Files</b>\n      <SortableList items={chosenFiles} onSortEnd={onSortEnd} />\n      <br />\n      {chosenFiles.length > 0 && (\n        <Button icon={'delete'} onClick={deleteAllFromChosen}>\n          Clear checkpoint files\n        </Button>\n      )}\n      <br />\n      <b>All Txt Files</b>\n      {txtsNotChosen &&\n        txtsNotChosen.map(textFile => {\n          return (\n            <div key={`choice-${textFile}`}>\n              <Button onClick={() => addFileToChosen(textFile)} icon={'add'}>\n                {textFile}\n              </Button>\n            </div>\n          );\n        })}\n      <br />\n      <Button icon=\"play\" onClick={simulateChapter}>\n        Simulate Chapter\n      </Button>\n      <br />\n      <br />\n      <Switch\n        checked={isPublished}\n        labelElement={'Published'}\n        onChange={() => setIsPublished(!isPublished)}\n      />\n      <Button onClick={saveChapter}>Save Changes</Button>\n      <Button intent={Intent.WARNING} onClick={clearChanges}>\n        Clear Changes\n      </Button>\n      <br />\n      <br />\n      <Button icon=\"trash\" intent={Intent.DANGER} onClick={deleteChapter}>\n        Delete Chapter\n      </Button>\n    </>\n  );\n});\n\nexport default ChapterEditor;\n","import React from 'react';\nimport { useRequest } from 'src/commons/utils/Hooks';\nimport { fetchChapters, fetchTextAssets } from 'src/features/gameSimulator/GameSimulatorService';\nimport { ChapterDetail } from 'src/features/gameSimulator/GameSimulatorTypes';\n\nimport GameSimulatorChapterEditor from './GameSimulatorChapterEditor';\n\nexport const inAYear = (date: Date) => {\n  date.setFullYear(date.getFullYear() + 1);\n  return date;\n};\n\nexport const createChapterIndex = -1;\nconst defaultChapter = {\n  id: createChapterIndex,\n  title: 'title goes here',\n  imageUrl: '/locations/telebay/emergency.png',\n  openAt: new Date().toISOString(),\n  closeAt: inAYear(new Date()).toISOString(),\n  isPublished: false,\n  filenames: []\n};\n\n/**\n * This components renders the chapter editor/chapter creator component\n * based on the chapter chosen in the dropdown.\n *\n * @param textAssets - the list of all text assets on S3 to choose from\n */\nconst ChapterSim = React.memo(() => {\n  const { value: textAssets } = useRequest<string[]>(fetchTextAssets, []);\n  const { value: chapters } = useRequest<ChapterDetail[]>(fetchChapters, []);\n\n  const [chosenIndex, setChosenIndex] = React.useState(createChapterIndex);\n\n  return (\n    <>\n      <h3>Chapter Simulator</h3>\n      <select className=\"bp4-menu\" onChange={(e: any) => setChosenIndex(e.target.value)}>\n        {chapters.map((chapter, chapterIndex) => (\n          <option value={chapterIndex} key={chapterIndex}>\n            {`Chapter ${chapterIndex}: ${chapter.title}`}\n          </option>\n        ))}\n        <option value={createChapterIndex} key={createChapterIndex}>\n          {`Create new chapter`}\n        </option>\n      </select>\n      <hr />\n      <GameSimulatorChapterEditor\n        chapterDetail={chapters[chosenIndex] || defaultChapter}\n        checkpointFilenames={textAssets}\n      />\n    </>\n  );\n});\nexport default ChapterSim;\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport { screenSize } from 'src/features/game/commons/CommonConstants';\nimport { BitmapFontStyle } from 'src/features/game/commons/CommonTypes';\n\nexport const mainMenuOptStyle: BitmapFontStyle = {\n  key: FontAssets.zektonDarkFont.key,\n  size: 35,\n  align: Phaser.GameObjects.BitmapText.ALIGN_CENTER\n};\n\nconst SSMainMenuConstants = {\n  maxOptButtonsRow: 2,\n  optButton: { xSpace: screenSize.x * 0.9, ySpace: screenSize.y * 0.5 },\n  gameTxtStorageName: {\n    defaultChapter: 'defaultChapter',\n    checkpointTxt: 'checkpointTxt'\n  }\n};\n\nexport default SSMainMenuConstants;\n","import 'ace-builds/webpack-resolver';\n\nimport { Button, Tab, Tabs } from '@blueprintjs/core';\nimport React from 'react';\nimport { toTxtPath } from 'src/features/game/assets/TextAssets';\nimport { toS3Path } from 'src/features/game/utils/GameUtils';\n\ntype Props = {\n  storageName: string;\n  s3TxtFiles: string[];\n};\n\n/**\n * This component enables story writers to upload their txt file contents\n * to the browser, or load a file from S3 and store the txt contents\n * in the browser. So that GameManager can read from these txt files\n *\n * @param storageName the field in browser storage where the loaded/fetched txt files get stored temporarily\n * @param s3TxtFiles the list of S3 txt files to choose from\n */\nfunction CheckpointTxtLoader({ storageName, s3TxtFiles }: Props) {\n  const [chosenFilename, setChosenFilename] = React.useState(s3TxtFiles[0]);\n\n  function onLoadTxt(e: any) {\n    if (!e.target.files) return;\n    const [file] = e.target.files;\n    loadFileLocally(storageName, file);\n  }\n\n  async function changeChosenFilename(e: any) {\n    const filename = e.target.value;\n    setChosenFilename(filename);\n    const response = await fetch(toS3Path(`/stories/${filename}`, true), {\n      headers: createHeadersWithCors()\n    });\n    const txt = await response.text();\n    sessionStorage.setItem(storageName, txt);\n  }\n\n  const uploadButton = <input type=\"file\" onChange={onLoadTxt} style={{ width: '250px' }} />;\n\n  const chooseS3Txt = (\n    <>\n      <select className=\"bp4-menu\" onChange={changeChosenFilename}>\n        {s3TxtFiles.map(file => (\n          <option value={file} key={file}>\n            {file}\n          </option>\n        ))}\n      </select>\n      <Button icon={'download'} onClick={() => window.open(toTxtPath(chosenFilename))} />\n    </>\n  );\n\n  return (\n    <div className=\"LeftAlign\">\n      <hr />\n      <Tabs id=\"Tabs\" key=\"vertical\" renderActiveTabPanelOnly={true}>\n        <Tab id=\"own\" title=\"Local\" panel={uploadButton} />\n        <Tab id=\"s3\" title=\"S3\" panel={chooseS3Txt} />\n      </Tabs>\n      <hr />\n    </div>\n  );\n}\n\nconst loadFileLocally = (storageName: string, txtFile: File) => {\n  const reader = new FileReader();\n  reader.readAsText(txtFile);\n  reader.onloadend = _ => {\n    if (!reader.result) {\n      return;\n    }\n    sessionStorage.setItem(storageName, reader.result.toString());\n  };\n};\n\nexport default CheckpointTxtLoader;\n\nfunction createHeadersWithCors(): Headers {\n  const headers = new Headers();\n  headers.append('Access-Control-Allow-Origin', '*');\n  return headers;\n}\n","import { Button } from '@blueprintjs/core';\nimport { useRequest } from 'src/commons/utils/Hooks';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { fetchTextAssets } from 'src/features/gameSimulator/GameSimulatorService';\nimport MainMenu from 'src/features/gameSimulator/scenes/MainMenu';\nimport mainMenuConstants from 'src/features/gameSimulator/scenes/MainMenuConstants';\n\nimport CheckpointTxtLoader from './GameSimulatorCheckpointTxtLoader';\n\n/**\n * This component helps one simulate a checkpoint by\n * supplying two txt files - the default txt file\n * and the checkpoint txt file\n *\n * @param textAssets these are the list of text files on S3, if storywriter's simulation\n *                   involves S3 text files.\n */\nexport default function CheckpointSim() {\n  const { value: textAssets } = useRequest<string[]>(fetchTextAssets, []);\n\n  function simulateCheckpoint() {\n    (SourceAcademyGame.getInstance().getCurrentSceneRef() as MainMenu).simulateCheckpoint();\n  }\n\n  return (\n    <>\n      <h3>Checkpoint Text Loader</h3>\n      <b>Step 1: Choose default checkpoint</b>\n      <CheckpointTxtLoader\n        s3TxtFiles={textAssets}\n        storageName={mainMenuConstants.gameTxtStorageName.defaultChapter}\n      />\n      <b>Step 2: Choose checkpoint text</b>\n      <CheckpointTxtLoader\n        s3TxtFiles={textAssets}\n        storageName={mainMenuConstants.gameTxtStorageName.checkpointTxt}\n      />\n      <br />\n      <Button onClick={simulateCheckpoint} icon=\"play\">\n        Simulate Checkpoint\n      </Button>\n      <br />\n      <br />\n      <Button onClick={clearSessionStorage}>Reset All Files</Button>\n      <br />\n    </>\n  );\n}\n\nfunction clearSessionStorage(e: any) {\n  sessionStorage.setItem(mainMenuConstants.gameTxtStorageName.checkpointTxt, '');\n  sessionStorage.setItem(mainMenuConstants.gameTxtStorageName.defaultChapter, '');\n}\n","import { AssetMap, AssetType, ImageAsset } from 'src/features/game/assets/AssetsTypes';\n\nconst SSImageAssets: AssetMap<ImageAsset> = {\n  gameSimBg: {\n    type: AssetType.Image,\n    key: 'student-room',\n    path: '/locations/deathCube_ext/shields-down.png'\n  },\n  shortButton: { type: AssetType.Image, key: 'short-button', path: '/ui/shortButton.png' },\n  invertedButton: {\n    type: AssetType.Image,\n    key: 'inverted-button',\n    path: '/ui/invertedColorButton.png'\n  },\n  blueUnderlay: { type: AssetType.Image, key: 'blue-underlay', path: '/ui/blueUnderlay.png' },\n  topButton: { type: AssetType.Image, key: 'top-button', path: '/ui/topButton.png' },\n  colorIcon: { type: AssetType.Image, key: 'color-icon', path: '/ui/colorIcon.png' },\n  imageIcon: { type: AssetType.Image, key: 'image-icon', path: '/ui/imageIcon.png' },\n  bboxIcon: { type: AssetType.Image, key: 'bbox-icon', path: '/ui/bboxIcon.png' },\n  handIcon: { type: AssetType.Image, key: 'hand-icon', path: '/ui/handIcon.png' },\n  listIcon: { type: AssetType.Image, key: 'list-icon', path: '/ui/listIcon.png' },\n  eraseIcon: { type: AssetType.Image, key: 'erase-icon', path: '/ui/eraserIcon.png' },\n  iconBg: { type: AssetType.Image, key: 'icon-bg', path: '/ui/modeIconBg.png' }\n};\n\nexport default SSImageAssets;\n","import FontAssets from 'src/features/game/assets/FontAssets';\nimport ImageAssets from 'src/features/game/assets/ImageAssets';\nimport SoundAssets from 'src/features/game/assets/SoundAssets';\nimport { screenCenter, screenSize } from 'src/features/game/commons/CommonConstants';\nimport { addLoadingScreen } from 'src/features/game/effects/LoadingScreen';\nimport GameLayerManager from 'src/features/game/layer/GameLayerManager';\nimport { Layer } from 'src/features/game/layer/GameLayerTypes';\nimport Parser from 'src/features/game/parser/Parser';\nimport SourceAcademyGame from 'src/features/game/SourceAcademyGame';\nimport { createButton } from 'src/features/game/utils/ButtonUtils';\nimport { mandatory, toS3Path } from 'src/features/game/utils/GameUtils';\nimport { calcTableFormatPos } from 'src/features/game/utils/StyleUtils';\n\nimport SSImageAssets from '../assets/ImageAssets';\nimport { GameSimState } from '../GameSimulatorTypes';\nimport mainMenuConstants, { mainMenuOptStyle } from './MainMenuConstants';\n\n/**\n * Entry point for Game simulator.\n *\n * User can access different Game simulator\n * functionalities from here.\n */\nclass MainMenu extends Phaser.Scene {\n  private layerManager?: GameLayerManager;\n\n  constructor() {\n    super('GameSimulatorMenu');\n  }\n\n  public preload() {\n    SourceAcademyGame.getInstance().setCurrentSceneRef(this);\n    this.layerManager = new GameLayerManager(this);\n\n    addLoadingScreen(this);\n    Object.values(ImageAssets).forEach(asset =>\n      this.load.image(asset.key, toS3Path(asset.path, false))\n    );\n    Object.values(SSImageAssets).forEach(asset =>\n      this.load.image(asset.key, toS3Path(asset.path, false))\n    );\n    Object.values(FontAssets).forEach(asset =>\n      this.load.bitmapFont(asset.key, asset.pngPath, asset.fntPath)\n    );\n    SourceAcademyGame.getInstance().getSoundManager().loadSoundAssetMap(SoundAssets);\n  }\n\n  public async create() {\n    if (SourceAcademyGame.getInstance().getAccountInfo().role === 'student') {\n      console.log('Students cannot use Game sim');\n      return;\n    }\n    this.renderBackground();\n    this.renderOptionButtons();\n  }\n\n  private renderOptionButtons() {\n    const optionsContainer = new Phaser.GameObjects.Container(this, 0, 0);\n    const buttons = this.getOptionButtons();\n\n    const buttonPositions = calcTableFormatPos({\n      numOfItems: buttons.length,\n      maxXSpace: mainMenuConstants.optButton.xSpace,\n      maxYSpace: mainMenuConstants.optButton.ySpace,\n      numItemLimit: mainMenuConstants.maxOptButtonsRow,\n      redistributeLast: true\n    });\n\n    optionsContainer.add(\n      buttons.map((button, index) =>\n        this.createOptButton(\n          button.text,\n          buttonPositions[index][0],\n          buttonPositions[index][1],\n          button.callback\n        )\n      )\n    );\n    this.getLayerManager().addToLayer(Layer.UI, optionsContainer);\n  }\n\n  private getOptionButtons() {\n    return [\n      {\n        text: 'Checkpoint Simulator',\n        callback: () => {\n          SourceAcademyGame.getInstance().setGameSimState(GameSimState.CheckpointSim);\n        }\n      },\n      {\n        text: 'Asset Uploader',\n        callback: () => {\n          SourceAcademyGame.getInstance().setGameSimState(GameSimState.AssetUploader);\n        }\n      },\n      {\n        text: 'Chapter Simulator',\n        callback: () => {\n          SourceAcademyGame.getInstance().setGameSimState(GameSimState.ChapterSim);\n        }\n      }\n    ];\n  }\n\n  private createOptButton(text: string, xPos: number, yPos: number, callback: any) {\n    return createButton(this, {\n      assetKey: SSImageAssets.invertedButton.key,\n      message: text,\n      textConfig: { x: 0, y: 0, oriX: 0.5, oriY: 0.5 },\n      bitMapTextStyle: mainMenuOptStyle,\n      onUp: callback\n    }).setPosition(xPos, yPos);\n  }\n\n  public simulateCheckpoint() {\n    const defaultChapterText =\n      sessionStorage.getItem(mainMenuConstants.gameTxtStorageName.defaultChapter) || '';\n    const checkpointTxt =\n      sessionStorage.getItem(mainMenuConstants.gameTxtStorageName.checkpointTxt) || '';\n    if (defaultChapterText === '' && checkpointTxt === '') {\n      return;\n    }\n\n    this.getLayerManager().clearAllLayers();\n\n    Parser.parse(defaultChapterText);\n    if (checkpointTxt) {\n      Parser.parse(checkpointTxt, true);\n    }\n    const gameCheckpoint = Parser.checkpoint;\n\n    this.scene.start('GameManager', {\n      gameCheckpoint,\n      chapterNum: -1,\n      checkpointNum: -1\n    });\n  }\n\n  private renderBackground() {\n    const backgroundImg = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      SSImageAssets.gameSimBg.key\n    );\n    backgroundImg.setDisplaySize(screenSize.x, screenSize.y);\n    const backgroundUnderlay = new Phaser.GameObjects.Image(\n      this,\n      screenCenter.x,\n      screenCenter.y,\n      SSImageAssets.blueUnderlay.key\n    ).setAlpha(0.5);\n    this.getLayerManager().addToLayer(Layer.Background, backgroundImg);\n    this.getLayerManager().addToLayer(Layer.Background, backgroundUnderlay);\n  }\n  public getLayerManager = () => mandatory(this.layerManager);\n}\n\nexport default MainMenu;\n","import * as Phaser from 'phaser';\nimport { screenSize } from 'src/features/game/commons/CommonConstants';\nimport CheckpointTransition from 'src/features/game/scenes/checkpointTransition/CheckpointTransition';\nimport GameManager from 'src/features/game/scenes/gameManager/GameManager';\nimport SourceAcademyGame, { GameType } from 'src/features/game/SourceAcademyGame';\nimport MainMenu from 'src/features/gameSimulator/scenes/MainMenu';\n\nconst config = {\n  debug: true,\n  type: Phaser.CANVAS,\n  width: screenSize.x,\n  height: screenSize.y,\n  physics: {\n    default: 'arcade'\n  },\n  scale: {\n    mode: Phaser.Scale.FIT,\n    parent: 'game-display'\n  },\n  fps: {\n    target: 24\n  }\n};\n\nexport const createGameSimulatorGame = () => {\n  const game = new SourceAcademyGame(config, GameType.Simulator);\n  game.scene.add('GameSimulatorMenu', MainMenu, true);\n  game.scene.add('GameManager', GameManager);\n  game.scene.add('CheckpointTransition', CheckpointTransition);\n  return game;\n};\n","import React from 'react';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport SourceAcademyGame, { AccountInfo } from 'src/features/game/SourceAcademyGame';\nimport { GameSimState } from 'src/features/gameSimulator/GameSimulatorTypes';\n\nimport GameSimulatorAssetFileUploader from './subcomponents/GameSimulatorAssetFileUploader';\nimport GameSimulatorAssetSelection from './subcomponents/GameSimulatorAssetSelection';\nimport GameSimulatorChapterSim from './subcomponents/GameSimulatorChapterSim';\nimport GameSimulatorCheckpointSim from './subcomponents/GameSimulatorCheckpointSim';\nimport { createGameSimulatorGame } from './subcomponents/GameSimulatorGame';\n\n/**\n * Game simulator main page\n *\n * Displays the following elements:\n * (1) Game Simulator phaser canvas\n * (2) Game Simulator control panel\n *\n * Game Simulator control panel's content can be altered using\n * `setGameSimState` function. This function is passed into story\n * simulator phaser game, so that the GameSimulatorMainMenu buttons\n * are able to control what is shown on the Game Simulator panel.\n */\nfunction GameSimulator() {\n  const session = useTypedSelector(state => state.session);\n  const [gameSimState, setGameSimState] = React.useState<string>(GameSimState.Default);\n\n  React.useEffect(() => {\n    createGameSimulatorGame().setGameSimStateSetter(setGameSimState);\n  }, []);\n\n  React.useEffect(() => {\n    SourceAcademyGame.getInstance().setAccountInfo({\n      accessToken: session.accessToken,\n      refreshToken: session.refreshToken,\n      role: session.role,\n      name: session.name\n    } as AccountInfo);\n  }, [session]);\n\n  return (\n    <div className=\"GameSimulatorWrapper\">\n      <div id=\"game-display\" />\n      <div className=\"LeftAlign GameSimulatorPanel\">\n        {gameSimState === GameSimState.Default && <h3>Welcome to Game simulator!</h3>}\n        {gameSimState === GameSimState.CheckpointSim && <GameSimulatorCheckpointSim />}\n        {gameSimState === GameSimState.AssetUploader && (\n          <>\n            <h3>Asset uploader</h3>\n            <GameSimulatorAssetFileUploader />\n            <h3>Asset Viewer</h3>\n            <GameSimulatorAssetSelection />\n          </>\n        )}\n        {gameSimState === GameSimState.ChapterSim && <GameSimulatorChapterSim />}\n      </div>\n    </div>\n  );\n}\n\nexport default GameSimulator;\n","import { Icon as BpIcon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Flex, Icon } from '@tremor/react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  reautogradeSubmission,\n  unsubmitSubmission\n} from 'src/commons/application/actions/SessionActions';\nimport { showSimpleConfirmDialog } from 'src/commons/utils/DialogHelper';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\ntype GradingActionsProps = {\n  submissionId: number;\n};\n\nconst GradingActions: React.FC<GradingActionsProps> = ({ submissionId }) => {\n  const dispatch = useDispatch();\n  const courseId = useTypedSelector(store => store.session.courseId);\n\n  const handleReautogradeClick = async () => {\n    const confirm = await showSimpleConfirmDialog({\n      contents: (\n        <>\n          <p>Reautograde this submission?</p>\n          <p>Note: all manual adjustments will be reset to 0.</p>\n        </>\n      ),\n      positiveIntent: 'danger',\n      positiveLabel: 'Reautograde'\n    });\n    if (confirm) {\n      dispatch(reautogradeSubmission(submissionId));\n    }\n  };\n\n  const handleUnsubmitClick = async () => {\n    const confirm = await showSimpleConfirmDialog({\n      contents: 'Are you sure you want to unsubmit?',\n      positiveIntent: 'danger',\n      positiveLabel: 'Unsubmit'\n    });\n    if (confirm) {\n      dispatch(unsubmitSubmission(submissionId));\n    }\n  };\n\n  return (\n    <Flex justifyContent=\"justify-start\" spaceX=\"space-x-2\">\n      <Link to={`/courses/${courseId}/grading/${submissionId}`}>\n        <Icon tooltip=\"Grade\" icon={() => <BpIcon icon={IconNames.EDIT} />} variant=\"light\" />\n      </Link>\n\n      <button type=\"button\" style={{ padding: 0 }} onClick={handleReautogradeClick}>\n        <Icon\n          tooltip=\"Reautograde\"\n          icon={() => <BpIcon icon={IconNames.REFRESH} />}\n          variant=\"simple\"\n        />\n      </button>\n\n      <button type=\"button\" style={{ padding: 0 }} onClick={handleUnsubmitClick}>\n        <Icon tooltip=\"Unsubmit\" icon={() => <BpIcon icon={IconNames.UNDO} />} variant=\"simple\" />\n      </button>\n    </Flex>\n  );\n};\n\nexport default GradingActions;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ColumnFilter } from '@tanstack/react-table';\nimport { Badge } from '@tremor/react';\nimport { GradingStatus } from 'src/commons/assessment/AssessmentTypes';\n\nconst BADGE_COLORS = {\n  // assessment types\n  missions: 'indigo',\n  quests: 'emerald',\n  paths: 'sky',\n\n  // submission status\n  submitted: 'green',\n  attempting: 'yellow',\n  attempted: 'red',\n\n  // grading status\n  graded: 'green',\n  grading: 'yellow',\n  none: 'red'\n};\n\nexport function getBadgeColorFromLabel(label: string) {\n  return BADGE_COLORS[label.toLowerCase()] || 'gray';\n}\n\ntype AssessmentTypeBadgeProps = {\n  type: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n};\n\nconst AssessmentTypeBadge: React.FC<AssessmentTypeBadgeProps> = ({ type, size = 'sm' }) => {\n  return (\n    <Badge\n      text={size === 'xs' ? type.charAt(0).toUpperCase() : type}\n      size={size}\n      color={getBadgeColorFromLabel(type)}\n    />\n  );\n};\n\ntype SubmissionStatusBadgeProps = {\n  status: string;\n};\n\nconst SubmissionStatusBadge: React.FC<SubmissionStatusBadgeProps> = ({ status }) => {\n  const statusText = status.charAt(0).toUpperCase() + status.slice(1);\n  return <Badge text={statusText} color={getBadgeColorFromLabel(status)} />;\n};\n\ntype GradingStatusBadgeProps = {\n  status: GradingStatus;\n};\n\nconst GradingStatusBadge: React.FC<GradingStatusBadgeProps> = ({ status }) => {\n  const statusText = status.charAt(0).toUpperCase() + status.slice(1);\n  const badgeIcon = () => (\n    <Icon\n      icon={\n        status === 'graded'\n          ? IconNames.TICK\n          : status === 'grading'\n          ? IconNames.TIME\n          : status === 'none'\n          ? IconNames.CROSS\n          : IconNames.DISABLE\n      }\n      style={{ marginRight: '0.5rem' }}\n    />\n  );\n  return <Badge text={statusText} color={getBadgeColorFromLabel(status)} icon={badgeIcon} />;\n};\n\ntype FilterBadgeProps = {\n  filter: ColumnFilter;\n  onRemove: (filter: ColumnFilter) => void;\n};\n\nconst FilterBadge: React.FC<FilterBadgeProps> = ({ filter, onRemove }) => {\n  let filterValue = filter.value as string;\n  filterValue = filterValue.charAt(0).toUpperCase() + filterValue.slice(1);\n  return (\n    <button\n      type=\"button\"\n      className=\"grading-overview-filterable-btns\"\n      onClick={() => onRemove(filter)}\n    >\n      <Badge\n        text={filterValue}\n        icon={() => <Icon icon={IconNames.CROSS} style={{ marginRight: '0.25rem' }} />}\n        color={getBadgeColorFromLabel(filterValue)}\n      />\n    </button>\n  );\n};\n\nexport { AssessmentTypeBadge, FilterBadge, GradingStatusBadge, SubmissionStatusBadge };\n","import { ColumnFilter, ColumnFiltersState } from '@tanstack/react-table';\nimport { Flex } from '@tremor/react';\n\nimport { FilterBadge } from './GradingBadges';\n\ntype GradingSubmissionFiltersProps = {\n  filters: ColumnFiltersState;\n  onFilterRemove: (filter: ColumnFilter) => void;\n};\n\nconst GradingSubmissionFilters: React.FC<GradingSubmissionFiltersProps> = ({\n  filters,\n  onFilterRemove\n}) => {\n  return (\n    <Flex justifyContent=\"justify-start\" spaceX=\"space-x-1\">\n      {filters.map(filter => (\n        <FilterBadge filter={filter} onRemove={onFilterRemove} key={filter.id} />\n      ))}\n    </Flex>\n  );\n};\n\nexport default GradingSubmissionFilters;\n","import '@tremor/react/dist/esm/tremor.css';\n\nimport { Icon as BpIcon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport {\n  Column,\n  ColumnFilter,\n  ColumnFiltersState,\n  createColumnHelper,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport {\n  Bold,\n  Button,\n  Flex,\n  Footer,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeaderCell,\n  TableRow,\n  Text,\n  TextInput\n} from '@tremor/react';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport { updateSubmissionsTableFilters } from 'src/commons/workspace/WorkspaceActions';\nimport { GradingOverview } from 'src/features/grading/GradingTypes';\nimport { convertFilterToBackendParams } from 'src/features/grading/GradingUtils';\n\nimport GradingActions from './GradingActions';\nimport { AssessmentTypeBadge, GradingStatusBadge, SubmissionStatusBadge } from './GradingBadges';\nimport GradingSubmissionFilters from './GradingSubmissionFilters';\n\nconst columnHelper = createColumnHelper<GradingOverview>();\n\nconst makeColumns = (handleClick: () => void) => [\n  columnHelper.accessor('assessmentName', {\n    header: 'Name',\n    cell: info => <Filterable onClick={handleClick} column={info.column} value={info.getValue()} />\n  }),\n  columnHelper.accessor('assessmentType', {\n    header: 'Type',\n    cell: info => (\n      <Filterable onClick={handleClick} column={info.column} value={info.getValue()}>\n        <AssessmentTypeBadge type={info.getValue()} />\n      </Filterable>\n    )\n  }),\n  columnHelper.accessor('studentName', {\n    header: 'Student',\n    cell: info => <Filterable onClick={handleClick} column={info.column} value={info.getValue()} />\n  }),\n  columnHelper.accessor('studentUsername', {\n    header: 'Username',\n    cell: info => <Filterable onClick={handleClick} column={info.column} value={info.getValue()} />\n  }),\n  columnHelper.accessor('groupName', {\n    header: 'Group',\n    cell: info => <Filterable onClick={handleClick} column={info.column} value={info.getValue()} />\n  }),\n  columnHelper.accessor('submissionStatus', {\n    header: 'Progress',\n    cell: info => (\n      <Filterable onClick={handleClick} column={info.column} value={info.getValue()}>\n        <SubmissionStatusBadge status={info.getValue()} />\n      </Filterable>\n    )\n  }),\n  columnHelper.accessor('gradingStatus', {\n    header: 'Grading',\n    cell: info => <GradingStatusBadge status={info.getValue()} />\n  }),\n  columnHelper.accessor(({ currentXp, xpBonus, maxXp }) => ({ currentXp, xpBonus, maxXp }), {\n    header: 'Raw XP (+Bonus)',\n    enableColumnFilter: false,\n    cell: info => {\n      const { currentXp, xpBonus, maxXp } = info.getValue();\n      return (\n        <Flex justifyContent=\"justify-start\" spaceX=\"space-x-2\">\n          <Text>\n            {currentXp} (+{xpBonus})\n          </Text>\n          <Text>/</Text>\n          <Text>{maxXp}</Text>\n        </Flex>\n      );\n    }\n  }),\n  columnHelper.accessor(({ submissionId }) => ({ submissionId }), {\n    header: 'Actions',\n    enableColumnFilter: false,\n    cell: info => {\n      const { submissionId } = info.getValue();\n      return <GradingActions submissionId={submissionId} />;\n    }\n  })\n];\n\ntype GradingSubmissionTableProps = {\n  totalRows: number;\n  pageSize: number;\n  submissions: GradingOverview[];\n  updateEntries: (page: number, filterParams: Object) => void;\n};\n\nconst GradingSubmissionTable: React.FC<GradingSubmissionTableProps> = ({\n  totalRows,\n  pageSize,\n  submissions,\n  updateEntries\n}) => {\n  const dispatch = useDispatch();\n  const tableFilters = useTypedSelector(state => state.workspaces.grading.submissionsTableFilters);\n\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([\n    ...tableFilters.columnFilters\n  ]);\n\n  const [page, setPage] = useState(0);\n  const maxPage = useMemo(() => Math.ceil(totalRows / pageSize) - 1, [totalRows, pageSize]);\n  const resetPage = useCallback(() => setPage(0), [setPage]);\n\n  /** The value to be shown in the search bar */\n  const [searchQuery, setSearchQuery] = useState('');\n  /** The actual value sent to the backend */\n  const [searchValue, setSearchValue] = useState('');\n  // Placing searchValue as a dependency for triggering a page reset will result in double-querying.\n  const debouncedUpdateSearchValue = useMemo(\n    () =>\n      debounce((newValue: string) => {\n        resetPage();\n        setSearchValue(newValue);\n      }, 300),\n    [resetPage]\n  );\n  const handleSearchQueryUpdate: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setSearchQuery(e.target.value);\n    debouncedUpdateSearchValue(e.target.value);\n  };\n\n  // Converts the columnFilters array into backend query parameters.\n  const backendFilterParams = useMemo(() => {\n    const filters: Array<{ [key: string]: any }> = [\n      { id: 'assessmentName', value: searchValue },\n      ...columnFilters\n    ].map(convertFilterToBackendParams);\n\n    const params: Record<string, any> = {};\n    filters.forEach(e => {\n      Object.keys(e).forEach(key => {\n        params[key] = e[key];\n      });\n    });\n    return params;\n  }, [columnFilters, searchValue]);\n\n  const columns = useMemo(() => makeColumns(resetPage), [resetPage]);\n  const table = useReactTable({\n    data: submissions,\n    columns,\n    state: {\n      columnFilters,\n      pagination: {\n        pageIndex: 0,\n        pageSize: pageSize\n      }\n    },\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel()\n  });\n\n  const handleFilterRemove = ({ id, value }: ColumnFilter) => {\n    const newFilters = columnFilters.filter(filter => filter.id !== id && filter.value !== value);\n    setColumnFilters(newFilters);\n    resetPage();\n  };\n\n  useEffect(() => {\n    dispatch(updateSubmissionsTableFilters({ columnFilters }));\n  }, [columnFilters, dispatch]);\n\n  useEffect(() => {\n    resetPage();\n  }, [updateEntries, resetPage, searchValue]);\n\n  useEffect(() => {\n    updateEntries(page, backendFilterParams);\n  }, [updateEntries, page, backendFilterParams]);\n\n  return (\n    <>\n      <Flex marginTop=\"mt-2\" justifyContent=\"justify-between\" alignItems=\"items-center\">\n        <Flex alignItems=\"items-center\" spaceX=\"space-x-2\">\n          <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center', height: '1.75rem' }}>\n            <BpIcon icon={IconNames.FILTER_LIST} />\n            <Text>\n              {columnFilters.length > 0\n                ? 'Filters: '\n                : 'No filters applied. Click on any cell to filter by its value.'}{' '}\n            </Text>\n          </div>\n          <GradingSubmissionFilters filters={columnFilters} onFilterRemove={handleFilterRemove} />\n        </Flex>\n\n        <TextInput\n          maxWidth=\"max-w-sm\"\n          icon={() => <BpIcon icon={IconNames.SEARCH} style={{ marginLeft: '0.75rem' }} />}\n          placeholder=\"Search by assessment name\"\n          value={searchQuery}\n          onChange={handleSearchQueryUpdate}\n        />\n      </Flex>\n      <Table marginTop=\"mt-2\">\n        <TableHead>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => (\n                <TableHeaderCell key={header.id}>\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(header.column.columnDef.header, header.getContext())}\n                </TableHeaderCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow key={row.id}>\n              {row.getVisibleCells().map(cell => (\n                <TableCell key={cell.id}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n        <div className=\"grading-overview-footer-sibling\"></div>\n        <Footer>\n          <Flex justifyContent=\"justify-center\" spaceX=\"space-x-3\">\n            <Button\n              size=\"xs\"\n              icon={() => <BpIcon icon={IconNames.DOUBLE_CHEVRON_LEFT} />}\n              variant=\"light\"\n              onClick={() => setPage(0)}\n              disabled={page <= 0}\n            />\n            <Button\n              size=\"xs\"\n              icon={() => <BpIcon icon={IconNames.ARROW_LEFT} />}\n              variant=\"light\"\n              onClick={() => setPage(page - 1)}\n              disabled={page <= 0}\n            />\n            <Bold>\n              Page {page + 1} of {maxPage + 1}\n            </Bold>\n            <Button\n              size=\"xs\"\n              icon={() => <BpIcon icon={IconNames.ARROW_RIGHT} />}\n              variant=\"light\"\n              onClick={() => setPage(page + 1)}\n              disabled={page >= maxPage}\n            />\n            <Button\n              size=\"xs\"\n              icon={() => <BpIcon icon={IconNames.DOUBLE_CHEVRON_RIGHT} />}\n              variant=\"light\"\n              onClick={() => setPage(maxPage)}\n              disabled={page >= maxPage}\n            />\n          </Flex>\n        </Footer>\n      </Table>\n      <Flex marginTop=\"-mt-6\">\n        <></>\n      </Flex>\n    </>\n  );\n};\n\ntype FilterableProps = {\n  column: Column<any, unknown>;\n  value: string;\n  children?: React.ReactNode;\n  onClick?: () => void;\n};\n\nconst Filterable: React.FC<FilterableProps> = ({ column, value, children, onClick }) => {\n  const handleFilterChange = () => {\n    column.setFilterValue(value);\n    onClick?.();\n  };\n\n  return (\n    <button type=\"button\" className=\"grading-overview-filterable-btns\" onClick={handleFilterChange}>\n      {children || value}\n    </button>\n  );\n};\n\nexport default GradingSubmissionTable;\n","import {\n  Button,\n  Divider,\n  H3,\n  Icon,\n  IconName,\n  Intent,\n  NumericInput,\n  Position,\n  Pre\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport ReactMde, { ReactMdeProps } from 'react-mde';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  reautogradeAnswer,\n  submitGrading,\n  submitGradingAndContinue\n} from '../../../../commons/application/actions/SessionActions';\nimport ControlButton from '../../../../commons/ControlButton';\nimport Markdown from '../../../../commons/Markdown';\nimport { Prompt } from '../../../../commons/ReactRouterPrompt';\nimport { getPrettyDate } from '../../../../commons/utils/DateHelper';\nimport { showSimpleConfirmDialog } from '../../../../commons/utils/DialogHelper';\nimport {\n  showSuccessMessage,\n  showWarningMessage\n} from '../../../../commons/utils/notifications/NotificationsHelper';\nimport { convertParamToInt } from '../../../../commons/utils/ParamParseHelper';\n\ntype GradingSaveFunction = (\n  submissionId: number,\n  questionId: number,\n  xpAdjustment: number | undefined,\n  comments?: string\n) => void;\n\ntype Props = {\n  solution: number | string | null;\n  questionId: number;\n  submissionId: number;\n  initialXp: number;\n  xpAdjustment: number;\n  maxXp: number;\n  studentName: string;\n  studentUsername: string;\n  comments: string;\n  graderName?: string;\n  gradedAt?: string;\n};\n\nconst gradingEditorButtonClass = 'grading-editor-button';\n\nconst GradingEditor: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const { handleGradingSave, handleGradingSaveAndContinue, handleReautogradeAnswer } = useMemo(\n    () =>\n      ({\n        handleGradingSave: (...args) => dispatch(submitGrading(...args)),\n        handleGradingSaveAndContinue: (...args) => dispatch(submitGradingAndContinue(...args)),\n        handleReautogradeAnswer: (...args) => dispatch(reautogradeAnswer(...args))\n      }) satisfies {\n        handleGradingSave: GradingSaveFunction;\n        handleGradingSaveAndContinue: GradingSaveFunction;\n        handleReautogradeAnswer: (submissionId: number, questionId: number) => void;\n      },\n    [dispatch]\n  );\n\n  /**\n   * A potentially null string which defines the\n   * result for the number XP input. This property being null\n   * will show the hint text in the NumericInput. This property is a string\n   * so as to allow input such as the '-' character.\n   */\n  const [xpAdjustmentInput, setXpAdjustmentInput] = useState<string | null>(\n    props.xpAdjustment.toString()\n  );\n  /**\n   * The text in the react-mde editor, that will be saved\n   * to a comment displayed below the numerical XP */\n  const [editorValue, setEditorValue] = useState(props.comments);\n  /**\n   * The selected tab for the react-mde editor (either 'write' or 'preview')\n   */\n  const [selectedTab, setSelectedTab] = useState<ReactMdeProps['selectedTab']>('write');\n  /**\n   * Determines whether the 'You have unsaved changes'\n   * prompt should appear on page navigation, to prevent the\n   * 'Save and Continue' button from activating the prompt\n   * in cases where navigation occurs before Redux has\n   * updated the props of the Editor component\n   *\n   * This may pose a problem if the user clicks 'Save and Continue'\n   * and the saving process fails. The prompt would no longer\n   * appear although there exist unsaved changes\n   */\n  const [currentlySaving, setCurrentlySaving] = useState(false);\n\n  useEffect(() => {\n    makeInitialState();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.submissionId, props.questionId]);\n\n  const makeInitialState = () => {\n    setXpAdjustmentInput(props.xpAdjustment.toString());\n    setEditorValue(props.comments);\n    setSelectedTab('write');\n    setCurrentlySaving(false);\n  };\n\n  /**\n   * A custom icons provider. It uses a bulky mapping function\n   * defined below.\n   *\n   * See {@link https://github.com/andrerpena/react-mde}\n   */\n  function blueprintIconProvider(name: string) {\n    const blueprintIcon = mdeToBlueprintIconMapping(name);\n    return <Icon icon={blueprintIcon.iconName} htmlTitle={blueprintIcon.title} />;\n  }\n\n  /**\n   * Makes sure that the XP values are permissible before\n   * returning the relevant saving function (for the 'Save Draft'\n   * and 'Submit and Continue' buttons)\n   */\n  const validateXpBeforeSave =\n    (handleSaving: GradingSaveFunction): (() => void) =>\n    () => {\n      const newXpAdjustmentInput = convertParamToInt(xpAdjustmentInput || undefined) || undefined;\n      const xp = props.initialXp + (newXpAdjustmentInput || 0);\n      if (xp < 0 || xp > props.maxXp) {\n        showWarningMessage(\n          `XP ${xp.toString()} is out of bounds. Maximum xp is ${props.maxXp.toString()}.`\n        );\n        return;\n      } else {\n        handleSaving(props.submissionId, props.questionId, newXpAdjustmentInput, editorValue);\n      }\n    };\n\n  /**\n   * Sets the state currentlySaving to true to disable\n   * the 'You have unsaved changes' prompt\n   */\n  const onClickSaveAndContinue: GradingSaveFunction = (\n    submissionId: number,\n    questionId: number,\n    xpAdjustment: number | undefined,\n    comments?: string\n  ) => {\n    const callback = (): void => {\n      handleGradingSaveAndContinue(submissionId, questionId, xpAdjustment, comments!);\n    };\n    setCurrentlySaving(true);\n    // TODO: Check (not sure how) if this results in a regression.\n    callback();\n  };\n\n  const onClickReautogradeAnswer = async () => {\n    const confirm = await showSimpleConfirmDialog({\n      contents: (\n        <>\n          <p>Reautograde this answer?</p>\n          <p>Note: manual adjustments will be reset to 0.</p>\n        </>\n      ),\n      positiveLabel: 'Reautograde',\n      positiveIntent: 'danger'\n    });\n    if (confirm) {\n      handleReautogradeAnswer(props.submissionId, props.questionId);\n    }\n  };\n\n  /**\n   * Send a warning prompt that loading from a local draft\n   * will overwrite any unsaved changes\n   */\n  const discardChanges = (): void => {\n    if (!checkHasUnsavedChanges() || window.confirm('This will reset the editor. Are you sure?')) {\n      setXpAdjustmentInput(props.xpAdjustment!.toString());\n      setEditorValue(props.comments);\n      // TODO: Check (not sure how) if this results in a regression.\n      showSuccessMessage('Discarded!', 1000);\n    }\n  };\n\n  /**\n   * Handles changes in the XP NumericInput, and updates the local State.\n   *\n   * @param valueAsNumber an unused parameter, as we use strings for the input. @see State\n   * @param valueAsString a string that contains the input. To be parsed by another function.\n   */\n  const onXpAdjustmentInputChange = (valueAsNumber: number, valueAsString: string | null) => {\n    setXpAdjustmentInput(valueAsString);\n  };\n\n  const checkHasUnsavedChanges = () => {\n    const newXpAdjustmentInput = convertParamToInt(xpAdjustmentInput || undefined);\n    return props.xpAdjustment !== newXpAdjustmentInput || props.comments !== editorValue;\n  };\n\n  const generateMarkdownPreview = (markdown: string) =>\n    Promise.resolve(\n      <Markdown\n        content={markdown}\n        simplifiedAutoLink\n        strikethrough\n        tasklists\n        openLinksInNewWindow\n      />\n    );\n\n  // Render\n  const hasUnsavedChanges = checkHasUnsavedChanges();\n  const saveButtonOpts = {\n    intent: hasUnsavedChanges ? Intent.WARNING : Intent.NONE,\n    minimal: !hasUnsavedChanges,\n    className: gradingEditorButtonClass\n  };\n  const discardButtonOpts = {\n    intent: hasUnsavedChanges ? Intent.DANGER : Intent.NONE,\n    minimal: !hasUnsavedChanges,\n    className: gradingEditorButtonClass\n  };\n  const saveAndContinueButtonOpts = {\n    intent: hasUnsavedChanges ? Intent.SUCCESS : Intent.NONE,\n    minimal: !hasUnsavedChanges,\n    className: gradingEditorButtonClass\n  };\n  const onTabChange = (tab: ReactMdeProps['selectedTab']) => setSelectedTab(tab);\n\n  // Derived values\n  const totalXp = props.initialXp + (convertParamToInt(xpAdjustmentInput || undefined) || 0);\n  const xpPlaceholder = `${props.initialXp > 0 ? '-' : ''}${props.initialXp} to ${\n    props.maxXp - props.initialXp\n  }`;\n\n  return (\n    <div className=\"GradingEditor\">\n      <Prompt\n        when={!currentlySaving && hasUnsavedChanges}\n        message={'You have unsaved changes. Are you sure you want to leave?'}\n      />\n\n      <div className=\"grading-editor-header\">\n        <H3>\n          Currently Grading: {props.studentName} ({props.studentUsername})\n        </H3>\n      </div>\n      {props.solution !== null ? (\n        <div className=\"grading-editor-marking-scheme\">\n          <Pre>{props.solution.toString()} </Pre>\n        </div>\n      ) : null}\n\n      <div className=\"grading-editor-container\">\n        <div className=\"grading-editor-xp\">\n          <div className=\"autograder-xp\">\n            <div>Autograder XP:</div>\n            <div>\n              {`${props.initialXp} / ${props.maxXp}`}{' '}\n              <Button icon=\"refresh\" small minimal onClick={onClickReautogradeAnswer}></Button>\n            </div>\n          </div>\n          <div className=\"xp-adjustment\">\n            <div>XP adjustment:</div>\n            <div>\n              <NumericInput\n                className=\"adjustment-input\"\n                onValueChange={onXpAdjustmentInputChange}\n                value={xpAdjustmentInput || ''}\n                buttonPosition={Position.RIGHT}\n                fill={true}\n                placeholder={xpPlaceholder}\n                intent={totalXp < 0 || totalXp > props.maxXp ? Intent.DANGER : Intent.NONE}\n                min={0 - props.initialXp}\n                max={props.maxXp > props.initialXp ? props.maxXp - props.initialXp : undefined}\n                stepSize={50}\n                minorStepSize={25}\n                majorStepSize={100}\n              />\n            </div>\n          </div>\n          <div className=\"final-xp\">\n            <div>Final XP:</div>\n            <div>{`${totalXp} / ${props.maxXp}`}</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"react-mde-parent\">\n        <ReactMde\n          value={editorValue}\n          onChange={setEditorValue}\n          selectedTab={selectedTab}\n          onTabChange={onTabChange}\n          generateMarkdownPreview={generateMarkdownPreview}\n          minEditorHeight={200}\n          maxEditorHeight={1000}\n          minPreviewHeight={240}\n          getIcon={blueprintIconProvider}\n        />\n      </div>\n\n      {selectedTab === 'write' && (\n        <div className=\"grading-editor-draft-buttons\">\n          <div className=\"grading-editor-save-button\">\n            <ControlButton\n              label=\"Save Changes\"\n              icon={IconNames.FLOPPY_DISK}\n              onClick={validateXpBeforeSave(handleGradingSave)}\n              options={saveButtonOpts}\n            />\n          </div>\n          <div className=\"grading-editor-discard-button\">\n            <ControlButton\n              label=\"Discard Changes\"\n              icon={IconNames.TRASH}\n              onClick={discardChanges}\n              options={discardButtonOpts}\n            />\n          </div>\n        </div>\n      )}\n      <div className=\"grading-editor-save-continue-button\">\n        <ControlButton\n          label=\"Save and Continue\"\n          icon={IconNames.UPDATED}\n          onClick={validateXpBeforeSave(onClickSaveAndContinue)}\n          options={saveAndContinueButtonOpts}\n        />\n      </div>\n      {props.graderName && props.gradedAt && (\n        <>\n          <Divider />\n          <div className=\"grading-editor-last-graded-details\">\n            Last edited by <b>{props.graderName}</b> on {getPrettyDate(props.gradedAt)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mdeToBlueprintIconMap: Readonly<Record<string, readonly [IconName, string?]>> = {\n  header: [IconNames.HEADER, 'Header Styles'],\n  bold: [IconNames.BOLD, 'Bold'],\n  italic: [IconNames.ITALIC, 'Italic'],\n  strikethrough: [IconNames.STRIKETHROUGH, 'Strikethrough'],\n  link: [IconNames.LINK, 'Link'],\n  quote: [IconNames.CITATION, 'Quote'],\n  code: [IconNames.CODE, 'Monospaced'],\n  image: [IconNames.MEDIA, 'Image'],\n  'unordered-list': [IconNames.UNGROUP_OBJECTS, 'Bullets'],\n  'ordered-list': [IconNames.NUMBERED_LIST, 'Numbering'],\n  'checked-list': [IconNames.SQUARE, 'Checkboxes']\n} as const;\n\n/**\n * Maps react-mde icon names to blueprintjs counterparts\n * to reduce the number of dependencies on icons and\n * keep a more consistent look\n *\n * Also, generate a HTML title for the icon to be shown on mouse hover\n *\n * By default, react-mde would use FontAwesome5 icons if this\n * icon mapping is not provided\n */\nconst mdeToBlueprintIconMapping = (name: string): { iconName: IconName; title?: string } => {\n  switch (name) {\n    case 'header':\n    case 'bold':\n    case 'italic':\n    case 'strikethrough':\n    case 'link':\n    case 'quote':\n    case 'code':\n    case 'image':\n    case 'unordered-list':\n    case 'ordered-list':\n    case 'checked-list':\n      const [iconName, title] = mdeToBlueprintIconMap[name];\n      return { iconName, title };\n    default:\n      // For unknown icons, a question mark icon is returned\n      return {\n        iconName: IconNames.HELP\n      };\n  }\n};\n\nexport default GradingEditor;\n","import { Classes, NonIdealState, Spinner, SpinnerSize } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { fetchGrading } from 'src/commons/application/actions/SessionActions';\nimport { changeSideContentHeight } from 'src/commons/sideContent/SideContentActions';\nimport { showSimpleErrorDialog } from 'src/commons/utils/DialogHelper';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeExecTime,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  resetWorkspace,\n  runAllTestcases,\n  setEditorBreakpoint,\n  updateActiveEditorTabIndex,\n  updateCurrentSubmissionId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue\n} from 'src/commons/workspace/WorkspaceActions';\n\nimport { defaultWorkspaceManager } from '../../../../commons/application/ApplicationTypes';\nimport {\n  AutogradingResult,\n  IMCQQuestion,\n  Library,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../../../../commons/assessment/AssessmentTypes';\nimport { ControlBarProps } from '../../../../commons/controlBar/ControlBar';\nimport { ControlBarClearButton } from '../../../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../../../../commons/controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../../../../commons/controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../../../../commons/controlBar/ControlBarQuestionViewButton';\nimport { ControlBarRunButton } from '../../../../commons/controlBar/ControlBarRunButton';\nimport { convertEditorTabStateToProps } from '../../../../commons/editor/EditorContainer';\nimport { Position } from '../../../../commons/editor/EditorTypes';\nimport Markdown from '../../../../commons/Markdown';\nimport SideContentAutograder from '../../../../commons/sideContent/content/SideContentAutograder';\nimport SideContentToneMatrix from '../../../../commons/sideContent/content/SideContentToneMatrix';\nimport { SideContentProps } from '../../../../commons/sideContent/SideContent';\nimport { useSideContent } from '../../../../commons/sideContent/SideContentHelper';\nimport { SideContentTab, SideContentType } from '../../../../commons/sideContent/SideContentTypes';\nimport Workspace, { WorkspaceProps } from '../../../../commons/workspace/Workspace';\nimport { WorkspaceLocation, WorkspaceState } from '../../../../commons/workspace/WorkspaceTypes';\nimport { AnsweredQuestion } from '../../../../features/grading/GradingTypes';\nimport GradingEditor from './GradingEditor';\n\ntype GradingWorkspaceProps = {\n  submissionId: number;\n  questionId: number;\n};\n\nconst workspaceLocation: WorkspaceLocation = 'grading';\nconst unansweredPrependValue: string = `// This answer does not have significant changes from the given solution\n// template and has thus been flagged as unanswered.\n// If you think this is wrong, please ignore and grade accordingly.\n\n\n`;\n\nconst GradingWorkspace: React.FC<GradingWorkspaceProps> = props => {\n  const navigate = useNavigate();\n  const { selectedTab, setSelectedTab } = useSideContent(\n    workspaceLocation,\n    SideContentType.grading\n  );\n\n  const grading = useTypedSelector(state => state.session.gradings.get(props.submissionId));\n  const courseId = useTypedSelector(state => state.session.courseId);\n  const {\n    autogradingResults,\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    editorTabs,\n    editorTestcases,\n    isRunning,\n    output,\n    replValue,\n    currentSubmission: storedSubmissionId,\n    currentQuestion: storedQuestionId\n  } = useTypedSelector(state => state.workspaces[workspaceLocation]);\n\n  const dispatch = useDispatch();\n  const {\n    handleBrowseHistoryDown,\n    handleBrowseHistoryUp,\n    handleClearContext,\n    handleDeclarationNavigate,\n    handleEditorEval,\n    handleSetActiveEditorTabIndex,\n    handleRemoveEditorTabByIndex,\n    handleEditorValueChange,\n    handleEditorUpdateBreakpoints,\n    handleGradingFetch,\n    handleReplEval,\n    handleReplOutputClear,\n    handleReplValueChange,\n    handleResetWorkspace,\n    handleChangeExecTime,\n    handleSideContentHeightChange,\n    handleTestcaseEval,\n    handleRunAllTestcases,\n    handleUpdateCurrentSubmissionId,\n    handleUpdateHasUnsavedChanges,\n    handlePromptAutocomplete\n  } = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleClearContext: (library: Library, shouldInitLibrary: boolean) =>\n        dispatch(beginClearContext(workspaceLocation, library, shouldInitLibrary)),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      handleSetActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      handleRemoveEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex)),\n      handleEditorValueChange: (editorTabIndex: number, newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, 0, newEditorValue)),\n      handleEditorUpdateBreakpoints: (editorTabIndex: number, newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, editorTabIndex, newBreakpoints)),\n      handleGradingFetch: (submissionId: number) => dispatch(fetchGrading(submissionId)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleReplOutputClear: () => dispatch(clearReplOutput(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation)),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        dispatch(resetWorkspace(workspaceLocation, options)),\n      handleChangeExecTime: (execTimeMs: number) =>\n        dispatch(changeExecTime(execTimeMs, workspaceLocation)),\n      handleSideContentHeightChange: (heightChange: number) =>\n        dispatch(changeSideContentHeight(heightChange, workspaceLocation)),\n      handleTestcaseEval: (testcaseId: number) =>\n        dispatch(evalTestcase(workspaceLocation, testcaseId)),\n      handleRunAllTestcases: () => dispatch(runAllTestcases(workspaceLocation)),\n      handleUpdateCurrentSubmissionId: (submissionId: number, questionId: number) =>\n        dispatch(updateCurrentSubmissionId(submissionId, questionId)),\n      handleUpdateHasUnsavedChanges: (unsavedChanges: boolean) =>\n        dispatch(updateHasUnsavedChanges(workspaceLocation, unsavedChanges)),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback))\n    };\n  }, [dispatch]);\n\n  /**\n   * After mounting (either an older copy of the grading\n   * or a loading screen), try to fetch a newer grading.\n   */\n  useEffect(() => {\n    handleGradingFetch(props.submissionId);\n    if (!grading) {\n      return;\n    }\n\n    let questionId = props.questionId;\n    if (props.questionId >= grading.answers.length) {\n      questionId = grading.answers.length - 1;\n    }\n\n    const question: AnsweredQuestion = grading.answers[questionId].question;\n    let answer: string = '';\n\n    if (question.type === QuestionTypes.programming) {\n      if (question.answer) {\n        if (question.answer.trim() === question.solutionTemplate.trim()) {\n          answer = unansweredPrependValue + question.answer;\n          showSimpleErrorDialog({\n            contents: 'Question has not been answered.'\n          });\n        } else {\n          answer = question.answer as string;\n        }\n      } else {\n        answer = question.solutionTemplate || '';\n      }\n    }\n\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorValueChange(0, answer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Once there is an update (due to the grading being fetched), check\n   * if a workspace reset is needed.\n   */\n  useEffect(() => {\n    /* Don't reset workspace if grading not fetched yet. */\n    if (grading === undefined) {\n      return;\n    }\n    const questionId = props.questionId;\n\n    /**\n     * Check if questionId is out of bounds, if it is, redirect to the\n     * grading overview page\n     *\n     * This occurs if the grading is submitted on the last question,\n     * as the function to move to the next question does not check\n     * if that question exists\n     */\n    if (grading.answers[questionId] === undefined) {\n      navigate(`/courses/${courseId}/grading`);\n    } else {\n      checkWorkspaceReset(props);\n    }\n  });\n\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   *\n   * Assumes that 'grading' is defined\n   */\n  const checkWorkspaceReset = (props: GradingWorkspaceProps) => {\n    /* Reset grading if it has changed.*/\n    const submissionId = props.submissionId;\n    const questionId = props.questionId;\n\n    if (storedSubmissionId === submissionId && storedQuestionId === questionId) {\n      return;\n    }\n    const question = grading!.answers[questionId].question as Question;\n\n    let autogradingResults: AutogradingResult[] = [];\n    let editorValue: string = '';\n    let programPrependValue: string = '';\n    let programPostpendValue: string = '';\n    let editorTestcases: Testcase[] = [];\n\n    if (question.type === QuestionTypes.programming) {\n      const questionData = question as AnsweredQuestion;\n      autogradingResults = questionData.autogradingResults;\n      programPrependValue = questionData.prepend;\n      programPostpendValue = questionData.postpend;\n      editorTestcases = questionData.testcases;\n\n      editorValue = questionData.answer as string;\n      if (!editorValue) {\n        editorValue = questionData.solutionTemplate!;\n      }\n      if (editorValue.trim() === questionData.solutionTemplate?.trim()) {\n        showSimpleErrorDialog({\n          contents: 'Question has not been answered.'\n        });\n        editorValue = unansweredPrependValue + editorValue;\n      }\n    }\n\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorUpdateBreakpoints(0, []);\n    handleUpdateCurrentSubmissionId(submissionId, questionId);\n    handleResetWorkspace({\n      autogradingResults,\n      // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n      editorTabs: [\n        {\n          value: editorValue,\n          highlightedLines: [],\n          breakpoints: []\n        }\n      ],\n      programPrependValue,\n      programPostpendValue,\n      editorTestcases\n    });\n    handleChangeExecTime(question.library.execTimeMs ?? defaultWorkspaceManager.grading.execTime);\n    handleClearContext(question.library, true);\n    handleUpdateHasUnsavedChanges(false);\n    if (editorValue) {\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorValueChange(0, editorValue);\n    }\n  };\n\n  /** Pre-condition: Grading has been loaded */\n  const sideContentProps: (p: GradingWorkspaceProps, q: number) => SideContentProps = (\n    props: GradingWorkspaceProps,\n    questionId: number\n  ) => {\n    const tabs: SideContentTab[] = [\n      {\n        label: `Grading: Question ${questionId + 1}`,\n        iconName: IconNames.TICK,\n        /* Render an editor with the xp given to the current question. */\n        body: (\n          <GradingEditor\n            solution={grading!.answers[questionId].question.solution}\n            questionId={grading!.answers[questionId].question.id}\n            submissionId={props.submissionId}\n            initialXp={grading!.answers[questionId].grade.xp}\n            xpAdjustment={grading!.answers[questionId].grade.xpAdjustment}\n            maxXp={grading!.answers[questionId].question.maxXp}\n            studentName={grading!.answers[questionId].student.name}\n            studentUsername={grading!.answers[questionId].student.username}\n            comments={grading!.answers[questionId].grade.comments ?? ''}\n            graderName={\n              grading!.answers[questionId].grade.grader\n                ? grading!.answers[questionId].grade.grader!.name\n                : undefined\n            }\n            gradedAt={\n              grading!.answers[questionId].grade.grader\n                ? grading!.answers[questionId].grade.gradedAt!\n                : undefined\n            }\n          />\n        ),\n        id: SideContentType.grading\n      },\n      {\n        label: `Question ${questionId + 1}`,\n        iconName: IconNames.NINJA,\n        body: <Markdown content={grading!.answers[questionId].question.content} />,\n        id: SideContentType.questionOverview\n      },\n      {\n        label: `Autograder`,\n        iconName: IconNames.AIRPLANE,\n        body: (\n          <SideContentAutograder\n            testcases={editorTestcases}\n            autogradingResults={autogradingResults}\n            handleTestcaseEval={handleTestcaseEval}\n            workspaceLocation=\"grading\"\n          />\n        ),\n        id: SideContentType.autograder\n      },\n      {\n        label: `Briefing`,\n        iconName: IconNames.BRIEFCASE,\n        body: (\n          <Markdown\n            content={\n              grading\n                ? grading.assessment.summaryLong\n                : 'Briefing Unavailable. Try refreshing the page.'\n            }\n          />\n        ),\n        id: SideContentType.briefing\n      }\n    ];\n    const externalLibrary = grading!.answers[questionId].question.library.external;\n    const functionsAttached = externalLibrary.symbols;\n    if (functionsAttached.includes('get_matrix')) {\n      tabs.push({\n        label: `Tone Matrix`,\n        iconName: IconNames.GRID_VIEW,\n        body: <SideContentToneMatrix />,\n        id: SideContentType.toneMatrix\n      });\n    }\n\n    const sideContentProps: SideContentProps = {\n      onChange: (\n        newTabId: SideContentType,\n        prevTabId: SideContentType,\n        event: React.MouseEvent<HTMLElement>\n      ) => {\n        if (newTabId === prevTabId) {\n          return;\n        }\n        setSelectedTab(newTabId);\n      },\n      tabs: {\n        beforeDynamicTabs: tabs,\n        afterDynamicTabs: []\n      },\n      workspaceLocation\n    };\n\n    return sideContentProps;\n  };\n\n  /** Pre-condition: Grading has been loaded */\n  const controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = `/courses/${courseId}/grading`;\n    const gradingWorkspacePath = listingPath + `/${props.submissionId}`;\n    const questionProgress: [number, number] = [questionId + 1, grading!.answers.length];\n\n    const onClickPrevious = () =>\n      navigate(gradingWorkspacePath + `/${(questionId - 1).toString()}`);\n    const onClickNext = () => navigate(gradingWorkspacePath + `/${(questionId + 1).toString()}`);\n    const onClickReturn = () => navigate(listingPath);\n\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={onClickNext}\n        onClickReturn={onClickReturn}\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const runButton = (\n      <ControlBarRunButton\n        isEntrypointFileDefined={activeEditorTabIndex !== null}\n        handleEditorEval={handleEval}\n        key=\"run\"\n      />\n    );\n\n    return {\n      editorButtons: [runButton],\n      flowButtons: [previousButton, questionView, nextButton]\n    };\n  };\n\n  const replButtons = () => {\n    const clearButton = (\n      <ControlBarClearButton handleReplOutputClear={handleReplOutputClear} key=\"clear_repl\" />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton handleReplEval={handleReplEval} isRunning={isRunning} key=\"eval_repl\" />\n    );\n\n    return [evalButton, clearButton];\n  };\n\n  const handleEval = () => {\n    handleEditorEval();\n\n    // Run testcases when the autograder tab is selected\n    if (selectedTab === SideContentType.autograder) {\n      handleRunAllTestcases();\n    }\n  };\n\n  // Rendering logic\n  if (grading === undefined) {\n    return (\n      <NonIdealState\n        className={classNames('WorkspaceParent', Classes.DARK)}\n        description=\"Getting assessment ready...\"\n        icon={<Spinner size={SpinnerSize.LARGE} />}\n      />\n    );\n  }\n\n  /* If questionId is out of bounds, set it to the max. */\n  const questionId =\n    props.questionId >= grading.answers.length ? grading.answers.length - 1 : props.questionId;\n  /* Get the question to be graded */\n  const question = grading.answers[questionId].question as Question;\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: controlBarProps(questionId),\n    editorContainerProps:\n      question.type === QuestionTypes.programming || question.type === QuestionTypes.voting\n        ? {\n            editorVariant: 'normal',\n            isFolderModeEnabled: isFolderModeEnabled,\n            activeEditorTabIndex: activeEditorTabIndex,\n            setActiveEditorTabIndex: handleSetActiveEditorTabIndex,\n            removeEditorTabByIndex: handleRemoveEditorTabByIndex,\n            editorTabs: editorTabs.map(convertEditorTabStateToProps),\n            editorSessionId: '',\n            handleDeclarationNavigate: handleDeclarationNavigate,\n            handleEditorEval: handleEval,\n            handleEditorValueChange: handleEditorValueChange,\n            handleEditorUpdateBreakpoints: handleEditorUpdateBreakpoints,\n            handlePromptAutocomplete: handlePromptAutocomplete,\n            isEditorAutorun: false,\n            sourceChapter: question?.library?.chapter || Chapter.SOURCE_4,\n            sourceVariant: question?.library?.variant ?? Variant.DEFAULT,\n            externalLibraryName: question?.library?.external?.name || 'NONE'\n          }\n        : undefined,\n    handleSideContentHeightChange: handleSideContentHeightChange,\n    mcqProps: {\n      mcq: question as IMCQQuestion,\n      handleMCQSubmit: (i: number) => {}\n    },\n    sideBarProps: {\n      tabs: []\n    },\n    sideContentProps: sideContentProps(props, questionId),\n    replProps: {\n      handleBrowseHistoryDown: handleBrowseHistoryDown,\n      handleBrowseHistoryUp: handleBrowseHistoryUp,\n      handleReplEval: handleReplEval,\n      handleReplValueChange: handleReplValueChange,\n      output: output,\n      replValue: replValue,\n      sourceChapter: question?.library?.chapter || Chapter.SOURCE_4,\n      sourceVariant: question?.library?.variant ?? Variant.DEFAULT,\n      externalLibrary: question?.library?.external?.name || 'NONE',\n      replButtons: replButtons()\n    }\n  };\n  return (\n    <div className={classNames('WorkspaceParent', Classes.DARK)}>\n      <Workspace {...workspaceProps} />\n    </div>\n  );\n};\n\nexport default GradingWorkspace;\n","import '@tremor/react/dist/esm/tremor.css';\n\nimport { Icon as BpIcon, NonIdealState, Position, Spinner, SpinnerSize } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Button, Card, Flex, Text, Title } from '@tremor/react';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useParams } from 'react-router';\nimport { fetchGradingOverviews } from 'src/commons/application/actions/SessionActions';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport SimpleDropdown from 'src/commons/SimpleDropdown';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport { numberRegExp } from 'src/features/academy/AcademyTypes';\nimport {\n  exportGradingCSV,\n  paginationToBackendParams,\n  ungradedToBackendParams\n} from 'src/features/grading/GradingUtils';\n\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport { convertParamToInt } from '../../../commons/utils/ParamParseHelper';\nimport GradingSubmissionsTable from './subcomponents/GradingSubmissionsTable';\nimport GradingWorkspace from './subcomponents/GradingWorkspace';\n\nconst groupOptions = [\n  { value: false, label: 'my groups' },\n  { value: true, label: 'all groups' }\n];\n\nconst showOptions = [\n  { value: false, label: 'ungraded' },\n  { value: true, label: 'all' }\n];\n\nconst pageSizeOptions = [\n  { value: 10, label: '10' },\n  { value: 15, label: '15' },\n  { value: 25, label: '25' },\n  { value: 50, label: '50' }\n];\n\nconst Grading: React.FC = () => {\n  const { courseId, gradingOverviews, role, group } = useSession();\n  const params = useParams<{ submissionId: string; questionId: string }>();\n\n  const isAdmin = role === Role.Admin;\n  const [showAllGroups, setShowAllGroups] = useState(isAdmin || group === null);\n\n  const [pageSize, setPageSize] = useState(10);\n  const [showAllSubmissions, setShowAllSubmissions] = useState(false);\n\n  const dispatch = useDispatch();\n  const updateGradingOverviewsCallback = useCallback(\n    (page: number, filterParams: Object) => {\n      dispatch(\n        fetchGradingOverviews(\n          showAllGroups,\n          ungradedToBackendParams(showAllSubmissions),\n          paginationToBackendParams(page, pageSize),\n          filterParams\n        )\n      );\n    },\n    [dispatch, showAllGroups, showAllSubmissions, pageSize]\n  );\n\n  // If submissionId or questionId is defined but not numeric, redirect back to the Grading overviews page\n  if (\n    (params.submissionId && !params.submissionId?.match(numberRegExp)) ||\n    (params.questionId && !params.questionId?.match(numberRegExp))\n  ) {\n    return <Navigate to={`/courses/${courseId}/grading`} />;\n  }\n\n  const submissionId: number | null = convertParamToInt(params.submissionId);\n  // default questionId is 0 (the first question)\n  const questionId: number = convertParamToInt(params.questionId) || 0;\n\n  /* Create a workspace to grade a submission. */\n  if (submissionId !== null) {\n    return <GradingWorkspace questionId={questionId} submissionId={submissionId} />;\n  }\n\n  /* Display either a loading screen or a table with overviews. */\n  const loadingDisplay = (\n    <NonIdealState\n      className=\"Grading\"\n      description=\"Fetching submissions...\"\n      icon={<Spinner size={SpinnerSize.LARGE} />}\n    />\n  );\n\n  const submissions =\n    gradingOverviews?.data?.map(e =>\n      !e.studentName ? { ...e, studentName: '(user has yet to log in)' } : e\n    ) ?? [];\n\n  return (\n    <ContentDisplay\n      loadContentDispatch={() => dispatch(fetchGradingOverviews(showAllGroups))}\n      display={\n        gradingOverviews?.data === undefined ? (\n          loadingDisplay\n        ) : (\n          <Card>\n            <Flex justifyContent=\"justify-between\">\n              <Flex justifyContent=\"justify-start\" spaceX=\"space-x-6\">\n                <Title>Submissions</Title>\n                <Button\n                  variant=\"light\"\n                  size=\"xs\"\n                  icon={() => <BpIcon icon={IconNames.EXPORT} style={{ marginRight: '0.5rem' }} />}\n                  onClick={() => exportGradingCSV(gradingOverviews.data)}\n                >\n                  Export to CSV\n                </Button>\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"justify-start\" marginTop=\"mt-2\" spaceX=\"space-x-2\">\n              <Text>Viewing</Text>\n              <SimpleDropdown\n                options={showOptions}\n                selectedValue={showAllSubmissions}\n                onClick={setShowAllSubmissions}\n                popoverProps={{ position: Position.BOTTOM }}\n                buttonProps={{ minimal: true, rightIcon: 'caret-down' }}\n              />\n              <Text>submissions from</Text>\n              <SimpleDropdown\n                options={groupOptions}\n                selectedValue={showAllGroups}\n                onClick={setShowAllGroups}\n                popoverProps={{ position: Position.BOTTOM }}\n                buttonProps={{ minimal: true, rightIcon: 'caret-down' }}\n              />\n              <Text>showing</Text>\n              <SimpleDropdown\n                options={pageSizeOptions}\n                selectedValue={pageSize}\n                onClick={setPageSize}\n                popoverProps={{ position: Position.BOTTOM }}\n                buttonProps={{ minimal: true, rightIcon: 'caret-down' }}\n              />\n              <Text>entries per page.</Text>\n            </Flex>\n            <GradingSubmissionsTable\n              totalRows={gradingOverviews.count}\n              pageSize={pageSize}\n              submissions={submissions}\n              updateEntries={updateGradingOverviewsCallback}\n            />\n          </Card>\n        )\n      }\n      fullWidth={true}\n    />\n  );\n};\n\nexport default Grading;\n","import {\n  Button,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Intent,\n  Menu,\n  MenuItem\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemListRenderer, ItemRenderer, Select } from '@blueprintjs/select';\nimport { Variant } from 'js-slang/dist/types';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Constants from 'src/commons/utils/Constants';\nimport { useSession } from 'src/commons/utils/Hooks';\n\nimport {\n  SALanguage,\n  sourceLanguages,\n  styliseSublanguage\n} from '../../../../commons/application/ApplicationTypes';\nimport ControlButton from '../../../../commons/ControlButton';\nimport { changeSublanguage } from '../../../../commons/workspace/WorkspaceActions';\n\nconst DefaultChapterSelect: React.FC = () => {\n  const [chosenSublang, setSublanguage] = useState<SALanguage>(sourceLanguages[0]);\n  const [isDialogOpen, setDialogState] = useState(false);\n\n  const {\n    // Temporarily load the defaults when the course configuration fetch has yet to return\n    sourceChapter = Constants.defaultSourceChapter,\n    sourceVariant = Constants.defaultSourceVariant\n  } = useSession();\n\n  const dispatch = useDispatch();\n  const handleUpdateSublanguage = useCallback(\n    (sublang: SALanguage) => dispatch(changeSublanguage(sublang)),\n    [dispatch]\n  );\n\n  const handleOpenDialog = useCallback(\n    (choice: SALanguage) => {\n      setDialogState(true);\n      setSublanguage(choice);\n    },\n    [setDialogState, setSublanguage]\n  );\n  const handleCloseDialog = useCallback(() => {\n    setDialogState(false);\n  }, [setDialogState]);\n  const handleConfirmDialog = useCallback(() => {\n    setDialogState(false);\n    handleUpdateSublanguage(chosenSublang);\n  }, [chosenSublang, setDialogState, handleUpdateSublanguage]);\n\n  const chapterRenderer: ItemRenderer<SALanguage> = useCallback(\n    (lang, { handleClick }) => (\n      <MenuItem key={lang.displayName} onClick={handleClick} text={lang.displayName} />\n    ),\n    []\n  );\n\n  const chapterListRenderer: ItemListRenderer<SALanguage> = useCallback(\n    ({ itemsParentRef, renderItem, items }) => {\n      const defaultChoices = items.filter(({ variant }) => variant === Variant.DEFAULT);\n      const variantChoices = items.filter(({ variant }) => variant !== Variant.DEFAULT);\n\n      return (\n        <Menu ulRef={itemsParentRef}>\n          {defaultChoices.map(renderItem)}\n          {variantChoices.length > 0 && (\n            <MenuItem key=\"variant-menu\" text=\"Variants\" icon=\"cog\">\n              {variantChoices.map(renderItem)}\n            </MenuItem>\n          )}\n        </Menu>\n      );\n    },\n    []\n  );\n\n  const DefaultChapterSelectComponent = Select.ofType<SALanguage>();\n\n  const dialog = (\n    <Dialog\n      canEscapeKeyClose={true}\n      canOutsideClickClose={true}\n      className=\"change-default-lang-dialog\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={isDialogOpen}\n      onClose={handleCloseDialog}\n      title=\"Updating default Source sublanguage\"\n    >\n      <DialogBody>\n        Are you sure you want to update the <b>default Playground Source sublanguage</b> from{' '}\n        {styliseSublanguage(sourceChapter, sourceVariant)} to <b>{chosenSublang.displayName}</b>?\n      </DialogBody>\n      <DialogFooter\n        actions={\n          <>\n            <ControlButton\n              label=\"Cancel\"\n              onClick={handleCloseDialog}\n              options={{ minimal: false }}\n            />\n            <ControlButton\n              label=\"Confirm\"\n              onClick={handleConfirmDialog}\n              options={{ minimal: false, intent: Intent.DANGER }}\n            />\n          </>\n        }\n      />\n    </Dialog>\n  );\n\n  return (\n    <>\n      <DefaultChapterSelectComponent\n        items={sourceLanguages}\n        onItemSelect={handleOpenDialog}\n        itemRenderer={chapterRenderer}\n        itemListRenderer={chapterListRenderer}\n        filterable={false}\n      >\n        <Button rightIcon={IconNames.DOUBLE_CARET_VERTICAL}>\n          <span className=\"hidden-xs hidden-sm\">Default sublanguage: </span>\n          <span>{styliseSublanguage(sourceChapter, sourceVariant)}</span>\n        </Button>\n      </DefaultChapterSelectComponent>\n      {dialog}\n    </>\n  );\n};\n\nexport default DefaultChapterSelect;\n","import { Dialog, DialogBody, DialogFooter, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useCallback, useState } from 'react';\n\nimport { AssessmentOverview } from '../../../../commons/assessment/AssessmentTypes';\nimport ControlButton from '../../../../commons/ControlButton';\n\ntype Props = {\n  handleDeleteAssessment: (id: number) => void;\n  data: AssessmentOverview;\n};\n\nconst DeleteCell: React.FC<Props> = ({ handleDeleteAssessment, data }) => {\n  const [isDialogOpen, setDialogState] = useState(false);\n\n  const handleOpenDialog = useCallback(() => setDialogState(true), []);\n  const handleCloseDialog = useCallback(() => setDialogState(false), []);\n\n  const handleDelete = useCallback(() => {\n    const { id } = data;\n    handleDeleteAssessment(id);\n    handleCloseDialog();\n  }, [data, handleCloseDialog, handleDeleteAssessment]);\n\n  return (\n    <>\n      <ControlButton icon={IconNames.TRASH} onClick={handleOpenDialog} />\n      <Dialog\n        icon={IconNames.WARNING_SIGN}\n        isOpen={isDialogOpen}\n        onClose={handleCloseDialog}\n        title=\"Deleting assessment\"\n        canOutsideClickClose={true}\n      >\n        <DialogBody>\n          <p>\n            Are you sure you want to <b>delete</b> the assessment <i>{data.title}</i>?\n          </p>\n          <p>\n            <b>All submissions and their answers will be deleted as well.</b>\n          </p>\n        </DialogBody>\n        <DialogFooter\n          actions={\n            <>\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={handleCloseDialog}\n                options={{ minimal: false }}\n              />\n              <ControlButton\n                label=\"Confirm\"\n                icon={IconNames.TRASH}\n                onClick={handleDelete}\n                options={{ minimal: false, intent: Intent.DANGER }}\n              />\n            </>\n          }\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default DeleteCell;\n","import { Card, Elevation, HTMLSelect, Intent, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { FileRejection, useDropzone } from 'react-dropzone';\nimport { AssessmentConfiguration } from 'src/commons/assessment/AssessmentTypes';\n\nimport ControlButton from '../../../../commons/ControlButton';\nimport { showWarningMessage } from '../../../../commons/utils/notifications/NotificationsHelper';\n\nexport type DropzoneProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleUploadAssessment: (file: File, forceUpdate: boolean, assessmentConfigId: number) => void;\n};\n\ntype StateProps = {\n  assessmentConfigurations?: AssessmentConfiguration[];\n};\n\nconst MaterialDropzone: React.FunctionComponent<DropzoneProps> = props => {\n  const [file, setFile] = React.useState<File | undefined>(undefined);\n  const [isWarningShown, setPromptShown] = React.useState<boolean>(false);\n  const [forceUpdate, setForceUpdate] = React.useState<boolean>(false);\n  const [assessmentConfigId, setAssessmentConfigId] = React.useState<number>(-1);\n\n  React.useEffect(() => {\n    if (props.assessmentConfigurations && assessmentConfigId === -1) {\n      setAssessmentConfigId(props.assessmentConfigurations[0].assessmentConfigId);\n    }\n  }, [props.assessmentConfigurations, assessmentConfigId]);\n\n  const { handleUploadAssessment } = props;\n\n  const htmlSelectOptions = React.useMemo(() => {\n    return props.assessmentConfigurations?.map(e => {\n      return {\n        value: e.assessmentConfigId,\n        label: e.type\n      };\n    });\n  }, [props.assessmentConfigurations]);\n\n  const handleConfirmUpload = React.useCallback(() => {\n    if (assessmentConfigId === -1) {\n      showWarningMessage('Please select a valid assessment type before uploading!');\n      return;\n    }\n    if (file) {\n      handleUploadAssessment(file, forceUpdate, assessmentConfigId);\n      setForceUpdate(false);\n    }\n    setFile(undefined);\n  }, [file, forceUpdate, handleUploadAssessment, assessmentConfigId]);\n  const handleCancelUpload = React.useCallback(() => setFile(undefined), [setFile]);\n\n  const handleDropAccepted = React.useCallback(\n    (acceptedFiles: File[]) => {\n      setFile(acceptedFiles[0]);\n      setForceUpdate(false);\n    },\n    [setFile]\n  );\n  const handleDropRejected = React.useCallback((rejectedFiles: FileRejection[]) => {\n    if (rejectedFiles.length > 1) {\n      showWarningMessage('Uploading multiple files at once is not currently supported!', 2000);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isFocused, isDragActive, isDragAccept, isDragReject } =\n    useDropzone({\n      multiple: false,\n      onDropAccepted: handleDropAccepted,\n      onDropRejected: handleDropRejected\n    });\n\n  const classList = React.useMemo(() => {\n    return classNames(\n      'dropzone-base',\n      isFocused || isDragActive ? 'dropzone-active' : undefined,\n      isDragAccept ? 'dropzone-accept' : undefined,\n      isDragReject ? 'dropzone-reject' : undefined\n    );\n  }, [isFocused, isDragActive, isDragAccept, isDragReject]);\n\n  const handleSwitchOnChange = React.useCallback(() => {\n    if (!forceUpdate) {\n      setPromptShown(true);\n    } else {\n      setForceUpdate(false);\n    }\n  }, [forceUpdate, setPromptShown, setForceUpdate]);\n\n  const toggleButton = React.useMemo(\n    () => (\n      <div className=\"toggle-button-wrapper\">\n        <Switch checked={forceUpdate} onChange={handleSwitchOnChange} />\n      </div>\n    ),\n    [forceUpdate, handleSwitchOnChange]\n  );\n\n  const handleConfirmForceUpdate = React.useCallback(() => {\n    setForceUpdate(true);\n    setPromptShown(false);\n  }, [setForceUpdate]);\n  const handleCancelForceUpdate = React.useCallback(() => {\n    setPromptShown(false);\n  }, [setPromptShown]);\n\n  const confirmationPrompt = React.useMemo(\n    () => (\n      <div className=\"dropzone-controls\">\n        <ControlButton\n          label=\"Yes\"\n          icon={IconNames.CONFIRM}\n          onClick={handleConfirmForceUpdate}\n          options={{ minimal: false, intent: Intent.DANGER }}\n        />\n        <ControlButton\n          label=\"No\"\n          icon={IconNames.CROSS}\n          onClick={handleCancelForceUpdate}\n          options={{ minimal: false }}\n        />\n      </div>\n    ),\n    [handleCancelForceUpdate, handleConfirmForceUpdate]\n  );\n\n  return (\n    <>\n      <Card elevation={Elevation.TWO} interactive={true}>\n        <div {...getRootProps({ className: classList })}>\n          <input {...getInputProps()} />\n          <p>Drag 'n' drop a file here, or click to select a file</p>\n        </div>\n      </Card>\n      {file && (\n        <Card className=\"dropzone-prompt\" elevation={Elevation.TWO} interactive={true}>\n          <h3>{file?.name}</h3>\n          {!isWarningShown && (\n            <>\n              <div className=\"dropzone-controls\">\n                <HTMLSelect\n                  options={htmlSelectOptions}\n                  onChange={e => setAssessmentConfigId(parseInt(e.target.value))}\n                  value={assessmentConfigId}\n                />\n                <ControlButton\n                  label=\"Confirm Upload\"\n                  icon={IconNames.UPLOAD}\n                  onClick={handleConfirmUpload}\n                  options={{ minimal: false, intent: Intent.DANGER }}\n                />\n                <ControlButton\n                  label=\"Cancel Upload\"\n                  icon={IconNames.DELETE}\n                  onClick={handleCancelUpload}\n                  options={{ minimal: false }}\n                />\n              </div>\n              <div className=\"dropzone-controls\">\n                <p>Force update opened assessment</p>\n                {toggleButton}\n              </div>\n            </>\n          )}\n          {isWarningShown && <p>Are you sure that you want to force update the assessment?</p>}\n          {isWarningShown && confirmationPrompt}\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default MaterialDropzone;\n","import { Dialog, DialogBody, DialogFooter, Intent } from '@blueprintjs/core';\nimport { DateInput3 } from '@blueprintjs/datetime2';\nimport { IconNames } from '@blueprintjs/icons';\nimport * as moment from 'moment';\nimport React, { useCallback, useState } from 'react';\n\nimport { AssessmentOverview } from '../../../../commons/assessment/AssessmentTypes';\nimport ControlButton from '../../../../commons/ControlButton';\nimport { showWarningMessage } from '../../../../commons/utils/notifications/NotificationsHelper';\n\ntype Props = {\n  handleAssessmentChangeDate: (id: number, openAt: string, closeAt: string) => void;\n  data: AssessmentOverview;\n  forOpenDate: boolean;\n};\n\nconst dateDisplayFormat = 'YYYY-MM-DD HH:mm:ss ZZ';\n\nconst EditCell: React.FC<Props> = ({ data, forOpenDate, handleAssessmentChangeDate }) => {\n  const minDate = new Date(2010, 0, 0);\n  const maxDate = new Date(2030, 11, 31);\n\n  const currentDateString = forOpenDate ? data.openAt : data.closeAt;\n  const currentDate = moment(currentDateString, moment.ISO_8601, true);\n\n  const [isDialogOpen, setDialogState] = useState(false);\n  const [newDate, setNewDate] = useState<moment.Moment | null>(currentDate);\n\n  const handleOpenDialog = useCallback(() => setDialogState(true), []);\n  const handleCloseDialog = useCallback(() => setDialogState(false), []);\n\n  const handleUpdateDate = useCallback(() => {\n    if (!newDate) {\n      // Reset date to current date if no date is selected (null date) in the date input\n      showWarningMessage('No date and time selected!', 2000);\n      setNewDate(currentDate);\n    } else {\n      const { id, openAt, closeAt } = data;\n      handleAssessmentChangeDate(\n        id,\n        forOpenDate ? newDate.toISOString() : openAt,\n        forOpenDate ? closeAt : newDate.toISOString()\n      );\n      handleCloseDialog();\n    }\n  }, [newDate, currentDate, data, handleAssessmentChangeDate, forOpenDate, handleCloseDialog]);\n\n  const handleParseDate = (str: string) => {\n    const date = moment(str, dateDisplayFormat, true);\n    return date.isValid() ? date.toDate() : false;\n  };\n  const handleFormatDate = (date: Date) => moment(date).format(dateDisplayFormat);\n\n  const handleDateChange = React.useCallback(\n    (selectedDate: string | null) => setNewDate(moment(selectedDate)),\n    []\n  );\n  const handleDateError = React.useCallback(() => {\n    // Reset date to current date if user enters an invalid date string\n    showWarningMessage('Failed to parse date string! Defaulting to current date.', 2000);\n    setNewDate(currentDate);\n  }, [currentDate]);\n\n  const dateInput = (\n    <DateInput3\n      formatDate={handleFormatDate}\n      onChange={handleDateChange}\n      onError={handleDateError}\n      parseDate={handleParseDate}\n      placeholder={`${dateDisplayFormat} or select a date`}\n      value={newDate?.toISOString()}\n      disableTimezoneSelect\n      timePrecision=\"second\"\n      fill\n      minDate={minDate}\n      maxDate={maxDate}\n      closeOnSelection={false}\n    />\n  );\n\n  return (\n    <>\n      <span className=\"date-cell-text\">{currentDate.format(dateDisplayFormat)}</span>\n      <ControlButton icon={IconNames.EDIT} onClick={handleOpenDialog} />\n      <Dialog\n        icon={IconNames.INFO_SIGN}\n        isOpen={isDialogOpen}\n        onClose={handleCloseDialog}\n        title=\"Updating assessment settings\"\n        canOutsideClickClose={true}\n      >\n        <DialogBody>\n          <p>{forOpenDate ? 'Opening' : 'Closing'} date and time:</p>\n          {dateInput}\n        </DialogBody>\n        <DialogFooter\n          actions={\n            <>\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={handleCloseDialog}\n                options={{ minimal: false }}\n              />\n              <ControlButton\n                label=\"Confirm\"\n                icon={IconNames.TICK}\n                onClick={handleUpdateDate}\n                options={{ minimal: false, intent: Intent.DANGER }}\n              />\n            </>\n          }\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default EditCell;\n","import { Dialog, DialogBody, DialogFooter, Intent, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useCallback, useState } from 'react';\n\nimport { AssessmentOverview } from '../../../../commons/assessment/AssessmentTypes';\nimport ControlButton from '../../../../commons/ControlButton';\n\ntype Props = {\n  handlePublishAssessment: (togglePublishTo: boolean, id: number) => void;\n  data: AssessmentOverview;\n};\n\nconst PublishCell: React.FC<Props> = ({ data, handlePublishAssessment }) => {\n  const [isDialogOpen, setDialogState] = useState(false);\n  const [isPublished] = useState(!!data.isPublished);\n\n  const handleOpenDialog = useCallback(() => setDialogState(true), []);\n  const handleCloseDialog = useCallback(() => setDialogState(false), []);\n\n  const handleTogglePublished = useCallback(() => {\n    const { id } = data;\n    handlePublishAssessment(!isPublished, id);\n    handleCloseDialog();\n  }, [data, isPublished, handleCloseDialog, handlePublishAssessment]);\n\n  return (\n    <>\n      <Switch className=\"publish-cell\" checked={isPublished} onChange={handleOpenDialog} />\n      <Dialog\n        icon={IconNames.WARNING_SIGN}\n        isOpen={isDialogOpen}\n        onClose={handleCloseDialog}\n        title={`${isPublished ? 'Unpublish' : 'Publish'} assessment`}\n        canOutsideClickClose={true}\n      >\n        <DialogBody>\n          <p>\n            Are you sure you want to <b>{isPublished ? 'unpublish' : 'publish'}</b> the assessment{' '}\n            <i>{data.title}</i>?\n          </p>\n          {isPublished ? (\n            <p>\n              <b>\n                This will hide the assessment for students and prevent them from uploading new\n                answers. Admins and staff are not affected.\n              </b>\n            </p>\n          ) : null}\n        </DialogBody>\n        <DialogFooter\n          actions={\n            <>\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={handleCloseDialog}\n                options={{ minimal: false }}\n              />\n              <ControlButton\n                label=\"Confirm\"\n                icon={IconNames.CONFIRM}\n                onClick={handleTogglePublished}\n                options={{ minimal: false, intent: Intent.DANGER }}\n              />\n            </>\n          }\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default PublishCell;\n","import 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css';\n\nimport { Button, Collapse, Divider, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ColDef, ColumnApi, GridApi, GridReadyEvent } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport React from 'react';\n\nimport {\n  AssessmentConfiguration,\n  AssessmentOverview\n} from '../../../commons/assessment/AssessmentTypes';\nimport ContentDisplay from '../../../commons/ContentDisplay';\nimport DefaultChapterSelect from './subcomponents/DefaultChapterSelect';\nimport DeleteCell from './subcomponents/GroundControlDeleteCell';\nimport Dropzone from './subcomponents/GroundControlDropzone';\nimport EditCell from './subcomponents/GroundControlEditCell';\nimport PublishCell from './subcomponents/GroundControlPublishCell';\n\nexport type GroundControlProps = DispatchProps & StateProps;\n\nexport type DispatchProps = {\n  handleAssessmentOverviewFetch: () => void;\n  handleDeleteAssessment: (id: number) => void;\n  handleUploadAssessment: (file: File, forceUpdate: boolean, assessmentConfigId: number) => void;\n  handlePublishAssessment: (togglePublishTo: boolean, id: number) => void;\n  handleAssessmentChangeDate: (id: number, openAt: string, closeAt: string) => void;\n  handleFetchCourseConfigs: () => void;\n};\n\nexport type StateProps = {\n  assessmentOverviews?: AssessmentOverview[];\n  assessmentConfigurations?: AssessmentConfiguration[];\n};\n\ntype State = {\n  showDropzone: boolean;\n};\n\nclass GroundControl extends React.Component<GroundControlProps, State> {\n  private columnDefs: ColDef[];\n  private defaultColumnDefs: ColDef;\n  private gridApi?: GridApi;\n  private columnApi?: ColumnApi;\n\n  public constructor(props: GroundControlProps) {\n    super(props);\n\n    this.state = {\n      showDropzone: false\n    };\n\n    this.columnDefs = [\n      {\n        field: 'number',\n        headerName: 'ID',\n        width: 50\n      },\n      {\n        headerName: 'Title',\n        field: 'title'\n      },\n      {\n        headerName: 'Category',\n        field: 'type',\n        width: 100\n      },\n      {\n        headerName: 'Open Date',\n        field: 'openAt',\n        filter: 'agDateColumnFilter',\n        filterParams: {\n          comparator: this.dateFilterComparator,\n          inRangeInclusive: true\n        },\n        sortingOrder: ['desc', 'asc', null],\n        cellRenderer: EditCell,\n        cellRendererParams: {\n          handleAssessmentChangeDate: this.props.handleAssessmentChangeDate,\n          forOpenDate: true\n        },\n        width: 150\n      },\n      {\n        headerName: 'Close Date',\n        field: 'closeAt',\n        filter: 'agDateColumnFilter',\n        filterParams: {\n          comparator: this.dateFilterComparator,\n          inRangeInclusive: true\n        },\n        sortingOrder: ['desc', 'asc', null],\n        cellRenderer: EditCell,\n        cellRendererParams: {\n          handleAssessmentChangeDate: this.props.handleAssessmentChangeDate,\n          forOpenDate: false\n        },\n        width: 150\n      },\n      {\n        headerName: 'Publish',\n        field: '',\n        cellRenderer: PublishCell,\n        cellRendererParams: {\n          handlePublishAssessment: this.props.handlePublishAssessment\n        },\n        width: 100,\n        filter: false,\n        resizable: false,\n        sortable: false,\n        cellStyle: {\n          padding: 0\n        }\n      },\n      {\n        headerName: 'Delete',\n        field: '',\n        cellRenderer: DeleteCell,\n        cellRendererParams: {\n          handleDeleteAssessment: this.props.handleDeleteAssessment\n        },\n        width: 100,\n        filter: false,\n        resizable: false,\n        sortable: false,\n        cellStyle: {\n          padding: 0\n        }\n      }\n    ];\n\n    this.defaultColumnDefs = {\n      filter: true,\n      resizable: true,\n      sortable: true\n    };\n  }\n\n  public render() {\n    const controls = (\n      <div className=\"GridControls ground-control-controls\">\n        <Button\n          active={this.state.showDropzone}\n          icon={IconNames.CLOUD_UPLOAD}\n          intent={this.state.showDropzone ? Intent.PRIMARY : Intent.NONE}\n          onClick={this.toggleDropzone}\n        >\n          <span className=\"hidden-xs\">Upload assessment</span>\n        </Button>\n        <DefaultChapterSelect />\n        <Button icon={IconNames.REFRESH} onClick={this.props.handleAssessmentOverviewFetch}>\n          <span className=\"hidden-xs\">Refresh assessments</span>\n        </Button>\n      </div>\n    );\n\n    const dropzone = (\n      <Collapse isOpen={this.state.showDropzone} keepChildrenMounted={true}>\n        <Dropzone\n          handleUploadAssessment={this.props.handleUploadAssessment}\n          assessmentConfigurations={this.props.assessmentConfigurations}\n        />\n      </Collapse>\n    );\n\n    const grid = (\n      <div className=\"Grid ag-grid-parent ag-theme-balham\">\n        <AgGridReact\n          domLayout={'autoHeight'}\n          columnDefs={this.columnDefs}\n          defaultColDef={this.defaultColumnDefs}\n          onGridReady={this.onGridReady}\n          onGridSizeChanged={this.resizeGrid}\n          rowData={this.props.assessmentOverviews}\n          rowHeight={30}\n          suppressCellFocus={true}\n          suppressMovableColumns={true}\n          suppressPaginationPanel={true}\n        />\n      </div>\n    );\n\n    const content = (\n      <div className=\"GroundControl\">\n        {controls}\n        {dropzone}\n        <Divider />\n        {grid}\n      </div>\n    );\n\n    return (\n      <div>\n        <ContentDisplay display={content} loadContentDispatch={this.loadContent} />\n      </div>\n    );\n  }\n\n  private loadContent = () => {\n    // Always load AssessmentOverviews and CourseConfigs to get the latest values (just in case)\n    this.props.handleAssessmentOverviewFetch();\n    this.props.handleFetchCourseConfigs();\n  };\n\n  /*\n   *  Reference: https://www.ag-grid.com/javascript-grid-filter-date/#date-filter-comparator\n   */\n  private dateFilterComparator = (filterDate: Date, cellValue: string) => {\n    const cellDate = new Date(cellValue);\n\n    return cellDate < filterDate ? -1 : cellDate > filterDate ? 1 : 0;\n  };\n\n  private onGridReady = (params: GridReadyEvent) => {\n    this.gridApi = params.api;\n    this.columnApi = params.columnApi;\n    this.gridApi.sizeColumnsToFit();\n\n    // Sort assessments by opening date, breaking ties by later of closing dates\n    this.columnApi.applyColumnState({\n      state: [\n        { colId: 'openAt', sort: 'desc' },\n        { colId: 'closeAt', sort: 'desc' }\n      ]\n    });\n  };\n\n  private resizeGrid = () => {\n    if (this.gridApi) {\n      this.gridApi.sizeColumnsToFit();\n    }\n  };\n\n  private toggleDropzone = () => {\n    this.setState({ showDropzone: !this.state.showDropzone });\n  };\n}\n\nexport default GroundControl;\n","import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport {\n  fetchAssessmentOverviews,\n  fetchCourseConfig\n} from '../../../commons/application/actions/SessionActions';\nimport { OverallState } from '../../../commons/application/ApplicationTypes';\nimport {\n  changeDateAssessment,\n  deleteAssessment,\n  publishAssessment,\n  uploadAssessment\n} from '../../../features/groundControl/GroundControlActions';\nimport GroundControl, { DispatchProps, StateProps } from './GroundControl';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, OverallState> = state => ({\n  assessmentOverviews: state.session.assessmentOverviews,\n  assessmentConfigurations: state.session.assessmentConfigurations\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      handleAssessmentChangeDate: changeDateAssessment,\n      handleAssessmentOverviewFetch: fetchAssessmentOverviews,\n      handleDeleteAssessment: deleteAssessment,\n      handleUploadAssessment: uploadAssessment,\n      handlePublishAssessment: publishAssessment,\n      handleFetchCourseConfigs: fetchCourseConfig\n    },\n    dispatch\n  );\n\nconst GroundControlContainer = connect(mapStateToProps, mapDispatchToProps)(GroundControl);\n\nexport default GroundControlContainer;\n","import { Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { NotificationConfiguration } from 'src/commons/application/types/SessionTypes';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype BooleanCellProps = OwnProps;\n\ntype OwnProps = {\n  data: NotificationConfiguration;\n  field: KeysOfType<NotificationConfiguration, boolean>;\n  rowIndex: number;\n  setStateHandler: (index: number, value: boolean) => void;\n};\n\nconst BooleanCell: React.FC<BooleanCellProps> = props => {\n  const { data } = props;\n  let checked = false;\n\n  if (data.notificationPreference !== null && data.notificationPreference.isEnabled !== null) {\n    checked = data.notificationPreference.isEnabled;\n  }\n\n  const changeHandler = React.useCallback(() => {\n    props.setStateHandler(props.rowIndex, !checked);\n  }, [props, checked]);\n\n  return <Switch checked={checked} onChange={changeHandler} />;\n};\n\nexport default BooleanCell;\n","import { Button, MenuItem } from '@blueprintjs/core';\nimport { ItemRenderer, Select2 } from '@blueprintjs/select';\nimport React from 'react';\nimport { NotificationConfiguration, TimeOption } from 'src/commons/application/types/SessionTypes';\nimport { KeysOfType } from 'src/commons/utils/TypeHelper';\n\ntype SelectCellProps = OwnProps;\n\ntype OwnProps = {\n  data: NotificationConfiguration;\n  rowIndex: number;\n  field: KeysOfType<NotificationConfiguration, TimeOption[]>;\n  setStateHandler: (rowIndex: number, value: TimeOption) => void;\n};\n\nconst SelectCell: React.FC<SelectCellProps> = props => {\n  const [selectedOption, setSelectedOption] = React.useState<TimeOption>();\n  const timeOptions: TimeOption[] = props.data[props.field];\n  timeOptions.sort((to1, to2) => to1.minutes - to2.minutes);\n\n  const getUserFriendlyText = (option: TimeOption) =>\n    option.minutes >= 60\n      ? `${Math.round((option.minutes / 60) * 100) / 100} hour(s)`\n      : `${option.minutes} minute(s)`;\n\n  const renderOption: ItemRenderer<TimeOption> = (\n    option: TimeOption,\n    { handleClick, handleFocus, modifiers, query }\n  ) => {\n    return (\n      <MenuItem\n        active={modifiers.active}\n        disabled={modifiers.disabled}\n        key={option.id}\n        onClick={handleClick}\n        onFocus={handleFocus}\n        roleStructure=\"listoption\"\n        text={getUserFriendlyText(option)}\n      />\n    );\n  };\n\n  const systemEnabled = props.data['isEnabled'];\n\n  // look for default time option\n  let defaultTimeOption: TimeOption | undefined;\n  const defaultTimeOptions = timeOptions.filter(to => to.isDefault);\n  if (defaultTimeOptions.length === 1) {\n    defaultTimeOption = defaultTimeOptions[0];\n  }\n\n  // look for preferred time option\n  let prefTimeOption: TimeOption | undefined;\n  if (props.data.notificationPreference !== null) {\n    const filteredTimeOptions = timeOptions.filter(\n      to => to.id === props.data.notificationPreference.timeOptionId\n    );\n    if (filteredTimeOptions.length === 1) {\n      prefTimeOption = filteredTimeOptions[0];\n    }\n  }\n\n  // initial value prioritises preferred time option, fallback on default\n  if (prefTimeOption || defaultTimeOption) {\n    const timeOption = prefTimeOption ? prefTimeOption : defaultTimeOption;\n    if (!selectedOption || selectedOption.id !== timeOption!.id) {\n      setSelectedOption(timeOption);\n    }\n  }\n\n  const handleSelect = (option: TimeOption) => {\n    setSelectedOption(option);\n    props.setStateHandler(props.rowIndex, option);\n  };\n\n  return (\n    <Select2<TimeOption>\n      filterable={false}\n      items={timeOptions}\n      itemRenderer={renderOption}\n      onItemSelect={handleSelect}\n      noResults={<MenuItem disabled={true} text=\"No results.\" roleStructure=\"listoption\" />}\n      disabled={!systemEnabled}\n    >\n      <Button\n        text={selectedOption ? getUserFriendlyText(selectedOption) : 'Choose default'}\n        rightIcon=\"caret-down\"\n        disabled={!systemEnabled}\n      />\n    </Select2>\n  );\n};\n\nexport default SelectCell;\n","import { Button, H1, Intent } from '@blueprintjs/core';\nimport { ColDef, GridApi, GridReadyEvent, ValueFormatterFunc } from 'ag-grid-community';\nimport { AgGridReact } from 'ag-grid-react';\nimport { cloneDeep } from 'lodash';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  fetchConfigurableNotificationConfigs,\n  updateNotificationPreferences\n} from 'src/commons/application/actions/SessionActions';\nimport {\n  NotificationConfiguration,\n  NotificationPreference,\n  TimeOption\n} from 'src/commons/application/types/SessionTypes';\nimport ContentDisplay from 'src/commons/ContentDisplay';\nimport { useTypedSelector } from 'src/commons/utils/Hooks';\n\nimport BooleanCell from './subcomponents/BooleanCell';\nimport SelectCell from './subcomponents/SelectCell';\n\nconst NotiPreference: React.FC = () => {\n  const gridApi = React.useRef<GridApi>();\n\n  const dispatch = useDispatch();\n  const session = useTypedSelector(state => state.session);\n\n  const [hasChanges, setHasChanges] = useState<boolean>(false);\n\n  const configurableNotificationConfigs = React.useRef<NotificationConfiguration[] | undefined>(\n    session.configurableNotificationConfigs\n  );\n\n  React.useEffect(() => {\n    if (!session.courseRegId) return;\n\n    dispatch(fetchConfigurableNotificationConfigs(session.courseRegId));\n  }, [dispatch, session.courseRegId]);\n\n  // After updated configs have been loaded from the backend, put them into local React state\n  React.useEffect(() => {\n    if (session.configurableNotificationConfigs !== undefined) {\n      configurableNotificationConfigs.current = cloneDeep(session.configurableNotificationConfigs);\n    }\n\n    // Initialise notification preferences if absent\n    configurableNotificationConfigs.current?.forEach(config => {\n      if (config.notificationPreference === null) {\n        config.notificationPreference = {\n          id: -1,\n          isEnabled: true,\n          timeOptionId: null\n        };\n      }\n    });\n  }, [session]);\n\n  const setIsEnabled = (index: number, value: boolean) => {\n    const temp = [...(configurableNotificationConfigs.current ?? [])];\n\n    temp[index]['notificationPreference'].isEnabled = value;\n\n    configurableNotificationConfigs.current = temp;\n    gridApi.current\n      ?.getDisplayedRowAtIndex(index)\n      ?.setDataValue('notificationPreference.isEnabled', value);\n    setHasChanges(true);\n  };\n\n  const setTimeOption = (index: number, value: TimeOption) => {\n    const temp = [...(configurableNotificationConfigs.current ?? [])];\n\n    temp[index]['notificationPreference'].timeOptionId = value.id;\n\n    configurableNotificationConfigs.current = temp;\n    gridApi.current\n      ?.getDisplayedRowAtIndex(index)\n      ?.setDataValue('timeOptions', temp[index]['timeOptions']);\n    setHasChanges(true);\n  };\n\n  const assessmentTypeFormatter: ValueFormatterFunc<NotificationConfiguration> = params => {\n    return params.data!.assessmentConfig?.type || '-';\n  };\n\n  const recipientFormatter: ValueFormatterFunc<NotificationConfiguration> = params => {\n    return params.data!.notificationType.forStaff ? 'Staff' : 'Student';\n  };\n\n  const columnDefs: ColDef[] = [\n    {\n      headerName: 'Notification Type',\n      field: 'notificationType.name',\n      rowDrag: true\n    },\n    {\n      headerName: 'Assessment Type',\n      field: 'assessmentConfig.type',\n      valueFormatter: assessmentTypeFormatter\n    },\n    {\n      headerName: 'Recipients',\n      field: 'notificationType.forStaff',\n      valueFormatter: recipientFormatter\n    },\n    {\n      headerName: 'Reminder',\n      field: 'timeOptions',\n      cellRenderer: SelectCell,\n      cellRendererParams: {\n        setStateHandler: setTimeOption,\n        field: 'timeOptions'\n      }\n    },\n    {\n      headerName: 'Enabled',\n      field: 'notificationPreference.isEnabled',\n      cellRenderer: BooleanCell,\n      cellRendererParams: {\n        setStateHandler: setIsEnabled,\n        field: 'notificationPreference.isEnabled'\n      }\n    }\n  ];\n\n  const defaultColumnDefs = {\n    filter: false,\n    resizable: true,\n    sortable: false\n  };\n\n  const onGridReady = (params: GridReadyEvent) => {\n    gridApi.current = params.api;\n    params.api.sizeColumnsToFit();\n  };\n\n  const submitHandler = () => {\n    if (!hasChanges) return;\n\n    const preferences: NotificationPreference[] =\n      configurableNotificationConfigs.current?.map(config => {\n        return {\n          ...config.notificationPreference,\n          notificationConfigId: config.id\n        };\n      }) ?? [];\n    dispatch(updateNotificationPreferences(preferences, session.courseRegId!));\n\n    setHasChanges(false);\n  };\n\n  const data = (\n    <div>\n      <H1>Notifications</H1>\n      <div className=\"Grid ag-grid-parent ag-theme-balham\">\n        <AgGridReact\n          domLayout={'autoHeight'}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColumnDefs}\n          onGridReady={onGridReady}\n          onGridSizeChanged={() => gridApi.current?.sizeColumnsToFit()}\n          rowData={configurableNotificationConfigs.current}\n          rowHeight={36}\n          rowDragManaged={true}\n          suppressCellFocus={true}\n          suppressMovableColumns={true}\n          suppressPaginationPanel={true}\n        />\n      </div>\n      <Button\n        text=\"Save\"\n        style={{ marginTop: '15px' }}\n        disabled={!hasChanges}\n        intent={hasChanges ? Intent.WARNING : Intent.NONE}\n        onClick={submitHandler}\n      />\n    </div>\n  );\n\n  return <ContentDisplay loadContentDispatch={() => {}} display={data} fullWidth={false} />;\n};\n\nexport default NotiPreference;\n","import { Card, Classes, Dialog, H1, InputGroup } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\nimport Recorder from 'yareco';\n\nimport ControlButton from '../../../../commons/ControlButton';\nimport {\n  Input,\n  PlaybackData,\n  RecordingStatus\n} from '../../../../features/sourceRecorder/SourceRecorderTypes';\n\ntype SourcereelControlbarProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleRecordInit: () => void;\n  handleRecordPause: () => void;\n  handleResetInputs: (inputs: Input[]) => void;\n  handleSaveSourcecastData: (\n    title: string,\n    description: string,\n    uid: string,\n    audio: Blob,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetSourcecastData: (\n    title: string,\n    description: string,\n    uid: string,\n    audioUrl: string,\n    playbackData: PlaybackData\n  ) => void;\n  handleSetIsEditorReadonly: (readonly: boolean) => void;\n  handleTimerPause: () => void;\n  handleTimerReset: () => void;\n  handleTimerResume: (timeBefore: number) => void;\n  handleTimerStart: () => void;\n  handleTimerStop: () => void;\n  getTimerDuration: () => number;\n};\n\ntype StateProps = {\n  currentPlayerTime: number;\n  editorValue: string;\n  playbackData: PlaybackData;\n  recordingStatus: RecordingStatus;\n};\n\ntype State = {\n  dialogOpen: boolean;\n  duration: number;\n  fileDataBlob?: Blob;\n  updater?: NodeJS.Timeout;\n  saveTitle: string;\n  saveDescription: string;\n  saveUID: string;\n};\n\nclass SourcereelControlbar extends React.PureComponent<SourcereelControlbarProps, State> {\n  private recorder?: Recorder = undefined;\n\n  constructor(props: SourcereelControlbarProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false,\n      duration: 0,\n      updater: undefined,\n      saveTitle: '',\n      saveDescription: '',\n      saveUID: ''\n    };\n  }\n\n  public async componentDidMount() {\n    Recorder.getPermission().then(\n      () => {},\n      (error: any) => {\n        alert('Microphone not found: ' + error);\n      }\n    );\n  }\n\n  public render() {\n    const RecorderRecordPauseButton = (\n      <ControlButton\n        label=\"Record Pause\"\n        icon={IconNames.SNOWFLAKE}\n        onClick={this.props.handleRecordPause}\n      />\n    );\n    const RecorderPauseButton = (\n      <ControlButton label=\"Pause\" icon={IconNames.PAUSE} onClick={this.handleRecorderPausing} />\n    );\n    const RecorderResumeButton = (\n      <ControlButton label=\"Resume\" icon={IconNames.PLAY} onClick={this.handleRecorderResuming} />\n    );\n    const RecorderResumeFromCurrentButton = (\n      <ControlButton\n        label=\"Resume Here\"\n        icon={IconNames.PLAY}\n        onClick={this.handleRecorderResumingFromCurrent}\n      />\n    );\n    const RecorderStartButton = (\n      <ControlButton label=\"Record\" icon={IconNames.PLAY} onClick={this.handleRecorderStarting} />\n    );\n    const RecorderStopButton = (\n      <ControlButton label=\"Stop\" icon={IconNames.STOP} onClick={this.handleRecorderStopping} />\n    );\n    const RecorderResetButton = (\n      <ControlButton\n        label=\"Reset\"\n        icon={IconNames.REFRESH}\n        onClick={this.handleRecorderResetting}\n      />\n    );\n    const RecorderSaveButton = (\n      <ControlButton label=\"Upload\" icon={IconNames.FLOPPY_DISK} onClick={this.handleOpenDialog} />\n    );\n    return (\n      <div>\n        <Dialog\n          icon=\"info-sign\"\n          isOpen={this.state.dialogOpen}\n          onClose={this.handleCloseDialog}\n          title=\"Upload Sourcecast\"\n          canOutsideClickClose={true}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <InputGroup\n              id=\"title\"\n              leftIcon={IconNames.HEADER}\n              onChange={this.handleSaveTitleInputChange}\n              placeholder=\"Title\"\n              value={this.state.saveTitle}\n            />\n            <br />\n            <InputGroup\n              id=\"description\"\n              leftIcon={IconNames.LIST_DETAIL_VIEW}\n              onChange={this.handleSaveDescriptionInputChange}\n              placeholder=\"Description\"\n              value={this.state.saveDescription}\n            />\n            <br />\n            <InputGroup\n              id=\"uid\"\n              leftIcon={IconNames.KEY}\n              onChange={this.handleSaveUIDInputChange}\n              placeholder=\"UID (optional, only alphanumeric, dash and underscore allowed)\"\n              value={this.state.saveUID}\n            />\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              <ControlButton\n                label=\"Confirm Upload\"\n                icon={IconNames.TICK}\n                onClick={this.handleRecorderSaving}\n              />\n              <ControlButton\n                label=\"Cancel\"\n                icon={IconNames.CROSS}\n                onClick={this.handleCloseDialog}\n              />\n            </div>\n          </div>\n        </Dialog>\n        <br />\n        <div className=\"Timer\">\n          <Card elevation={2} style={{ background: '#24323F' }}>\n            <H1>\n              {this.renderLabel(\n                this.props.recordingStatus !== RecordingStatus.paused\n                  ? this.state.duration / 1000\n                  : this.props.currentPlayerTime\n              )}\n            </H1>\n          </Card>\n        </div>\n        <br />\n        <div className=\"RecorderControl\">\n          {this.props.recordingStatus === RecordingStatus.notStarted && RecorderStartButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderResumeButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderResumeFromCurrentButton}\n          {this.props.recordingStatus === RecordingStatus.recording && RecorderPauseButton}\n          {this.props.recordingStatus === RecordingStatus.recording && RecorderRecordPauseButton}\n          {this.props.recordingStatus === RecordingStatus.paused && RecorderStopButton}\n          {this.props.recordingStatus === RecordingStatus.finished && RecorderSaveButton}\n          {this.props.recordingStatus !== RecordingStatus.notStarted && RecorderResetButton}\n        </div>\n        <br />\n      </div>\n    );\n  }\n\n  private handleCloseDialog = () => this.setState({ dialogOpen: false });\n\n  private handleOpenDialog = () => this.setState({ dialogOpen: true });\n\n  private updateTimerDuration = () => {\n    this.setState({ duration: this.props.getTimerDuration() });\n  };\n\n  private handleTruncatePlaybackData = () => {\n    const truncatedInputs = this.props.playbackData.inputs.filter(\n      deltaWithTime => deltaWithTime.time <= this.props.currentPlayerTime * 1000\n    );\n    this.props.handleResetInputs(truncatedInputs);\n  };\n\n  private handleRecorderPausing = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetIsEditorReadonly, handleSetSourcecastData, handleTimerPause } = this.props;\n    clearInterval(this.state.updater!);\n    handleSetIsEditorReadonly(true);\n    handleTimerPause();\n    this.recorder.pause();\n    const audioUrl = window.URL.createObjectURL(this.recorder.exportWAV());\n    handleSetSourcecastData('', '', '', audioUrl, this.props.playbackData);\n  };\n\n  private handleRecorderStarting = () => {\n    this.recorder = new Recorder();\n    const { handleRecordInit, handleSetIsEditorReadonly, handleTimerStart } = this.props;\n    this.recorder.start().then(\n      () => {\n        handleRecordInit();\n        handleSetIsEditorReadonly(false);\n        handleTimerStart();\n        const updater = setInterval(this.updateTimerDuration, 100);\n        this.setState({ updater });\n        // this.recorder.onRecord = (duration: number) => console.log(duration);\n      },\n      (error: any) => {\n        alert('Microphone not found: ' + error);\n      }\n    );\n  };\n\n  private handleRecorderResuming = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetIsEditorReadonly, handleTimerResume } = this.props;\n    handleSetIsEditorReadonly(false);\n    // -1 means resume from the end\n    handleTimerResume(-1);\n    const updater = setInterval(this.updateTimerDuration, 100);\n    this.setState({ updater });\n    this.recorder.resume();\n  };\n\n  private handleRecorderResumingFromCurrent = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { currentPlayerTime, handleSetIsEditorReadonly, handleTimerResume } = this.props;\n    this.handleTruncatePlaybackData();\n    handleSetIsEditorReadonly(false);\n    handleTimerResume(currentPlayerTime * 1000);\n    const updater = setInterval(this.updateTimerDuration, 100);\n    this.setState({ updater });\n    this.recorder.resume(currentPlayerTime);\n  };\n\n  private handleRecorderStopping = () => {\n    if (!this.recorder) {\n      return;\n    }\n    const { handleSetIsEditorReadonly, handleTimerStop } = this.props;\n    handleSetIsEditorReadonly(false);\n    handleTimerStop();\n    clearInterval(this.state.updater!);\n    this.recorder.stop();\n    this.setState({\n      fileDataBlob: this.recorder.exportWAV()\n    });\n    this.recorder.clear();\n  };\n\n  private handleRecorderResetting = () => {\n    const { handleSetIsEditorReadonly, handleTimerReset } = this.props;\n    handleSetIsEditorReadonly(false);\n    handleTimerReset();\n    clearInterval(this.state.updater!);\n    this.setState({ duration: 0 });\n    if (this.recorder) {\n      this.recorder.stop();\n      this.recorder.clear();\n    }\n  };\n\n  private handleRecorderSaving = () => {\n    if (!this.state.fileDataBlob) {\n      alert('No recording found');\n      return;\n    }\n    this.props.handleSaveSourcecastData(\n      this.state.saveTitle,\n      this.state.saveDescription,\n      this.state.saveUID,\n      this.state.fileDataBlob,\n      this.props.playbackData\n    );\n  };\n\n  private renderLabel = (value: number) => {\n    const min = Math.floor(value / 60);\n    const sec = Math.floor(value - min * 60);\n    const minString = min < 10 ? '0' + min : min;\n    const secString = sec < 10 ? '0' + sec : sec;\n    return minString + ':' + secString;\n  };\n\n  private handleSaveTitleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveTitle: event.target.value });\n  };\n\n  private handleSaveDescriptionInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveDescription: event.target.value });\n  };\n\n  private handleSaveUIDInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ saveUID: event.target.value });\n  };\n}\n\nexport default SourcereelControlbar;\n","import { Classes, Pre } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from 'src/commons/application/actions/InterpreterActions';\nimport { changeSideContentHeight } from 'src/commons/sideContent/SideContentActions';\nimport { fetchSourcecastIndex } from 'src/features/sourceRecorder/sourcecast/SourcecastActions';\nimport {\n  saveSourcecastData,\n  setCodeDeltasToApply,\n  setCurrentPlayerTime,\n  setInputToApply,\n  setSourcecastData,\n  setSourcecastDuration,\n  setSourcecastStatus\n} from 'src/features/sourceRecorder/SourceRecorderActions';\nimport {\n  deleteSourcecastEntry,\n  recordInit,\n  recordInput,\n  resetInputs,\n  timerPause,\n  timerReset,\n  timerResume,\n  timerStart,\n  timerStop\n} from 'src/features/sourceRecorder/sourcereel/SourcereelActions';\n\nimport { ExternalLibraryName } from '../../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../../commons/controlBar/ControlBarEvalButton';\nimport {\n  convertEditorTabStateToProps,\n  SourcecastEditorContainerProps\n} from '../../../commons/editor/EditorContainer';\nimport { Position } from '../../../commons/editor/EditorTypes';\nimport makeCseMachineTabFrom from '../../../commons/sideContent/content/SideContentCseMachine';\nimport makeDataVisualizerTabFrom from '../../../commons/sideContent/content/SideContentDataVisualizer';\nimport { useSideContent } from '../../../commons/sideContent/SideContentHelper';\nimport { SideContentType } from '../../../commons/sideContent/SideContentTypes';\nimport SourceRecorderControlBar, {\n  SourceRecorderControlBarProps\n} from '../../../commons/sourceRecorder/SourceRecorderControlBar';\nimport SourcecastTable from '../../../commons/sourceRecorder/SourceRecorderTable';\nimport { useTypedSelector } from '../../../commons/utils/Hooks';\nimport Workspace, { WorkspaceProps } from '../../../commons/workspace/Workspace';\nimport {\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  externalLibrarySelect,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  setEditorBreakpoint,\n  setIsEditorReadonly,\n  toggleEditorAutorun,\n  updateActiveEditorTabIndex,\n  updateEditorValue,\n  updateReplValue\n} from '../../../commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../../../commons/workspace/WorkspaceTypes';\nimport {\n  CodeDelta,\n  Input,\n  KeyboardCommand,\n  PlaybackData,\n  PlaybackStatus,\n  RecordingStatus\n} from '../../../features/sourceRecorder/SourceRecorderTypes';\nimport SourcereelControlbar from './subcomponents/SourcereelControlbar';\n\nconst workspaceLocation: WorkspaceLocation = 'sourcereel';\nconst sourcecastLocation: WorkspaceLocation = 'sourcecast';\n\nconst Sourcereel: React.FC = () => {\n  const { selectedTab, setSelectedTab } = useSideContent(\n    workspaceLocation,\n    SideContentType.sourcereel\n  );\n\n  const courseId = useTypedSelector(state => state.session.courseId);\n  const { chapter: sourceChapter, variant: sourceVariant } = useTypedSelector(\n    state => state.workspaces[workspaceLocation].context\n  );\n  const {\n    audioUrl,\n    currentPlayerTime,\n    codeDeltasToApply,\n    inputToApply,\n    playbackDuration,\n    playbackStatus,\n    sourcecastIndex\n  } = useTypedSelector(state => state.workspaces.sourcecast);\n  const {\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    editorTabs,\n    externalLibrary: externalLibraryName,\n    isDebugging,\n    isEditorAutorun,\n    isEditorReadonly,\n    isRunning,\n    output,\n    playbackData,\n    recordingStatus,\n    replValue,\n    timeElapsedBeforePause,\n    timeResumed\n  } = useTypedSelector(store => store.workspaces[workspaceLocation]);\n\n  const dispatch = useDispatch();\n  const {\n    handleChapterSelect,\n    handleEditorEval,\n    handleEditorValueChange,\n    handleExternalSelect,\n    handleRecordInput,\n    handleReplEval,\n    handleSetSourcecastStatus,\n    handleSetIsEditorReadonly\n  } = useMemo(() => {\n    return {\n      handleChapterSelect: (chapter: Chapter) =>\n        dispatch(chapterSelect(chapter, Variant.DEFAULT, workspaceLocation)),\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorValueChange: (newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, 0, newEditorValue)),\n      handleExternalSelect: (externalLibraryName: ExternalLibraryName) =>\n        dispatch(externalLibrarySelect(externalLibraryName, workspaceLocation)),\n      handleRecordInput: (input: Input) => dispatch(recordInput(input, workspaceLocation)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleSetSourcecastStatus: (playbackStatus: PlaybackStatus) =>\n        dispatch(setSourcecastStatus(playbackStatus, sourcecastLocation)),\n      handleSetIsEditorReadonly: (readonly: boolean) =>\n        dispatch(setIsEditorReadonly(workspaceLocation, readonly))\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    fetchSourcecastIndex(sourcecastLocation);\n  }, []);\n\n  useEffect(() => {\n    if (!inputToApply) {\n      return;\n    }\n\n    switch (inputToApply.type) {\n      case 'activeTabChange':\n        setSelectedTab(inputToApply.data);\n        break;\n      case 'chapterSelect':\n        handleChapterSelect(inputToApply.data);\n        break;\n      case 'externalLibrarySelect':\n        handleExternalSelect(inputToApply.data);\n        break;\n      case 'forcePause':\n        handleSetSourcecastStatus(PlaybackStatus.forcedPaused);\n        break;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputToApply]);\n\n  const getTimerDuration = () => timeElapsedBeforePause + Date.now() - timeResumed;\n\n  const handleRecordInit = () => {\n    const initData: PlaybackData['init'] = {\n      chapter: sourceChapter,\n      externalLibrary: externalLibraryName,\n      // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n      editorValue: editorTabs[0].value\n    };\n    dispatch(recordInit(initData, workspaceLocation));\n  };\n\n  const handleRecordPause = () =>\n    handleRecordInput({\n      time: getTimerDuration(),\n      type: 'forcePause',\n      data: null\n    });\n\n  const editorEvalHandler = () => {\n    handleEditorEval();\n    if (recordingStatus !== RecordingStatus.recording) {\n      return;\n    }\n    handleRecordInput({\n      time: getTimerDuration(),\n      type: 'keyboardCommand',\n      data: KeyboardCommand.run\n    });\n  };\n  const autorunButtonHandlers = useMemo(() => {\n    return {\n      handleDebuggerPause: () => dispatch(beginDebuggerPause(workspaceLocation)),\n      handleDebuggerResume: () => dispatch(debuggerResume(workspaceLocation)),\n      handleDebuggerReset: () => dispatch(debuggerReset(workspaceLocation)),\n      handleInterruptEval: () => dispatch(beginInterruptExecution(workspaceLocation)),\n      handleToggleEditorAutorun: () => dispatch(toggleEditorAutorun(workspaceLocation))\n    };\n  }, [dispatch]);\n  const autorunButtons = (\n    <ControlBarAutorunButtons\n      handleDebuggerPause={autorunButtonHandlers.handleDebuggerPause}\n      handleDebuggerResume={autorunButtonHandlers.handleDebuggerResume}\n      handleDebuggerReset={autorunButtonHandlers.handleDebuggerReset}\n      handleEditorEval={editorEvalHandler}\n      handleInterruptEval={autorunButtonHandlers.handleInterruptEval}\n      handleToggleEditorAutorun={autorunButtonHandlers.handleToggleEditorAutorun}\n      isEntrypointFileDefined={activeEditorTabIndex !== null}\n      isDebugging={isDebugging}\n      isEditorAutorun={isEditorAutorun}\n      isRunning={isRunning}\n      key=\"autorun\"\n    />\n  );\n\n  const chapterSelectHandler = ({ chapter }: { chapter: Chapter }, e: any) => {\n    handleChapterSelect(chapter);\n    if (recordingStatus !== RecordingStatus.recording) {\n      return;\n    }\n    handleRecordInput({\n      time: getTimerDuration(),\n      type: 'chapterSelect',\n      data: chapter\n    });\n  };\n\n  const chapterSelectButton = (\n    <ControlBarChapterSelect\n      handleChapterSelect={chapterSelectHandler}\n      isFolderModeEnabled={isFolderModeEnabled}\n      sourceChapter={sourceChapter}\n      sourceVariant={sourceVariant}\n      key=\"chapter\"\n    />\n  );\n\n  const clearButton = useMemo(\n    () => (\n      <ControlBarClearButton\n        handleReplOutputClear={() => dispatch(clearReplOutput(workspaceLocation))}\n        key=\"clear_repl\"\n      />\n    ),\n    [dispatch]\n  );\n\n  const evalButton = (\n    <ControlBarEvalButton handleReplEval={handleReplEval} isRunning={isRunning} key=\"eval_repl\" />\n  );\n\n  const editorContainerHandlers = useMemo(() => {\n    return {\n      setActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      removeEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex)),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n      handleEditorUpdateBreakpoints: (newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, 0, newBreakpoints))\n    };\n  }, [dispatch]);\n  const editorContainerProps: SourcecastEditorContainerProps = {\n    handleEditorEval: handleEditorEval,\n    handleEditorValueChange: handleEditorValueChange,\n    handleRecordInput: handleRecordInput,\n    codeDeltasToApply: codeDeltasToApply,\n    inputToApply: inputToApply,\n    isEditorAutorun: isEditorAutorun,\n    isEditorReadonly: isEditorReadonly,\n    editorVariant: sourcecastLocation,\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    setActiveEditorTabIndex: editorContainerHandlers.setActiveEditorTabIndex,\n    removeEditorTabByIndex: editorContainerHandlers.removeEditorTabByIndex,\n    editorTabs: editorTabs.map(convertEditorTabStateToProps),\n    handleDeclarationNavigate: editorContainerHandlers.handleDeclarationNavigate,\n    handleEditorUpdateBreakpoints: editorContainerHandlers.handleEditorUpdateBreakpoints,\n    editorSessionId: '',\n    getTimerDuration: getTimerDuration,\n    isPlaying: playbackStatus === PlaybackStatus.playing,\n    isRecording: recordingStatus === RecordingStatus.recording\n  };\n\n  const activeTabChangeHandler = (activeTab: SideContentType) => {\n    setSelectedTab(activeTab);\n    if (recordingStatus !== RecordingStatus.recording) {\n      return;\n    }\n    handleRecordInput({\n      time: getTimerDuration(),\n      type: 'activeTabChange',\n      data: activeTab\n    });\n  };\n\n  const dataVisualizerTab = makeDataVisualizerTabFrom(workspaceLocation);\n  const cseMachineTab = makeCseMachineTabFrom(workspaceLocation);\n\n  const workspaceHandlers = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation)),\n      handleDeleteSourcecastEntry: (id: number) =>\n        dispatch(deleteSourcecastEntry(id, sourcecastLocation)),\n      // SourcereelControlbar handlers\n      handleResetInputs: (inputs: Input[]) => dispatch(resetInputs(inputs, workspaceLocation)),\n      handleSaveSourcecastData: (\n        title: string,\n        description: string,\n        uid: string,\n        audio: Blob,\n        playbackData: PlaybackData\n      ) =>\n        dispatch(\n          saveSourcecastData(title, description, uid, audio, playbackData, sourcecastLocation)\n        ),\n      handleSetSourcecastData: (\n        title: string,\n        description: string,\n        uid: string,\n        audioUrl: string,\n        playbackData: PlaybackData\n      ) =>\n        dispatch(\n          setSourcecastData(title, description, uid, audioUrl, playbackData, sourcecastLocation)\n        ),\n      handleTimerPause: () => dispatch(timerPause(workspaceLocation)),\n      handleTimerReset: () => dispatch(timerReset(workspaceLocation)),\n      handleTimerResume: (timeBefore: number) =>\n        dispatch(timerResume(timeBefore, workspaceLocation)),\n      handleTimerStart: () => dispatch(timerStart(workspaceLocation)),\n      handleTimerStop: () => dispatch(timerStop(workspaceLocation))\n    };\n  }, [dispatch]);\n\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: {\n      editorButtons: [autorunButtons, chapterSelectButton]\n    },\n    editorContainerProps: editorContainerProps,\n    handleSideContentHeightChange: heightChange =>\n      dispatch(changeSideContentHeight(heightChange, workspaceLocation)),\n    replProps: {\n      output: output,\n      replValue: replValue,\n      handleBrowseHistoryDown: workspaceHandlers.handleBrowseHistoryDown,\n      handleBrowseHistoryUp: workspaceHandlers.handleBrowseHistoryUp,\n      handleReplEval: handleReplEval,\n      handleReplValueChange: workspaceHandlers.handleReplValueChange,\n      sourceChapter: sourceChapter,\n      sourceVariant: sourceVariant,\n      externalLibrary: externalLibraryName,\n      replButtons: [evalButton, clearButton]\n    },\n    sideBarProps: {\n      tabs: []\n    },\n    sideContentProps: {\n      onChange: activeTabChangeHandler,\n      selectedTabId: selectedTab,\n      /**\n       * NOTE: An ag-grid console warning is shown here on load as the 'Sourcecast Table' tab\n       * is not the default tab, and the ag-grid table inside it has not been rendered.\n       * This is a known issue with ag-grid, and is okay since only staff and admins have\n       * access to Sourcereel. For more info, see issue #1152 in frontend.\n       */\n      tabs: {\n        beforeDynamicTabs: [\n          {\n            label: 'Recording Panel',\n            iconName: IconNames.COMPASS,\n            body: (\n              <div>\n                <span className=\"Multi-line\">\n                  <Pre> {INTRODUCTION} </Pre>\n                </span>\n                <SourcereelControlbar\n                  currentPlayerTime={currentPlayerTime}\n                  // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n                  editorValue={editorTabs[0].value}\n                  getTimerDuration={getTimerDuration}\n                  playbackData={playbackData}\n                  handleRecordInit={handleRecordInit}\n                  handleRecordPause={handleRecordPause}\n                  handleResetInputs={workspaceHandlers.handleResetInputs}\n                  handleSaveSourcecastData={workspaceHandlers.handleSaveSourcecastData}\n                  handleSetSourcecastData={workspaceHandlers.handleSetSourcecastData}\n                  handleSetIsEditorReadonly={handleSetIsEditorReadonly}\n                  handleTimerPause={workspaceHandlers.handleTimerPause}\n                  handleTimerReset={workspaceHandlers.handleTimerReset}\n                  handleTimerResume={workspaceHandlers.handleTimerResume}\n                  handleTimerStart={workspaceHandlers.handleTimerStart}\n                  handleTimerStop={workspaceHandlers.handleTimerStop}\n                  recordingStatus={recordingStatus}\n                />\n              </div>\n            ),\n            id: SideContentType.sourcereel\n          },\n          {\n            label: 'Sourcecast Table',\n            iconName: IconNames.EDIT,\n            body: (\n              <div>\n                <SourcecastTable\n                  handleDeleteSourcecastEntry={workspaceHandlers.handleDeleteSourcecastEntry}\n                  sourcecastIndex={sourcecastIndex}\n                  courseId={courseId}\n                />\n              </div>\n            ),\n            id: SideContentType.introduction\n          },\n          dataVisualizerTab,\n          cseMachineTab\n        ],\n        afterDynamicTabs: []\n      },\n      workspaceLocation\n    }\n  };\n\n  const sourcecastControlbarHandlers = useMemo(() => {\n    return {\n      handleSetCurrentPlayerTime: (playerTime: number) =>\n        dispatch(setCurrentPlayerTime(playerTime, sourcecastLocation)),\n      handleSetCodeDeltasToApply: (deltas: CodeDelta[]) =>\n        dispatch(setCodeDeltasToApply(deltas, sourcecastLocation)),\n      handleSetInputToApply: (inputToApply: Input) =>\n        dispatch(setInputToApply(inputToApply, sourcecastLocation)),\n      handleSetSourcecastDuration: (duration: number) =>\n        dispatch(setSourcecastDuration(duration, sourcecastLocation)),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback))\n    };\n  }, [dispatch]);\n  const sourcecastControlbarProps: SourceRecorderControlBarProps = {\n    handleChapterSelect: handleChapterSelect,\n    handleEditorValueChange: handleEditorValueChange,\n    handleExternalSelect: handleExternalSelect,\n    handleSetSourcecastStatus: handleSetSourcecastStatus,\n    handleSetIsEditorReadonly: handleSetIsEditorReadonly,\n    audioUrl: audioUrl,\n    currentPlayerTime: currentPlayerTime,\n    playbackData: playbackData,\n    playbackStatus: playbackStatus,\n    handleSetCurrentPlayerTime: sourcecastControlbarHandlers.handleSetCurrentPlayerTime,\n    handleSetCodeDeltasToApply: sourcecastControlbarHandlers.handleSetCodeDeltasToApply,\n    handleSetInputToApply: sourcecastControlbarHandlers.handleSetInputToApply,\n    handleSetSourcecastDuration: sourcecastControlbarHandlers.handleSetSourcecastDuration,\n    handlePromptAutocomplete: sourcecastControlbarHandlers.handlePromptAutocomplete,\n    duration: playbackDuration\n  };\n  return (\n    <div className={classNames('Sourcereel', Classes.DARK)}>\n      {recordingStatus === RecordingStatus.paused ? (\n        <SourceRecorderControlBar {...sourcecastControlbarProps} />\n      ) : undefined}\n      <Workspace {...workspaceProps} />\n    </div>\n  );\n};\n\nconst INTRODUCTION = 'Welcome to Sourcereel!';\n\nexport default Sourcereel;\n","import { Card, Classes, NonIdealState, Spinner, SpinnerSize } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Navigate, Route, Routes, useNavigate, useParams } from 'react-router';\nimport { Role } from 'src/commons/application/ApplicationTypes';\nimport ResearchAgreementPrompt from 'src/commons/researchAgreementPrompt/ResearchAgreementPrompt';\nimport Constants from 'src/commons/utils/Constants';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport classes from 'src/styles/Academy.module.scss';\n\nimport {\n  fetchNotifications,\n  updateLatestViewedCourse\n} from '../../commons/application/actions/SessionActions';\nimport Assessment from '../../commons/assessment/Assessment';\nimport { assessmentTypeLink } from '../../commons/utils/ParamParseHelper';\nimport { assessmentRegExp, gradingRegExp, numberRegExp } from '../../features/academy/AcademyTypes';\nimport Achievement from '../achievement/Achievement';\nimport NotFound from '../notFound/NotFound';\nimport Sourcecast from '../sourcecast/Sourcecast';\nimport AdminPanel from './adminPanel/AdminPanel';\nimport Dashboard from './dashboard/Dashboard';\nimport Game from './game/Game';\nimport GameSimulator from './gameSimulator/GameSimulator';\nimport Grading from './grading/Grading';\nimport GroundControl from './groundControl/GroundControlContainer';\nimport NotiPreference from './notiPreference/NotiPreference';\nimport Sourcereel from './sourcereel/Sourcereel';\n\nconst Academy: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(fetchNotifications());\n  }, [dispatch]);\n\n  const { agreedToResearch, assessmentConfigurations, enableGame, role } = useSession();\n\n  const staffRoutes =\n    role !== Role.Student\n      ? [\n          <Route path=\"groundcontrol\" element={<GroundControl />} key={0} />,\n          <Route path={`grading/${gradingRegExp}`} element={<Grading />} key={1} />,\n          <Route path=\"sourcereel\" element={<Sourcereel />} key={2} />,\n          <Route path=\"gamesimulator\" element={<GameSimulator />} key={3} />,\n          <Route path=\"dashboard\" element={<Dashboard />} key={4} />\n        ]\n      : null;\n  return (\n    <div className={classes['Academy']}>\n      {/* agreedToResearch has a default value of undefined in the store.\n            It will take on null/true/false when the backend returns. */}\n      {Constants.showResearchPrompt && agreedToResearch === null && <ResearchAgreementPrompt />}\n      <Routes>\n        {assessmentConfigurations?.map(assessmentConfiguration => (\n          <Route\n            path={`${assessmentTypeLink(assessmentConfiguration.type)}/${assessmentRegExp}`}\n            key={assessmentConfiguration.type}\n            element={<Assessment assessmentConfiguration={assessmentConfiguration} />}\n          />\n        ))}\n        {enableGame && <Route path=\"game\" element={<Game />} />}\n        <Route path=\"/notipreference\" element={<NotiPreference />} />\n        <Route path=\"sourcecast/:sourcecastId?\" element={<Sourcecast />} />\n        <Route path=\"achievements/*\" element={<Achievement />} />\n        <Route\n          path=\"\"\n          element={\n            <Navigate\n              replace\n              to={\n                enableGame\n                  ? 'game'\n                  : assessmentConfigurations && assessmentConfigurations.length > 0\n                  ? `${assessmentTypeLink(assessmentConfigurations[0].type)}`\n                  : role === Role.Admin\n                  ? 'adminpanel'\n                  : '/404'\n              }\n            />\n          }\n        />\n        {staffRoutes}\n        {role === Role.Admin && <Route path=\"adminpanel\" element={<AdminPanel />} />}\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </div>\n  );\n};\n\nconst CourseSelectingAcademy: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { courseId } = useSession();\n  const { courseId: routeCourseIdStr } = useParams<{ courseId?: string }>();\n  const routeCourseId = routeCourseIdStr != null ? parseInt(routeCourseIdStr, 10) : undefined;\n\n  React.useEffect(() => {\n    // Regex to handle case where routeCourseIdStr is not a number\n    if (!routeCourseIdStr?.match(numberRegExp)) {\n      return navigate('/');\n    }\n\n    if (routeCourseId !== undefined && !Number.isNaN(routeCourseId) && courseId !== routeCourseId) {\n      dispatch(updateLatestViewedCourse(routeCourseId));\n    }\n  }, [courseId, dispatch, routeCourseId, navigate, routeCourseIdStr]);\n\n  return Number.isNaN(routeCourseId) ? (\n    <Navigate to=\"/\" />\n  ) : routeCourseId === courseId ? (\n    <Academy />\n  ) : (\n    <div className={classNames(classes['Academy-switching-courses'], Classes.DARK)}>\n      <Card className={Classes.ELEVATION_4}>\n        <NonIdealState\n          description=\"Switching courses...\"\n          icon={<Spinner size={SpinnerSize.LARGE} />}\n        />\n      </Card>\n    </div>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = CourseSelectingAcademy;\nComponent.displayName = 'Academy';\n\nexport default CourseSelectingAcademy;\n","import { Classes, NonIdealState } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport React from 'react';\n\nconst NotFound: React.FC = () => (\n  <div className={classNames('NoPage', Classes.DARK)} data-testid=\"NotFound-Component\">\n    <NonIdealState\n      icon={IconNames.ERROR}\n      title=\"404 Not Found\"\n      description=\"The requested resource could not be found\"\n    />\n  </div>\n);\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = NotFound;\nComponent.displayName = 'NotFound';\n\nexport default NotFound;\n","var map = {\n\t\"./_lib/buildFormatLongFn/index.js\": [\n\t\t35063,\n\t\t7\n\t],\n\t\"./_lib/buildLocalizeFn/index.js\": [\n\t\t64028,\n\t\t7\n\t],\n\t\"./_lib/buildMatchFn/index.js\": [\n\t\t27758,\n\t\t7\n\t],\n\t\"./_lib/buildMatchPatternFn/index.js\": [\n\t\t35568,\n\t\t7\n\t],\n\t\"./af/_lib/formatDistance/index.js\": [\n\t\t79254,\n\t\t7,\n\t\t55468\n\t],\n\t\"./af/_lib/formatLong/index.js\": [\n\t\t85475,\n\t\t7,\n\t\t86224\n\t],\n\t\"./af/_lib/formatRelative/index.js\": [\n\t\t20330,\n\t\t7,\n\t\t60458\n\t],\n\t\"./af/_lib/localize/index.js\": [\n\t\t81789,\n\t\t7,\n\t\t49845\n\t],\n\t\"./af/_lib/match/index.js\": [\n\t\t86090,\n\t\t7,\n\t\t14865\n\t],\n\t\"./af/index.js\": [\n\t\t74682,\n\t\t7,\n\t\t72534\n\t],\n\t\"./ar-DZ/_lib/formatDistance/index.js\": [\n\t\t6990,\n\t\t7,\n\t\t59922\n\t],\n\t\"./ar-DZ/_lib/formatLong/index.js\": [\n\t\t16954,\n\t\t7,\n\t\t88932\n\t],\n\t\"./ar-DZ/_lib/formatRelative/index.js\": [\n\t\t72970,\n\t\t7,\n\t\t4080\n\t],\n\t\"./ar-DZ/_lib/localize/index.js\": [\n\t\t63798,\n\t\t7,\n\t\t90938\n\t],\n\t\"./ar-DZ/_lib/match/index.js\": [\n\t\t10138,\n\t\t7,\n\t\t47210\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t80779,\n\t\t7,\n\t\t60617\n\t],\n\t\"./ar-EG/_lib/formatDistance/index.js\": [\n\t\t73466,\n\t\t7,\n\t\t31492\n\t],\n\t\"./ar-EG/_lib/formatLong/index.js\": [\n\t\t45991,\n\t\t7,\n\t\t99338\n\t],\n\t\"./ar-EG/_lib/formatRelative/index.js\": [\n\t\t17217,\n\t\t7,\n\t\t40511\n\t],\n\t\"./ar-EG/_lib/localize/index.js\": [\n\t\t63069,\n\t\t7,\n\t\t67291\n\t],\n\t\"./ar-EG/_lib/match/index.js\": [\n\t\t24402,\n\t\t7,\n\t\t75416\n\t],\n\t\"./ar-EG/index.js\": [\n\t\t47232,\n\t\t7,\n\t\t99193\n\t],\n\t\"./ar-MA/_lib/formatDistance/index.js\": [\n\t\t96655,\n\t\t7,\n\t\t9801\n\t],\n\t\"./ar-MA/_lib/formatLong/index.js\": [\n\t\t22005,\n\t\t7,\n\t\t97562\n\t],\n\t\"./ar-MA/_lib/formatRelative/index.js\": [\n\t\t72523,\n\t\t7,\n\t\t27990\n\t],\n\t\"./ar-MA/_lib/localize/index.js\": [\n\t\t14763,\n\t\t7,\n\t\t50340\n\t],\n\t\"./ar-MA/_lib/match/index.js\": [\n\t\t36505,\n\t\t7,\n\t\t18640\n\t],\n\t\"./ar-MA/index.js\": [\n\t\t99530,\n\t\t7,\n\t\t56907\n\t],\n\t\"./ar-SA/_lib/formatDistance/index.js\": [\n\t\t3448,\n\t\t7,\n\t\t29405\n\t],\n\t\"./ar-SA/_lib/formatLong/index.js\": [\n\t\t14657,\n\t\t7,\n\t\t90667\n\t],\n\t\"./ar-SA/_lib/formatRelative/index.js\": [\n\t\t9619,\n\t\t7,\n\t\t58337\n\t],\n\t\"./ar-SA/_lib/localize/index.js\": [\n\t\t76797,\n\t\t7,\n\t\t89547\n\t],\n\t\"./ar-SA/_lib/match/index.js\": [\n\t\t29468,\n\t\t7,\n\t\t63590\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t6114,\n\t\t7,\n\t\t77188\n\t],\n\t\"./ar-TN/_lib/formatDistance/index.js\": [\n\t\t42307,\n\t\t7,\n\t\t24830\n\t],\n\t\"./ar-TN/_lib/formatLong/index.js\": [\n\t\t91977,\n\t\t7,\n\t\t54698\n\t],\n\t\"./ar-TN/_lib/formatRelative/index.js\": [\n\t\t97942,\n\t\t7,\n\t\t45604\n\t],\n\t\"./ar-TN/_lib/localize/index.js\": [\n\t\t75544,\n\t\t7,\n\t\t90002\n\t],\n\t\"./ar-TN/_lib/match/index.js\": [\n\t\t84213,\n\t\t7,\n\t\t72410\n\t],\n\t\"./ar-TN/index.js\": [\n\t\t93417,\n\t\t7,\n\t\t15569\n\t],\n\t\"./ar/_lib/formatDistance/index.js\": [\n\t\t13099,\n\t\t7,\n\t\t97872\n\t],\n\t\"./ar/_lib/formatLong/index.js\": [\n\t\t52961,\n\t\t7,\n\t\t69357\n\t],\n\t\"./ar/_lib/formatRelative/index.js\": [\n\t\t35938,\n\t\t7,\n\t\t48320\n\t],\n\t\"./ar/_lib/localize/index.js\": [\n\t\t17261,\n\t\t7,\n\t\t18228\n\t],\n\t\"./ar/_lib/match/index.js\": [\n\t\t64239,\n\t\t7,\n\t\t55928\n\t],\n\t\"./ar/index.js\": [\n\t\t74896,\n\t\t7,\n\t\t6083\n\t],\n\t\"./az/_lib/formatDistance/index.js\": [\n\t\t81983,\n\t\t7,\n\t\t47736\n\t],\n\t\"./az/_lib/formatLong/index.js\": [\n\t\t76132,\n\t\t7,\n\t\t76604\n\t],\n\t\"./az/_lib/formatRelative/index.js\": [\n\t\t54692,\n\t\t7,\n\t\t8667\n\t],\n\t\"./az/_lib/localize/index.js\": [\n\t\t27385,\n\t\t7,\n\t\t11652\n\t],\n\t\"./az/_lib/match/index.js\": [\n\t\t44877,\n\t\t7,\n\t\t94954\n\t],\n\t\"./az/index.js\": [\n\t\t95123,\n\t\t7,\n\t\t68349\n\t],\n\t\"./be-tarask/_lib/formatDistance/index.js\": [\n\t\t32822,\n\t\t7,\n\t\t47841\n\t],\n\t\"./be-tarask/_lib/formatLong/index.js\": [\n\t\t52884,\n\t\t7,\n\t\t73055\n\t],\n\t\"./be-tarask/_lib/formatRelative/index.js\": [\n\t\t13681,\n\t\t7,\n\t\t92982,\n\t\t28264\n\t],\n\t\"./be-tarask/_lib/localize/index.js\": [\n\t\t86361,\n\t\t7,\n\t\t94251\n\t],\n\t\"./be-tarask/_lib/match/index.js\": [\n\t\t62030,\n\t\t7,\n\t\t71114\n\t],\n\t\"./be-tarask/index.js\": [\n\t\t83350,\n\t\t7,\n\t\t92982,\n\t\t51156\n\t],\n\t\"./be/_lib/formatDistance/index.js\": [\n\t\t86954,\n\t\t7,\n\t\t560\n\t],\n\t\"./be/_lib/formatLong/index.js\": [\n\t\t67958,\n\t\t7,\n\t\t48012\n\t],\n\t\"./be/_lib/formatRelative/index.js\": [\n\t\t29656,\n\t\t7,\n\t\t92982,\n\t\t36021\n\t],\n\t\"./be/_lib/localize/index.js\": [\n\t\t11947,\n\t\t7,\n\t\t9214\n\t],\n\t\"./be/_lib/match/index.js\": [\n\t\t68127,\n\t\t7,\n\t\t58479\n\t],\n\t\"./be/index.js\": [\n\t\t20379,\n\t\t7,\n\t\t92982,\n\t\t59052\n\t],\n\t\"./bg/_lib/formatDistance/index.js\": [\n\t\t42697,\n\t\t7,\n\t\t28981\n\t],\n\t\"./bg/_lib/formatLong/index.js\": [\n\t\t60725,\n\t\t7,\n\t\t82299\n\t],\n\t\"./bg/_lib/formatRelative/index.js\": [\n\t\t34985,\n\t\t7,\n\t\t6915\n\t],\n\t\"./bg/_lib/localize/index.js\": [\n\t\t14145,\n\t\t7,\n\t\t71431\n\t],\n\t\"./bg/_lib/match/index.js\": [\n\t\t93429,\n\t\t7,\n\t\t37128\n\t],\n\t\"./bg/index.js\": [\n\t\t21614,\n\t\t7,\n\t\t83933\n\t],\n\t\"./bn/_lib/formatDistance/index.js\": [\n\t\t36406,\n\t\t7,\n\t\t54110\n\t],\n\t\"./bn/_lib/formatLong/index.js\": [\n\t\t62226,\n\t\t7,\n\t\t57319\n\t],\n\t\"./bn/_lib/formatRelative/index.js\": [\n\t\t34758,\n\t\t7,\n\t\t313\n\t],\n\t\"./bn/_lib/localize/index.js\": [\n\t\t84834,\n\t\t9,\n\t\t52058\n\t],\n\t\"./bn/_lib/match/index.js\": [\n\t\t61772,\n\t\t7,\n\t\t26018\n\t],\n\t\"./bn/index.js\": [\n\t\t96893,\n\t\t7,\n\t\t62769\n\t],\n\t\"./bs/_lib/formatDistance/index.js\": [\n\t\t93482,\n\t\t7,\n\t\t62477\n\t],\n\t\"./bs/_lib/formatLong/index.js\": [\n\t\t26339,\n\t\t7,\n\t\t25559\n\t],\n\t\"./bs/_lib/formatRelative/index.js\": [\n\t\t85291,\n\t\t7,\n\t\t69810\n\t],\n\t\"./bs/_lib/localize/index.js\": [\n\t\t43818,\n\t\t7,\n\t\t46335\n\t],\n\t\"./bs/_lib/match/index.js\": [\n\t\t63300,\n\t\t7,\n\t\t57210\n\t],\n\t\"./bs/index.js\": [\n\t\t90904,\n\t\t7,\n\t\t24145\n\t],\n\t\"./ca/_lib/formatDistance/index.js\": [\n\t\t23140,\n\t\t7,\n\t\t93414\n\t],\n\t\"./ca/_lib/formatLong/index.js\": [\n\t\t3319,\n\t\t7,\n\t\t77285\n\t],\n\t\"./ca/_lib/formatRelative/index.js\": [\n\t\t45357,\n\t\t7,\n\t\t30639\n\t],\n\t\"./ca/_lib/localize/index.js\": [\n\t\t14583,\n\t\t7,\n\t\t98371\n\t],\n\t\"./ca/_lib/match/index.js\": [\n\t\t21179,\n\t\t7,\n\t\t24113\n\t],\n\t\"./ca/index.js\": [\n\t\t52606,\n\t\t7,\n\t\t16409\n\t],\n\t\"./cs/_lib/formatDistance/index.js\": [\n\t\t8066,\n\t\t7,\n\t\t76326\n\t],\n\t\"./cs/_lib/formatLong/index.js\": [\n\t\t15081,\n\t\t7,\n\t\t45022\n\t],\n\t\"./cs/_lib/formatRelative/index.js\": [\n\t\t90226,\n\t\t7,\n\t\t25526\n\t],\n\t\"./cs/_lib/localize/index.js\": [\n\t\t86109,\n\t\t7,\n\t\t19025\n\t],\n\t\"./cs/_lib/match/index.js\": [\n\t\t1708,\n\t\t7,\n\t\t31458\n\t],\n\t\"./cs/index.js\": [\n\t\t95726,\n\t\t7,\n\t\t15040\n\t],\n\t\"./cy/_lib/formatDistance/index.js\": [\n\t\t21612,\n\t\t7,\n\t\t78248\n\t],\n\t\"./cy/_lib/formatLong/index.js\": [\n\t\t76573,\n\t\t7,\n\t\t65416\n\t],\n\t\"./cy/_lib/formatRelative/index.js\": [\n\t\t33912,\n\t\t7,\n\t\t21454\n\t],\n\t\"./cy/_lib/localize/index.js\": [\n\t\t25269,\n\t\t7,\n\t\t43325\n\t],\n\t\"./cy/_lib/match/index.js\": [\n\t\t48867,\n\t\t7,\n\t\t46328\n\t],\n\t\"./cy/index.js\": [\n\t\t97792,\n\t\t7,\n\t\t87605\n\t],\n\t\"./da/_lib/formatDistance/index.js\": [\n\t\t20666,\n\t\t7,\n\t\t77466\n\t],\n\t\"./da/_lib/formatLong/index.js\": [\n\t\t82112,\n\t\t7,\n\t\t54307\n\t],\n\t\"./da/_lib/formatRelative/index.js\": [\n\t\t22130,\n\t\t7,\n\t\t54897\n\t],\n\t\"./da/_lib/localize/index.js\": [\n\t\t94541,\n\t\t7,\n\t\t70679\n\t],\n\t\"./da/_lib/match/index.js\": [\n\t\t91735,\n\t\t7,\n\t\t4794\n\t],\n\t\"./da/index.js\": [\n\t\t22616,\n\t\t7,\n\t\t88650\n\t],\n\t\"./de-AT/_lib/localize/index.js\": [\n\t\t6037,\n\t\t7,\n\t\t92708\n\t],\n\t\"./de-AT/index.js\": [\n\t\t15219,\n\t\t7,\n\t\t11133\n\t],\n\t\"./de/_lib/formatDistance/index.js\": [\n\t\t68802,\n\t\t7,\n\t\t50816\n\t],\n\t\"./de/_lib/formatLong/index.js\": [\n\t\t55867,\n\t\t7,\n\t\t9710\n\t],\n\t\"./de/_lib/formatRelative/index.js\": [\n\t\t91068,\n\t\t7,\n\t\t85754\n\t],\n\t\"./de/_lib/localize/index.js\": [\n\t\t51573,\n\t\t7,\n\t\t25325\n\t],\n\t\"./de/_lib/match/index.js\": [\n\t\t40252,\n\t\t7,\n\t\t46081\n\t],\n\t\"./de/index.js\": [\n\t\t15407,\n\t\t7,\n\t\t21773\n\t],\n\t\"./el/_lib/formatDistance/index.js\": [\n\t\t50002,\n\t\t7,\n\t\t88466\n\t],\n\t\"./el/_lib/formatLong/index.js\": [\n\t\t84909,\n\t\t7,\n\t\t67992\n\t],\n\t\"./el/_lib/formatRelative/index.js\": [\n\t\t54652,\n\t\t7,\n\t\t95695\n\t],\n\t\"./el/_lib/localize/index.js\": [\n\t\t25015,\n\t\t7,\n\t\t59315\n\t],\n\t\"./el/_lib/match/index.js\": [\n\t\t51903,\n\t\t7,\n\t\t60526\n\t],\n\t\"./el/index.js\": [\n\t\t66986,\n\t\t7,\n\t\t52025\n\t],\n\t\"./en-AU/_lib/formatLong/index.js\": [\n\t\t59195,\n\t\t7,\n\t\t5474\n\t],\n\t\"./en-AU/index.js\": [\n\t\t70238,\n\t\t7,\n\t\t75811\n\t],\n\t\"./en-CA/_lib/formatDistance/index.js\": [\n\t\t98499,\n\t\t7,\n\t\t95951\n\t],\n\t\"./en-CA/_lib/formatLong/index.js\": [\n\t\t76072,\n\t\t7,\n\t\t45074\n\t],\n\t\"./en-CA/index.js\": [\n\t\t52326,\n\t\t7,\n\t\t64368\n\t],\n\t\"./en-GB/_lib/formatLong/index.js\": [\n\t\t37679,\n\t\t7,\n\t\t81834\n\t],\n\t\"./en-GB/index.js\": [\n\t\t97302,\n\t\t7,\n\t\t58912\n\t],\n\t\"./en-IE/index.js\": [\n\t\t38059,\n\t\t7,\n\t\t41432\n\t],\n\t\"./en-IN/_lib/formatLong/index.js\": [\n\t\t35759,\n\t\t7,\n\t\t56071\n\t],\n\t\"./en-IN/index.js\": [\n\t\t2392,\n\t\t7,\n\t\t72062\n\t],\n\t\"./en-NZ/_lib/formatLong/index.js\": [\n\t\t79607,\n\t\t7,\n\t\t7882\n\t],\n\t\"./en-NZ/index.js\": [\n\t\t23893,\n\t\t7,\n\t\t84898\n\t],\n\t\"./en-US/_lib/formatDistance/index.js\": [\n\t\t42682,\n\t\t7\n\t],\n\t\"./en-US/_lib/formatLong/index.js\": [\n\t\t12128,\n\t\t7\n\t],\n\t\"./en-US/_lib/formatRelative/index.js\": [\n\t\t62118,\n\t\t7\n\t],\n\t\"./en-US/_lib/localize/index.js\": [\n\t\t58336,\n\t\t7\n\t],\n\t\"./en-US/_lib/match/index.js\": [\n\t\t38787,\n\t\t7\n\t],\n\t\"./en-US/index.js\": [\n\t\t30609,\n\t\t7\n\t],\n\t\"./en-ZA/_lib/formatLong/index.js\": [\n\t\t54168,\n\t\t7,\n\t\t74430\n\t],\n\t\"./en-ZA/index.js\": [\n\t\t80583,\n\t\t7,\n\t\t80963\n\t],\n\t\"./eo/_lib/formatDistance/index.js\": [\n\t\t52352,\n\t\t7,\n\t\t38747\n\t],\n\t\"./eo/_lib/formatLong/index.js\": [\n\t\t40575,\n\t\t7,\n\t\t88689\n\t],\n\t\"./eo/_lib/formatRelative/index.js\": [\n\t\t34310,\n\t\t7,\n\t\t4335\n\t],\n\t\"./eo/_lib/localize/index.js\": [\n\t\t28386,\n\t\t7,\n\t\t87263\n\t],\n\t\"./eo/_lib/match/index.js\": [\n\t\t56126,\n\t\t7,\n\t\t18376\n\t],\n\t\"./eo/index.js\": [\n\t\t56546,\n\t\t7,\n\t\t75454\n\t],\n\t\"./es/_lib/formatDistance/index.js\": [\n\t\t25247,\n\t\t7,\n\t\t31643\n\t],\n\t\"./es/_lib/formatLong/index.js\": [\n\t\t58953,\n\t\t7,\n\t\t38879\n\t],\n\t\"./es/_lib/formatRelative/index.js\": [\n\t\t78293,\n\t\t7,\n\t\t73288\n\t],\n\t\"./es/_lib/localize/index.js\": [\n\t\t4291,\n\t\t7,\n\t\t37098\n\t],\n\t\"./es/_lib/match/index.js\": [\n\t\t87878,\n\t\t7,\n\t\t3409\n\t],\n\t\"./es/index.js\": [\n\t\t1259,\n\t\t7,\n\t\t91402\n\t],\n\t\"./et/_lib/formatDistance/index.js\": [\n\t\t36243,\n\t\t7,\n\t\t83368\n\t],\n\t\"./et/_lib/formatLong/index.js\": [\n\t\t58209,\n\t\t7,\n\t\t50689\n\t],\n\t\"./et/_lib/formatRelative/index.js\": [\n\t\t13585,\n\t\t7,\n\t\t80617\n\t],\n\t\"./et/_lib/localize/index.js\": [\n\t\t48308,\n\t\t7,\n\t\t92793\n\t],\n\t\"./et/_lib/match/index.js\": [\n\t\t70620,\n\t\t7,\n\t\t62752\n\t],\n\t\"./et/index.js\": [\n\t\t22052,\n\t\t7,\n\t\t96700\n\t],\n\t\"./eu/_lib/formatDistance/index.js\": [\n\t\t68789,\n\t\t7,\n\t\t39161\n\t],\n\t\"./eu/_lib/formatLong/index.js\": [\n\t\t9410,\n\t\t7,\n\t\t4082\n\t],\n\t\"./eu/_lib/formatRelative/index.js\": [\n\t\t24774,\n\t\t7,\n\t\t39523\n\t],\n\t\"./eu/_lib/localize/index.js\": [\n\t\t43010,\n\t\t7,\n\t\t29884\n\t],\n\t\"./eu/_lib/match/index.js\": [\n\t\t46965,\n\t\t7,\n\t\t28991\n\t],\n\t\"./eu/index.js\": [\n\t\t48734,\n\t\t7,\n\t\t75916\n\t],\n\t\"./fa-IR/_lib/formatDistance/index.js\": [\n\t\t48073,\n\t\t7,\n\t\t41807\n\t],\n\t\"./fa-IR/_lib/formatLong/index.js\": [\n\t\t98718,\n\t\t7,\n\t\t16783\n\t],\n\t\"./fa-IR/_lib/formatRelative/index.js\": [\n\t\t8536,\n\t\t7,\n\t\t36202\n\t],\n\t\"./fa-IR/_lib/localize/index.js\": [\n\t\t65444,\n\t\t7,\n\t\t42225\n\t],\n\t\"./fa-IR/_lib/match/index.js\": [\n\t\t32764,\n\t\t7,\n\t\t17573\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t17432,\n\t\t7,\n\t\t47443\n\t],\n\t\"./fi/_lib/formatDistance/index.js\": [\n\t\t26136,\n\t\t7,\n\t\t97374\n\t],\n\t\"./fi/_lib/formatLong/index.js\": [\n\t\t20173,\n\t\t7,\n\t\t14063\n\t],\n\t\"./fi/_lib/formatRelative/index.js\": [\n\t\t9370,\n\t\t7,\n\t\t11908\n\t],\n\t\"./fi/_lib/localize/index.js\": [\n\t\t42885,\n\t\t7,\n\t\t53454\n\t],\n\t\"./fi/_lib/match/index.js\": [\n\t\t85266,\n\t\t7,\n\t\t700\n\t],\n\t\"./fi/index.js\": [\n\t\t80925,\n\t\t7,\n\t\t5997\n\t],\n\t\"./fr-CA/_lib/formatLong/index.js\": [\n\t\t11565,\n\t\t7,\n\t\t5517\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t26364,\n\t\t7,\n\t\t6470\n\t],\n\t\"./fr-CH/_lib/formatLong/index.js\": [\n\t\t73291,\n\t\t7,\n\t\t46329\n\t],\n\t\"./fr-CH/_lib/formatRelative/index.js\": [\n\t\t4349,\n\t\t7,\n\t\t42728\n\t],\n\t\"./fr-CH/index.js\": [\n\t\t96546,\n\t\t7,\n\t\t82609\n\t],\n\t\"./fr/_lib/formatDistance/index.js\": [\n\t\t92366,\n\t\t7,\n\t\t92707\n\t],\n\t\"./fr/_lib/formatLong/index.js\": [\n\t\t85358,\n\t\t7,\n\t\t61772\n\t],\n\t\"./fr/_lib/formatRelative/index.js\": [\n\t\t31479,\n\t\t7,\n\t\t25580\n\t],\n\t\"./fr/_lib/localize/index.js\": [\n\t\t77030,\n\t\t7,\n\t\t59770\n\t],\n\t\"./fr/_lib/match/index.js\": [\n\t\t19104,\n\t\t7,\n\t\t49930\n\t],\n\t\"./fr/index.js\": [\n\t\t31790,\n\t\t7,\n\t\t2389\n\t],\n\t\"./fy/_lib/formatDistance/index.js\": [\n\t\t65058,\n\t\t7,\n\t\t9247\n\t],\n\t\"./fy/_lib/formatLong/index.js\": [\n\t\t81256,\n\t\t7,\n\t\t34583\n\t],\n\t\"./fy/_lib/formatRelative/index.js\": [\n\t\t94526,\n\t\t7,\n\t\t53786\n\t],\n\t\"./fy/_lib/localize/index.js\": [\n\t\t38309,\n\t\t7,\n\t\t89670\n\t],\n\t\"./fy/_lib/match/index.js\": [\n\t\t62638,\n\t\t7,\n\t\t51613\n\t],\n\t\"./fy/index.js\": [\n\t\t2617,\n\t\t7,\n\t\t37404\n\t],\n\t\"./gd/_lib/formatDistance/index.js\": [\n\t\t63931,\n\t\t7,\n\t\t8926\n\t],\n\t\"./gd/_lib/formatLong/index.js\": [\n\t\t61123,\n\t\t7,\n\t\t32641\n\t],\n\t\"./gd/_lib/formatRelative/index.js\": [\n\t\t86033,\n\t\t7,\n\t\t76084\n\t],\n\t\"./gd/_lib/localize/index.js\": [\n\t\t3863,\n\t\t7,\n\t\t18386\n\t],\n\t\"./gd/_lib/match/index.js\": [\n\t\t91534,\n\t\t7,\n\t\t34192\n\t],\n\t\"./gd/index.js\": [\n\t\t56382,\n\t\t7,\n\t\t57109\n\t],\n\t\"./gl/_lib/formatDistance/index.js\": [\n\t\t1049,\n\t\t7,\n\t\t9620\n\t],\n\t\"./gl/_lib/formatLong/index.js\": [\n\t\t51759,\n\t\t7,\n\t\t29533\n\t],\n\t\"./gl/_lib/formatRelative/index.js\": [\n\t\t25849,\n\t\t7,\n\t\t45010\n\t],\n\t\"./gl/_lib/localize/index.js\": [\n\t\t70892,\n\t\t7,\n\t\t9468\n\t],\n\t\"./gl/_lib/match/index.js\": [\n\t\t20368,\n\t\t7,\n\t\t96119\n\t],\n\t\"./gl/index.js\": [\n\t\t83103,\n\t\t7,\n\t\t66539\n\t],\n\t\"./gu/_lib/formatDistance/index.js\": [\n\t\t70869,\n\t\t7,\n\t\t7606\n\t],\n\t\"./gu/_lib/formatLong/index.js\": [\n\t\t70816,\n\t\t7,\n\t\t21603\n\t],\n\t\"./gu/_lib/formatRelative/index.js\": [\n\t\t63403,\n\t\t7,\n\t\t10399\n\t],\n\t\"./gu/_lib/localize/index.js\": [\n\t\t30412,\n\t\t7,\n\t\t26640\n\t],\n\t\"./gu/_lib/match/index.js\": [\n\t\t27840,\n\t\t7,\n\t\t96605\n\t],\n\t\"./gu/index.js\": [\n\t\t99567,\n\t\t7,\n\t\t11455\n\t],\n\t\"./he/_lib/formatDistance/index.js\": [\n\t\t40776,\n\t\t7,\n\t\t44388\n\t],\n\t\"./he/_lib/formatLong/index.js\": [\n\t\t18818,\n\t\t7,\n\t\t70481\n\t],\n\t\"./he/_lib/formatRelative/index.js\": [\n\t\t39560,\n\t\t7,\n\t\t87860\n\t],\n\t\"./he/_lib/localize/index.js\": [\n\t\t7114,\n\t\t7,\n\t\t17819\n\t],\n\t\"./he/_lib/match/index.js\": [\n\t\t31124,\n\t\t7,\n\t\t8314\n\t],\n\t\"./he/index.js\": [\n\t\t89661,\n\t\t7,\n\t\t66936\n\t],\n\t\"./hi/_lib/formatDistance/index.js\": [\n\t\t10454,\n\t\t7,\n\t\t38750\n\t],\n\t\"./hi/_lib/formatLong/index.js\": [\n\t\t22003,\n\t\t7,\n\t\t23601\n\t],\n\t\"./hi/_lib/formatRelative/index.js\": [\n\t\t91283,\n\t\t7,\n\t\t72739\n\t],\n\t\"./hi/_lib/localize/index.js\": [\n\t\t49277,\n\t\t9,\n\t\t43959\n\t],\n\t\"./hi/_lib/match/index.js\": [\n\t\t2541,\n\t\t7,\n\t\t64813\n\t],\n\t\"./hi/index.js\": [\n\t\t35598,\n\t\t7,\n\t\t39184\n\t],\n\t\"./hr/_lib/formatDistance/index.js\": [\n\t\t94187,\n\t\t7,\n\t\t87513\n\t],\n\t\"./hr/_lib/formatLong/index.js\": [\n\t\t62308,\n\t\t7,\n\t\t11893\n\t],\n\t\"./hr/_lib/formatRelative/index.js\": [\n\t\t44347,\n\t\t7,\n\t\t64858\n\t],\n\t\"./hr/_lib/localize/index.js\": [\n\t\t83615,\n\t\t7,\n\t\t93592\n\t],\n\t\"./hr/_lib/match/index.js\": [\n\t\t48424,\n\t\t7,\n\t\t57706\n\t],\n\t\"./hr/index.js\": [\n\t\t36774,\n\t\t7,\n\t\t23666\n\t],\n\t\"./ht/_lib/formatDistance/index.js\": [\n\t\t54108,\n\t\t7,\n\t\t35018\n\t],\n\t\"./ht/_lib/formatLong/index.js\": [\n\t\t4904,\n\t\t7,\n\t\t99887\n\t],\n\t\"./ht/_lib/formatRelative/index.js\": [\n\t\t25671,\n\t\t7,\n\t\t96455\n\t],\n\t\"./ht/_lib/localize/index.js\": [\n\t\t87087,\n\t\t7,\n\t\t68778\n\t],\n\t\"./ht/_lib/match/index.js\": [\n\t\t59806,\n\t\t7,\n\t\t78394\n\t],\n\t\"./ht/index.js\": [\n\t\t77243,\n\t\t7,\n\t\t94989\n\t],\n\t\"./hu/_lib/formatDistance/index.js\": [\n\t\t1021,\n\t\t7,\n\t\t65563\n\t],\n\t\"./hu/_lib/formatLong/index.js\": [\n\t\t46699,\n\t\t7,\n\t\t33212\n\t],\n\t\"./hu/_lib/formatRelative/index.js\": [\n\t\t67163,\n\t\t7,\n\t\t38217\n\t],\n\t\"./hu/_lib/localize/index.js\": [\n\t\t68367,\n\t\t7,\n\t\t82129\n\t],\n\t\"./hu/_lib/match/index.js\": [\n\t\t87475,\n\t\t7,\n\t\t39375\n\t],\n\t\"./hu/index.js\": [\n\t\t94101,\n\t\t7,\n\t\t6504\n\t],\n\t\"./hy/_lib/formatDistance/index.js\": [\n\t\t70470,\n\t\t7,\n\t\t9446\n\t],\n\t\"./hy/_lib/formatLong/index.js\": [\n\t\t11645,\n\t\t7,\n\t\t89046\n\t],\n\t\"./hy/_lib/formatRelative/index.js\": [\n\t\t32147,\n\t\t7,\n\t\t25038\n\t],\n\t\"./hy/_lib/localize/index.js\": [\n\t\t38937,\n\t\t7,\n\t\t28328\n\t],\n\t\"./hy/_lib/match/index.js\": [\n\t\t2032,\n\t\t7,\n\t\t8591\n\t],\n\t\"./hy/index.js\": [\n\t\t64085,\n\t\t7,\n\t\t17822\n\t],\n\t\"./id/_lib/formatDistance/index.js\": [\n\t\t91545,\n\t\t7,\n\t\t90243\n\t],\n\t\"./id/_lib/formatLong/index.js\": [\n\t\t28124,\n\t\t7,\n\t\t50599\n\t],\n\t\"./id/_lib/formatRelative/index.js\": [\n\t\t64066,\n\t\t7,\n\t\t80680\n\t],\n\t\"./id/_lib/localize/index.js\": [\n\t\t54159,\n\t\t7,\n\t\t50417\n\t],\n\t\"./id/_lib/match/index.js\": [\n\t\t93031,\n\t\t7,\n\t\t50931\n\t],\n\t\"./id/index.js\": [\n\t\t54473,\n\t\t7,\n\t\t35820\n\t],\n\t\"./is/_lib/formatDistance/index.js\": [\n\t\t63213,\n\t\t7,\n\t\t32680\n\t],\n\t\"./is/_lib/formatLong/index.js\": [\n\t\t91517,\n\t\t7,\n\t\t31131\n\t],\n\t\"./is/_lib/formatRelative/index.js\": [\n\t\t85145,\n\t\t7,\n\t\t91658\n\t],\n\t\"./is/_lib/localize/index.js\": [\n\t\t50456,\n\t\t7,\n\t\t81017\n\t],\n\t\"./is/_lib/match/index.js\": [\n\t\t83813,\n\t\t7,\n\t\t26574\n\t],\n\t\"./is/index.js\": [\n\t\t69787,\n\t\t7,\n\t\t68003\n\t],\n\t\"./it-CH/_lib/formatLong/index.js\": [\n\t\t4879,\n\t\t7,\n\t\t76709\n\t],\n\t\"./it-CH/index.js\": [\n\t\t56374,\n\t\t7,\n\t\t74061\n\t],\n\t\"./it/_lib/formatDistance/index.js\": [\n\t\t65014,\n\t\t7,\n\t\t84519\n\t],\n\t\"./it/_lib/formatLong/index.js\": [\n\t\t46843,\n\t\t7,\n\t\t30799\n\t],\n\t\"./it/_lib/formatRelative/index.js\": [\n\t\t54325,\n\t\t7,\n\t\t48433\n\t],\n\t\"./it/_lib/localize/index.js\": [\n\t\t95652,\n\t\t7,\n\t\t32126\n\t],\n\t\"./it/_lib/match/index.js\": [\n\t\t4476,\n\t\t7,\n\t\t9267\n\t],\n\t\"./it/index.js\": [\n\t\t70556,\n\t\t7,\n\t\t36936\n\t],\n\t\"./ja-Hira/_lib/formatDistance/index.js\": [\n\t\t71939,\n\t\t7,\n\t\t46608\n\t],\n\t\"./ja-Hira/_lib/formatLong/index.js\": [\n\t\t3497,\n\t\t7,\n\t\t21308\n\t],\n\t\"./ja-Hira/_lib/formatRelative/index.js\": [\n\t\t98957,\n\t\t7,\n\t\t25551\n\t],\n\t\"./ja-Hira/_lib/localize/index.js\": [\n\t\t49519,\n\t\t7,\n\t\t79733\n\t],\n\t\"./ja-Hira/_lib/match/index.js\": [\n\t\t47758,\n\t\t7,\n\t\t13831\n\t],\n\t\"./ja-Hira/index.js\": [\n\t\t84460,\n\t\t7,\n\t\t44331\n\t],\n\t\"./ja/_lib/formatDistance/index.js\": [\n\t\t75639,\n\t\t7,\n\t\t31221\n\t],\n\t\"./ja/_lib/formatLong/index.js\": [\n\t\t89790,\n\t\t7,\n\t\t28725\n\t],\n\t\"./ja/_lib/formatRelative/index.js\": [\n\t\t22015,\n\t\t7,\n\t\t2370\n\t],\n\t\"./ja/_lib/localize/index.js\": [\n\t\t85448,\n\t\t7,\n\t\t71469\n\t],\n\t\"./ja/_lib/match/index.js\": [\n\t\t91809,\n\t\t7,\n\t\t84248\n\t],\n\t\"./ja/index.js\": [\n\t\t88116,\n\t\t7,\n\t\t70789\n\t],\n\t\"./ka/_lib/formatDistance/index.js\": [\n\t\t35693,\n\t\t7,\n\t\t27282\n\t],\n\t\"./ka/_lib/formatLong/index.js\": [\n\t\t51422,\n\t\t7,\n\t\t39040\n\t],\n\t\"./ka/_lib/formatRelative/index.js\": [\n\t\t334,\n\t\t7,\n\t\t83665\n\t],\n\t\"./ka/_lib/localize/index.js\": [\n\t\t52430,\n\t\t7,\n\t\t72240\n\t],\n\t\"./ka/_lib/match/index.js\": [\n\t\t98566,\n\t\t7,\n\t\t95796\n\t],\n\t\"./ka/index.js\": [\n\t\t32436,\n\t\t7,\n\t\t90666\n\t],\n\t\"./kk/_lib/formatDistance/index.js\": [\n\t\t67695,\n\t\t7,\n\t\t48801\n\t],\n\t\"./kk/_lib/formatLong/index.js\": [\n\t\t39911,\n\t\t7,\n\t\t35597\n\t],\n\t\"./kk/_lib/formatRelative/index.js\": [\n\t\t9922,\n\t\t7,\n\t\t54223\n\t],\n\t\"./kk/_lib/localize/index.js\": [\n\t\t94718,\n\t\t7,\n\t\t50219\n\t],\n\t\"./kk/_lib/match/index.js\": [\n\t\t88699,\n\t\t7,\n\t\t45502\n\t],\n\t\"./kk/index.js\": [\n\t\t70905,\n\t\t7,\n\t\t29546\n\t],\n\t\"./km/_lib/formatDistance/index.js\": [\n\t\t76236,\n\t\t7,\n\t\t34329\n\t],\n\t\"./km/_lib/formatLong/index.js\": [\n\t\t76650,\n\t\t7,\n\t\t58860\n\t],\n\t\"./km/_lib/formatRelative/index.js\": [\n\t\t32704,\n\t\t7,\n\t\t39538\n\t],\n\t\"./km/_lib/localize/index.js\": [\n\t\t24551,\n\t\t7,\n\t\t27591\n\t],\n\t\"./km/_lib/match/index.js\": [\n\t\t50670,\n\t\t7,\n\t\t92973\n\t],\n\t\"./km/index.js\": [\n\t\t85122,\n\t\t7,\n\t\t13054\n\t],\n\t\"./kn/_lib/formatDistance/index.js\": [\n\t\t27828,\n\t\t7,\n\t\t43433\n\t],\n\t\"./kn/_lib/formatLong/index.js\": [\n\t\t40170,\n\t\t7,\n\t\t24951\n\t],\n\t\"./kn/_lib/formatRelative/index.js\": [\n\t\t7635,\n\t\t7,\n\t\t45549\n\t],\n\t\"./kn/_lib/localize/index.js\": [\n\t\t41348,\n\t\t7,\n\t\t7185\n\t],\n\t\"./kn/_lib/match/index.js\": [\n\t\t94938,\n\t\t7,\n\t\t79619\n\t],\n\t\"./kn/index.js\": [\n\t\t23479,\n\t\t7,\n\t\t67650\n\t],\n\t\"./ko/_lib/formatDistance/index.js\": [\n\t\t2071,\n\t\t7,\n\t\t59778\n\t],\n\t\"./ko/_lib/formatLong/index.js\": [\n\t\t11961,\n\t\t7,\n\t\t46717\n\t],\n\t\"./ko/_lib/formatRelative/index.js\": [\n\t\t96114,\n\t\t7,\n\t\t97722\n\t],\n\t\"./ko/_lib/localize/index.js\": [\n\t\t14199,\n\t\t7,\n\t\t798\n\t],\n\t\"./ko/_lib/match/index.js\": [\n\t\t50238,\n\t\t7,\n\t\t55675\n\t],\n\t\"./ko/index.js\": [\n\t\t51772,\n\t\t7,\n\t\t24152\n\t],\n\t\"./lb/_lib/formatDistance/index.js\": [\n\t\t10678,\n\t\t7,\n\t\t51443\n\t],\n\t\"./lb/_lib/formatLong/index.js\": [\n\t\t45595,\n\t\t7,\n\t\t96965\n\t],\n\t\"./lb/_lib/formatRelative/index.js\": [\n\t\t61633,\n\t\t7,\n\t\t4274\n\t],\n\t\"./lb/_lib/localize/index.js\": [\n\t\t31048,\n\t\t7,\n\t\t83038\n\t],\n\t\"./lb/_lib/match/index.js\": [\n\t\t24028,\n\t\t7,\n\t\t32216\n\t],\n\t\"./lb/index.js\": [\n\t\t71555,\n\t\t7,\n\t\t75131\n\t],\n\t\"./lt/_lib/formatDistance/index.js\": [\n\t\t81410,\n\t\t7,\n\t\t46100\n\t],\n\t\"./lt/_lib/formatLong/index.js\": [\n\t\t68306,\n\t\t7,\n\t\t66863\n\t],\n\t\"./lt/_lib/formatRelative/index.js\": [\n\t\t42974,\n\t\t7,\n\t\t62915\n\t],\n\t\"./lt/_lib/localize/index.js\": [\n\t\t46622,\n\t\t7,\n\t\t22302\n\t],\n\t\"./lt/_lib/match/index.js\": [\n\t\t4854,\n\t\t7,\n\t\t7547\n\t],\n\t\"./lt/index.js\": [\n\t\t54677,\n\t\t7,\n\t\t60804\n\t],\n\t\"./lv/_lib/formatDistance/index.js\": [\n\t\t39377,\n\t\t7,\n\t\t14181\n\t],\n\t\"./lv/_lib/formatLong/index.js\": [\n\t\t86766,\n\t\t7,\n\t\t48246\n\t],\n\t\"./lv/_lib/formatRelative/index.js\": [\n\t\t13829,\n\t\t7,\n\t\t38189\n\t],\n\t\"./lv/_lib/localize/index.js\": [\n\t\t12325,\n\t\t7,\n\t\t88738\n\t],\n\t\"./lv/_lib/match/index.js\": [\n\t\t91408,\n\t\t7,\n\t\t91217\n\t],\n\t\"./lv/index.js\": [\n\t\t30037,\n\t\t7,\n\t\t18688\n\t],\n\t\"./mk/_lib/formatDistance/index.js\": [\n\t\t9695,\n\t\t7,\n\t\t33921\n\t],\n\t\"./mk/_lib/formatLong/index.js\": [\n\t\t55109,\n\t\t7,\n\t\t8298\n\t],\n\t\"./mk/_lib/formatRelative/index.js\": [\n\t\t80269,\n\t\t7,\n\t\t36078\n\t],\n\t\"./mk/_lib/localize/index.js\": [\n\t\t11003,\n\t\t7,\n\t\t18711\n\t],\n\t\"./mk/_lib/match/index.js\": [\n\t\t16739,\n\t\t7,\n\t\t13787\n\t],\n\t\"./mk/index.js\": [\n\t\t76751,\n\t\t7,\n\t\t52946\n\t],\n\t\"./mn/_lib/formatDistance/index.js\": [\n\t\t87153,\n\t\t7,\n\t\t82285\n\t],\n\t\"./mn/_lib/formatLong/index.js\": [\n\t\t92492,\n\t\t7,\n\t\t72884\n\t],\n\t\"./mn/_lib/formatRelative/index.js\": [\n\t\t41942,\n\t\t7,\n\t\t18585\n\t],\n\t\"./mn/_lib/localize/index.js\": [\n\t\t67271,\n\t\t7,\n\t\t2572\n\t],\n\t\"./mn/_lib/match/index.js\": [\n\t\t25054,\n\t\t7,\n\t\t18115\n\t],\n\t\"./mn/index.js\": [\n\t\t37157,\n\t\t7,\n\t\t76602\n\t],\n\t\"./ms/_lib/formatDistance/index.js\": [\n\t\t98580,\n\t\t7,\n\t\t27543\n\t],\n\t\"./ms/_lib/formatLong/index.js\": [\n\t\t89720,\n\t\t7,\n\t\t85408\n\t],\n\t\"./ms/_lib/formatRelative/index.js\": [\n\t\t48497,\n\t\t7,\n\t\t16625\n\t],\n\t\"./ms/_lib/localize/index.js\": [\n\t\t31269,\n\t\t7,\n\t\t67136\n\t],\n\t\"./ms/_lib/match/index.js\": [\n\t\t9733,\n\t\t7,\n\t\t99924\n\t],\n\t\"./ms/index.js\": [\n\t\t44344,\n\t\t7,\n\t\t68976\n\t],\n\t\"./mt/_lib/formatDistance/index.js\": [\n\t\t9705,\n\t\t7,\n\t\t42560\n\t],\n\t\"./mt/_lib/formatLong/index.js\": [\n\t\t19486,\n\t\t7,\n\t\t35672\n\t],\n\t\"./mt/_lib/formatRelative/index.js\": [\n\t\t12174,\n\t\t7,\n\t\t84940\n\t],\n\t\"./mt/_lib/localize/index.js\": [\n\t\t87084,\n\t\t7,\n\t\t53817\n\t],\n\t\"./mt/_lib/match/index.js\": [\n\t\t51962,\n\t\t7,\n\t\t84164\n\t],\n\t\"./mt/index.js\": [\n\t\t23257,\n\t\t7,\n\t\t80817\n\t],\n\t\"./nb/_lib/formatDistance/index.js\": [\n\t\t18326,\n\t\t7,\n\t\t4668\n\t],\n\t\"./nb/_lib/formatLong/index.js\": [\n\t\t58974,\n\t\t7,\n\t\t63081\n\t],\n\t\"./nb/_lib/formatRelative/index.js\": [\n\t\t81015,\n\t\t7,\n\t\t52266\n\t],\n\t\"./nb/_lib/localize/index.js\": [\n\t\t35609,\n\t\t7,\n\t\t5441\n\t],\n\t\"./nb/_lib/match/index.js\": [\n\t\t35402,\n\t\t7,\n\t\t7850\n\t],\n\t\"./nb/index.js\": [\n\t\t52545,\n\t\t7,\n\t\t1202\n\t],\n\t\"./nl-BE/_lib/formatDistance/index.js\": [\n\t\t74702,\n\t\t7,\n\t\t19455\n\t],\n\t\"./nl-BE/_lib/formatLong/index.js\": [\n\t\t31302,\n\t\t7,\n\t\t14950\n\t],\n\t\"./nl-BE/_lib/formatRelative/index.js\": [\n\t\t81309,\n\t\t7,\n\t\t13183\n\t],\n\t\"./nl-BE/_lib/localize/index.js\": [\n\t\t81324,\n\t\t7,\n\t\t78650\n\t],\n\t\"./nl-BE/_lib/match/index.js\": [\n\t\t58819,\n\t\t7,\n\t\t59900\n\t],\n\t\"./nl-BE/index.js\": [\n\t\t94289,\n\t\t7,\n\t\t94935\n\t],\n\t\"./nl/_lib/formatDistance/index.js\": [\n\t\t40289,\n\t\t7,\n\t\t15907\n\t],\n\t\"./nl/_lib/formatLong/index.js\": [\n\t\t71584,\n\t\t7,\n\t\t56985\n\t],\n\t\"./nl/_lib/formatRelative/index.js\": [\n\t\t22832,\n\t\t7,\n\t\t53099\n\t],\n\t\"./nl/_lib/localize/index.js\": [\n\t\t80518,\n\t\t7,\n\t\t44668\n\t],\n\t\"./nl/_lib/match/index.js\": [\n\t\t86341,\n\t\t7,\n\t\t32713\n\t],\n\t\"./nl/index.js\": [\n\t\t47650,\n\t\t7,\n\t\t93921\n\t],\n\t\"./nn/_lib/formatDistance/index.js\": [\n\t\t49215,\n\t\t7,\n\t\t22265\n\t],\n\t\"./nn/_lib/formatLong/index.js\": [\n\t\t56789,\n\t\t7,\n\t\t54522\n\t],\n\t\"./nn/_lib/formatRelative/index.js\": [\n\t\t53552,\n\t\t7,\n\t\t84390\n\t],\n\t\"./nn/_lib/localize/index.js\": [\n\t\t64,\n\t\t7,\n\t\t28092\n\t],\n\t\"./nn/_lib/match/index.js\": [\n\t\t68468,\n\t\t7,\n\t\t59968\n\t],\n\t\"./nn/index.js\": [\n\t\t85411,\n\t\t7,\n\t\t76851\n\t],\n\t\"./oc/_lib/formatDistance/index.js\": [\n\t\t63894,\n\t\t7,\n\t\t45094\n\t],\n\t\"./oc/_lib/formatLong/index.js\": [\n\t\t40456,\n\t\t7,\n\t\t30517\n\t],\n\t\"./oc/_lib/formatRelative/index.js\": [\n\t\t68211,\n\t\t7,\n\t\t79896\n\t],\n\t\"./oc/_lib/localize/index.js\": [\n\t\t47172,\n\t\t7,\n\t\t7994\n\t],\n\t\"./oc/_lib/match/index.js\": [\n\t\t34622,\n\t\t7,\n\t\t90502\n\t],\n\t\"./oc/index.js\": [\n\t\t28898,\n\t\t7,\n\t\t17205\n\t],\n\t\"./pl/_lib/formatDistance/index.js\": [\n\t\t60753,\n\t\t7,\n\t\t55254\n\t],\n\t\"./pl/_lib/formatLong/index.js\": [\n\t\t65918,\n\t\t7,\n\t\t74086\n\t],\n\t\"./pl/_lib/formatRelative/index.js\": [\n\t\t97608,\n\t\t7,\n\t\t36366\n\t],\n\t\"./pl/_lib/localize/index.js\": [\n\t\t92513,\n\t\t7,\n\t\t49152\n\t],\n\t\"./pl/_lib/match/index.js\": [\n\t\t81037,\n\t\t7,\n\t\t55478\n\t],\n\t\"./pl/index.js\": [\n\t\t57237,\n\t\t7,\n\t\t47074\n\t],\n\t\"./pt-BR/_lib/formatDistance/index.js\": [\n\t\t94402,\n\t\t7,\n\t\t57946\n\t],\n\t\"./pt-BR/_lib/formatLong/index.js\": [\n\t\t70219,\n\t\t7,\n\t\t42623\n\t],\n\t\"./pt-BR/_lib/formatRelative/index.js\": [\n\t\t84407,\n\t\t7,\n\t\t88001\n\t],\n\t\"./pt-BR/_lib/localize/index.js\": [\n\t\t27055,\n\t\t7,\n\t\t37469\n\t],\n\t\"./pt-BR/_lib/match/index.js\": [\n\t\t31404,\n\t\t7,\n\t\t12914\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t25835,\n\t\t7,\n\t\t48519\n\t],\n\t\"./pt/_lib/formatDistance/index.js\": [\n\t\t56361,\n\t\t7,\n\t\t92324\n\t],\n\t\"./pt/_lib/formatLong/index.js\": [\n\t\t20255,\n\t\t7,\n\t\t65963\n\t],\n\t\"./pt/_lib/formatRelative/index.js\": [\n\t\t61458,\n\t\t7,\n\t\t37510\n\t],\n\t\"./pt/_lib/localize/index.js\": [\n\t\t3166,\n\t\t7,\n\t\t23970\n\t],\n\t\"./pt/_lib/match/index.js\": [\n\t\t31067,\n\t\t7,\n\t\t76025\n\t],\n\t\"./pt/index.js\": [\n\t\t46439,\n\t\t7,\n\t\t66037\n\t],\n\t\"./ro/_lib/formatDistance/index.js\": [\n\t\t78549,\n\t\t7,\n\t\t13198\n\t],\n\t\"./ro/_lib/formatLong/index.js\": [\n\t\t3947,\n\t\t7,\n\t\t34193\n\t],\n\t\"./ro/_lib/formatRelative/index.js\": [\n\t\t67217,\n\t\t7,\n\t\t70350\n\t],\n\t\"./ro/_lib/localize/index.js\": [\n\t\t23079,\n\t\t7,\n\t\t4830\n\t],\n\t\"./ro/_lib/match/index.js\": [\n\t\t31923,\n\t\t7,\n\t\t54251\n\t],\n\t\"./ro/index.js\": [\n\t\t42473,\n\t\t7,\n\t\t90970\n\t],\n\t\"./ru/_lib/formatDistance/index.js\": [\n\t\t20991,\n\t\t7,\n\t\t34770\n\t],\n\t\"./ru/_lib/formatLong/index.js\": [\n\t\t42644,\n\t\t7,\n\t\t87692\n\t],\n\t\"./ru/_lib/formatRelative/index.js\": [\n\t\t45744,\n\t\t7,\n\t\t48237\n\t],\n\t\"./ru/_lib/localize/index.js\": [\n\t\t15958,\n\t\t7,\n\t\t60957\n\t],\n\t\"./ru/_lib/match/index.js\": [\n\t\t84257,\n\t\t7,\n\t\t48037\n\t],\n\t\"./ru/index.js\": [\n\t\t27773,\n\t\t7,\n\t\t27614\n\t],\n\t\"./sk/_lib/formatDistance/index.js\": [\n\t\t1843,\n\t\t7,\n\t\t67523\n\t],\n\t\"./sk/_lib/formatLong/index.js\": [\n\t\t34148,\n\t\t7,\n\t\t43572\n\t],\n\t\"./sk/_lib/formatRelative/index.js\": [\n\t\t74490,\n\t\t7,\n\t\t7711\n\t],\n\t\"./sk/_lib/localize/index.js\": [\n\t\t96540,\n\t\t7,\n\t\t93739\n\t],\n\t\"./sk/_lib/match/index.js\": [\n\t\t67518,\n\t\t7,\n\t\t12604\n\t],\n\t\"./sk/index.js\": [\n\t\t29604,\n\t\t7,\n\t\t4138\n\t],\n\t\"./sl/_lib/formatDistance/index.js\": [\n\t\t25190,\n\t\t7,\n\t\t74778\n\t],\n\t\"./sl/_lib/formatLong/index.js\": [\n\t\t67123,\n\t\t7,\n\t\t74397\n\t],\n\t\"./sl/_lib/formatRelative/index.js\": [\n\t\t41230,\n\t\t7,\n\t\t81888\n\t],\n\t\"./sl/_lib/localize/index.js\": [\n\t\t18668,\n\t\t7,\n\t\t7987\n\t],\n\t\"./sl/_lib/match/index.js\": [\n\t\t45932,\n\t\t7,\n\t\t26537\n\t],\n\t\"./sl/index.js\": [\n\t\t52792,\n\t\t7,\n\t\t39693\n\t],\n\t\"./sq/_lib/formatDistance/index.js\": [\n\t\t26652,\n\t\t7,\n\t\t26338\n\t],\n\t\"./sq/_lib/formatLong/index.js\": [\n\t\t44933,\n\t\t7,\n\t\t44213\n\t],\n\t\"./sq/_lib/formatRelative/index.js\": [\n\t\t68933,\n\t\t7,\n\t\t16987\n\t],\n\t\"./sq/_lib/localize/index.js\": [\n\t\t92941,\n\t\t7,\n\t\t21835\n\t],\n\t\"./sq/_lib/match/index.js\": [\n\t\t14170,\n\t\t7,\n\t\t224\n\t],\n\t\"./sq/index.js\": [\n\t\t42870,\n\t\t7,\n\t\t73226\n\t],\n\t\"./sr-Latn/_lib/formatDistance/index.js\": [\n\t\t609,\n\t\t7,\n\t\t97835\n\t],\n\t\"./sr-Latn/_lib/formatLong/index.js\": [\n\t\t94394,\n\t\t7,\n\t\t50343\n\t],\n\t\"./sr-Latn/_lib/formatRelative/index.js\": [\n\t\t51251,\n\t\t7,\n\t\t18913\n\t],\n\t\"./sr-Latn/_lib/localize/index.js\": [\n\t\t69554,\n\t\t7,\n\t\t75989\n\t],\n\t\"./sr-Latn/_lib/match/index.js\": [\n\t\t15689,\n\t\t7,\n\t\t71165\n\t],\n\t\"./sr-Latn/index.js\": [\n\t\t46732,\n\t\t7,\n\t\t63122\n\t],\n\t\"./sr/_lib/formatDistance/index.js\": [\n\t\t27352,\n\t\t7,\n\t\t42648\n\t],\n\t\"./sr/_lib/formatLong/index.js\": [\n\t\t50455,\n\t\t7,\n\t\t52883\n\t],\n\t\"./sr/_lib/formatRelative/index.js\": [\n\t\t43039,\n\t\t7,\n\t\t34468\n\t],\n\t\"./sr/_lib/localize/index.js\": [\n\t\t50574,\n\t\t7,\n\t\t56162\n\t],\n\t\"./sr/_lib/match/index.js\": [\n\t\t81764,\n\t\t7,\n\t\t23476\n\t],\n\t\"./sr/index.js\": [\n\t\t76600,\n\t\t7,\n\t\t8514\n\t],\n\t\"./sv/_lib/formatDistance/index.js\": [\n\t\t13977,\n\t\t7,\n\t\t48142\n\t],\n\t\"./sv/_lib/formatLong/index.js\": [\n\t\t86777,\n\t\t7,\n\t\t94375\n\t],\n\t\"./sv/_lib/formatRelative/index.js\": [\n\t\t71530,\n\t\t7,\n\t\t47795\n\t],\n\t\"./sv/_lib/localize/index.js\": [\n\t\t62931,\n\t\t7,\n\t\t36682\n\t],\n\t\"./sv/_lib/match/index.js\": [\n\t\t77262,\n\t\t7,\n\t\t22972\n\t],\n\t\"./sv/index.js\": [\n\t\t88573,\n\t\t7,\n\t\t43924\n\t],\n\t\"./ta/_lib/formatDistance/index.js\": [\n\t\t80825,\n\t\t7,\n\t\t8263\n\t],\n\t\"./ta/_lib/formatLong/index.js\": [\n\t\t4433,\n\t\t7,\n\t\t98459\n\t],\n\t\"./ta/_lib/formatRelative/index.js\": [\n\t\t95694,\n\t\t7,\n\t\t35136\n\t],\n\t\"./ta/_lib/localize/index.js\": [\n\t\t96828,\n\t\t7,\n\t\t74594\n\t],\n\t\"./ta/_lib/match/index.js\": [\n\t\t43903,\n\t\t7,\n\t\t99426\n\t],\n\t\"./ta/index.js\": [\n\t\t84588,\n\t\t7,\n\t\t33739\n\t],\n\t\"./te/_lib/formatDistance/index.js\": [\n\t\t38968,\n\t\t7,\n\t\t31594\n\t],\n\t\"./te/_lib/formatLong/index.js\": [\n\t\t81098,\n\t\t7,\n\t\t31518\n\t],\n\t\"./te/_lib/formatRelative/index.js\": [\n\t\t28283,\n\t\t7,\n\t\t34082\n\t],\n\t\"./te/_lib/localize/index.js\": [\n\t\t41533,\n\t\t7,\n\t\t58749\n\t],\n\t\"./te/_lib/match/index.js\": [\n\t\t5186,\n\t\t7,\n\t\t47173\n\t],\n\t\"./te/index.js\": [\n\t\t17631,\n\t\t7,\n\t\t5876\n\t],\n\t\"./th/_lib/formatDistance/index.js\": [\n\t\t32819,\n\t\t7,\n\t\t3330\n\t],\n\t\"./th/_lib/formatLong/index.js\": [\n\t\t24247,\n\t\t7,\n\t\t90412\n\t],\n\t\"./th/_lib/formatRelative/index.js\": [\n\t\t58155,\n\t\t7,\n\t\t45203\n\t],\n\t\"./th/_lib/localize/index.js\": [\n\t\t60254,\n\t\t7,\n\t\t25367\n\t],\n\t\"./th/_lib/match/index.js\": [\n\t\t86319,\n\t\t7,\n\t\t65156\n\t],\n\t\"./th/index.js\": [\n\t\t88002,\n\t\t7,\n\t\t21408\n\t],\n\t\"./tr/_lib/formatDistance/index.js\": [\n\t\t77302,\n\t\t7,\n\t\t75325\n\t],\n\t\"./tr/_lib/formatLong/index.js\": [\n\t\t32946,\n\t\t7,\n\t\t91178\n\t],\n\t\"./tr/_lib/formatRelative/index.js\": [\n\t\t67003,\n\t\t7,\n\t\t87039\n\t],\n\t\"./tr/_lib/localize/index.js\": [\n\t\t2945,\n\t\t7,\n\t\t78958\n\t],\n\t\"./tr/_lib/match/index.js\": [\n\t\t24552,\n\t\t7,\n\t\t17290\n\t],\n\t\"./tr/index.js\": [\n\t\t34848,\n\t\t7,\n\t\t90203\n\t],\n\t\"./ug/_lib/formatDistance/index.js\": [\n\t\t84769,\n\t\t7,\n\t\t83928\n\t],\n\t\"./ug/_lib/formatLong/index.js\": [\n\t\t18384,\n\t\t7,\n\t\t92028\n\t],\n\t\"./ug/_lib/formatRelative/index.js\": [\n\t\t47243,\n\t\t7,\n\t\t7873\n\t],\n\t\"./ug/_lib/localize/index.js\": [\n\t\t88480,\n\t\t7,\n\t\t1027\n\t],\n\t\"./ug/_lib/match/index.js\": [\n\t\t89933,\n\t\t7,\n\t\t33173\n\t],\n\t\"./ug/index.js\": [\n\t\t41296,\n\t\t7,\n\t\t26744\n\t],\n\t\"./uk/_lib/formatDistance/index.js\": [\n\t\t99785,\n\t\t7,\n\t\t60889\n\t],\n\t\"./uk/_lib/formatLong/index.js\": [\n\t\t3250,\n\t\t7,\n\t\t7700\n\t],\n\t\"./uk/_lib/formatRelative/index.js\": [\n\t\t99101,\n\t\t7,\n\t\t92982,\n\t\t68977\n\t],\n\t\"./uk/_lib/localize/index.js\": [\n\t\t99145,\n\t\t7,\n\t\t55248\n\t],\n\t\"./uk/_lib/match/index.js\": [\n\t\t4014,\n\t\t7,\n\t\t36013\n\t],\n\t\"./uk/index.js\": [\n\t\t20511,\n\t\t7,\n\t\t92982,\n\t\t20671\n\t],\n\t\"./uz-Cyrl/_lib/formatDistance/index.js\": [\n\t\t80036,\n\t\t7,\n\t\t36694\n\t],\n\t\"./uz-Cyrl/_lib/formatLong/index.js\": [\n\t\t57430,\n\t\t7,\n\t\t9698\n\t],\n\t\"./uz-Cyrl/_lib/formatRelative/index.js\": [\n\t\t70145,\n\t\t7,\n\t\t62460\n\t],\n\t\"./uz-Cyrl/_lib/localize/index.js\": [\n\t\t43520,\n\t\t7,\n\t\t46430\n\t],\n\t\"./uz-Cyrl/_lib/match/index.js\": [\n\t\t79014,\n\t\t7,\n\t\t47302\n\t],\n\t\"./uz-Cyrl/index.js\": [\n\t\t2051,\n\t\t7,\n\t\t52570\n\t],\n\t\"./uz/_lib/formatDistance/index.js\": [\n\t\t57663,\n\t\t7,\n\t\t63062\n\t],\n\t\"./uz/_lib/formatLong/index.js\": [\n\t\t97836,\n\t\t7,\n\t\t53234\n\t],\n\t\"./uz/_lib/formatRelative/index.js\": [\n\t\t15295,\n\t\t7,\n\t\t14393\n\t],\n\t\"./uz/_lib/localize/index.js\": [\n\t\t94622,\n\t\t7,\n\t\t61603\n\t],\n\t\"./uz/_lib/match/index.js\": [\n\t\t42382,\n\t\t7,\n\t\t2181\n\t],\n\t\"./uz/index.js\": [\n\t\t1039,\n\t\t7,\n\t\t28110\n\t],\n\t\"./vi/_lib/formatDistance/index.js\": [\n\t\t89528,\n\t\t7,\n\t\t37639\n\t],\n\t\"./vi/_lib/formatLong/index.js\": [\n\t\t48580,\n\t\t7,\n\t\t93187\n\t],\n\t\"./vi/_lib/formatRelative/index.js\": [\n\t\t22993,\n\t\t7,\n\t\t92448\n\t],\n\t\"./vi/_lib/localize/index.js\": [\n\t\t20764,\n\t\t7,\n\t\t35983\n\t],\n\t\"./vi/_lib/match/index.js\": [\n\t\t89470,\n\t\t7,\n\t\t66482\n\t],\n\t\"./vi/index.js\": [\n\t\t67392,\n\t\t7,\n\t\t65679\n\t],\n\t\"./zh-CN/_lib/formatDistance/index.js\": [\n\t\t95867,\n\t\t7,\n\t\t94291\n\t],\n\t\"./zh-CN/_lib/formatLong/index.js\": [\n\t\t33002,\n\t\t7,\n\t\t61872\n\t],\n\t\"./zh-CN/_lib/formatRelative/index.js\": [\n\t\t10317,\n\t\t7,\n\t\t38178\n\t],\n\t\"./zh-CN/_lib/localize/index.js\": [\n\t\t89546,\n\t\t7,\n\t\t65535\n\t],\n\t\"./zh-CN/_lib/match/index.js\": [\n\t\t885,\n\t\t7,\n\t\t78602\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t58479,\n\t\t7,\n\t\t24994\n\t],\n\t\"./zh-HK/_lib/formatDistance/index.js\": [\n\t\t38408,\n\t\t7,\n\t\t66824\n\t],\n\t\"./zh-HK/_lib/formatLong/index.js\": [\n\t\t64131,\n\t\t7,\n\t\t39983\n\t],\n\t\"./zh-HK/_lib/formatRelative/index.js\": [\n\t\t57346,\n\t\t7,\n\t\t8462\n\t],\n\t\"./zh-HK/_lib/localize/index.js\": [\n\t\t62651,\n\t\t7,\n\t\t54019\n\t],\n\t\"./zh-HK/_lib/match/index.js\": [\n\t\t56470,\n\t\t7,\n\t\t43970\n\t],\n\t\"./zh-HK/index.js\": [\n\t\t26241,\n\t\t7,\n\t\t50126\n\t],\n\t\"./zh-TW/_lib/formatDistance/index.js\": [\n\t\t42341,\n\t\t7,\n\t\t48085\n\t],\n\t\"./zh-TW/_lib/formatLong/index.js\": [\n\t\t76463,\n\t\t7,\n\t\t50815\n\t],\n\t\"./zh-TW/_lib/formatRelative/index.js\": [\n\t\t78396,\n\t\t7,\n\t\t73782\n\t],\n\t\"./zh-TW/_lib/localize/index.js\": [\n\t\t58664,\n\t\t7,\n\t\t7028\n\t],\n\t\"./zh-TW/_lib/match/index.js\": [\n\t\t8765,\n\t\t7,\n\t\t21919\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t47370,\n\t\t7,\n\t\t470\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 88115;\nmodule.exports = webpackAsyncContext;","// extracted by mini-css-extract-plugin\nexport default {\"Application__main\":\"Academy_Application__main__WbAGW\",\"WorkspaceParent\":\"Academy_WorkspaceParent__QkrJ0\",\"bp5-tag\":\"Academy_bp5-tag__qdxCt\",\"badge\":\"Academy_badge__T8ws1\",\"bp5-overlay\":\"Academy_bp5-overlay__NG6bM\",\"bp5-popover-content\":\"Academy_bp5-popover-content__D5ZSM\",\"badge-tag\":\"Academy_badge-tag__A0vj4\",\"Academy\":\"Academy_Academy__1mjfJ\",\"Academy-switching-courses\":\"Academy_Academy-switching-courses__aaVIr\"};"],"names":["props","useEffect","_props$loadContentDis","loadContentDispatch","call","_jsx","className","children","fullWidth","Card","elevation","Elevation","display","ControlBarReturnToAcademyButton","onClick","ControlButton","label","icon","IconNames","options","iconOnRight","ControlBarNextButton","questionProgress","onClickReturn","onClickNext","ControlBarPreviousButton","ControlBarQuestionViewButton","isDisabled","ControlBarResetButton","ControlButtonSaveButton","saveButtonOpts","hasUnsavedChanges","intent","Intent","minimal","onClickSave","index","testcase","handleTestcaseEval","extraClasses","React","isEvaluated","undefined","result","errors","isEqual","stringify","answer","correct","wrong","secret","type","TestcaseTypes","handleRunTestcase","classNames","Classes","workspaceLocation","Pre","_jsxs","_Fragment","program","parseError","SideContentToneMatrix","containerRef","useRef","window","ToneMatrix","initialise_matrix","current","Button","id","handleClear","clear_matrix","handleRandomise","randomise_matrix","ref","beforeNow","dateString","date","moment","now","isBefore","getPrettyDate","format","getStandardDateTime","getStandardDate","ResearchAgreementPrompt","dispatch","useDispatch","Dialog","title","canOutsideClickClose","canEscapeKeyClose","isCloseButtonShown","isOpen","H4","Constants","text","updateCourseResearchAgreement","onClickProgress","deferredNavigate","question","testcases","isBlocked","QuestionTypes","showWarningMessage","solution","reduce","acc","resultType","toUpperCase","expected","map","error","errorType","line","errorExplanation","errorMessage","join","actual","autograderTooltip","columnHeader","colClass","colTitle","Icon","testcasesHeader","resultsHeader","collapseButton","toggleFunc","showsTestcases","setTestcasesShown","showsResults","setResultsShown","autogradingResults","testcaseCards","length","SideContentTestcaseCard","resultCards","SideContentResultCard","toggleTestcases","toggleResults","Tooltip2","content","placement","PopoverPosition","Collapse","keepChildrenMounted","handleContestEntryClick","contestEntry","rank","_contestEntry$answer$","submission_id","code","student_name","final_score","orderedContestEntries","leaderboardType","showLeaderboard","setShowLeaderboard","useState","leaderboardTitle","useMemo","SideContentType","contestLeaderboardTooltipContent","contestEntryHeader","contestEntryCards","SideContentLeaderboardCard","TIERS","name","color","score","contestEntries","canSave","isValid","handleVotingSubmissionChange","showContestEntries","setShowContestEntries","currentDraggedItem","setCurrentDraggedItem","hoveredTier","setHoveredTier","sortedContestEntries","sort","a","b","handleDragStart","e","currentTarget","dataTransfer","effectAllowed","handleDragEnd","useCallback","tierElement","closest","tierName","split","tier","find","t","toLowerCase","handleDragOver","preventDefault","dropEffect","handleDragEnter","setTimeout","target","handleDragLeave","handleDrop","container","appendChild","contestEntryRefs","tierContainerRefs","tierBoard","style","backgroundColor","onDragOver","onDragLeave","onDragEnter","onDrop","item","draggable","onDragStart","onDragEnd","forEach","entry","savedTierIndex","findIndex","tierContainer","entryItem","handleSave","setIsValid","votingSubmission","setVotingSubmission","SideContentContestVoting","submissionId","updatedSubmission","vote","noNull","submissionHasNoNull","HTMLTable","Text","xp","maxXp","comments","Divider","Markdown","simplifiedAutoLink","strikethrough","tasklists","openLinksInNewWindow","graderName","gradedAt","_question$library$var2","_question$library2","_question$library$var3","_question$library3","_question$library3$ex","showOverlay","setShowOverlay","showResetTemplateOverlay","setShowResetTemplateOverlay","sessionId","setSessionId","isMobileBreakpoint","useResponsive","assessment","useTypedSelector","state","session","assessments","get","assessmentId","selectedTab","setSelectedTab","useSideContent","questions","questionId","grader","navigate","useNavigate","courseId","isFolderModeEnabled","activeEditorTabIndex","editorTabs","editorTestcases","isRunning","output","replValue","currentAssessment","storedAssessmentId","currentQuestion","storedQuestionId","store","workspaces","handleClearContext","handleChangeExecTime","handleUpdateCurrentAssessmentId","handleResetWorkspace","handleRunAllTestcases","handleEditorEval","handleAssessmentFetch","handleEditorValueChange","handleEditorUpdateBreakpoints","handleReplEval","handleUpdateHasUnsavedChanges","handleEnableTokenCounter","handleDisableTokenCounter","evalTestcase","library","shouldInitLibrary","beginClearContext","execTimeMs","changeExecTime","updateCurrentAssessmentId","resetWorkspace","runAllTestcases","evalEditor","assessmentPassword","fetchAssessment","editorTabIndex","newEditorValue","updateEditorValue","newBreakpoints","setEditorBreakpoint","evalRepl","submitAnswer","updateHasUnsavedChanges","enableTokenCounter","disableTokenCounter","needsPassword","prompt","history","back","notAttempted","solutionTemplate","checkWorkspaceReset","assessmentConfiguration","hasTokenCounter","mobileOnlyTabIds","pushLog","newInput","log","activeTab","handleEval","input","time","Date","data","KeyboardCommand","_options$autogradingR","_options$editorValue","_options$programPrepe","_options$programPostp","_options$editorTestca","_question$library$exe","programmingQuestionData","_question$library","_question$library$ext","programPrependValue","prepend","programPostpendValue","postpend","editorValue","initSession","number","chapter","externalLibrary","external","votingQuestionData","resetWorkspaceOptions","assertType","value","highlightedLines","breakpoints","defaultWorkspaceManager","sideContentProps","isGraded","isContestVoting","_submissionId","tabs","iconName","body","_contestEntries","_scoreLeaderboard","_popularVoteLeaderboa","push","longSummary","SideContentContestVotingContainer","SideContentContestLeaderboard","scoreLeaderboard","popularVoteLeaderboard","SideContentAutograder","isManuallyGraded","AssessmentWorkspaceGradingResult","symbols","includes","selectedTabId","beforeDynamicTabs","afterDynamicTabs","onChange","onChangeTabs","newTabId","prevTabId","event","controlBarProps","_question$library$var","listingPath","assessmentTypeLink","assessmentWorkspacePath","toString","blockedQuestionId","filter","qn","nextButton","blocking","previousButton","onClickPrevious","questionView","resetButton","onClickResetTemplate","runButton","ControlBarRunButton","isEntrypointFileDefined","saveButton","chapterSelect","ControlBarChapterSelect","handleChapterSelect","sourceChapter","sourceVariant","variant","disabled","editorButtons","flowButtons","replButtons","clearButton","ControlBarClearButton","handleReplOutputClear","clearReplOutput","ControlBarEvalButton","editorContainerHandlers","setActiveEditorTabIndex","updateActiveEditorTabIndex","removeEditorTabByIndex","removeEditorTab","handleDeclarationNavigate","cursorPosition","navigateToDeclaration","handlePromptAutocomplete","row","col","callback","promptAutocomplete","replHandlers","handleBrowseHistoryDown","browseReplHistoryDown","handleBrowseHistoryUp","browseReplHistoryUp","handleReplValueChange","newValue","updateReplValue","workspaceHandlers","handleSideContentHeightChange","heightChange","changeSideContentHeight","NonIdealState","description","Spinner","size","SpinnerSize","overlay","closeOverlay","resetTemplateOverlay","onClose","DialogBody","DialogFooter","actions","editorContainerProps","editorVariant","convertEditorTabStateToProps","editorSessionId","Chapter","Variant","externalLibraryName","isEditorAutorun","onChangeMethod","newCode","delta","onCursorChange","selection","getCursor","onSelectionChange","range","getRange","isBackwards","start","end","mcqProps","mcq","handleMCQSubmit","option","replProps","sideBarProps","workspaceProps","mobileWorkspaceProps","mobileSideContentProps","mobileControlBarProps","MobileWorkspace","Workspace","AssessmentNotFound","makeGradingStatus","gradingStatus","tooltip","GradingStatuses","Position","_params$assessmentId","_params$questionId","params","useParams","betchaAssessment","setBetchaAssessment","showClosedAssessments","setShowClosedAssessments","showOpenedAssessments","setShowOpenedAssessments","showUpcomingAssessments","setShowUpcomingAssessments","role","assessmentOverviews","assessmentOverviewsUnfiltered","useSession","toggleClosedAssessments","toggleOpenAssessments","toggleUpcomingAssessments","setBetchaAssessmentNull","sortAssessments","sortBy","makeSubmissionButton","overview","status","AssessmentStatuses","makeAssessmentInteractButton","optionalLabel","NavLink","to","acknowledgeNotifications","filterNotificationsByAssessment","makeOverviewCard","renderAttemptButton","renderGradingStatus","showGrade","NotificationBadge","notificationFilter","large","alt","src","coverImage","defaultCoverImage","makeOverviewCardTitle","H6","shortSummary","iconSize","openAt","closeAt","ellipsize","private","ao","match","numberRegExp","Navigate","convertParamToInt","assessmentWorkspaceProps","Role","AssessmentWorkspace","isOverviewUpcoming","upcomingCards","isOverviewOpened","openedCards","closedCards","upcomingCardsCollapsible","openedCardsCollapsible","closedCardsCollapsible","submissionText","betchaText","betchaDialog","handleSubmitAssessment","submitAssessment","ContentDisplay","fetchAssessmentOverviews","viewTemplate","coverImageUrl","completionText","achievementTemplate","uuid","isVariableXp","isTask","position","prerequisiteUuids","goalUuids","cardBackground","cardBackgroundUrl","view","AchievementAdder","allowNewUuid","setNewUuid","inferencer","useContext","AchievementContext","addAchievement","insertAchievement","ItemDeleter","deleteItem","async","showSimpleConfirmDialog","contents","negativeLabel","positiveIntent","positiveLabel","ItemSaver","discardChanges","saveChanges","handleSaveChanges","showSuccessMessage","handleDiscardChanges","EditableGoalUuids","changeGoalUuids","allGoalUuids","getAllGoalUuids","selectedUuids","isInvalidGoal","getGoal","GoalSelect","MultiSelect","selectedGoals","Set","availableGoals","without","removeGoal","removeUuid","delete","add","itemRenderer","goalRenderer","goal","handleClick","MenuItem","items","noResults","onItemSelect","selectGoal","selectUuid","selectedItems","tagInputProps","onRemove","getUuidByText","getUuid","tagRenderer","itemPredicate","goalPredicate","query","resetOnSelect","EditablePosition","changePosition","maxPosition","listTaskUuids","positionOptions","Array","keys","PositionSelect","Select","filterable","positionRenderer","changePrerequisiteUuids","availableUuids","isInvalidAchievement","getAchievement","PrerequisiteSelect","selectedPrereqs","availablePrereqs","prerequisiteRenderer","achievement","selectPrereq","getUuidByTitle","prerequisitePredicate","changeCardBackground","changeIsVariableXp","editableAchievement","setOpen","toggleOpen","padding","EditableText","multiline","placeholder","EditablePrerequisiteUuids","Checkbox","checked","AchievmenetUuidCopier","copy","navigator","clipboard","writeText","EditableCardActionType","EditableDate","changeDate","hoverText","prettifyDate","outlined","background","maxWidth","textAlign","DatePicker","timePickerProps","showArrowButtons","EditableView","changeView","init","isDirty","reducer","action","ActionType","payload","deadline","release","isNewAchievement","releaseUuid","removeCard","requestPublish","achievementClone","cloneDeep","useReducer","isNew","setIsNew","modifyAchievement","deleteAchievement","removeAchievement","NumericInput","min","allowNumericCharactersOnly","leftIcon","onValueChange","AchievementUuidCopier","AchievementSettings","editableCards","AchievementEditor","newUuid","idx","key","splice","generateEditableCard","achievementUuid","EditableCard","listSortedAchievementUuids","AchievementFilter","filterState","ownStatus","globalStatus","setGlobalStatus","getFilterColor","AchievementMilestone","studentXp","AchievementLevel","showMilestone","setShowMilestone","level","Math","floor","xpPerLevel","progress","progressFrac","onMouseEnter","displayMilestone","onMouseLeave","hideMilestone","ProgressBar","animate","stripes","AchievementOverview","userState","selectedUser","crid","courseRegId","userCrid","FETCH_TOTAL_XP_ADMIN","FETCH_TOTAL_XP","twoDays","getTime","AchievementDeadline","deadlineColor","isExpired","timeFromExpired","DeadlineColors","prettifyDeadline","stringifyXp","isBonus","AchievementXp","focusState","isDropdownOpen","shouldRender","toggleDropdown","focusUuid","setFocusUuid","displayDeadline","getDisplayDeadline","displayXp","getDescendantXp","getProgressFrac","getStatus","hasDropdown","getImmediateChildren","onClickCapture","handleGlow","opacity","AchievementStatus","AchievementTask","filterStatus","taskColor","getAbilityColor","setIsDropdownOpen","isInFilter","FilterStatus","isPrerequisite","canRender","prerequisite","shouldRenderPrerequisites","shouldRenderTask","AchievementCard","prerequisiteUuid","borderBottom","borderLeft","AchievementCommentCard","showToQuestion","toMission","classes","awardedXp","paragraphs","para","AchievementViewGoal","goals","targetCount","count","completed","frac","mapGoalToJSX","AchievementView","_useTypedSelector","Number","isNaN","isAdminView","FETCH_ASSESSMENT_OVERVIEWS","FETCH_ASSESSMENT_ADMIN","FETCH_ASSESSMENT","selectedAssessment","selectedAssessmentConfig","config","getAchievementXp","listGoals","descriptionParagraphs","getAbilityGlow","getAbilityBackground","backgroundBlendMode","AchievementViewCompletion","assessmentCompleted","assessmentOverview","assessmentConfigs","sortedOverviews","overview1","overview2","diff","assessmentTypes","categorisedUuids","_","isReleased","idString","hasAchievement","insertFakeGoalDefinition","achievementUuids","meta","GoalType","assessmentNumber","requiredCompletionFrac","insertFakeAchievement","isPublished","uuids","assessmentType","generateAchievementTasks","taskUuids","taskUuid","AchievementDashboard","userIdState","group","assessmentConfigurations","achievementAssessmentOverviews","users","AchievementInferencer","achievements","handleFetchAssessmentOverviews","handleGetAchievements","handleGetGoals","handleGetOwnGoals","handleGetUserAssessmentOverviews","handleGetUsers","handleUpdateGoalProgress","getAchievements","studentCourseRegId","getGoals","getOwnGoals","getUserAssessmentOverviews","getUsers","updateGoalProgress","userAssessmentOverviews","insertFakeAchievements","hiddenState","seeHidden","username","AchievementManualEditor","studio","listAllSortedAchievementUuids","listSortedReleasedTaskUuids","AchievementPreview","awaitPublish","publishChanges","viewMode","toggleMode","mode","rightIcon","listSortedTaskUuids","EditableGoalActionType","metaTemplate","condition","eventNames","EventType","observeFrom","observeTo","goalDefinitionTemplate","assessmentMeta","changeMeta","max","requiredCompletion","rightElement","AND","operands","OR","JoinerSelect","joinerRenderer","joiner","conditionSplitter","len","conditions","i","flat","JSON","EditableBinaryMeta","binaryMeta","joiners","condArray","changeCondition","parse","op","changeConditionArray","cond","deleteCondition","changeJoinerArray","addCondition","EditableTime","changeTime","prettifyTime","TimePicker","EventSelect","eventRenderer","eventName","EditableEventMeta","eventMeta","changeIndexEventName","changeEventName","Object","values","addEvent","EditableManualMeta","manualMeta","EditableMeta","TypeSelect","typeRenderer","EditableAssessmentMeta","editableMetaDetails","editableGoal","isNewGoal","getGoalDefinition","goalClone","modifyGoalDefinition","deleteGoal","removeGoalDefinition","GoalAdder","addGoal","insertGoalDefinition","editableGoals","GoalEditor","generateEditableGoal","goalUuid","EditableGoal","AchievementControl","handleBulkUpdateAchievements","handleBulkUpdateGoals","handleRemoveAchievement","handleRemoveGoal","bulkUpdateAchievements","bulkUpdateGoals","setAwaitPublish","forceUpdate","x","Prompt","message","when","getAllGoals","getAllAchievements","getGoalsToDelete","getAchievementsToDelete","resetToDelete","Achievement","toAchievementControl","NotFound","Routes","Route","path","element","SourceRecorderControlBar","constructor","super","handleSeeked","this","stopPreviousPlaybackAndApplyFromStart","playbackData","handleAudioLoaded","handleSetSourcecastDuration","audio","duration","applyDeltas","deltas","handleSetCodeDeltasToApply","setState","currentDeltaRevision","applyPlaybackDataFromStart","sleep","ms","Promise","r","currentRevision","currentTime","handleExternalSelect","codeDeltasToApply","inputs","deltaWithTime","futureData","handleSetInputToApply","handlePlayerPausing","pause","handleSetIsEditorReadonly","handleSetSourcecastStatus","PlaybackStatus","stopCurrentPlayback","handlePlayerPlaying","play","handlePlayerStopping","handleSetCurrentPlayerTime","currentPlayerProgress","updatePlayerTime","playbackStatus","handlePlayerProgressBarChange","renderLabel","totalTime","sec","currentSourcecastItem","render","PlayerPlayButton","PlayerPauseButton","audioUrl","onEnded","onLoadedMetadata","onSeeked","onTimeUpdate","preload","ButtonGroup","Slider","stepSize","labelRenderer","isDialogOpen","setIsDialogOpen","handleCloseDialog","handleOpenDialog","handleDelete","handleDeleteSourcecastEntry","SourceRecorderSelectCell","handleSetSourcecastData","handleSelect","uid","url","shareInputElem","shareURL","location","protocol","host","shareButtonPopoverContent","defaultValue","readOnly","CopyToClipboard","selectShareInputText","focus","select","Popover2","popoverClassName","inheritDarkTheme","SourcecastTable","handleFilterChange","changeVal","filterValue","gridApi","setQuickFilter","onGridReady","api","sizeColumnsToFit","onresize","columnDefs","headerName","field","cellRenderer","cellRendererParams","minWidth","suppressMovable","suppressMenu","cellStyle","hide","valueGetter","inserted_at","SourceRecorderShareCell","SourcastDeleteCell","sortable","groupFilterEnabled","defaultColumnDefs","resizable","loadingDisplay","sourcecastIndex","grid","FormGroup","labelFor","InputGroup","AgGridReact","domLayout","defaultColDef","rowData","rowHeight","pagination","paginationPageSize","INTRODUCTION","Sourcecast","currentPlayerTime","isEditorReadonly","inputToApply","isDebugging","playbackDuration","context","handleFetchSourcecastIndex","fetchSourcecastIndex","externalLibrarySelect","setSourcecastData","setSourcecastStatus","change","handleQueryParam","newUid","sourcecastId","cast","autorunButtonHandlers","handleDebuggerPause","beginDebuggerPause","handleDebuggerReset","debuggerReset","handleDebuggerResume","debuggerResume","handleInterruptEval","beginInterruptExecution","handleToggleEditorAutorun","toggleEditorAutorun","autorunButtons","ControlBarAutorunButtons","chapterSelectButton","chapterSelectHandler","evalButton","dataVisualizerTab","makeDataVisualizerTabFrom","cseMachineTab","makeCseMachineTabFrom","SourceRecorderTable","isPlaying","sourcecastControlbarHandlers","playerTime","setCurrentPlayerTime","setCodeDeltasToApply","editorReadonly","setIsEditorReadonly","setInputToApply","setSourcecastDuration","sourcecastControlbarProps","setUsers","invalidCsvMsg","setInvalidCsvMsg","CSVReader","useCSVReader","onGridSizeChanged","_gridApi$current","suppressCellFocus","suppressMovableColumns","htmlSelectOptions","provider","setProvider","H2","onUploadAccepted","results","processed","StoriesRole","uniqBy","val","validateCsvInput","delimiter","skipEmptyLines","getRootProps","acceptedFile","getRemoveFileProps","FileInput","inputProps","interactionKind","inline","HTMLSelect","Callout","submitHandler","handleAddNewUsersToCourse","changeHandler","setStateHandler","rowIndex","Switch","DeleteRowCell","deleteRowHandler","clickHandler","clampValueOnBlur","indexOfObject","arr","obj","assessmentConfig","setAssessmentConfig","setAssessmentConfigsToDelete","rowDrag","editable","BooleanCell","setIsManuallyGraded","_gridApi$current$getD","temp","getDisplayedRowAtIndex","setDataValue","setDisplayInDashboard","_gridApi$current2","_gridApi$current2$get","displayInDashboard","setHasTokenCounter","_gridApi$current3","_gridApi$current3$get","NumericCell","setEarlyXp","_gridApi$current4","_gridApi$current4$get","earlySubmissionXp","setHoursBeforeDecay","_gridApi$current5","_gridApi$current5$get","hoursBeforeEarlyXpDecay","_gridApi$current7","deleted","setRowData","onRowDragMove","movingNode","node","overNode","movingData","overData","fromIndex","toIndex","moveInArray","onRowDragLeaveOrEnd","_gridApi$current8","setHasChangesAssessmentConfig","_gridApi$current9","rowDragManaged","suppressPaginationPanel","onRowDragLeave","onRowDragEnd","onCellValueChanged","colDef","addRowHandler","_gridApi$current6","assessmentConfigId","selectedOption","setSelectedOption","timeOptions","to1","to2","minutes","getUserFriendlyText","round","defaultTimeOptions","isDefault","Select2","renderOption","handleFocus","modifiers","active","onFocus","roleStructure","updatedTimeOptions","timeOption","setValues","toFixed","TagInput","setDelete","onAdd","n","num","parseFloat","isInteger","some","isFinite","isValidTimeOption","newTimeOption","NotificationConfigPanel","notificationConfig","notificationConfigs","timeOptionsToDelete","setTimeOptionsToDelete","hasChangesNotificationConfig","setHasChangesNotificationConfig","setNotificationConfig","fetchNotificationConfigs","setTimeOptions","_notificationConfig$c2","valueFormatter","_assessmentConfig","notificationType","forStaff","TimeOptionCell","deletedElement","SelectCell","setIsEnabled","_notificationConfig$c","isEnabled","marginTop","_notificationConfig$c3","_notificationConfig$c4","allTimeOptions","curr","notificationConfigId","updateTimeOptions","deleteTimeOptions","updateNotificationConfigs","handleUpdateUserRole","roleOptions","fill","DeleteUserCell","handleDeleteUserFromCourse","_props$userCourseRegi","userCourseRegistrations","RolesCell","width","UserActionsCell","exportDataAsCsv","fileName","toISOString","columnKeys","AdminPanel","hasChangesCourseConfig","setHasChangesCourseConfig","hasChangesAssessmentConfig","courseConfiguration","setCourseConfiguration","courseName","courseShortName","viewable","enableGame","enableAchievements","enableSourcecast","enableStories","moduleHelpText","assessmentConfigsToDelete","fetchCourseConfig","fetchAssessmentConfigs","fetchAdminPanelCourseRegistrations","courseConfigPanelProps","courseConfig","assessmentConfigPanelProps","userConfigPanelProps","updateUserRole","deleteUserCourseRegistration","addUserPanelProps","addNewUsersToCourse","addStoriesUserPanelProps","addNewStoriesUsersToCourse","H1","Tabs","renderActiveTabPanelOnly","Tab","panel","CourseConfigPanel","AssessmentConfigPanel","updateCourseConfig","deleteAssessmentConfig","setAssessmentConfigurations","updateAssessmentConfigs","UserConfigPanel","AddUserPanel","AddStoriesUserPanel","gradingSummary","dashboard","cols","startCase","resizeGrid","rows","fetchGroupGradingSummary","zektonFont","pngPath","fntPath","zektonDarkFont","alienCowsFont","alienLeagueFont","pixelFont","assetsFolder","Links","fadeDuration","nullFunction","nullInteractionId","nullSequenceNumber","popUpDuration","defaultAssetPath","defaultFontStyle","FontAssets","align","Phaser","GameObjects","BitmapText","ALIGN_CENTER","defaultCursor","screenSize","y","screenCenter","Color","navy","lightBlue","offWhite","white","darkGrey","lightGrey","blue","darkBlue","orange","yellow","red","maroon","black","purple","paleYellow","HexColor","str","parseInt","slice","Direction","calcTableFormatPos","direction","Row","numOfItems","maxXSpace","maxYSpace","numItemLimit","redistributeLast","itemsPerList","numOfLists","ceil","itemNumber","itemIndexInList","listIndex","indexToCoordinate","screenSpace","listSpace","maxItems","partitionSpace","calcListFormatPos","xSpacing","ySpacing","pos","textHoverStyle","fontFamily","fontSize","wordWrap","defaultTextHoverWidth","CommonTextHover","Container","scene","renderTextHover","substring","hoverWidth","cursorOffSet","hoverTextBg","Rectangle","getBounds","bottom","setOrigin","setAlpha","setDepth","setVisible","createBitmapText","oriX","oriY","listBannerTextStyle","ALIGN_LEFT","awardTitleStyle","awardKeyStyle","awardDescStyle","lineSpacing","defaultAwardProp","assetKey","assetPath","awardExplanation","previewXPos","previewYPos","previewKeyYPos","arrow","xOffset","xScale","yScale","itemsPerPage","list","yStart","ySpace","listTextConfig","noPreviewTextConfig","preview","descText","yOffset","rect","dim","height","keyTagTextConfig","keyTextConfig","explanation","titleTextConfig","getAwardProps","awardKeys","getAwardProp","awardKey","awardProp","SourceAcademyGame","getInstance","getAwardsMapping","AssetType","AnimType","spaceshipBg","Image","saBanner","shortButton","mediumButton","longButton","topButton","speechBox","speakerBox","defaultLocationImg","locationPreviewFrame","locationPreviewFill","talkOptButton","talkOptCheck","modeMenuBanner","popUpFrame","mediumBox","diamond","cookies","scrollFrame","messageBar","escapeMenuBackground","awardsMenu","awardsBanner","awardsPageChosen","awardsPage","awardsBackground","gear","journal","chapterRepeatButton","chapterContinueButton","StarGold","StarSilver","StarBronze","chapterSelectFrame","chapterSelectBorder","chapterSelectArrow","mainMenuOptBanner","settingBanner","settingOption","verifiedFrame","sourceCrashedPod","squareKeyboardIcon","medKeyboardIcon","musicFadeOutTween","volume","ease","GameSoundType","buttonHover","soundType","SFX","buttonClick","radioButtonClick","dialogueAdvance","popUpEnter","popUpExit","menuEnter","menuExit","modeEnter","notifEnter","notifExit","radioStatic","galacticHarmony","loop","BGM","Layer","defaultLayerSequence","Background","Selector","Objects","BBox","Character","Speaker","PopUp","Dialogue","SpeakerBox","Effects","Dashboard","Escape","UI","WorkerMessage","resolve","limitNumber","toS3Path","courseCoded","startsWith","substr","assetsPrefix","mandatory","object","errorMsg","Error","fadeOut","targets","alpha","fadeIn","fadeAndDestroy","tween","destroy","blackScreen","blink","gameObject","setInterval","tweens","clearInterval","entryTweenProps","exitTweenProps","rightSideEntryTweenProps","rightSideExitTweenProps","messageDuration","messageTextConfig","messageStyle","ALIGN_RIGHT","displayMiniMessage","makeMiniMessageDisplayer","displayMessagesPromise","then","messageBg","Sprite","ImageAssets","setScale","messageText","getLayerManager","addToLayer","setPosition","getSoundManager","playSound","SoundAssets","displayMiniMessageHelper","DialogueConstants","xPad","yPad","dialogueRectMargin","speakerTextConfig","textTypeWriterStyle","speakerTextStyle","textStyle","typeWriterInterval","textSprite","typeWriting","charPointer","clearTyping","changeLine","typewriterStyle","gameManager","GameGlobalAPI","getGameManager","dialogueBox","setInteractive","useHandCursor","pixelPerfect","typewriter","Typewriter","dialogueConstants","createTypewriter","blinkingDiamond","drawDiamond","getDialogueContainer","diamondSprite","setDisplaySize","clearBlink","getDialogueBox","off","Input","Events","GAMEOBJECT_POINTER_UP","changeText","keyboardShortcuts","Keyboard","KeyCodes","TAB","Menu","ESC","Next","SPACE","Notif","Explore","E","Move","V","Talk","T","Options","ONE","TWO","THREE","FOUR","keyboardListeners","eventListeners","setDefaultCursor","cursor","enableMouseInput","mouse","enabled","enableKeyboardInput","keyboard","registerKeyboardListener","keyboardListener","addKey","addListener","registerEventListener","eventListener","concat","clearListeners","removeAllListeners","clearKeyboardListeners","keycodes","keyCode","notifStyle","notifTextConfig","onHoverAlpha","offHoverAlpha","createButtonText","createButton","textConfig","bitMapTextStyle","onDown","onUp","onHover","onOut","onPointerMove","onHoverEffect","onClickSound","onHoverSound","button","GAMEOBJECT_POINTER_OVER","GAMEOBJECT_POINTER_OUT","GAMEOBJECT_POINTER_DOWN","GAMEOBJECT_POINTER_MOVE","pointer","localX","localY","PromptConstants","textPad","yInterval","promptOptStyle","promptWithChoices","choices","promptContainer","promptPartitions","promptHeight","header","promptHeaderBg","promptBg","buttonPositions","activatePromptContainer","response","GamePhaseType","GameTerminalPhaseType","static","instance","setGameManager","gameManagerRef","getCurrLocId","currentLocationId","getLocationAtId","locationId","getStateManager","getGameMap","locationName","changeLocationTo","getLocationModes","addLocationMode","removeLocationMode","hasTriggeredInteraction","triggerStateChangeAction","actionId","triggerInteraction","watchGameItemType","gameItemType","stateObserver","getGameItemsInLocation","addItem","itemId","removeItem","makeObjectGlow","objectId","turnOn","getObjectManager","makeObjectBlink","setObjProperty","newObjProp","renderObjectLayerContainer","renderObjectsLayerContainer","getAllActivatables","getActivatables","getBBoxManager","setBBoxProperty","newBBoxProp","renderBBoxLayerContainer","areAllObjectivesComplete","isObjectiveComplete","areObjectivesComplete","completeObjective","isTaskComplete","areTasksComplete","completeTask","showTask","getAllVisibleTaskData","addCollectible","getUserStateManager","userStateType","isInUserState","clearSeveralLayers","layerTypes","layer","gameObj","showLayer","hideLayer","fadeInLayer","fadeOutLayer","dialogueRenderer","DialogueRenderer","notifText","gameInputManager","GameInputManager","dissolveNotification","showNotification","on","displayNotification","actionIds","getPhaseManager","pushPhase","Sequence","getActionManager","processGameActions","popPhase","dialogueId","getDialogueManager","showDialogue","storeDialogueLine","newLine","newSpeakerDetail","getDialogueStorageManager","storeLine","getDialogueStorage","collectibleId","displayPopUp","getPopupManager","destroyAllPopUps","destroyPopUp","getSaveManager","saveGame","settingsJson","saveSettings","getLoadedUserState","soundKey","playBgMusic","stopAllSound","pauseCurrBgMusic","continueCurrBgMusic","applySoundSettings","userSettings","applyUserSettings","loadSounds","soundAssets","startAnimation","startFrame","frameRate","startImage","getAssetByKey","getAssetKeyFromId","getAnimationManager","displayAnimation","stopAnimation","stopImage","getInputManager","enableSprite","enable","disable","gamePhaseType","swapPhase","isCurrentPhase","renderBackgroundLayerContainer","getBackgroundManager","open","loadAssessments","createCharacterSprite","characterId","overrideExpression","overridePosition","getCharacterManager","moveCharacter","newLocation","newPosition","updateCharacter","expression","getDialogueById","getDialogueMap","getCharacterById","getCharacterMap","getActionById","getActionMap","getObjectById","getObjectPropMap","getBBoxById","bboxId","getBBoxPropMap","GameStateStorage","UserStateType","ActionConditionChecker","actionConditions","all","checkConditionSatisfied","actionCondition","every","conditional","conditionParams","boolean","UserState","ChecklistState","TasklistState","GameActionType","GameActionExecuter","actionType","actionParams","globalAPI","AddItem","RemoveItem","AddLocationMode","RemoveLocationMode","MoveCharacter","UpdateCharacter","ChangeBackground","StartAnimation","StopAnimation","PreviewLocation","ObtainCollectible","obtainCollectible","CompleteObjective","CompleteTask","ShowTask","ShowDialogue","showDialogueInSamePhase","AddPopup","MakeObjectBlink","MakeObjectGlow","PlayBGM","PlaySFX","ShowObjectLayer","show","NavigateToAssessment","promptNavigateToAssessment","UpdateAssessmentStatus","updateAssessmentState","Delay","GameActionManager","executeGameAction","processGameAction","isRepeatable","interactionId","checkCanPlayAction","isStateChangeAction","checkAllConditionsSatisfied","GameItemType","GameAnimationManager","game","animationInstanceMap","Map","isSprite","image","createImage","_image$config","_image$config2","_image$config3","_image$config4","createAnimation","getAnimation","centreX","centreY","_img$config","img","animType","currLoc","objects","_image$config5","_image$config6","_image$config7","removeAnimation","sprite","frames","anims","generateFrameNumbers","endFrame","first","repeat","create","set","existing","stop","anim","remove","resize","ratio","displayHeight","displayWidth","resizeOverflow","resizeUnderflow","awardsGetter","activePageNumber","createUIContainer","awardContainer","uiContainer","arrowLeft","nextPage","AwardsConstants","setRotation","PI","arrowRight","frame","assetKeyCont","rectDim","assetKeyBg","assetKeyTagBg","originX","assetKeyTag","hoverCont","createAssetKeyPreviewCont","setPage","itemsContainer","createItemsContainer","setPreview","award","previewContainer","previewAsset","previewRect","previewTitle","previewDesc","previewKey","blackTint","next","currPageNum","newPageNum","MAX_SAFE_INTEGER","getItems","itemPositions","createItemButton","xPos","yPos","pageNum","itemList","itemStartIdx","GameBackgroundManager","renderBackgroundImage","currentBackground","animationManager","asset","bboxes","boundingBoxes","bboxIdsToRender","clear","handleAdd","createBBox","bboxProperty","bboxSprite","isInteractive","clickArea","bboxProp","bbox","handleMutate","from","charWidth","charRect","Left","Middle","Right","CharacterManager","characterSpriteMap","characters","renderCharacterLayerContainer","idsToRender","character","defaultPosition","defaultExpression","expressions","scale","characterXPosition","CharConstants","characterSprite","char","pageBannerTextStyle","backButton","page","pageTextConfig","pageArea","DashboardPage","pages","pageManagers","pageMask","createPageMask","pageUIContainers","currPageIndex","addPhaseToMap","shape","Graphics","DashboardConstants","fillRect","createGeometryMask","pageIndex","pageChosenContainer","currPageUIContainer","newPageUIContainer","setMask","bannerPos","getPageOptPositions","chosenIdx","bannerChosen","dashboardContainer","blackUnderlay","dashboardBg","pageOptButtons","pageOptButtonPositions","createPageOpt","geometryMask","DialogueGenerator","dialogueContent","currPart","currLineNum","dialogueLine","goto","part","GameActionConditionChecker","altPart","updateCurrPart","GamePosition","GameSize","StringUtils","lines","headerAndBodyLines","console","trim","isHeaderFunction","currHeader","sep","limit","substrings","phrase","splitByChar","trimRight","removeMultiLineComments","removeSingleLineComment","commentChars","removeAfter","commentIndex","indexOf","openCommentChars","closeCommentChars","newLines","commentOpen","l","commentRegions","openIns","findAllInstances","closeIns","activeIndex","openInd","closeInd","region","prevActive","removeCommentRegions","regions","newString","prevEnd","indices","word","charAt","capitalize","DialogueSpeakerRenderer","getUsername","getAccountInfo","changeSpeakerTo","currentSpeakerId","showNewSpeaker","drawSpeakerSprite","drawSpeakerBox","speakerId","speakerContainer","createSpeakerBox","speakerPosition","speakerSprite","rectangle","speakerText","DialogueManager","getDialogueGenerator","dialogueGenerator","getDialogueRenderer","getSpeakerRenderer","speakerRenderer","dialogue","playWholeDialogue","showNextLine","isCurrentPhaseTerminal","speakerDetail","generateNextLine","lineWithName","replace","promptTitle","choice","processGameActionsInSamePhase","GameDialogueStorageManager","dialogueStorage","newDialogue","speaker","getSpeakerName","clearDialogueStorage","storageLine","barWidth","barHeight","innerWidth","innerHeight","barX","barY","innerBarX","innerBarY","addLoadingScreen","progressBar","progressBox","loadingScreenBg","load","graphics","fillStyle","CommonRadioButton","defaultChoiceIdx","radioChoiceConfig","circleDim","checkedDim","outlineThickness","choiceTextConfig","bitmapTextStyle","buttonClickSoundKey","activeChoiceIdx","buttons","getRadioButtons","renderRadioButtons","activate","buttonPos","createRadioButton","Ellipse","setStrokeStyle","activeChoice","choiceText","optionChecked","getValueIdx","getChoices","getChosenChoice","optionTextStyle","optionHeaderTextStyle","applySettingsTextStyle","optHeaderTextConfig","opt","xSpace","radioButtonsTextConfig","volContainerOpts","escapeOptButtonStyle","volumeRadioOptTextStyle","optTextStyle","escapeOptTextConfig","settings","settingsTextConfig","radioButtons","radioChoiceTextConfig","volOpt","getSettingsSaveManager","EscapeMenu","escapeMenuContainer","escapeMenuBg","getSettings","settingsPos","Column","EscapeConstants","setting","bgmVolume","sfxVolume","sfxVolIdx","SettingsConstants","bgmVolIdx","sfxVolumeRadioButtons","createSettingsRadioOptions","bgmVolumeRadioButtons","getOptButtons","createEscapeOptButton","cleanUp","isGameType","GameType","Simulator","applySettings","sfxVol","newSettings","clearAllLayers","activateUI","deactivateUI","layers","getLayer","layerType","layerToHide","layerToShow","layerToFadeIn","layerToFadeOut","layerContainer","clearLayerContents","logTextStyle","scrollbarX","logTextConfig","textMaxWidth","logHeight","scrollbarTrack","scrollbarThumb","scrollSpeed","logContainer","textLog","bitmapText","LogConstants","setMaxWidth","textMinY","scrollbarThumbHeight","scrollbarThumbMaxY","thumbTextScrollRatio","scrollZone","Zone","deltaX","deltaY","deltaZ","GameMode","gameModeToPhase","GlowingImage","imageGlow","setBlendMode","BlendModes","ADD","getMapAssets","imageAsset","startGlow","glowClearer","clearGlow","startBlink","blinkClearer","getContainer","getClickArea","objIdsToRender","createObject","objectProperty","objectProp","GamePhaseManager","phaseMap","inputManager","phaseStack","None","interruptCheckCallback","interruptTransitionCallback","transitionCallback","gameUI","setInterruptCheckCallback","fn","setInterruptCallback","setCallback","prevPhase","pop","executePhaseTransition","getCurrentPhase","newPhase","phase","Small","Medium","Large","tweenDuration","currPopUp","popUpFrameImg","PopUpConstants","getAssetKey","popUpImage","setActive","scrollEntry","scaleY","popUp","atPosContainer","scrollExit","objProp","createEmptySaveState","gameSaveStates","userSaveState","collectibles","recentlyPlayedCheckpoint","largestCompletedChapter","createEmptyGameSaveState","lastCheckpointPlayed","currentLocation","currentPhase","chapterNewlyCompleted","incompleteTasks","completedTasks","completedObjectives","triggeredInteractions","triggeredStateChangeActions","convertMapToArray","completionMap","_objective","objective","gameCheckpoint","gameMap","getCharacterAtId","getChapterNewlyCompleted","subscribers","checkpointObjective","objectives","checkpointTask","tasks","updatedLocations","getLocationIds","loadStatesFromSaveManager","getTriggeredStateChangeActions","getTriggeredInteractions","getCompletedObjectives","setObjective","getCompletedTasks","task","setTask","getIncompleteTasks","getSubscriberForItemType","addLocationNotif","removeLocationNotif","hasLocationNotif","has","isCurrentLocation","modes","_this$gameMap$getLoca","_this$getSubscriberFo","_this$gameMap$getLoca2","_this$getSubscriberFo2","setItemInMap","getLocations","locId","_this$getSubscriberFo3","_this$getSubscriberFo4","newExpression","_this$getSubscriberFo5","isAllComplete","getObjectiveState","getTaskState","getObjectives","getAllTasks","getAllIncompleteTasks","taskTextStyle","taskTextConfig","checkMark","imageUrl","taskLogContainer","tasksData","taskListContainer","totalTextHeight","TaskLogConstants","taskTitle","underline","taskDescription","taskListContainerMinY","buttonConfigs","phaseManager","firstButton","toolbarContainer","ToolbarConstants","buttonConfig","createToolbarButton","backTextYPos","backButtonStyle","CommonBackButton","renderBackButton","normal","hover","exploreMenuContainer","enableInteractions","ExploreModeConstants","disableInteractions","activatable","explorePointerOut","explorePointerOver","explorePointerUp","modeButtonStyle","MenuLineConstants","getLatestLocationModes","currLocId","latestModesInLoc","talkTopics","modeMenuContainer","modeBanner","getModeButtons","lineList","createLine","MenuModeConstants","createModeButton","setLineWidth","moveButtonStyle","xOffSet","setTexture","MoveModeConstants","getLatestNavigations","navigation","moveMenuContainer","previewFrame","previewFill","navigations","getMoveButtons","createMoveButton","previewSprite","previewLoc","previewDefault","nav","removeKeyboardListener","talkButtonStyle","getLatestTalkTopics","talkMenuContainer","getTalkTopicButtons","TalkModeConstants","createTalkTopicButton","checkedSprite","dialogueIds","GameManager","Scene","stateManager","objectManager","dialogueManager","characterManager","boundingBoxManager","actionManager","layerManager","backgroundManager","popUpManager","getEscapeManager","escapeManager","getCollectibleManager","collectibleManager","getAchievementManager","achievementManager","getLogManager","logManager","dialogueStorageManager","getToolbarManager","toolbarManager","getTaskLogManager","taskLogManager","getDashboardManager","dashboardManager","hasTransitioned","continueGame","chapterNum","checkpointNum","setCurrentSceneRef","registerGameInfo","getLoadedLocation","startingLoc","GameStateManager","GameLayerManager","GameModeMenu","GameModeMove","GameModeExplore","GameModeTalk","GameModeSequence","GameCharacterManager","GameObjectManager","GameDialogueManager","GameBBoxManager","GamePopUpManager","GameEscapeManager","GameAwardsManager","getCollectibles","GameLogManager","GameToolbarManager","GameTaskLogManager","GameDashboardManager","Log","Tasks","Collectibles","Achievements","transitionChecker","checkpointTransition","handleCharacterLayer","preloadLocationsAssets","bindKeyboardTriggers","getSoundAssets","loadImage","spritesheet","startAction","gameLocation","renderToolbarContainer","bgmKey","fastForwardGameActions","getGameStartActions","bringUpUpdateNotif","delay","fadeBlack","blackFade","renderLocation","registerMenuKeyboardListener","shortcut","getCurrentLocationModes","getCheckpointCompleteActions","GameSaveManager","getGameSaveState","getLoadedPhase","getChapterNum","getCheckpointNum","getFullSaveState","fullSaveState","_JSON$parse$courseReg","method","headers","createHeaders","accessToken","resp","fetch","json","courseRegistration","gameStates","loadData","getCurrentSceneRef","prevGameState","gameStateManager","gameStateToJson","saveData","completedChapter","getLargestCompletedChapterNum","getChapterSaveState","defaultGlitchStyle","workerALines","workerTLines","WorkerConstants","putWorkerMessage","workerId","blackOverlay","linesPos","yStartPos","textFrames","baseTextConfig","numOfFrames","maxXDisplacement","maxYDisplacement","random","SCREEN","yoyo","loopDelay","createGlitchBitmapText","showLines","AwardsHallConstants","tileDim","maxAwardsPerCol","awardInfo","banner","bannerTextConfig","awardBannerTextStyle","awardNoAssetTitleStyle","awardHoverTitleStyle","awardHoverKeyStyle","awardHoverDescStyle","AwardsHall","isScrollLeft","isScrollRight","scrollLim","awardXSpace","achievementLength","collectibleLength","renderBackground","renderAwards","update","backgroundTile","awardsContainer","newXPos","tilePositionX","TileSprite","banners","bannerCont","createBanner","leftArrow","rightArrow","getAwards","achievementsPos","createAward","collectiblesPos","collectible","awardCont","createAwardsHoverContainer","hoverContainer","awardTitle","awardAssetKey","awardDesc","scrollFrameTop","scrollFrameBot","bannerContainer","bannerBg","bannerText","BindingConstants","keyDescTextConfig","yOffset1","yOffset2","keyStyle","keyDescStyle","Bindings","renderBindings","bindingsContainer","bindings","getBindings","bindingPositions","binding","createBinding","desc","bindingContainer","keyIcon","keyText","keyDesc","textures","once","loadText","cache","exists","chapterIndexStyle","chapterTitleStyle","pageNumberStyle","playButton","indexTextConfig","pageNumberTextConfig","imageRect","originalImageRectWidth","originalImageRectHeight","imageScale","chapComplete","chapPerRow","chapPerCol","chapPerPage","chapGapX","chapGapY","toTxtPath","TextAssets","defaultCheckpoint","awardsMapping","roomPreviewMapping","MockTextAssets","locations","mapAssets","dialogues","gameStartActions","checkpointCompleteActions","addSoundAsset","soundAsset","addMapAsset","addLocation","setModesAt","setNavigationFrom","getNavigationFrom","setGameStartActions","setCheckpointCompleteActions","addItemToLocation","setBGMusicAt","_this$objects$get","_this$locations$get","totalNumOfObjectives","numOfCompletedObjectives","prevState","addObjective","addObjectives","objState","setObjectives","taskDetails","prevDetail","newDetail","visible","addTask","newTask","taskId","addTasks","newTasks","taskState","getTaskDetail","taskDetail","_this$taskDetails$get","allVisibleTask","stringToSizeMap","small","medium","stringToPositionMap","left","middle","right","stringToGameModeMap","talk","explore","move","menu","stringToGameItemMap","stringToActionTypeMap","move_character","update_character","obtain_collectible","complete_objective","complete_task","show_task","add_item","remove_item","change_background","start_animation","stop_animation","show_dialogue","add_mode","remove_mode","add_popup","make_object_glow","make_object_blink","play_bgm","play_sfx","preview_location","show_object_layer","navigate_to_assessment","update_assessment_status","stringToGameStateStorageMap","checklist","tasklist","userstate","stringToUserStateTypeMap","ParserConverter","GameEntityType","ParserValidator","gameAnimMaps","Parser","gameItemAsserts","gameEntityAsserts","gameAnimAsserts","allItemIds","registerId","verifyAssertions","verifyGameItemAssert","verifyGameEntityAsserts","verifyGameAnimAsserts","assertItemType","assertionDetails","assertionDetail","actionAssertionError","assertItemTypes","itemIds","assertEntityType","gameEntityType","bgms","numberOfBgm","sound","sfxs","numberOfSfx","assertAnimType","idFound","attribute","ConditionParser","conditionDetails","hasExclamation","gameStateStorage","condParams","stringToGameStateStorage","stringToUserStateType","ActionParser","fullActionStrings","fullActionString","parseAction","rawActionString","actionString","conditionalsString","gameAction","parseActionContent","actionParamString","repeatable","gameActionType","stringToActionType","actionParamObj","assetCategory","stringToGameItemType","stringToGameMode","stringToPosition","stringToSize","stringToBoolean","PromptParser","splitChoice","rawChoice","splitWithLimit","CharacterParser","characterList","characterDetails","parseCharacterDetails","addToLoc","characterAssetKey","characterAssetPath","SpeakerParser","rawStr","speakerPositionStr","addCharacterExprToMap","charId","charExpression","DialogueParser","dialogueText","splitToParagraph","dialogueDetails","dialogueBody","parseDialogue","parseDialogueContent","toCapitalizedWords","newMap","mapValues","mapByHeader","createDialogueLines","dialogueLines","currIndex","isGotoLabel","gotoString","isPrompt","rawTitle","rawChoices","isPromptChoice","parsePrompt","isActionLabel","lastLine","isSpeaker","nextLine","RegExp","test","LocationDetailsParser","locationDetails","locationDetail","shortPath","locationAssetKey","locationPath","frameWidth","frameHeight","BoundingBoxParser","boundingBoxList","boundingBox","parseBBoxConfig","parseActions","bboxDetails","MusicParser","soundList","musicDetails","musicIndex","ObjectParser","objectList","parseObjectConfig","objectDetails","objectAssetKey","objectPath","LocationParser","locationBody","parseLocationConfig","parseLocationParagraphs","locationConfig","configValues","gameMode","otherLocationId","previewPath","entityHeader","TasksParser","actionIdNum","checkpoint","GameMap","GameObjective","GameTask","validator","chapterText","continueParse","checkPointLines","splitToLinesAndRemoveComments","parseCheckpointConfig","parseCheckpointParagraphs","checkpointConfig","LocationsParser","DialoguesParser","callGameManagerOnTxtLoad","textAssets","getIsUsingMock","filename","getGameChapters","filenames","defaultCheckpointText","callGameManagerForSim","checkpointFilenames","getSSChapterSimFilenames","createChapter","chapConstants","centreCol","centreRow","getCoorByChapter","chapterContainer","chapterDone","chapterPreview","chapterFrame","chapCompleteRect","chapCompleteText","chapterRepeatHover","chapterContinueHover","chapterRepeat","chapterContinue","chapterIndexText","chapterTitleText","chapterAccessible","ChapterSelect","chaptersContainer","backButtonContainer","pageNumberText","targetPage","preloadChapterAssets","renderChapters","targetX","chapterDetail","createChaptersContainer","numPages","latestChapter","setText","border","scrollPrevPage","scrollNextPage","chapterIndex","reverse","_this$pageNumberText","_this$pageNumberText2","transitionTextStyle","transitionTextConfig","entryTween","exitTween","CheckpointTransition","showTransitionText","CheckpointConstants","loadedGameState","chapterDetails","currChapter","currCheckpoint","isLastCheckpoint","saveChapterComplete","isLastChapter","transitionText","mainMenuStyle","studentRoom","awards","buttonTextConfig","xHide","onFocusTween","outFocusTween","MainMenu","renderOptionButtons","backgroundImg","MainMenuConstants","optionsContainer","getOptionButtons","createOptionButton","tweenOnHover","tweenOffHover","optButton","roomDefaultCode","verifiedStyle","RoomConstants","verifiedText","tag","hoverTagTextConfig","refreshButton","getRoomPreviewCode","roomAssessmentId","roomAssessment","getAssessmentOverviews","getRoomAssessmentId","getStudentRoomCode","getAssessment","mission","progQn","RoomPreview","sceneLoaded","getVerifCont","verifCont","preloadImageMap","preloadSoundMap","preloadSpritesheetMap","studentCode","getRoomCode","createContext","hoverTextFrame","hoverLine","DIFFERENCE","createVerifiedHoverContainer","eval","renderDefaultBackground","loadSound","loadSpritesheet","roomRefreshHover","loadRoomCode","stopAll","restart","initialiseManagers","moduleContexts","remotePath","file","runInContext","defaultAward","attachVerificationTag","backgroundAsset","getDefaultBackgroundKey","completedAssessmentIds","getAssessments","backgroundMapping","getRoomPreviewMapping","Settings","renderOptions","settingBgImg","optCont","optHeader","getSettingsHeader","optHeaderPos","createOptionHeader","createOptRadioOptions","applySettingsButton","optHeaderCont","headerDiv","headerText","bgmVol","getBaseSoundManager","getCurrentScene","soundAssetMap","currBgMusicKey","currBgMusic","getSoundAsset","setVolume","loadSoundAssetMap","assetMap","vol","isMounted","fadeOutAndDestroyMusic","isPaused","AwardParser","assetText","assetLines","splitToLines","awardBody","parseAwardParagraphs","awardProperties","RoomPreviewParser","assesmentId","Entry","preloadAssets","loadGameChapters","loadLastSaveState","preloadAwards","loadUserState","preloadRoomPreviewBackgrounds","applyLoadedSettings","awardsMappingTxt","setAwardsMapping","roomPreviewMappingTxt","setRoomPreviewMapping","entries","bitmapFont","GameUserStateManager","loadAchievements","Game","goalMapping","isCompleted","_goalMapping$get","newAwardProp","addAwardMapping","gameType","global","accountInfo","soundManager","userStateManager","saveManager","currentSceneRef","ssChapterSimFilenames","isUsingMock","roomCode","GameChapterMocks","gameChapters","setGameSimState","GameSoundManager","stopAllSounds","setAccountInfo","setAchievements","awardId","setGoals","setGameSimStateSetter","mapping","request","refreshToken","sortedChapters","fetchGameChapters","toggleUsingMock","setChapterSimStack","_SourceAcademyGame","debug","physics","default","parent","fps","createSourceAcademyGame","ok","Headers","append","isTestStudent","setIsTestStudent","setIsUsingMock","alert","GameSimState","sendRequest","route","requestPath","headerConfig","requestDetails","sendAssetRequest","sendStoryRequest","sendAdminStoryRequest","s3AssetFolders","fetchTextAssets","fetchFolder","endsWith","fetchAssetPaths","files","folderName","combinedList","newList","uploadAssetsToS3","fileList","responses","formData","FormData","uploadAssetToS3","fetchChapters","updateChapterRequest","specifyFolderText","AssetFileUploader","setFileList","uploadFolder","setUploadFolder","folderOverwrite","setFolderOverwrite","showfolderOverwrite","setShowFolderOverwrite","handleChangeUploadFolder","innerText","uploadButtonPopoverContent","folder","multiple","loadedFiles","finalFolder","treeMap","nodes","childNodes","assetPathsToTree","assetPaths","iconRenderer","rootFolders","assetObj","helper","parentFolders","secondaryLabel","memo","displayAssetPath","crossOrigin","onError","onerror","toolIcons","filePath","deleteFile","confirm","deleteS3File","GameSimulatorAssetSelection","useRequest","currentAsset","setCurrentAsset","assetTree","setAssetTree","GameSimulatorAssetViewer","Tree","onNodeClick","nodeData","isSelected","isExpanded","selectedPath","sessionStorage","setItem","SortableItem","SortableElement","SortableList","SortableContainer","setValue","setTitle","titleProps","useInput","setImageUrl","imageUrlProps","chosenFiles","setItems","setChosenFiles","onSortEnd","useSortableList","oldIndex","newIndex","arrayMoveImmutable","setIsPublished","openDate","setOpenDate","txtsNotChosen","setTxtsNotChosen","rerender","setRender","textAsset","deleteFileFromChosen","txtFile","prevItemList","addFileToChosen","deleteAllFromChosen","textFile","labelElement","updatedChapter","inAYear","createChapterIndex","story","clearChanges","deleteChapterRequest","setFullYear","getFullYear","defaultChapter","chapters","chosenIndex","setChosenIndex","GameSimulatorChapterEditor","mainMenuOptStyle","maxOptButtonsRow","gameTxtStorageName","checkpointTxt","loadFileLocally","storageName","reader","FileReader","readAsText","onloadend","s3TxtFiles","chosenFilename","setChosenFilename","uploadButton","chooseS3Txt","createHeadersWithCors","txt","CheckpointSim","CheckpointTxtLoader","mainMenuConstants","simulateCheckpoint","clearSessionStorage","gameSimBg","invertedButton","blueUnderlay","colorIcon","imageIcon","bboxIcon","handIcon","listIcon","eraseIcon","iconBg","SSImageAssets","createOptButton","AssetUploader","ChapterSim","defaultChapterText","getItem","backgroundUnderlay","createGameSimulatorGame","gameSimState","Default","GameSimulatorCheckpointSim","GameSimulatorAssetFileUploader","GameSimulatorChapterSim","GradingActions","Flex","justifyContent","spaceX","Link","BpIcon","reautogradeSubmission","unsubmitSubmission","BADGE_COLORS","missions","quests","paths","submitted","attempting","attempted","graded","grading","none","getBadgeColorFromLabel","AssessmentTypeBadge","Badge","SubmissionStatusBadge","statusText","GradingStatusBadge","badgeIcon","marginRight","FilterBadge","GradingSubmissionFilters","filters","onFilterRemove","columnHelper","createColumnHelper","Filterable","column","setFilterValue","GradingSubmissionTable","totalRows","pageSize","submissions","updateEntries","tableFilters","submissionsTableFilters","columnFilters","setColumnFilters","maxPage","resetPage","searchQuery","setSearchQuery","searchValue","setSearchValue","debouncedUpdateSearchValue","debounce","backendFilterParams","convertFilterToBackendParams","columns","makeColumns","accessor","cell","info","getValue","currentXp","xpBonus","enableColumnFilter","table","useReactTable","onColumnFiltersChange","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","updateSubmissionsTableFilters","alignItems","gap","handleFilterRemove","newFilters","TextInput","marginLeft","Table","TableHead","getHeaderGroups","headerGroup","TableRow","TableHeaderCell","isPlaceholder","flexRender","columnDef","getContext","TableBody","getRowModel","getVisibleCells","TableCell","Footer","Bold","gradingEditorButtonClass","mdeToBlueprintIconMap","bold","italic","link","quote","mdeToBlueprintIconMapping","handleGradingSave","handleGradingSaveAndContinue","handleReautogradeAnswer","args","submitGrading","submitGradingAndContinue","reautogradeAnswer","xpAdjustmentInput","setXpAdjustmentInput","xpAdjustment","setEditorValue","currentlySaving","setCurrentlySaving","makeInitialState","validateXpBeforeSave","handleSaving","newXpAdjustmentInput","initialXp","checkHasUnsavedChanges","discardButtonOpts","saveAndContinueButtonOpts","totalXp","xpPlaceholder","H3","studentName","studentUsername","onXpAdjustmentInputChange","valueAsNumber","valueAsString","buttonPosition","minorStepSize","majorStepSize","ReactMde","onTabChange","tab","generateMarkdownPreview","markdown","minEditorHeight","maxEditorHeight","minPreviewHeight","getIcon","blueprintIcon","htmlTitle","onClickSaveAndContinue","unansweredPrependValue","_question$library4","_question$library5","_question$library6","_question$library6$ex","gradings","currentSubmission","storedSubmissionId","handleSetActiveEditorTabIndex","handleRemoveEditorTabByIndex","handleGradingFetch","handleUpdateCurrentSubmissionId","fetchGrading","testcaseId","updateCurrentSubmissionId","unsavedChanges","answers","showSimpleErrorDialog","_questionData$solutio","questionData","gradingWorkspacePath","_answers$questionId$g","GradingEditor","grade","student","summaryLong","groupOptions","showOptions","pageSizeOptions","Grading","_params$submissionId","_gradingOverviews$dat","_gradingOverviews$dat2","gradingOverviews","isAdmin","showAllGroups","setShowAllGroups","setPageSize","showAllSubmissions","setShowAllSubmissions","updateGradingOverviewsCallback","filterParams","fetchGradingOverviews","ungradedToBackendParams","paginationToBackendParams","GradingWorkspace","Title","exportGradingCSV","SimpleDropdown","selectedValue","popoverProps","buttonProps","GradingSubmissionsTable","DefaultChapterSelect","chosenSublang","setSublanguage","sourceLanguages","setDialogState","handleUpdateSublanguage","sublang","changeSublanguage","handleConfirmDialog","chapterRenderer","lang","displayName","chapterListRenderer","itemsParentRef","renderItem","defaultChoices","variantChoices","ulRef","DefaultChapterSelectComponent","dialog","styliseSublanguage","itemListRenderer","DeleteCell","handleDeleteAssessment","setFile","isWarningShown","setPromptShown","setForceUpdate","setAssessmentConfigId","handleUploadAssessment","_props$assessmentConf","handleConfirmUpload","handleCancelUpload","handleDropAccepted","acceptedFiles","handleDropRejected","rejectedFiles","getInputProps","isFocused","isDragActive","isDragAccept","isDragReject","useDropzone","onDropAccepted","onDropRejected","classList","handleSwitchOnChange","toggleButton","handleConfirmForceUpdate","handleCancelForceUpdate","confirmationPrompt","interactive","dateDisplayFormat","EditCell","forOpenDate","handleAssessmentChangeDate","minDate","maxDate","currentDateString","currentDate","ISO_8601","newDate","setNewDate","handleUpdateDate","handleDateChange","selectedDate","handleDateError","dateInput","DateInput3","formatDate","parseDate","toDate","disableTimezoneSelect","timePrecision","closeOnSelection","PublishCell","handlePublishAssessment","handleTogglePublished","GroundControl","loadContent","handleAssessmentOverviewFetch","handleFetchCourseConfigs","dateFilterComparator","filterDate","cellValue","cellDate","columnApi","applyColumnState","colId","toggleDropzone","showDropzone","comparator","inRangeInclusive","sortingOrder","controls","dropzone","Dropzone","connect","bindActionCreators","changeDateAssessment","deleteAssessment","uploadAssessment","publishAssessment","notificationPreference","systemEnabled","defaultTimeOption","prefTimeOption","filteredTimeOptions","timeOptionId","NotiPreference","hasChanges","setHasChanges","configurableNotificationConfigs","fetchConfigurableNotificationConfigs","_configurableNotifica","setTimeOption","_configurableNotifica3","_configurableNotifica2","_configurableNotifica4","_configurableNotifica5","preferences","updateNotificationPreferences","SourcereelControlbar","recorder","dialogOpen","updateTimerDuration","getTimerDuration","handleTruncatePlaybackData","truncatedInputs","handleResetInputs","handleRecorderPausing","handleTimerPause","updater","URL","createObjectURL","exportWAV","handleRecorderStarting","Recorder","handleRecordInit","handleTimerStart","handleRecorderResuming","handleTimerResume","resume","handleRecorderResumingFromCurrent","handleRecorderStopping","handleTimerStop","fileDataBlob","handleRecorderResetting","handleTimerReset","handleRecorderSaving","handleSaveSourcecastData","saveTitle","saveDescription","saveUID","handleSaveTitleInputChange","handleSaveDescriptionInputChange","handleSaveUIDInputChange","RecorderRecordPauseButton","handleRecordPause","RecorderPauseButton","RecorderResumeButton","RecorderResumeFromCurrentButton","RecorderStartButton","RecorderStopButton","RecorderResetButton","RecorderSaveButton","recordingStatus","RecordingStatus","sourcecastLocation","Sourcereel","sourcecast","timeElapsedBeforePause","timeResumed","handleRecordInput","recordInput","readonly","editorEvalHandler","isRecording","deleteSourcecastEntry","resetInputs","saveSourcecastData","timerPause","timerReset","timeBefore","timerResume","timerStart","timerStop","initData","recordInit","Academy","fetchNotifications","agreedToResearch","staffRoutes","gradingRegExp","GameSimulator","assessmentRegExp","Assessment","CourseSelectingAcademy","routeCourseIdStr","routeCourseId","updateLatestViewedCourse","Component","webpackAsyncContext","req","__webpack_require__","o","ids","module","exports"],"sourceRoot":""}