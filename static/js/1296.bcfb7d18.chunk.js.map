{"version":3,"file":"static/js/1296.bcfb7d18.chunk.js","mappings":"4JAaO,SAASA,EAAWC,GACzB,MAAMC,EAASC,EAAAA,EAAAA,MAASF,GACxB,IAAK,MAAOG,EAAKC,KAAQC,OAAOC,QAAQL,IAClCM,EAAAA,EAAAA,SAAQH,GACVH,EAAOE,GAAOC,EAAII,KAAK,KACN,OAARJ,UACFH,EAAOE,GAIlB,OAAOF,CACT,C,4PCvBA,QAAmU,qBAAnU,EAAuW,4BAAvW,EAAgZ,0B,+CCwBhZ,MAAMQ,EAAY,IAAIC,EAAAA,EAAAA,cAAAA,WAAmCC,KAAI,EAAEC,GAAMC,YAAO,CAC1ED,KACAC,WAGIC,EAAkBA,KAAO,IAADC,EAC5B,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,WAAEC,EAAU,SAAEC,IAAaC,EAAAA,EAAAA,MAC3BC,GAAWC,EAAAA,EAAAA,OACX,KAAEC,EAAI,OAAEC,EAAQC,SAAUC,IAAe7B,EAAAA,EAAAA,GAAWmB,EAASW,QAG7DC,EAAWL,GAAQC,EAEnBK,GAAcC,EAAAA,EAAAA,cAAaJ,GAAuBZ,GAASiB,EAAAA,EAAAA,OAAML,KAAc,CAACZ,IAEhFkB,GAAgD,QAAvCnB,EAAAL,EAAAA,EAAAA,cAAAA,IAA4BkB,UAAW,IAAAb,OAAA,EAAvCA,EAAyCoB,QAASC,EAAAA,GAAAA,SAoBjE,OAlBAC,EAAAA,EAAAA,YAAU,KAEJjB,EAEAG,OADee,IAAbjB,EACQ,YAAWA,IAEZ,aAORS,IAAYI,GAAYd,GAC3BJ,GAASuB,EAAAA,EAAAA,WAAUT,EAAUF,GAC/B,GACC,CAACE,EAAUI,EAAQN,EAAYZ,EAAUK,EAAUE,EAAUH,IAE5DU,GAAYI,GAEZM,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAWC,EAAkBC,EAAAA,MAAcC,UACzDL,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAACC,UAAWC,EAAAA,EAAAA,KAAeH,UAC9BL,EAAAA,EAAAA,KAAA,OAAAK,UACEL,EAAAA,EAAAA,KAACS,EAAAA,EAAa,CACZC,YAAY,gBACZC,MAAMX,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,KAAMC,EAAAA,EAAAA,iBAS/Bd,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAWC,EAAkBC,EAAAA,MAAcC,UACzDU,EAAAA,EAAAA,MAACT,EAAAA,EAAI,CAACC,UAAWC,EAAAA,EAAAA,KAAeH,SAAA,EAC9BL,EAAAA,EAAAA,KAAA,OAAKC,UAAWE,EAAwBE,UACtCU,EAAAA,EAAAA,MAACC,EAAAA,GAAE,CAAAX,SAAA,EACDL,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAChB,UAAWE,EAAuBQ,KAAMO,EAAAA,EAAAA,OAAkB,cAIpElB,EAAAA,EAAAA,KAAA,OAAAK,UACEL,EAAAA,EAAAA,KAACmB,EAAAA,EAAW,CAACC,MAAM,EAAMC,UAAU,EAAKhB,SACrCpC,EAAUE,KAAI,EAAGC,KAAIC,WACpB2B,EAAAA,EAAAA,KAACsB,EAAW,CAACC,YAAahC,EAAalB,KAAMA,EAAMD,GAAIA,GAASA,aAKpE,EAIJkD,EAAcA,EAClBC,cACAnD,KACAC,WAOE2B,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CACLvB,UAAWG,EAAAA,MACXqB,UAAWP,EAAAA,EAAAA,OACXQ,SAASlC,EAAAA,EAAAA,cAAY,IAAM+B,EAAYnD,IAAK,CAACmD,EAAanD,IAAKiC,SAE7D,eAAchC,MAOTsD,EAAYrD,EACzBqD,EAAUC,YAAc,QAExB,S","sources":["commons/utils/QueryHelper.ts","webpack://frontend/./src/styles/Login.module.scss?9a66","pages/login/Login.tsx"],"sourcesContent":["import qs from 'query-string';\nimport { isArray } from 'util';\n\nexport interface IParsedQuery {\n  [key: string]: string;\n}\n\n/**\n * Parse a query string into an object.\n *\n * This is a wrapper for query-string that disables array and null parsing (so\n * the object has only strings).\n */\nexport function parseQuery(query: string): IParsedQuery {\n  const parsed = qs.parse(query);\n  for (const [key, val] of Object.entries(parsed)) {\n    if (isArray(val)) {\n      parsed[key] = val.join(',');\n    } else if (val === null) {\n      delete parsed[key];\n    }\n  }\n\n  return parsed as IParsedQuery;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Application__main\":\"Login_Application__main__QzeJD\",\"WorkspaceParent\":\"Login_WorkspaceParent__qIfLf\",\"bp5-tag\":\"Login_bp5-tag__e9ao2\",\"badge\":\"Login_badge__q6mTz\",\"bp5-overlay\":\"Login_bp5-overlay__-UBAx\",\"bp5-popover-content\":\"Login_bp5-popover-content__kfPsh\",\"badge-tag\":\"Login_badge-tag__cmGPn\",\"Login\":\"Login_Login__DtYZu\",\"login-header\":\"Login_login-header__JsuQb\",\"login-icon\":\"Login_login-icon__SZKTt\"};","import {\n  Button,\n  ButtonGroup,\n  Card,\n  Classes,\n  Elevation,\n  H4,\n  Icon,\n  NonIdealState,\n  Spinner,\n  SpinnerSize\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router';\nimport { AuthProviderType } from 'src/commons/utils/AuthHelper';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport classes from 'src/styles/Login.module.scss';\n\nimport { fetchAuth, login } from '../../commons/application/actions/SessionActions';\nimport Constants from '../../commons/utils/Constants';\nimport { parseQuery } from '../../commons/utils/QueryHelper';\n\nconst providers = [...Constants.authProviders.entries()].map(([id, { name }]) => ({\n  id,\n  name\n}));\n\nconst Login: React.FC = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const { isLoggedIn, courseId } = useSession();\n  const navigate = useNavigate();\n  const { code, ticket, provider: providerId } = parseQuery(location.search);\n\n  // `code` parameter from OAuth2 redirect, `ticket` from CAS redirect\n  const authCode = code || ticket;\n\n  const handleLogin = useCallback((providerId: string) => dispatch(login(providerId)), [dispatch]);\n\n  const isSaml = Constants.authProviders.get(providerId)?.type === AuthProviderType.SAML_SSO;\n\n  useEffect(() => {\n    // If already logged in, navigate to relevant course page\n    if (isLoggedIn) {\n      if (courseId !== undefined) {\n        navigate(`/courses/${courseId}`);\n      } else {\n        navigate('/welcome');\n      }\n      return;\n    }\n\n    // Else fetch JWT tokens and user info from backend when auth provider code is present\n    // SAML does not require code, as relay is handled in backend\n    if ((authCode || isSaml) && !isLoggedIn) {\n      dispatch(fetchAuth(authCode, providerId));\n    }\n  }, [authCode, isSaml, providerId, dispatch, courseId, navigate, isLoggedIn]);\n\n  if (authCode || isSaml) {\n    return (\n      <div className={classNames(classes['Login'], Classes.DARK)}>\n        <Card elevation={Elevation.FOUR}>\n          <div>\n            <NonIdealState\n              description=\"Logging In...\"\n              icon={<Spinner size={SpinnerSize.LARGE} />}\n            />\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames(classes['Login'], Classes.DARK)}>\n      <Card elevation={Elevation.FOUR}>\n        <div className={classes['login-header']}>\n          <H4>\n            <Icon className={classes['login-icon']} icon={IconNames.LOCK} />\n            LOGIN\n          </H4>\n        </div>\n        <div>\n          <ButtonGroup fill={true} vertical={true}>\n            {providers.map(({ id, name }) => (\n              <LoginButton handleClick={handleLogin} name={name} id={id} key={id} />\n            ))}\n          </ButtonGroup>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nconst LoginButton = ({\n  handleClick,\n  id,\n  name\n}: {\n  handleClick: (id: string) => void;\n  id: string;\n  name: string;\n}) => {\n  return (\n    <Button\n      className={Classes.LARGE}\n      rightIcon={IconNames.LOG_IN}\n      onClick={useCallback(() => handleClick(id), [handleClick, id])}\n    >\n      {`Log in with ${name}`}\n    </Button>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = Login;\nComponent.displayName = 'Login';\n\nexport default Login;\n"],"names":["parseQuery","query","parsed","qs","key","val","Object","entries","isArray","join","providers","Constants","map","id","name","Login","_Constants$authProvid","dispatch","useDispatch","location","useLocation","isLoggedIn","courseId","useSession","navigate","useNavigate","code","ticket","provider","providerId","search","authCode","handleLogin","useCallback","login","isSaml","type","AuthProviderType","useEffect","undefined","fetchAuth","_jsx","className","classNames","classes","Classes","children","Card","elevation","Elevation","NonIdealState","description","icon","Spinner","size","SpinnerSize","_jsxs","H4","Icon","IconNames","ButtonGroup","fill","vertical","LoginButton","handleClick","Button","rightIcon","onClick","Component","displayName"],"sourceRoot":""}