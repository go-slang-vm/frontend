{"version":3,"file":"static/js/8991.138f7f59.chunk.js","mappings":"4JAaO,SAASA,EAAWC,GACzB,MAAMC,EAASC,EAAAA,EAAAA,MAASF,GACxB,IAAK,MAAOG,EAAKC,KAAQC,OAAOC,QAAQL,IAClCM,EAAAA,EAAAA,SAAQH,GACVH,EAAOE,GAAOC,EAAII,KAAK,KACN,OAARJ,UACFH,EAAOE,GAIlB,OAAOF,CACT,C,gNCRA,MAAMQ,EAA2BA,KAC/B,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAab,EAAAA,EAAAA,GAAWW,EAASG,QAAQC,MAExCC,EAAOC,IAAYC,EAAAA,EAAAA,UAA0C,WAQpE,OAPAC,EAAAA,EAAAA,YAAU,KACM,YAAVH,GAAuBI,EAAAA,EAAAA,gBAA4BP,IACrDI,EAAS,WAmCfI,eACER,EACAS,EACAC,GAEA,MAAMC,QAAuBC,EAAAA,GAC3BL,EAAAA,EAAAA,oBACAjB,EAAAA,EAAAA,UAAa,CACXY,KAAMF,EACNS,SAAUA,KAId,IAAII,EAEJ,IAIE,GAFAA,QAAiBF,EAAeG,OAEK,qBAA1BD,EAASE,aAClB,MAAM,IAAIC,MAAM,oCAEpB,CAAE,MAAOC,GAEP,YADAP,GAEF,CAEA,IAE2B,IAAIQ,iBAAiB,0BAC7BC,YAAYN,EAASE,cACtCK,OAAOC,OACT,CAAE,MAAOJ,GAEP,CAEJ,CAtEMK,CAA4BtB,EAAYO,EAAAA,EAAAA,gBAA0B,IAAMH,EAAS,WACnF,GACC,CAACJ,EAAYG,IAEXI,EAAAA,EAAAA,eASAP,EASY,UAAVG,GACLoB,EAAAA,EAAAA,KAACC,EAAO,CAACC,MAAM,2CAA0CC,SAAC,8HAK1DH,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,IAAW,SAAUC,EAAAA,MAAcH,UACjDH,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAACC,YAAY,gBAAgBC,MAAMT,EAAAA,EAAAA,KAACU,EAAAA,EAAO,CAACC,KAAMC,EAAAA,EAAAA,aAdhEZ,EAAAA,EAAAA,KAACC,EAAO,CAACC,MAAM,2CAA0CC,SAAC,mGAT1DH,EAAAA,EAAAA,KAACC,EAAO,CAACC,MAAM,2CAA0CC,SAAC,kGAyB7D,EAyCH,SAASF,GAAQ,MAAEC,EAAK,SAAEC,IACxB,OACEH,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,IAAW,SAAUC,EAAAA,MAAcH,UACjDH,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAACE,KAAMI,EAAAA,EAAAA,MAAiBX,MAAOA,EAAOM,YAAaL,KAGvE,CAIO,MAAMW,EAAYxC,EACzBwC,EAAUC,YAAc,iBAExB,S","sources":["commons/utils/QueryHelper.ts","pages/githubCallback/GitHubCallback.tsx"],"sourcesContent":["import qs from 'query-string';\nimport { isArray } from 'util';\n\nexport interface IParsedQuery {\n  [key: string]: string;\n}\n\n/**\n * Parse a query string into an object.\n *\n * This is a wrapper for query-string that disables array and null parsing (so\n * the object has only strings).\n */\nexport function parseQuery(query: string): IParsedQuery {\n  const parsed = qs.parse(query);\n  for (const [key, val] of Object.entries(parsed)) {\n    if (isArray(val)) {\n      parsed[key] = val.join(',');\n    } else if (val === null) {\n      delete parsed[key];\n    }\n  }\n\n  return parsed as IParsedQuery;\n}\n","import { Classes, NonIdealState, Spinner, SpinnerSize } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport qs from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nimport Constants from '../../commons/utils/Constants';\nimport { parseQuery } from '../../commons/utils/QueryHelper';\nimport * as GitHubUtils from '../../features/github/GitHubUtils';\n\n/**\n * The page that the user is redirected to after they have approved the app through GitHub.\n * This page will complete the OAuth workflow by sending the access code the back-end to retrieve the auth-token.\n * The auth-token is then broadcasted back to the main browser page.\n */\nconst GitHubCallback: React.FC = () => {\n  const location = useLocation();\n  const accessCode = parseQuery(location.search).code;\n\n  const [state, setState] = useState<'initial' | 'loading' | 'error'>('initial');\n  useEffect(() => {\n    if (state === 'initial' && Constants.githubClientId && accessCode) {\n      setState('loading');\n      retrieveAuthTokenUpdatePage(accessCode, Constants.githubClientId, () => setState('error'));\n    }\n  }, [accessCode, state]);\n\n  if (!Constants.githubClientId) {\n    return (\n      <Failure title=\"We couldn't authenticate you with GitHub\">\n        Client ID not included with deployment. Please try again or contact the website\n        administrator.\n      </Failure>\n    );\n  }\n\n  if (!accessCode) {\n    return (\n      <Failure title=\"We couldn't authenticate you with GitHub\">\n        Access code not found in callback URL. Please try again or contact the website\n        administrator.\n      </Failure>\n    );\n  }\n\n  return state === 'error' ? (\n    <Failure title=\"We couldn't authenticate you with GitHub\">\n      Connection with server was denied, or incorrect payload received. Please try again or contact\n      the website administrator.\n    </Failure>\n  ) : (\n    <div className={classNames('NoPage', Classes.DARK)}>\n      <NonIdealState description=\"Logging In...\" icon={<Spinner size={SpinnerSize.LARGE} />} />\n    </div>\n  );\n};\n\nasync function retrieveAuthTokenUpdatePage(\n  accessCode: string,\n  clientId: string,\n  onError: () => void\n) {\n  const responseObject = await GitHubUtils.exchangeAccessCode(\n    Constants.githubOAuthProxyUrl,\n    qs.stringify({\n      code: accessCode,\n      clientId: clientId\n    })\n  );\n\n  let response: any;\n\n  try {\n    // This line might throw syntax error if the payload received is in the wrong format\n    response = await responseObject.json();\n\n    if (typeof response.access_token === 'undefined') {\n      throw new Error('Access Token not found in payload');\n    }\n  } catch (err) {\n    onError();\n    return;\n  }\n\n  try {\n    // Send auth token back to the main browser page\n    const broadcastChannel = new BroadcastChannel('GitHubOAuthAccessToken');\n    broadcastChannel.postMessage(response.access_token);\n    window.close();\n  } catch (err) {\n    // This block should not be reached during normal running of code\n    // However, BroadcastChannel does not exist in the test environment\n  }\n}\n\nfunction Failure({ title, children }: { title: string; children: string }) {\n  return (\n    <div className={classNames('NoPage', Classes.DARK)}>\n      <NonIdealState icon={IconNames.ERROR} title={title} description={children} />\n    </div>\n  );\n}\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = GitHubCallback;\nComponent.displayName = 'GitHubCallback';\n\nexport default GitHubCallback;\n"],"names":["parseQuery","query","parsed","qs","key","val","Object","entries","isArray","join","GitHubCallback","location","useLocation","accessCode","search","code","state","setState","useState","useEffect","Constants","async","clientId","onError","responseObject","GitHubUtils","response","json","access_token","Error","err","BroadcastChannel","postMessage","window","close","retrieveAuthTokenUpdatePage","_jsx","Failure","title","children","className","classNames","Classes","NonIdealState","description","icon","Spinner","size","SpinnerSize","IconNames","Component","displayName"],"sourceRoot":""}