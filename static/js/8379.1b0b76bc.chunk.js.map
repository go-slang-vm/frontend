{"version":3,"file":"static/js/8379.1b0b76bc.chunk.js","mappings":"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","sources":["pages/sicp/subcomponents/SicpExercise.tsx","pages/sicp/subcomponents/SicpLatex.tsx","commons/controlBar/ControlBarCloseButton.tsx","features/sicp/SourceTheme.ts","pages/sicp/subcomponents/CodeSnippet.tsx","features/sicp/parser/ParseJson.tsx","features/sicp/utils/SicpUtils.ts","features/sicp/errors/SicpErrors.tsx","features/sicp/errors/SicpErrorBoundary.tsx","webpack://frontend/./src/styles/Chatbot.module.scss?d8f1","pages/sicp/subcomponents/chatbot/SicpNotes.ts","pages/sicp/subcomponents/chatbot/ChatBox.tsx","pages/sicp/subcomponents/chatbot/Chatbot.tsx","pages/sicp/subcomponents/SicpIndexPage.tsx","pages/sicp/Sicp.tsx"],"sourcesContent":["import { Button, Card, Collapse, Elevation } from '@blueprintjs/core';\nimport React from 'react';\n\ntype SicpExerciseProps = OwnProps;\ntype OwnProps = {\n  title: string;\n  body: JSX.Element;\n  solution: JSX.Element | undefined;\n};\n\nexport const noSolutionPlaceholder = (\n  <span>\n    There is currently no solution available for this exercise. This textbook adaptation is a\n    community effort. Do consider contributing by providing a solution for this exercise.\n    Instructions on how to contribute can be found at{' '}\n    <a href=\"https://github.com/source-academy/sicp/wiki/Contributing-Exercise-Solutions\">\n      https://github.com/source-academy/sicp/wiki/Contributing-Exercise-Solutions\n    </a>\n    .\n  </span>\n);\n\nconst SicpExercise: React.FC<SicpExerciseProps> = props => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const onClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <Card className=\"sicp-exercise\" interactive={false} elevation={Elevation.ONE}>\n      <b>{props.title}</b>\n      <div>{props.body}</div>\n      <div className=\"sicp-button-container\">\n        <Button onClick={onClick} large={true} className=\"sicp-show-solution-button\">\n          {isOpen ? 'Hide Solution' : 'Show Solution'}\n        </Button>\n      </div>\n      <Collapse className=\"sicp-solution\" isOpen={isOpen}>\n        {props.solution ? props.solution : noSolutionPlaceholder}\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default SicpExercise;\n","import React from 'react';\nimport Latex from 'react-latex-next';\n\ntype SicpLatexProps = {\n  math: string;\n};\n\nconst SicpLatex: React.FC<SicpLatexProps> = props => {\n  return <Latex>{props.math}</Latex>;\n};\n\nexport default SicpLatex;\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarCloseButtonProps = {\n  handleClose: () => void;\n};\n\nexport const ControlBarCloseButton: React.FC<ControlBarCloseButtonProps> = ({ handleClose }) => {\n  return <ControlButton label=\"Close\" icon={IconNames.CROSS} onClick={handleClose} />;\n};\n","import React from 'react';\n\n/**\n * Source Theme for use with react-syntax-highlighter.\n * Tries to match the Source Theme for Ace Editor in js-slang\n */\nconst SourceThemeBackground = '#2c3e50';\n\nexport const SourceTheme: { [key: string]: React.CSSProperties } = {\n  'code[class*=\"language-\"]': {\n    color: 'white',\n    background: 'transparent',\n    fontFamily: \"'Inconsolata', 'Consolas', monospace\",\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    lineHeight: '1.5',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    fontSize: '1rem'\n  },\n  'pre[class*=\"language-\"]': {\n    color: 'white',\n    background: SourceThemeBackground,\n    fontFamily: \"'Inconsolata', 'Consolas', monospace\",\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    lineHeight: '1.5',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    padding: '1em',\n    margin: '0.5em 0',\n    overflow: 'auto',\n    borderRadius: '0.3em'\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    background: 'transparent',\n    padding: '0.1em',\n    borderRadius: '0.3em',\n    whiteSpace: 'normal'\n  },\n  comment: {\n    color: '#0088FF'\n  },\n  punctuation: {\n    color: 'white'\n  },\n  boolean: {\n    color: '#FF628C'\n  },\n  number: {\n    color: '#FF628C'\n  },\n  string: {\n    color: '#3AD900'\n  },\n  operator: {\n    color: '#FF9D00'\n  },\n  function: {\n    color: '#ffdd00'\n  },\n  keyword: {\n    color: '#FF9D00'\n  }\n};\n","import { Card, Elevation, Pre } from '@blueprintjs/core';\nimport { HighlightRulesSelector, ModeSelector } from 'js-slang/dist/editors/ace/modes/source';\nimport { Resizable } from 're-resizable';\nimport React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport ControlBar from 'src/commons/controlBar/ControlBar';\nimport { ControlBarCloseButton } from 'src/commons/controlBar/ControlBarCloseButton';\nimport { useResponsive } from 'src/commons/utils/Hooks';\nimport { SourceTheme } from 'src/features/sicp/SourceTheme';\nimport Playground from 'src/pages/playground/Playground';\n\nimport { CodeSnippetContext } from '../Sicp';\n\nexport type CodeSnippetProps = OwnProps;\ntype OwnProps = {\n  body: string;\n  output: string;\n  id: string;\n  initialEditorValueHash: string;\n  prependLength: number | undefined;\n};\n\nconst resizableProps = {\n  enable: {\n    top: false,\n    right: false,\n    bottom: true,\n    left: false,\n    topRight: false,\n    bottomRight: false,\n    bottomLeft: false,\n    topLeft: false\n  },\n  defaultSize: {\n    width: '100%',\n    height: '500px'\n  },\n  minHeight: '250px',\n  maxHeight: '2000px'\n};\n\nconst CodeSnippet: React.FC<CodeSnippetProps> = props => {\n  const { body, output, id } = props;\n  const context = React.useContext(CodeSnippetContext);\n  const { isMobileBreakpoint } = useResponsive();\n\n  const handleOpen = () => {\n    context.setActive(id);\n  };\n\n  const handleClose = React.useCallback(() => {\n    context.setActive('0');\n  }, [context]);\n\n  const WorkspaceProps = {\n    initialEditorValueHash: props.initialEditorValueHash,\n    prependLength: props.prependLength,\n    isSicpEditor: true,\n\n    handleCloseEditor: handleClose\n  };\n\n  HighlightRulesSelector(4);\n  ModeSelector(4);\n\n  const closeButton = React.useMemo(\n    () => <ControlBarCloseButton key=\"close\" handleClose={handleClose} />,\n    [handleClose]\n  );\n\n  const controlBarProps = {\n    editorButtons: [],\n    flowButtons: [],\n    editingWorkspaceButtons: [closeButton]\n  };\n\n  return (\n    <div className=\"sicp-code-snippet\">\n      {context.active === id ? (\n        <div className=\"sicp-code-snippet-open\">\n          <ControlBar {...controlBarProps} />\n          {isMobileBreakpoint ? (\n            <div className=\"sicp-workspace-container-container\">\n              <Playground {...WorkspaceProps} />\n            </div>\n          ) : (\n            <div className=\"sicp-code-snippet-desktop-open\">\n              <Resizable {...resizableProps}>\n                <div className=\"sicp-workspace-container-container\">\n                  <Playground {...WorkspaceProps} />\n                </div>\n              </Resizable>\n            </div>\n          )}\n        </div>\n      ) : (\n        <Card className=\"sicp-code-snippet-closed\" interactive={true} elevation={Elevation.TWO}>\n          <SyntaxHighlighter language=\"javascript\" style={SourceTheme} onClick={handleOpen}>\n            {body}\n          </SyntaxHighlighter>\n        </Card>\n      )}\n      {output && (\n        <Pre>\n          <em>{output}</em>\n        </Pre>\n      )}\n    </div>\n  );\n};\n\nexport default CodeSnippet;\n","import { Blockquote, Code, H1, H2, H4, Icon, OL, Pre, UL } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Constants from 'src/commons/utils/Constants';\nimport SicpExercise from 'src/pages/sicp/subcomponents/SicpExercise';\nimport SicpLatex from 'src/pages/sicp/subcomponents/SicpLatex';\n\nimport CodeSnippet from '../../../pages/sicp/subcomponents/CodeSnippet';\n\n// Custom error class for errors when parsing JSON files.\nexport class ParseJsonError extends Error {}\n\n/**\n * Functions to handle parsing of JSON files into JSX elements.\n */\nexport type JsonType = {\n  child?: Array<JsonType>;\n  tag?: string;\n  body?: string;\n  output?: string;\n  scale?: string;\n  snippet?: JsonType;\n  table?: JsonType;\n  images?: Array<JsonType>;\n  src?: string;\n  captionHref?: string;\n  captionName?: string;\n  captionBody?: Array<JsonType>;\n  latex?: boolean;\n  author?: string;\n  date?: string;\n  title?: string;\n  solution?: Array<JsonType>;\n  id?: string;\n  program?: string;\n  href?: string;\n  count?: number;\n  eval?: boolean;\n  prependLength?: number;\n};\n\ntype RefType = React.MutableRefObject<Record<string, HTMLElement | null>>;\ntype AnchorLinkType = {\n  children: React.ReactNode;\n  id: string | undefined;\n  refs: RefType;\n  top: number;\n};\n\nconst AnchorLink: React.FC<AnchorLinkType> = props => {\n  const { refs, id, children, top } = props;\n  return (\n    <div className=\"sicp-anchor-link-container\">\n      {id && (\n        <Link\n          className=\"sicp-anchor-link\"\n          style={{ top: top }}\n          ref={ref => (refs.current[id] = ref)}\n          to={id}\n        >\n          <Icon icon={IconNames.LINK} />\n        </Link>\n      )}\n      {children}\n    </div>\n  );\n};\n\nconst handleFootnote = (obj: JsonType, refs: RefType) => {\n  return (\n    <>\n      {obj.count === 1 && <hr />}\n      <div className=\"sicp-footnote\">\n        <div ref={ref => (refs.current[obj.id!] = ref)} />\n        <a href={obj.href}>{'[' + obj.count + '] '}</a>\n        {parseArr(obj.child!, refs)}\n      </div>\n    </>\n  );\n};\n\nconst handleRef = (obj: JsonType, refs: RefType) => {\n  return (\n    <Link ref={ref => (refs.current[obj.id!] = ref)} to={obj.href!}>\n      {obj.body}\n    </Link>\n  );\n};\n\nconst handleEpigraph = (obj: JsonType, refs: RefType) => {\n  const { child, author, title, date } = obj;\n\n  const hasAttribution = author || title || date;\n\n  const attribution = [];\n  attribution.push(<React.Fragment key=\"attribution\">-</React.Fragment>);\n\n  if (author) {\n    attribution.push(<React.Fragment key=\"author\">{author}</React.Fragment>);\n  }\n\n  if (title) {\n    attribution.push(<i key=\"title\">{title}</i>);\n  }\n\n  if (date) {\n    attribution.push(<React.Fragment key=\"date\">{date}</React.Fragment>);\n  }\n\n  const text = child && parseArr(child, refs);\n\n  return text ? (\n    <Blockquote className=\"sicp-epigraph\">\n      {text}\n      {hasAttribution && <div className=\"sicp-attribution\">{attribution}</div>}\n    </Blockquote>\n  ) : (\n    <>{hasAttribution && <div className=\"sicp-attribution\">{attribution}</div>}</>\n  );\n};\n\nconst handleSnippet = (obj: JsonType) => {\n  if (obj.latex) {\n    return <Pre>{handleLatex(obj.body!)}</Pre>;\n  } else if (typeof obj.eval === 'boolean' && !obj.eval) {\n    return (\n      <>\n        {obj.body && <Pre>{obj.body}</Pre>}\n        {obj.output && (\n          <Pre>\n            <em>{obj.output}</em>\n          </Pre>\n        )}\n      </>\n    );\n  } else {\n    if (!obj.body) {\n      return <></>;\n    }\n\n    const CodeSnippetProps = {\n      body: obj.body,\n      id: obj.id!,\n      initialEditorValueHash: obj.program!,\n      prependLength: obj.prependLength!,\n      output: obj.output!\n    };\n    return <CodeSnippet {...CodeSnippetProps} />;\n  }\n};\n\nconst handleFigure = (obj: JsonType, refs: RefType) => (\n  <AnchorLink id={obj.id} refs={refs} top={36}>\n    <div className=\"sicp-figure\">\n      {obj.src && handleImage(obj, refs)}\n      {obj.snippet && processingFunctions['SNIPPET'](obj.snippet, refs)}\n      {obj.table && processingFunctions['TABLE'](obj.table, refs)}\n      {obj.captionName && (\n        <h5 className=\"sicp-caption\">\n          {obj.captionName}\n          {parseArr(obj.captionBody!, refs)}\n        </h5>\n      )}\n    </div>\n  </AnchorLink>\n);\n\nconst handleImage = (obj: JsonType, _refs: RefType) => {\n  return <img src={Constants.sicpBackendUrl + obj.src} alt={obj.id} width={obj.scale || '100%'} />;\n};\n\nconst handleTR = (obj: JsonType, refs: RefType, index: number) => {\n  return <tr key={index}>{obj.child!.map((x, index) => handleTD(x, refs, index))}</tr>;\n};\n\nconst handleTD = (obj: JsonType, refs: RefType, index: number) => {\n  return <td key={index}>{parseArr(obj.child!, refs)}</td>;\n};\n\nconst handleExercise = (obj: JsonType, refs: RefType) => {\n  return (\n    <AnchorLink id={obj.id} refs={refs} top={5}>\n      <SicpExercise\n        title={obj.title!}\n        body={parseArr(obj.child!, refs)}\n        solution={obj.solution && parseArr(obj.solution, refs)}\n      />\n    </AnchorLink>\n  );\n};\n\nconst handleTitle = (obj: JsonType, refs: RefType) => {\n  return (\n    <AnchorLink id={obj.id} refs={refs} top={6}>\n      <H1>{obj.body}</H1>\n    </AnchorLink>\n  );\n};\n\nconst handleReference = (obj: JsonType, refs: RefType) => {\n  return <div className=\"sicp-reference\">{parseArr(obj.child!, refs)}</div>;\n};\n\nconst handleText = (text: string) => {\n  return <>{text}</>;\n};\n\nconst handleLatex = (math: string) => {\n  return <SicpLatex math={math} />;\n};\n\nexport const processingFunctions: Record<string, (obj: JsonType, refs: RefType) => JSX.Element> = {\n  '#text': (obj, _refs) => handleText(obj.body!),\n\n  B: (obj, refs) => <b>{parseArr(obj.child!, refs)}</b>,\n\n  BR: (_obj, _refs) => <br />,\n\n  DISPLAYFOOTNOTE: handleFootnote,\n\n  EM: (obj, refs) => <em>{parseArr(obj.child!, refs)}</em>,\n\n  EPIGRAPH: handleEpigraph,\n\n  EXERCISE: handleExercise,\n\n  FIGURE: handleFigure,\n\n  FOOTNOTE_REF: (obj, refs) => (\n    <sup ref={ref => (refs.current[obj.id!] = ref)}>{handleRef(obj, refs)}</sup>\n  ),\n\n  JAVASCRIPTINLINE: (obj, _refs) => <Code>{obj.body}</Code>,\n\n  LATEX: (obj, _refs) => handleLatex(obj.body!),\n\n  LI: (obj, refs) => <li>{parseArr(obj.child!, refs)}</li>,\n\n  LINK: (obj, _refs) => <a href={obj.href}>{obj.body}</a>,\n\n  META: (obj, _refs) => <em>{obj.body}</em>,\n\n  OL: (obj, refs) => <OL>{parseArr(obj.child!, refs)}</OL>,\n\n  REF: handleRef,\n\n  REFERENCE: handleReference,\n\n  SNIPPET: (obj, _refs) => handleSnippet(obj),\n\n  SUBHEADING: (obj, refs) => (\n    <AnchorLink id={obj.id} refs={refs} top={2}>\n      <H2>{parseArr(obj.child!, refs)}</H2>\n    </AnchorLink>\n  ),\n\n  SUBSUBHEADING: (obj, refs) => (\n    <AnchorLink id={obj.id} refs={refs} top={16}>\n      <H4>\n        <br />\n        {parseArr(obj.child!, refs)}\n      </H4>\n    </AnchorLink>\n  ),\n\n  TABLE: (obj, refs) => (\n    <table>\n      <tbody>{obj.child!.map((x, index) => handleTR(x, refs, index))}</tbody>\n    </table>\n  ),\n\n  TEXT: (obj, refs) => (\n    <AnchorLink id={obj.id} refs={refs} top={-3}>\n      <p className=\"sicp-text\">{parseArr(obj.child!, refs)}</p>\n    </AnchorLink>\n  ),\n\n  TITLE: handleTitle,\n\n  TT: (obj, refs) => <Code>{parseArr(obj.child!, refs)}</Code>,\n\n  UL: (obj, refs) => <UL>{parseArr(obj.child!, refs)}</UL>\n};\n\n// Parse array of objects. An array of objects represent sibling nodes.\nexport const parseArr = (arr: Array<JsonType>, refs: RefType) => {\n  if (!arr) {\n    return <></>;\n  }\n\n  return <>{arr.map((item, index) => parseObj(item, index, refs))}</>;\n};\n\n// Parse an object.\nexport const parseObj = (obj: JsonType, index: number | undefined, refs: RefType) => {\n  if (obj.tag) {\n    if (processingFunctions[obj.tag]) {\n      return <React.Fragment key={index}>{processingFunctions[obj.tag](obj, refs)}</React.Fragment>;\n    } else {\n      throw new ParseJsonError('Unrecognised Tag: ' + obj.tag);\n    }\n  } else {\n    // Handle case where tag does not exists. Should not happen if json file is created properly.\n    return <React.Fragment key={index}>{parseArr(obj.child!, refs)}</React.Fragment>;\n  }\n};\n","import { readLocalStorage, setLocalStorage } from 'src/commons/utils/LocalStorageHelper';\n\nexport const SICP_INDEX = 'index';\nexport const SICP_CACHE_KEY = 'sicp-section';\n\nexport const setSicpSectionLocalStorage = (value: string) => {\n  setLocalStorage(SICP_CACHE_KEY, value);\n};\n\nexport const readSicpSectionLocalStorage = () => {\n  const data = readLocalStorage(SICP_CACHE_KEY, SICP_INDEX);\n  return data;\n};\n","import { NonIdealState } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\n\nexport enum SicpErrorType {\n  UNEXPECTED_ERROR,\n  PAGE_NOT_FOUND_ERROR,\n  PARSING_ERROR\n}\n\nconst unexpectedError = (\n  <div data-testid=\"sicp-unexpected-error\">\n    Something unexpected went wrong trying to load this page. Please try refreshing the page. If the\n    issue persists, kindly let us know by filing an issue at{' '}\n    <a href=\"https://github.com/source-academy/frontend\">\n      https://github.com/source-academy/frontend\n    </a>\n    .\n  </div>\n);\n\nconst pageNotFoundError = (\n  <div data-testid=\"sicp-page-not-found-error\">\n    We could not find the page you were looking for. Please check the URL again. If you believe the\n    URL is correct, kindly let us know by filing an issue at{' '}\n    <a href=\"https://github.com/source-academy/frontend\">\n      https://github.com/source-academy/frontend\n    </a>\n    .\n  </div>\n);\n\nconst parsingError = (\n  <div data-testid=\"sicp-parsing-error\">\n    An error occured while loading the page. Kindly let us know by filing an issue at{' '}\n    <a href=\"https://github.com/source-academy/frontend\">\n      https://github.com/source-academy/frontend\n    </a>{' '}\n    and we will get it fixed as soon as possible.\n  </div>\n);\n\nconst errorComponent = (description: JSX.Element) => (\n  <NonIdealState title=\"Something went wrong :(\" description={description} icon={IconNames.ERROR} />\n);\n\nconst getSicpError = (type: SicpErrorType) => {\n  switch (type) {\n    case SicpErrorType.PAGE_NOT_FOUND_ERROR:\n      return errorComponent(pageNotFoundError);\n    case SicpErrorType.PARSING_ERROR:\n      return errorComponent(parsingError);\n    default:\n      // handle unexpected error case\n      return errorComponent(unexpectedError);\n  }\n};\n\nexport default getSicpError;\n","import { Component, ErrorInfo, ReactNode } from 'react';\n\nimport getSicpError, { SicpErrorType } from './SicpErrors';\n\ntype Props = {\n  children: ReactNode;\n};\n\ntype State = {\n  hasError: boolean;\n};\n\nclass SicpErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return getSicpError(SicpErrorType.UNEXPECTED_ERROR);\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default SicpErrorBoundary;\n","// extracted by mini-css-extract-plugin\nexport default {\"bot-container\":\"Chatbot_bot-container__kxN5d\",\"bot-area\":\"Chatbot_bot-area__Dip8w\",\"tips-box\":\"Chatbot_tips-box__zc+Th\",\"tips-message\":\"Chatbot_tips-message__2ovfe\",\"bot-button\":\"Chatbot_bot-button__RIQ7R\",\"iSA\":\"Chatbot_iSA__BOnWz\",\"chat-container\":\"Chatbot_chat-container__HCIQK\",\"chat-message\":\"Chatbot_chat-message__pk6XH\",\"user-input\":\"Chatbot_user-input__8-d8+\",\"user\":\"Chatbot_user__HDe3A\",\"bot\":\"Chatbot_bot__+PYs0\",\"button-container\":\"Chatbot_button-container__wu3Zv\",\"button-send\":\"Chatbot_button-send__iaDyI\",\"button-clean\":\"Chatbot_button-clean__cXhsc\"};","const summary1 =\n  '1. Building Abstractions with Functions' +\n  '\\n1. **Introduction to Programming Concepts:**' +\n  \"- Discusses John Locke's ideas on mental processes, emphasizing abstraction as a key concept in forming general ideas\" +\n  '- Introduces the concept of computational processes, likening them to abstract beings that manipulate data according to program rules.' +\n  '\\n2. **Programming Language Selection:**' +\n  ' - Chooses JavaScript as the programming language for expressing procedural thoughts.' +\n  ' - Traces the development of JavaScript from its origins in controlling web browsers to its current status as a general-purpose programming language.' +\n  '\\n3. **JavaScript Characteristics and Standardization:** ' +\n  \"- Highlights JavaScript's core features inherited from Scheme and Self languages.\" +\n  '- Notes the standardization efforts, leading to ECMAScript, and its evolution, with ECMAScript 2015 as a significant edition.' +\n  \"- Discusses JavaScript's initial interpretation in web browsers and its subsequent efficient execution using techniques like JIT compilation.\" +\n  '\\n4. **Practical Application of JavaScript:**' +\n  '- Emphasizes the practicality of embedding JavaScript in web pages and its role in web browser interactions.' +\n  \"- Recognizes JavaScript's expanding role as a general-purpose programming language, especially with the advent of systems like Node.js.\" +\n  \"- Points out JavaScript's suitability for an online version of a book on computer programs due to its execution capabilities in web browsers.\";\n\nconst summary1_1 =\n  '1.1: The Elements of Programming' +\n  '\\n1. **Programming Language Components:**' +\n  \"- A powerful programming language involves more than instructing a computer; it's a framework for organizing ideas about processes.\" +\n  '- Focuses on three mechanisms: primitive expressions, means of combination, and means of abstraction.' +\n  '\\n2. **Elements in Programming:**' +\n  '- Programming deals with two key elements: functions and data.' +\n  \"- Defines data as manipulable 'stuff' and functions as rules for manipulating data.\" +\n  '- Emphasizes the importance of a language describing primitive data and functions and combining/abstracting them.' +\n  '\\n3. **Chapter Scope:**' +\n  '- Chapter focuses on simple numerical data to explore rules for building functions.' +\n  '- Acknowledges the complexity of handling numbers in programming languages, deferring detailed exploration to later chapters.' +\n  '\\n4. **Numerical Considerations:**' +\n  '- Raises issues in dealing with numbers, such as distinctions between integers and real numbers.' +\n  '- Acknowledges challenges like arithmetic operations, representation limits, and roundoff behavior.' +\n  \"- Declares the book's focus on large-scale program design, deferring detailed numerical analysis.\";\n\nconst summary1_1_1 =\n  '1.1.1  Expressions' +\n  '\\n1. **JavaScript Interpreter Interaction:**' +\n  '- Introduction to programming via interactions with a JavaScript interpreter.' +\n  '- Statements involve typing expressions, and the interpreter responds by displaying the evaluated results.' +\n  '\\n2. **Expression Statements:**' +\n  '- Expression statements consist of an expression followed by a semicolon.' +\n  '- Primitive expressions include numbers; evaluation involves clicking, displaying the interpreter, and running the statement.' +\n  '\\n3. **Compound Expressions:**' +\n  '- Expressions combining numbers with operators form compound expressions.' +\n  '- Examples of operator combinations with arithmetic operators and infix notation are provided.' +\n  '\\n4. **Read-Evaluate-Print Loop:**' +\n  '- JavaScript interpreter operates in a read-evaluate-print loop.' +\n  '- Complex expressions are handled, and the interpreter reads, evaluates, and prints results in a cycle.';\n\nconst summary1_1_2 =\n  '1.1.2  Naming and the Environment' +\n  '\\n1. **Constants and Declarations:**' +\n  '- JavaScript uses constant declarations (e.g., const size = 2;) to associate names with values (constants).' +\n  '- Names like size can then be used in expressions, providing a means of abstraction for simple values.' +\n  '\\n2. **Abstraction with Constants:**' +\n  '- Constant declaration is a simple form of abstraction, allowing the use of names for results of compound operations.' +\n  '- Examples include using constants like pi and radius in calculations for circumference.' +\n  '\\n3. **Incremental Program Development:**' +\n  \"- JavaScript's incremental development involves step-by-step construction of computational objects using name-object associations.\" +\n  '- The interpreter supports this process by allowing incremental creation of associations in successive interactions.' +\n  '\\n4. **Program Environment:**' +\n  '- The interpreter maintains a memory called the program environment, tracking name-object pairs.' +\n  '- This environment is crucial for understanding interpreter operation and implementing interpreters in later chapters.';\n\nconst summary1_1_3 =\n  '1.1.3: Evaluating Operator Combinations' +\n  '\\n1. **Evaluation of Operator Combinations:**' +\n  '- The interpreter follows a procedure to evaluate operator combinations.' +\n  \"- Recursive evaluation involves assessing operand expressions and applying the operator's function.\" +\n  '- Recursive nature simplifies the understanding of complex, nested combinations in a hierarchical, tree-like structure.' +\n  '\\n2. **Recursion in Evaluation:**' +\n  '- Recursion efficiently handles deeply nested combinations.' +\n  '- A tree representation illustrates the percolation of operand values upward during evaluation.' +\n  \"- General process type known as 'tree accumulation.'\" +\n  '\\n3. **Handling Primitive Expressions:**' +\n  '- Primitive cases involve evaluating numerals and names.' +\n  '- Numerals represent the numbers they name.' +\n  '- Names derive values from the environment where associations are stored.' +\n  '\\n4. **Role of Environment in Evaluation:**' +\n  '- The environment is crucial for determining name meanings in expressions.' +\n  \"- In JavaScript, a name's value depends on the environment, especially in interactive contexts.\" +\n  \"- Declarations, like `const x = 3;`, associate names with values and aren't handled by the evaluation rule.\";\n\nconst summary1_1_4 =\n  '1.1.4 Compound Functions' +\n  '\\n1. **Compound Functions in JavaScript:**' +\n  '- Function declarations offer a powerful abstraction, allowing compound operations to be named.' +\n  '- Declaring a function involves specifying parameters, a return expression, and associating it with a name.' +\n  '- Function applications, like `square(21)`, execute the named function with specified arguments, yielding a result.' +\n  '\\n2. **Function Application in JavaScript:**' +\n  '- To evaluate a function application, subexpressions (function and arguments) are evaluated, and the function is applied to the arguments.' +\n  '- Nested function applications, such as `square(square(3))`, demonstrate the versatility of this approach.' +\n  '\\n3. **Building Functions with Compound Functions:**' +\n  '- Functions like `sum_of_squares` can be defined using previously declared functions (e.g., `square`) as building blocks.' +\n  '- Primitive functions provided by the JavaScript environment, like `math_log`, are used similarly to compound functions.' +\n  '\\n4. **Syntax and Naming Conventions:**' +\n  '- Function declaration syntax involves naming, specifying parameters, and defining the return expression.' +\n  '- Common JavaScript conventions, like camel case or snake case, affect the readability of multi-part function names (e.g., `sum_of_squares`).';\n\nconst summary1_1_5 =\n  '1.1.5 The Substitution Model for Function Application' +\n  '\\n1. **Substitution Model for Function Application:**' +\n  '- The interpreter follows a substitution model when evaluating function applications in JavaScript.' +\n  '- For compound functions, it involves replacing parameters with corresponding arguments in the return expression.' +\n  \"- This model helps conceptualize function application but differs from the actual interpreter's workings.\" +\n  '\\n2. **Applicative-Order vs. Normal-Order Evaluation:**' +\n  '- Applicative-order evaluation, used by JavaScript, evaluates arguments before function application.' +\n  '- Normal-order evaluation substitutes arguments for parameters until only operators and primitive functions remain, then evaluates.' +\n  '- Both methods yield the same result for functions modeled using substitution, but normal order is more complex.' +\n  '\\n3. **Implications of Evaluation Models:**' +\n  '- The substitution model serves as a starting point for thinking formally about evaluation.' +\n  \"- Over the book, more refined models will replace the substitution model, especially when dealing with 'mutable data.'\" +\n  '- JavaScript uses applicative-order evaluation for efficiency, while normal-order evaluation has its own implications explored later.' +\n  '\\n4. **Challenges in Substitution Process:**' +\n  '- The substitution process, despite its simplicity, poses challenges in giving a rigorous mathematical definition.' +\n  '- Issues arise from potential confusion between parameter names and identical names in expressions to which a function is applied.' +\n  '- Future chapters will explore variations, including normal-order evaluation and its use in handling infinite data structures.';\n\nconst summary1_1_6 =\n  '1.1.6 Conditional Expressions and Predicates' +\n  '\\n1. **Conditional Expressions and Predicates:**' +\n  \"- JavaScript's conditional expressions involve a predicate, a consequent expression, and an alternative expression.\" +\n  '- The interpreter evaluates the predicate; if true, it returns the consequent expression, else the alternative expression.' +\n  '- Predicates include boolean operators (&&, ||) and logical negation (!), aiding in conditional logic.' +\n  '\\n2. **Handling Multiple Cases:**' +\n  '- Nested conditional expressions handle multiple cases, enabling complex case analyses.' +\n  '- The structure uses clauses with predicates and consequent expressions, ending with a final alternative expression.' +\n  '- Logical composition operations like && and || assist in constructing compound predicates.' +\n  '\\n3. **Examples and Applications:**' +\n  '- Functions, like absolute value (abs), can be defined using conditional expressions.' +\n  '- Logical operations (&&, ||, !) and comparison operators enhance the expressiveness of conditional expressions.' +\n  '- Exercises demonstrate practical applications, such as evaluating sequences of statements and translating expressions into JavaScript.' +\n  '\\n4. **Evaluation Models:**' +\n  \"- Applicative-order evaluation (JavaScript's approach) evaluates arguments before function application.\" +\n  '- Normal-order evaluation fully expands and then reduces expressions, leading to potential multiple evaluations.' +\n  '- Substitution models are foundational for understanding function application but become inadequate in detailed analyses.';\n\nconst summary1_1_7 =\n  \"1.1.7 Example: Square Roots by Newton's Method\" +\n  \"\\n1. **Newton's Method for Square Roots:**\" +\n  '- Mathematical and computer functions differ; computer functions must be effective.' +\n  \"- Newton's method, an iterative approach, is used to compute square roots.\" +\n  '- The process involves successive approximations, improving guesses through simple manipulations.' +\n  '\\n2. **Functional Approach to Square Roots:**' +\n  '- Functions like `sqrt_iter`, `improve`, `average`, and `is_good_enough` formalize the iterative square-root computation.' +\n  '- The basic strategy is expressed through recursion without explicit iterative constructs.' +\n  '- The example demonstrates that a simple functional language can handle numerical programs efficiently.' +\n  '\\n3. **Declarative vs. Imperative Knowledge:**' +\n  '- The distinction between mathematical and computer functions reflects declarative (what is) vs. imperative (how to) knowledge.' +\n  '- Computer science deals with imperative descriptions, focusing on how to perform tasks.' +\n  \"- Newton's method for square roots exemplifies the transition from declarative to imperative knowledge in programming.\" +\n  '\\n4. **Exercises and Challenges:**' +\n  '- Exercises involve evaluating the effectiveness of conditional expressions and exploring improvements to the square-root program.' +\n  \"- Newton's method is extended to cube roots, showcasing the general applicability of the approach.\" +\n  '- Considerations for precision and handling small/large numbers in square-root computation are discussed.';\n\nconst summary1_1_8 =\n  '1.1.8 Functions as Black-Box Abstractions' +\n  '\\n1. **Function Decomposition:**' +\n  '- The square root program illustrates a cluster of functions decomposing the problem into subproblems.' +\n  '- Functions like `is_good_enough` and `improve` operate as modules, contributing to the overall process.' +\n  '- Decomposition is crucial for readability and modularity, enabling the use of functions as black-box abstractions.' +\n  '\\n2. **Functional Abstraction:**' +\n  '- Functions should act as black boxes, allowing users to focus on the result, not implementation details.' +\n  \"- Parameter names, being bound, don't affect function behavior, promoting functional abstraction.\" +\n  '- The significance of local names and the independence of function meaning from parameter names are emphasized.' +\n  '\\n3. **Lexical Scoping:**' +\n  '- Lexical scoping allows functions to have internal declarations, localizing subfunctions.' +\n  '- Block structure and lexical scoping enhance the organization of large programs.' +\n  \"- Free names in internal declarations derive their values from the enclosing function's arguments.\" +\n  '\\n4. **Simplification and Organization:**' +\n  '- Internalizing declarations simplifies auxiliary functions in a block structure.' +\n  '- Lexical scoping eliminates the need to pass certain arguments explicitly, enhancing clarity.' +\n  '- The combination of block structure and lexical scoping aids in the organization of complex programs.';\n\nconst summary1_2 =\n  '1.2 Functions and the Processes They Generate' +\n  '\\n1. **Programming Expertise Analogy:**' +\n  \"- Programming is likened to chess, where knowing piece movements isn't enough without strategic understanding.\" +\n  \"- Similar to a novice chess player, knowing primitive operations isn't sufficient without understanding common programming patterns.\" +\n  '\\n2. **Importance of Process Visualization:**' +\n  '- Expert programmers visualize consequences and patterns of actions, akin to a photographer planning exposure for desired effects.' +\n  '- Understanding the local evolution of computational processes is crucial for constructing programs with desired behaviors.' +\n  '\\n3. **Function as Process Pattern:**' +\n  '- A function serves as a pattern for the local evolution of a computational process.' +\n  '- Describing global behavior based on local evolution is challenging but understanding typical process patterns is essential.' +\n  '\\n4. **Analysis of Process Shapes:**' +\n  '- Examining common shapes of processes generated by simple functions.' +\n  '- Investigating how these processes consume computational resources like time and space.';\n\nconst summary1_2_1 =\n  '1.2.1 Linear Recursion and Iteration' +\n  '\\n1. **Factorial Computation:**' +\n  '- Two methods for computing factorial: recursive (linear recursive process) and iterative (linear iterative process).' +\n  '- Recursive process involves a chain of deferred operations, while iterative process maintains fixed state variables.' +\n  '\\n2. **Recursive vs. Iterative:**' +\n  '- Recursive process builds a chain of deferred operations, resulting in linear growth of information.' +\n  '- Iterative process maintains fixed state variables, described as a linear iterative process with constant space.' +\n  '\\n3. **Tail-Recursion and Implementation:**' +\n  '- Tail-recursive implementations execute iterative processes in constant space.' +\n  '- Common languages may consume memory with recursive functions; JavaScript (ECMAScript 2015) supports tail recursion.' +\n  \"\\n4. **Exercise: Ackermann's Function:**\" +\n  \"- Illustration of Ackermann's function.\" +\n  \"- Definition of functions f, g, and h in terms of Ackermann's function.\";\n\nconst summary1_2_2 =\n  '1.2.2 Tree Recursion' +\n  '\\n1. **Tree Recursion:**' +\n  '- Tree recursion is illustrated using the Fibonacci sequence computation.' +\n  '- Recursive function `fib` exhibits a tree-recursive process with exponential growth in redundant computations.' +\n  '\\n2. **Iterative Fibonacci:**' +\n  '- An alternative linear iterative process for Fibonacci computation is introduced.' +\n  '- Contrast between the exponential growth of tree recursion and linear growth of the iterative process is highlighted.' +\n  '\\n3. **Smart Compilation and Efficiency:**' +\n  '- Tree-recursive processes, while inefficient, are often easy to understand.' +\n  \"- A 'smart compiler' is proposed to transform tree-recursive functions into more efficient forms.\" +\n  '\\n4. **Example: Counting Change:**' +\n  '- The problem of counting change for a given amount is introduced.' +\n  '- A recursive solution is presented, demonstrating tree recursion with a clear reduction rule.';\n\nconst summary1_2_3 =\n  '1.2.3 Orders of Growth' +\n  '\\n1. **Orders of Growth:**' +\n  '- Processes exhibit varying resource consumption rates, described by the order of growth.' +\n  '- Represented as Θ(f(n)), indicating resource usage between k₁f(n) and k₂f(n) for large n.' +\n  '\\n2. **Examples of Order of Growth:**' +\n  '- Linear recursive factorial process has Θ(n) steps and space.' +\n  '- Iterative factorial has Θ(n) steps but Θ(1) space.' +\n  '- Tree-recursive Fibonacci has Θ(ϕⁿ) steps and Θ(n) space, where ϕ is the golden ratio.' +\n  '\\n3. **Crude Description:**' +\n  '- Orders of growth offer a basic overview, e.g., Θ(n²) for quadratic processes.' +\n  '- Useful for anticipating behavior changes with problem size variations.' +\n  '\\n4. **Upcoming Analysis:**' +\n  '- Future exploration includes algorithms with logarithmic order of growth.' +\n  \"- Expected behavior changes, such as doubling problem size's impact on resource utilization.\";\n\nconst summary1_2_4 =\n  '1.2.4 Exponentiation' +\n  '\\n1. **Exponentiation Process:**' +\n  '- Recursive process for exponentiation: bⁿ = b * bⁿ⁻¹.' +\n  '- Linear recursive process: Θ(n) steps and Θ(n) space.' +\n  '- Improved iterative version: Θ(n) steps but Θ(1) space.' +\n  '\\n2. **Successive Squaring:**' +\n  '- Successive squaring reduces steps for exponentiation.' +\n  '- Fast_expt function exhibits logarithmic growth: Θ(log n) steps and space.' +\n  '\\n3. **Multiplication Algorithms:**' +\n  '- Design logarithmic steps multiplication using successive doubling and halving.' +\n  '- Utilize observation from exponentiation for efficient iterative multiplication.' +\n  '\\n4. **Fibonacci Numbers:**' +\n  '- Clever algorithm for Fibonacci in logarithmic steps.' +\n  '- Transformation T and Tⁿ for Fibonacci computation using successive squaring.';\n\nconst summary1_2_5 =\n  '1.2.5 Greatest Common Divisors' +\n  '\\n1. **Greatest Common Divisors (GCD):**' +\n  '- GCD of a and b is the largest integer dividing both with no remainder.' +\n  \"- Euclid's Algorithm efficiently computes GCD using recursive reduction.\" +\n  '- Algorithm based on the observation: GCD(a, b) = GCD(b, a % b).' +\n  '\\n2. **Algorithm Complexity:**' +\n  \"- Euclid's Algorithm has logarithmic growth.\" +\n  \"- Lamé's Theorem relates Euclid's steps to Fibonacci numbers.\" +\n  '- Order of growth: Θ(log n).' +\n  \"\\n3. **Euclid's Algorithm Function:**\" +\n  \"- Express Euclid's Algorithm as a function: `gcd(a, b)`.\" +\n  '- Iterative process with logarithmic growth in steps.' +\n  '\\n4. **Exercise:**' +\n  '- Normal-order evaluation impacts the process generated by gcd function.' +\n  \"- Lamé's Theorem applied to estimate the order of growth for Euclid's Algorithm.\";\n\nconst summary1_2_6 =\n  '1.2.6 Example: Testing for Primality' +\n  '\\n1. **Primality Testing Methods:**' +\n  '- Methods for checking primality: Order Θ(n) and probabilistic method with Θ(log n).' +\n  '- Finding divisors: Program to find the smallest integral divisor of a given number.' +\n  \"- Fermat's Little Theorem: Θ(log n) primality test based on number theory.\" +\n  '- Fermat test and Miller–Rabin test as probabilistic algorithms.' +\n  \"\\n2. **Fermat's Little Theorem:**\" +\n  '- If n is prime, a^(n-1) ≡ 1 (mod n) for a < n.' +\n  '- Fermat test: Randomly choosing a and checking congruence.' +\n  '- Probabilistic nature: Result is probably correct, with rare chances of error.' +\n  '\\n3. **Algorithm Implementation:**' +\n  '- Implementation of Fermat test using expmod function.' +\n  '- Miller–Rabin test: Squaring step checks for nontrivial square roots of 1.' +\n  '- Probabilistic algorithms and their reliability in practical applications.' +\n  '\\n4. **Exercises:**' +\n  '- Exercise 1.21: Finding the smallest divisor using the smallest_divisor function.' +\n  '- Exercise 1.22: Timed prime tests for different ranges, comparing Θ(n) and Θ(log n) methods.' +\n  '- Exercise 1.23: Optimizing smallest_divisor for efficiency.' +\n  '- Exercise 1.24: Testing primes using the Fermat method (Θ(log n)).' +\n  '- Exercise 1.25: Comparing expmod and fast_expt for primality testing.' +\n  '- Exercise 1.26: Identifying algorithmic transformation affecting efficiency.' +\n  '- Exercise 1.27: Testing Carmichael numbers that fool the Fermat test.' +\n  '- Exercise 1.28: Implementing the Miller–Rabin test and testing its reliability.';\n\nconst summary1_3 =\n  '1.3 Formulating Abstractions with Higher-Order Functions' +\n  '\\n1. **Higher-Order Functions:**' +\n  '- Functions as abstractions for compound operations on numbers.' +\n  '- Declaring functions allows expressing concepts like cubing, enhancing language expressiveness.' +\n  '- Importance of building abstractions using function names.' +\n  '- Introduction of higher-order functions that accept or return functions, increasing expressive power.' +\n  '\\n2. **Abstraction in Programming:**' +\n  '- Programming languages should allow building abstractions through named common patterns.' +\n  '- Functions enable working with higher-level operations beyond primitive language functions.' +\n  '- Limitations without abstractions force work at the level of primitive operations.' +\n  '- Higher-order functions extend the ability to create abstractions in programming languages.';\n\nconst summary1_3_1 =\n  '1.3.1 Functions as Arguments' +\n  '\\n1. **Common Pattern in Functions:**' +\n  '- Three functions share a common pattern for summing series.' +\n  '- Functions differ in name, term computation, and next value.' +\n  '- Identification of the summation abstraction in mathematical series.' +\n  '- Introduction of a common template for expressing summation patterns.' +\n  '\\n2. **Higher-Order Function for Summation:**' +\n  \"- Introduction of a higher-order function for summation, named 'sum.'\" +\n  \"- 'sum' takes a term, lower and upper bounds, and next function as parameters.\" +\n  \"- Examples of using 'sum' to compute sum_cubes, sum_integers, and pi_sum.\" +\n  \"- Application of 'sum' in numerical integration and approximation of π.\" +\n  '\\n3. **Iterative Formulation:**' +\n  '- Transformation of summation function into an iterative process.' +\n  \"- Example of an iterative summation function using Simpson's Rule.\" +\n  \"- Extension to a more general notion called 'accumulate' for combining terms.\" +\n  '\\n4. **Filtered Accumulation:**' +\n  '- Introduction of filtered accumulation using a predicate for term selection.' +\n  '- Examples of filtered accumulation: sum of squares of prime numbers and product of relatively prime integers.' +\n  '- Acknowledgment of the expressive power attained through appropriate abstractions.';\n\nconst summary1_3_2 =\n  '1.3.2 Constructing Functions using Lambda Expressions' +\n  '\\n1. **Lambda Expressions for Function Creation:**' +\n  '- Introduction of lambda expressions for concise function creation.' +\n  '- Lambda expressions used to directly specify functions without declaration.' +\n  '- Elimination of the need for auxiliary functions like pi_term and pi_next.' +\n  '- Examples of pi_sum and integral functions using lambda expressions.' +\n  '\\n2. **Lambda Expression Syntax:**' +\n  '- Lambda expressions written as `(parameters) => expression`.' +\n  '- Equivalent functionality to function declarations but without a specified name.' +\n  '- Readability and equivalence demonstrated with examples.' +\n  '- Usage of lambda expressions in various contexts, such as function application.' +\n  '\\n3. **Local Names Using Lambda Expressions:**' +\n  '- Lambda expressions employed to create anonymous functions for local names.' +\n  \"- Example of computing a function with intermediate quantities like 'a' and 'b'.\" +\n  '- Comparison with alternative approaches, including using auxiliary functions.' +\n  '- Utilization of constant declarations within function bodies for local names.' +\n  '\\n4. **Conditional Statements in JavaScript:**' +\n  '- Introduction of conditional statements using `if-else` syntax.' +\n  \"- Example of applying conditional statements in the 'expmod' function.\" +\n  '- Scope considerations for constant declarations within conditional statements.' +\n  '- Efficient use of conditional statements to improve function performance.' +\n  '\\n5. **Exercise 1.34:**' +\n  '- A function `f` that takes a function `g` and applies it to the value 2.' +\n  '- Demonstrations with `square` and a lambda expression.' +\n  '- A hypothetical scenario of evaluating `f(f)` and its explanation as an exercise.' +\n  '- Illustration of function composition and its outcome.';\n\nconst summary1_3_3 =\n  '1.3.3 Functions as General Methods' +\n  '\\n1. **Introduction to General Methods:**' +\n  '- Compound functions and higher-order functions for abstracting numerical operations.' +\n  '- Higher-order functions express general methods of computation.' +\n  '- Examples of general methods for finding zeros and fixed points of functions.' +\n  '\\n2. **Half-Interval Method for Finding Roots:**' +\n  '- A strategy for finding roots of continuous functions using the half-interval method.' +\n  '- Implementation of the method in JavaScript with the `search` function.' +\n  '- Use of the method to approximate roots, e.g., finding π and solving a cubic equation.' +\n  '\\n3. **Fixed Points of Functions:**' +\n  '- Definition of a fixed point of a function and methods to locate it.' +\n  '- Introduction of the `fixed_point` function for finding fixed points with a given tolerance.' +\n  '- Examples using cosine and solving equations involving trigonometric functions.' +\n  '\\n4. **Square Root Computation and Averaging:**' +\n  '- Attempt to compute square roots using fixed-point search and the challenge with convergence.' +\n  '- Introduction of average damping to control oscillations and improve convergence.' +\n  '- Illustration of square root computation using average damping in the `sqrt` function.' +\n  '\\n5. **Exercises and Further Exploration:**' +\n  '- Exercise 1.35: Golden ratio as a fixed point.' +\n  '- Exercise 1.36: Modifying `fixed_point` and solving equations.' +\n  '- Exercise 1.37: Continued fraction representation and approximating values.' +\n  \"- Exercise 1.38: Approximating Euler's number using continued fractions.\" +\n  \"- Exercise 1.39: Lambert's continued fraction for the tangent function.\";\n\nconst summary1_3_4 =\n  '1.3.4 Functions as Returned Values' +\n  '\\n1. **Programming Concepts:**' +\n  '- Demonstrates the use of functions as first-class citizens in JavaScript.' +\n  '- Highlights the application of higher-order functions in expressing general methods.' +\n  '- Shows how to create abstractions and build upon them for more powerful functionalities.' +\n  '- Discusses the significance of first-class functions in JavaScript and their expressive power.' +\n  '\\n2. **Specific Programming Techniques:**' +\n  '- Introduces and applies average damping and fixed-point methods in function computations.' +\n  \"- Explores Newton's method and expresses it as a fixed-point process.\" +\n  '- Provides examples of implementing functions for square roots, cube roots, and nth roots.' +\n  '- Discusses iterative improvement as a general computational strategy.' +\n  '\\n3. **Exercises and Problem Solving:**' +\n  '- Includes exercises like implementing functions for cubic equations, function composition, and iterative improvement.' +\n  '- Addresses challenges in computing nth roots using repeated average damping.' +\n  '\\n4. **General Programming Advice:**' +\n  '- Emphasizes the importance of identifying and building upon underlying abstractions in programming.' +\n  '- Encourages programmers to think in terms of abstractions and choose appropriate levels of abstraction for tasks.' +\n  '- Discusses the benefits and challenges of first-class functions in programming languages.';\n\nconst summary2 =\n  '2 Building Abstractions with Data' +\n  '\\n1. **Focus on Compound Data:**' +\n  ' The chapter discusses the importance of compound data in programming languages to model complex phenomena and improve design modularity.' +\n  '\\n2. **Data Abstraction:**' +\n  ' Introduces the concept of data abstraction, emphasizing how it simplifies program design by separating the representation and usage of data objects.' +\n  '\\n3. **Expressive Power:**' +\n  ' Compound data enhances the expressive power of programming languages, allowing the manipulation of different data types without detailed knowledge of their representations.' +\n  '\\n4. **Symbolic Expressions and Generic Operations:**' +\n  ' Explores symbolic expressions, alternatives for representing sets, and the need for generic operations in handling differently represented data, illustrated with polynomial arithmetic.';\n\nconst summary2_1 =\n  '2.1 Introduction to Data Abstraction' +\n  '\\n1. **Data Abstraction Definition:**' +\n  ' Data abstraction is a methodology separating how compound data is used from its construction details using selectors and constructors.' +\n  '\\n2. **Functional Abstraction Analogy:**' +\n  ' Similar to functional abstraction, data abstraction allows replacing details of data implementation while preserving overall behavior.' +\n  '\\n3. **Program Structuring:**' +\n  ' Programs should operate on \"abstract data\" without unnecessary assumptions, with a defined interface using selectors and constructors for concrete data representation.' +\n  '\\n4. **Illustration with Rational Numbers:**' +\n  ' The concept is illustrated by designing functions for manipulating rational numbers through data abstraction techniques.';\n\nconst summary2_1_1 =\n  '2.1.1 Example: Arithmetic Operations for Rational Numbers' +\n  '\\n1. **Rational Number Operations:**' +\n  ' Describes arithmetic operations for rational numbers: add, subtract, multiply, divide, and equality tests.' +\n  '\\n2. **Synthetic Strategy:**' +\n  ' Utilizes \"wishful thinking\" synthesis, assuming constructor and selectors for rational numbers without defining their implementation details.' +\n  '\\n3. **Pairs and Glue:**' +\n  ' Introduces pairs as the glue for implementing concrete data abstraction and list-structured data, illustrating their use in constructing complex data structures.' +\n  '\\n4. **Rational Number Representation:**' +\n  ' Represents rational numbers as pairs of integers (numerator and denominator) and implements operations using pairs as building blocks. Also addresses reducing rational numbers to lowest terms.';\n\nconst summary2_1_2 =\n  '2.1.2 Abstraction Barriers' +\n  '\\n1. **Abstraction Barriers:**' +\n  ' Discusses the concept of abstraction barriers, separating program levels using interfaces for data manipulation.' +\n  '\\n2. **Advantages of Data Abstraction:**' +\n  ' Simplifies program maintenance and modification by confining data structure representation changes to a few modules.' +\n  '\\n3. **Flexibility in Implementation:**' +\n  ' Illustrates the flexibility of choosing when to compute certain values, such as gcd, based on use patterns without modifying higher-level functions.' +\n  '\\n4. **Exercise Examples:**' +\n  ' Presents exercises on representing line segments and rectangles, highlighting the application of abstraction barriers and flexibility in design.';\n\nconst summary2_1_3 =\n  '2.1.3 What Is Meant by Data?' +\n  '\\n1. **Defining Data:**' +\n  ' Discusses the concept of data, emphasizing the need for specific conditions that selectors and constructors must fulfill.' +\n  '\\n2. **Data as Collections of Functions:**' +\n  ' Demonstrates the functional representation of pairs, illustrating that functions can serve as data structures fulfilling necessary conditions.' +\n  '\\n3. **Functional Pairs Implementation:**' +\n  ' Presents an alternative functional representation of pairs and verifies its correctness in terms of head and tail functions.' +\n  '\\n4. **Church Numerals:**' +\n  ' Introduces Church numerals, representing numbers through functions, and provides exercises to define one, two, and addition in this system.';\n\nconst summary2_1_4 =\n  '2.1.4 Extended Exercise: Interval Arithmetic' +\n  '\\n1. **Interval Arithmetic Concept:**' +\n  ' Alyssa P. Hacker is designing a system for interval arithmetic to handle inexact quantities with known precision.' +\n  '\\n2. **Interval Operations:**' +\n  ' Alyssa defines operations like addition, multiplication, and division for intervals based on their lower and upper bounds.' +\n  '\\n3. **Interval Constructors and Selectors:**' +\n  ' The text introduces an interval constructor and selectors, and there are exercises to complete the implementation and explore related concepts.' +\n  '\\n4. **User Issues:**' +\n  \" The user, Lem E. Tweakit, encounters discrepancies in computing parallel resistors using different algebraic expressions in Alyssa's system.\";\n\nconst summary2_2 =\n  '2.2 Hierarchical Data and the Closure Property' +\n  '\\n1. **Pair Representation:**' +\n  ' Pairs, represented using box-and-pointer notation, serve as a primitive \"glue\" to create compound data objects.' +\n  '\\n2. **Universal Building Block:**' +\n  ' Pairs, capable of combining numbers and other pairs, act as a universal building block for constructing diverse data structures.' +\n  '\\n3. **Closure Property:**' +\n  ' The closure property of pairs enables the creation of hierarchical structures, facilitating the combination of elements with the same operation.' +\n  '\\n4. **Importance in Programming:**' +\n  ' Closure is crucial in programming, allowing the construction of complex structures made up of parts, leading to powerful combinations.';\n\nconst summary2_2_1 =\n  '2.2.1 Representing Sequences' +\n  '\\n1. **Sequence Representation:**' +\n  ' Pairs are used to represent sequences, visualized as chains of pairs, forming a list structure in box-and-pointer notation.' +\n  '\\n2. **List Operations:**' +\n  ' Lists, constructed using pairs, support operations like head and tail for element extraction, length for counting, and append for combining.' +\n  '\\n3. **Mapping with Higher-Order Function:**' +\n  ' The higher-order function map abstracts list transformations, allowing the application of a function to each element, enhancing abstraction in list processing.' +\n  '\\n4. **For-Each Operation:**' +\n  ' The for_each function applies a given function to each element in a list, useful for actions like printing, with the option to return an arbitrary value.';\n\nconst summary2_2_2 =\n  '2.2.2 Hierarchical Structures' +\n  '\\n1. **Hierarchical Sequences:**' +\n  ' Sequences of sequences are represented as hierarchical structures, extending the list structure to form trees.' +\n  '\\n2. **Tree Operations:**' +\n  ' Recursion is used for tree operations, such as counting leaves and length, demonstrating natural tree processing with recursive functions.' +\n  '\\n3. **Mobile Representation:**' +\n  ' Binary mobiles, consisting of branches and weights, are represented using compound data structures, with operations to check balance and calculate total weight.' +\n  '\\n4. **Mapping Over Trees:**' +\n  ' Operations like scale_tree demonstrate mapping over trees, combining sequence operations and recursion for efficient tree manipulation.';\n\nconst summary2_2_3 =\n  '2.2.3 Sequences as Conventional Interfaces' +\n  '\\n1. **Sequence Operations:**' +\n  '- Use signals flowing through stages to design programs, enhancing conceptual clarity.' +\n  '- Represent signals as lists, enabling modular program design with standard components.' +\n  '\\n2. **Operations on Sequences:**' +\n  '- Implement mapping, filtering, and accumulation operations for sequence processing.' +\n  '- Examples: map, filter, accumulate functions for various computations, providing modularity.' +\n  '\\n3. **Signal-Flow Structure:**' +\n  '- Organize programs to manifest signal-flow structure for clarity.' +\n  '- Utilize sequence operations like map, filter, and accumulate to express program designs.' +\n  '\\n4. **Exercises and Solutions:**' +\n  '- Includes exercises involving list-manipulation operations and matrix operations.' +\n  '- Demonstrates nested mappings for problem-solving, like permutations and eight-queens puzzle.';\n\nconst summary2_2_4 =\n  '2.2.4 Example: A Picture Language' +\n  '\\n1. **Picture Language Overview:**' +\n  '- Utilizes a simple language for drawing pictures, showcasing data abstraction, closure, and higher-order functions.' +\n  '- Painters, representing images, draw within designated frames, enabling easy experimentation with patterns.' +\n  '- Operations like flip, rotate, and squash transform painters, while combinations like beside and below create compound painters.' +\n  '\\n2. **Painter Operations:**' +\n  '- `transform_painter` is a key operation, transforming painters based on specified frame points.' +\n  '- Operations like flip_vert, rotate90, and squash_inwards leverage `transform_painter` to achieve specific effects.' +\n  '- `beside` and `below` combine painters, each transformed to draw in specific regions of the frame.' +\n  '\\n3. **Stratified Design Principles:**' +\n  '- Embraces stratified design, structuring complexity through levels and languages.' +\n  '- Primitives like primitive painters are combined at lower levels, forming components for higher-level operations.' +\n  '- Enables robust design, allowing changes at different levels with minimal impact.' +\n  '\\n4. **Examples and Exercises:**' +\n  '- Illustrates examples like square_limit, flipped_pairs, and square_of_four.' +\n  '- Exercises involve modifying patterns, defining new transformations, and demonstrating the versatility of the picture language.';\n\nconst summary2_3 =\n  '2.3 Symbolic Data' +\n  '\\n1. **Compound Data Objects:**' +\n  '- Constructed from numbers in previous sections.' +\n  '- Introduction of working with strings as data.' +\n  '\\n2. **Representation Extension:**' +\n  '- Enhances language capabilities.' +\n  '- Adds versatility to data representation.';\n\nconst summary2_3_1 =\n  '2.3.1 Strings' +\n  '\\n1. **String Usage:**' +\n  '- Strings used for messages.' +\n  '- Compound data with strings in lists.' +\n  '\\n2. **String Representation:**' +\n  '- Strings in double quotes.' +\n  '- Distinction from names in code.' +\n  '\\n3. **Comparison Operations:**' +\n  '- Introduction of === and !== for strings.' +\n  '- Example function using ===: `member(item, x)`.' +\n  '\\n4. **Exercises:**' +\n  '- Evaluation exercises with lists and strings.' +\n  '- Implementation exercise: `equal` function.';\n\nconst summary2_3_2 =\n  '2.3.2 Example: Symbolic Differentiation' +\n  '\\n1. **Symbolic Differentiation:**' +\n  '- Purpose: Deriving algebraic expressions symbolically.' +\n  '- Historical Significance: Influential in Lisp development and symbolic mathematical systems.' +\n  '\\n2. **Differentiation Algorithm:**' +\n  '- Abstract algorithm for sums, products, and variables.' +\n  '- Recursive reduction rules for symbolic expressions.' +\n  '\\n3. **Expression Representation:**' +\n  '- Use of prefix notation for mathematical structure.' +\n  '- Variables represented as strings, sums, and products as lists.' +\n  '\\n4. **Algorithm Implementation:**' +\n  '- `deriv` function for symbolic differentiation.' +\n  '- Examples and the need for expression simplification.';\n\nconst summary2_3_3 =\n  '2.3.3 Example: Representing Sets' +\n  '\\n1. **Set Representation:**' +\n  '- Informal definition: a collection of distinct objects.' +\n  '- Defined using data abstraction with operations: union_set, intersection_set, is_element_of_set, adjoin_set.' +\n  '- Various representations: unordered lists, ordered lists, binary trees.' +\n  '\\n2. **Sets as Unordered Lists:**' +\n  '- Represented as a list with no duplicate elements.' +\n  '- Operations: is_element_of_set, adjoin_set, intersection_set.' +\n  '- Efficiency concerns: is_element_of_set may require Θ(n) steps.' +\n  '\\n3. **Sets as Ordered Lists:**' +\n  '- Elements listed in increasing order for efficiency.' +\n  '- Operations like is_element_of_set benefit from ordered representation.' +\n  '- Intersection_set exhibits significant speedup (Θ(n) instead of Θ(n^2)).' +\n  '\\n4. **Sets as Binary Trees:**' +\n  '- Further speedup using a tree structure.' +\n  '- Each node holds an entry and links to left and right subtrees.' +\n  '- Operations: is_element_of_set, adjoin_set with Θ(log n) complexity.' +\n  '- Balancing strategies needed to maintain efficiency.' +\n  '\\nNote: Code snippets and exercises provide implementation details for each representation.';\n\nconst summary2_3_4 =\n  '2.3.4 Example: Huffman Encoding Trees' +\n  '\\n1. **Huffman Encoding Basics:**' +\n  '- Describes the concept of encoding data using sequences of 0s and 1s (bits).' +\n  '- Introduces fixed-length and variable-length codes for symbols.' +\n  '- Illustrates an example of a fixed-length code and a variable-length code for a set of symbols.' +\n  '\\n2. **Variable-Length Codes:**' +\n  '- Explains the concept of variable-length codes, where different symbols may have different bit lengths.' +\n  '- Highlights the efficiency of variable-length codes in comparison to fixed-length codes.' +\n  '- Introduces the idea of prefix codes, ensuring no code is a prefix of another.' +\n  '\\n3. **Huffman Encoding Method:**' +\n  '- Presents the Huffman encoding method, a variable-length prefix code.' +\n  '- Describes how Huffman codes are represented as binary trees.' +\n  '- Explains the construction of Huffman trees based on symbol frequencies.' +\n  '\\n4. **Decoding with Huffman Trees:**' +\n  '- Outlines the process of decoding a bit sequence using a Huffman tree.' +\n  '- Describes the algorithm to traverse the tree and decode symbols.' +\n  '- Provides functions for constructing, representing, and decoding Huffman trees in JavaScript.';\n\nconst summary2_4 =\n  '2.4 Multiple Representations for Abstract Data' +\n  '\\n1. **Data Abstraction:**' +\n  '- Introduces data abstraction as a methodology for structuring systems.' +\n  '- Explains the use of abstraction barriers to separate design from implementation for rational numbers.' +\n  '\\n2. **Need for Multiple Representations:**' +\n  '- Recognizes the limitation of a single underlying representation for data objects.' +\n  '- Discusses the importance of accommodating multiple representations for flexibility.' +\n  '\\n3. **Generic Functions:**' +\n  '- Highlights the concept of generic functions that operate on data with multiple representations.' +\n  '- Introduces type tags and data-directed style for building generic functions.' +\n  '\\n4. **Complex-Number Example:**' +\n  '- Illustrates the implementation of complex numbers with both rectangular and polar representations.' +\n  '- Emphasizes the role of abstraction barriers in managing different design choices.';\n\nconst summary2_4_1 =\n  '2.4.1 Representations for Complex Numbers' +\n  '\\n1. **Complex Number Representations:**' +\n  '- Discusses two representations for complex numbers: rectangular form (real and imaginary parts) and polar form (magnitude and angle).' +\n  '- Emphasizes the need for generic operations that work with both representations.' +\n  '\\n2. **Operations on Complex Numbers:**' +\n  '- Describes arithmetic operations on complex numbers, highlighting differences in representation for addition, subtraction, multiplication, and division.' +\n  '- Illustrates the use of selectors and constructors for implementing these operations.' +\n  '\\n3. **Programming Choices:**' +\n  '- Introduces two programmers, Ben and Alyssa, independently choosing different representations for complex numbers.' +\n  '- Presents the implementations of selectors and constructors for both rectangular and polar forms.' +\n  '\\n4. **Data Abstraction Discipline:**' +\n  '- Ensures that the same generic operations work seamlessly with different representations.' +\n  \"- Acknowledges the example's simplification for clarity, noting the preference for rectangular form in practical computational systems.\";\n\nconst summary2_4_2 =\n  '2.4.2 Tagged data' +\n  '\\n1. **Principle of Least Commitment:**' +\n  '- Data abstraction follows the principle of least commitment, allowing flexibility in choosing representations at the last possible moment.' +\n  '- Maintains maximum design flexibility by deferring the choice of concrete representation for data objects.' +\n  '\\n2. **Tagged Data Implementation:**' +\n  '- Introduces type tags to distinguish between different representations of complex numbers (rectangular or polar).' +\n  '- Utilizes functions like `attach_tag`, `type_tag`, and `contents` to manage type information.' +\n  '\\n3. **Coexistence of Representations:**' +\n  '- Shows how Ben and Alyssa can modify their representations to coexist in the same system using type tags.' +\n  '- Ensures that functions do not conflict by appending \"rectangular\" or \"polar\" to their names.' +\n  '\\n4. **Generic Complex-Arithmetic System:**' +\n  '- Implements generic complex-number arithmetic operations that work seamlessly with both rectangular and polar representations.' +\n  '- The resulting system is decomposed into three parts: complex-number-arithmetic operations, polar implementation, and rectangular implementation.';\n\nconst summary2_4_3 =\n  '2.4.3 Data-Directed Programming and Additivity' +\n  '\\n1. **Dispatching on Type:**' +\n  '- Dispatching on type involves checking the type of a datum and calling an appropriate function.' +\n  '- Provides modularity but has weaknesses, such as the need for generic functions to know about all representations.' +\n  '\\n2. **Data-Directed Programming:**' +\n  '- Data-directed programming modularizes system design further.' +\n  '- Uses an operation-and-type table, allowing easy addition of new representations without modifying existing functions.' +\n  '\\n3. **Implementation with Tables:**' +\n  '- Uses functions like `put` and `get` for manipulating the operation-and-type table.' +\n  '- Ben and Alyssa implement their packages by adding entries to the table, facilitating easy integration.' +\n  '\\n4. **Message Passing:**' +\n  '- Message passing represents data objects as functions that dispatch on operation names.' +\n  '- Provides an alternative to data-directed programming, where the data object receives operation names as \"messages.\"';\n\nconst summary2_5 =\n  '2.5 Systems with Generic Operations' +\n  '\\n1. **Generic Operations Design:**' +\n  '- Systems designed to represent data objects in multiple ways through generic interface functions.' +\n  '- These generic functions link various representations, providing flexibility and modularity.' +\n  '\\n2. **Data-Directed Techniques:**' +\n  '- Extend the idea of generic operations to define operations generic over different argument types.' +\n  '- Utilizes data-directed techniques for constructing a unified arithmetic package from various existing arithmetic packages.' +\n  '\\n3. **Unified Arithmetic System:**' +\n  '- Figure 2.23 illustrates the structure of a generic arithmetic system.' +\n  '- Abstraction barriers allow uniform access to ordinary, rational, and complex arithmetic packages through a single generic interface.' +\n  '\\n4. **Additive Structure:**' +\n  '- Individual arithmetic packages (ordinary, rational, complex) designed separately.' +\n  '- Additive structure allows combination to produce a comprehensive generic arithmetic system.';\n\nconst summary2_5_1 =\n  '2.5.1 Generic Arithmetic Operations' +\n  '\\n1. **Generic Arithmetic Operations:**' +\n  '- Designing generic arithmetic operations similar to complex-number operations.' +\n  '- Generic functions (add, sub, mul, div) dispatch to appropriate packages based on argument types.' +\n  '\\n2. **Package for Ordinary Numbers:**' +\n  '- Install package for primitive (JavaScript) numbers tagged as \"javascript_number.\"' +\n  '- Arithmetic operations defined using primitive functions.' +\n  '\\n3. **Extension to Rational Numbers:**' +\n  '- Add package for rational arithmetic with internal functions from section 2.1.1.' +\n  '- Utilize additivity for seamless integration with the existing generic arithmetic system.' +\n  '\\n4. **Complex Number Package:**' +\n  '- Implement a package for complex numbers using the tag \"complex.\"' +\n  '- Use existing functions (add_complex, sub_complex) from rectangular and polar packages.' +\n  '\\n5. **Two-Level Tag System:**' +\n  '- Complex numbers have an outer tag (\"complex\") directing to the complex package.' +\n  '- Inner tag (\"rectangular\" or \"polar\") further directs within the complex package.' +\n  '\\n6. **Error Resolution:**' +\n  '- Resolve an error in magnitude(z) by defining complex selectors for \"complex\" numbers.' +\n  '- Add real_part, imag_part, magnitude, and angle functions to the complex package.' +\n  '\\n7. **Internal Functions Simplification:**' +\n  '- Internal arithmetic functions in packages (add_rat, add_complex) can have the same names.' +\n  '- Naming simplification is possible once declarations are internal to different installation functions.';\n\nconst summary2_5_2 =\n  '2.5.2 Combining Data of Different Types' +\n  '\\n1. **Cross-Type Operations:**' +\n  '- Consideration of operations crossing type boundaries, like adding a complex number to an ordinary number.' +\n  '- Current approach involves designing separate functions for each valid combination, which is cumbersome.' +\n  '\\n2. **Coercion Technique:**' +\n  '- Introduction of coercion to handle operations between different types.' +\n  '- Coercion functions transform objects of one type into an equivalent object of another type.' +\n  '\\n3. **Apply_Generic Modification:**' +\n  '- Modify the apply_generic function to include coercion.' +\n  \"- Check if the operation is defined for the arguments' types; if not, attempt coercion.\" +\n  '\\n4. **Hierarchy of Types:**' +\n  '- Introduction of a hierarchical structure (tower) to simplify coercion.' +\n  '- Types arranged as subtypes and supertypes, enabling a systematic approach to adding new types.';\n\nconst summary2_5_3 =\n  '2.5.3 Example: Symbolic Algebra' +\n  '\\n1. **Symbolic Algebra Overview:**' +\n  '- Symbolic algebra involves manipulating expressions with variables and operators.' +\n  '- Expressions are hierarchical structures, often viewed as trees of operators and operands.' +\n  '- Abstractions like linear combination, polynomial, and trigonometric function are common in symbolic algebra.' +\n  '\\n2. **Polynomial Arithmetic:**' +\n  '- Polynomials are represented as a sum of terms, each comprising a coefficient and a power of an indeterminate.' +\n  '- Designing a system involves abstracting data using a \"poly\" data structure with addition and multiplication operations.' +\n  '- Generic operations are applied to manipulate terms and term lists for addition and multiplication of polynomials.' +\n  '\\n3. **Data Abstraction and Generic Operations:**' +\n  '- Data abstraction principles, including type tags, are used for polynomial representation and manipulation.' +\n  '- Generic operations like add and multiply enable flexibility in handling various coefficient types.' +\n  '\\n4. **Challenges and Extensions:**' +\n  '- Challenges include defining polynomials with different variables and addressing coercion issues.' +\n  '- Exercises involve extending the system for subtraction, handling dense and sparse polynomials, and implementing rational functions.' +\n  '\\n5. **Hierarchies and GCD Computation:**' +\n  '- Symbolic algebra illustrates complex type hierarchies where polynomials may have coefficients as polynomials.' +\n  '- Greatest Common Divisor (GCD) computation is crucial for operations on rational functions but presents challenges.' +\n  '\\n6. **Reducing Rational Functions:**' +\n  '- Rational functions are reduced to lowest terms using GCD computation and an integerizing factor.' +\n  \"- The process involves multiplying by the GCD's leading coefficient's power and reducing coefficients to their greatest common divisor.\" +\n  '\\n7. **Implementation Exercises:**' +\n  '- Exercises cover pseudodivision, modifying GCD computation, and implementing a system for reducing rational functions to lowest terms.' +\n  '- The challenges include efficiently computing polynomial GCDs, a crucial aspect of algebraic-manipulation systems.';\n\nconst summary3 =\n  '3 Modularity, Objects, and State' +\n  '\\n1. **Organizational Strategies:**' +\n  \" Programs designed for modeling physical systems can benefit from mirroring the system's structure.\" +\n  ' Two main strategies: object-based (objects with changing behaviors) and stream-processing (focus on information flow).' +\n  '\\n2. **Linguistic Challenges:**' +\n  ' Object-based approach deals with identity maintenance amid changes, moving away from the substitution model.' +\n  ' Stream-processing requires decoupling simulated time, using delayed evaluation for optimal exploitation.' +\n  '\\n3. **Program Organization:**' +\n  ' Successful system organization allows easy addition of new features without strategic program changes.' +\n  ' Large program structure is influenced by the perception of the system being modeled.' +\n  '\\n4. **Computational Models:**' +\n  ' Object-based models involve computational objects mirroring real-world objects.' +\n  ' Stream-processing involves viewing systems as information flows, decoupling simulated time for effective evaluation.';\n\nconst summary3_1 =\n  '3.1 Assignment and Local State' +\n  '\\n1. **Object State:**' +\n  ' Objects in a system have states influenced by their history, crucial for behavior determination.' +\n  \" State variables, like a bank account's balance, capture enough information for current behavior.\" +\n  '\\n2. **Interconnected Objects:**' +\n  ' In systems, objects rarely act independently; interactions couple state variables, influencing each other.' +\n  ' Modular computational models mirror actual system objects, each with its local state variables.' +\n  '\\n3. **Time-Dependent Behavior:**' +\n  ' Computational models must change over time to mirror evolving system states.' +\n  ' Assignment operations in programming languages are vital for updating state variables during program execution.';\n\nconst summary3_1_1 =\n  '3.1.1 Local State Variables' +\n  '\\n1. **Time-Varying State:**' +\n  ' Illustrates time-varying state in computational objects using the example of withdrawing from a bank account.' +\n  \" Function `withdraw` exhibits changing behavior with each call, influenced by the account's history.\" +\n  '\\n2. **Variable Declarations and Assignment:**' +\n  ' Introduces variable declarations (`let`) and assignment operations for mutable state, enabling dynamic changes.' +\n  ' Demonstrates the use of `balance` as a mutable variable, updating its value based on withdrawal operations.' +\n  '\\n3. **Encapsulation and Local State:**' +\n  ' Addresses the issue of unrestricted access to `balance` by making it internal to `withdraw`.' +\n  ' `make_withdraw_balance_100` encapsulates `balance` within a local environment, enhancing modularity.' +\n  '\\n4. **Creating Independent Objects:**' +\n  ' Shows the creation of independent objects using functions like `make_withdraw` and `make_account`.' +\n  ' Each object maintains its local state, demonstrating modularity and independence of objects.';\n\nconst summary3_1_2 =\n  '3.1.2 The Benefits of Introducing Assignment' +\n  '\\n1. **Random Number Generation:**' +\n  ' Demonstrates the use of assignment in implementing a random number generator (`rand`) with time-varying state.' +\n  ' Utilizes `rand_update` function to generate sequences with desired statistical properties.' +\n  '\\n2. **Monte Carlo Simulation:**' +\n  ' Applies the concept of local state to implement a Monte Carlo simulation for approximating π.' +\n  \" Shows how assignment enhances modularity by encapsulating the random-number generator's state.\" +\n  '\\n3. **Modularity with Assignment:**' +\n  ' Compares the modular design of Monte Carlo simulation using `rand` with the non-modular version without local state.' +\n  ' Assignment encapsulates the state within `rand`, simplifying the expression of the Monte Carlo method.' +\n  '\\n4. **Challenges and Complexity:**' +\n  ' Acknowledges the conceptual challenges introduced by assignment in programming languages.' +\n  ' Highlights the complexity of handling time-varying local state and the trade-offs in achieving modularity.';\n\nconst summary3_1_3 =\n  '3.1.3 The Costs of Introducing Assignment' +\n  '\\n1. **Substitution Model Challenge:**' +\n  ' Assignment disrupts the substitution model, hindering the interpretation of functions and altering the predictability of outcomes.' +\n  '\\n2. **Functional vs. Imperative Programming:**' +\n  ' Describes functional programming as assignment-free, ensuring consistency in results with identical inputs.' +\n  ' Imperative programming, with assignment, complicates reasoning and introduces bugs due to order-sensitive assignments.' +\n  '\\n3. **Identity and Change:**' +\n  ' Discusses the profound issue of identity and change in computational models when assignments are introduced.' +\n  ' Examines challenges in determining \"sameness\" and \"change\" with evolving objects and the breakdown of referential transparency.' +\n  '\\n4. **Pitfalls of Imperative Programming:**' +\n  ' Highlights potential traps in imperative programming, emphasizing the importance of careful consideration of assignment order.' +\n  ' Notes the increased complexity in concurrent execution scenarios and sets the stage for exploring computational models with assignments.';\n\nconst summary3_2 =\n  '3.2 The Environment Model of Evaluation' +\n  '\\n1. **Assignment and Function Application:**' +\n  ' Substitution model insufficient with assignment.' +\n  ' Introduces environment model: frames, bindings, pointers, and the concept of \"place.\"' +\n  '\\n2. **Environment Structure:**' +\n  ' Environments are sequences of frames, each with bindings associating names with values.' +\n  ' Illustrates a simple environment structure (Figure 3.1) with frames, pointers, and shadowing.' +\n  '\\n3. **Value Determination:**' +\n  ' Value of a name determined by the first frame in the environment with a binding for that name.' +\n  ' Shadowing explained: inner frame bindings take precedence, influencing value determination.' +\n  '\\n4. **Contextual Meaning:**' +\n  ' Expressions acquire meaning in an environment.' +\n  ' Global environment introduced, consisting of a single frame with primitive function names.' +\n  ' Programs extend global environment with a program frame for top-level declarations.';\n\nconst summary3_2_1 =\n  '3.2.1 The Rules for Evaluation' +\n  '\\n1. **Function Application in the Environment Model:**' +\n  ' Environment model replaces substitution model for function application.' +\n  ' Functions are pairs of code and an environment pointer, created by evaluating lambda expressions.' +\n  '\\n2. **Function Creation:**' +\n  ' Functions created only by evaluating lambda expressions.' +\n  ' Function code from lambda expression text, environment from evaluation environment.' +\n  '\\n3. **Applying Functions:**' +\n  ' Create a new environment, bind parameters to argument values.' +\n  ' Enclosing environment of the new frame is the specified function environment.' +\n  ' Evaluate the function body in the new environment.' +\n  '\\n4. **Assignment Behavior:**' +\n  ' Expression \"name = value\" in an environment locates the binding for the name.' +\n  ' If variable binding, change to reflect the new value; if constant, signal an error.' +\n  ' If the name is unbound, signal a \"variable undeclared\" error.' +\n  '\\n\\n   Evaluation rules, while more complex than substitution, provide an accurate description of interpreter behavior.';\n\nconst summary3_2_2 =\n  '3.2.2 Applying Simple Functions' +\n  '\\n1. **Environment Model for Function Calls:**' +\n  ' Illustrates function application using the environment model.' +\n  ' Analyzes function calls for `f(5)` using the functions `square`, `sum_of_squares`, and `f`.' +\n  '\\n2. **Environment Structures:**' +\n  ' Functions create new environments for each call.' +\n  ' Different frames keep local variables separate; each call to `square` generates a new environment.' +\n  '\\n3. **Evaluation Process:**' +\n  ' Evaluates subexpressions of return expressions.' +\n  ' Calls to functions create new environments.' +\n  ' Focus on environment structures, details of value passing discussed later.' +\n  '\\n4. **Exercise 3.9:**' +\n  ' Analyze environment structures for recursive and iterative factorial functions.' +\n  \" Environment model won't clarify space efficiency claims; tail recursion discussed later.\";\n\nconst summary3_2_3 =\n  '3.2.3 Frames as the Repository of Local State' +\n  '\\n1. **Object with Local State:**' +\n  ' Illustrates using functions and assignment to represent objects with local state.' +\n  ' Example: \"withdrawal processor\" function, `make_withdraw(balance)`, is evaluated.' +\n  '\\n2. **Environment Structures:**' +\n  ' Function application creates frames with local state.' +\n  ' Examines environment structures for `make_withdraw(100)` and subsequent call `W1(50)`.' +\n  '\\n3. **Local State Handling:**' +\n  ' Frame enclosing environment holds local state (e.g., balance).' +\n  ' Different objects (e.g., `W1` and `W2`) have independent local state, preventing interference.' +\n  '\\n4. **Alternate Version - Exercise 3.10:**' +\n  ' Analyzes an alternate version of `make_withdraw` using an immediately invoked lambda expression.' +\n  ' Compares environment structures for objects created with both versions.';\n\nconst summary3_2_4 =\n  '3.2.4 Internal Declarations' +\n  '\\n1. **Block Scoping:**' +\n  ' Examines evaluation of blocks (e.g., function bodies) with declarations, introducing block scope.' +\n  ' Each block creates a new scope for declared names, preventing interference with external names.' +\n  '\\n2. **Example: Square Root Function:**' +\n  ' Demonstrates internal declarations within the `sqrt` function for square roots.' +\n  ' Uses the environment model to explain the behavior of internal functions.' +\n  '\\n3. **Properties of Internal Declarations:**' +\n  \" Names of local functions don't interfere with external names.\" +\n  \" Internal functions can access enclosing function's arguments due to nested environments.\" +\n  '\\n4. **Exercise 3.11: Bank Account Function:**' +\n  ' Analyzes the environment structure for a bank account function with internal declarations.' +\n  ' Explores how local states for multiple accounts are kept distinct in the environment model.' +\n  '\\n5. **Mutual Recursion:**' +\n  ' Explains how mutual recursion works with the environment model.' +\n  ' Illustrates with a recursive example checking if a nonnegative integer is even or odd.' +\n  '\\n6. **Top-Level Declarations:**' +\n  ' Revisits top-level name declarations.' +\n  ' Explains that the whole program is treated as an implicit block evaluated in the global environment.' +\n  ' Describes how locally declared names are handled within blocks.';\n\nconst summary3_3 =\n  '3.3 Modeling with Mutable Data' +\n  '\\n1. **Introduction to Mutable Data:**' +\n  ' Addresses the need to model systems with changing states, requiring modifications to compound data objects.' +\n  '\\n2. **Data Abstractions Extension:**' +\n  ' Extends data abstractions with mutators, alongside constructors and selectors.' +\n  ' Demonstrates the necessity of modifying compound data objects for modeling dynamic systems.' +\n  '\\n3. **Example: Banking System:**' +\n  ' Illustrates the concept of mutators using a banking system example.' +\n  ' Describes an operation `set_balance(account, new_value)` to change the balance of a designated account.' +\n  '\\n4. **Pairs as Building Blocks:**' +\n  ' Enhances pairs with basic mutators, expanding their representational power beyond sequences and trees.' +\n  ' Introduces the concept of mutable data objects and their importance in modeling complex systems.';\n\nconst summary3_3_1 =\n  '3.3.1 Mutable List Structure' +\n  '\\n1. **Limitations of Basic Operations:**' +\n  ' Pair operations (pair, head, tail) and list operations (append, list) cannot modify list structures.' +\n  ' Introduction of new mutators, set_head, and set_tail for modifying pairs in list structures.' +\n  '\\n2. **Set_Head Operation:**' +\n  ' Modifies the head pointer of a pair, demonstrated with an example.' +\n  ' Illustrates the impact on the structure, showing detached pairs and modified list.' +\n  '\\n3. **Set_Tail Operation:**' +\n  ' Similar to set_head but replaces the tail pointer of a pair.' +\n  ' Demonstrates the effect on the list structure, highlighting changes in pointers.' +\n  '\\n4. **Pair Construction vs. Mutators:**' +\n  ' Describes the difference between constructing new list structures with pair and modifying existing ones with mutators.' +\n  ' Presents a function pair implementation using mutators set_head and set_tail.';\n\nconst summary3_3_2 =\n  '3.3.2 Representing Queues' +\n  '\\n1. **Queue Definition:**' +\n  ' Queues are sequences with insertions at the rear and deletions at the front, known as FIFO (first in, first out) buffers.' +\n  ' Operations: make_queue, is_empty_queue, front_queue, insert_queue, delete_queue.' +\n  '\\n2. **Efficient Queue Representation:**' +\n  ' Efficiently represent queues using pairs with front_ptr and rear_ptr, reducing insertion time from Θ(n) to Θ(1).' +\n  ' Queue is a pair (front_ptr, rear_ptr) where the front_ptr points to the first item, and rear_ptr points to the last item.' +\n  '\\n3. **Queue Operations:**' +\n  ' Define operations using functions like front_ptr, rear_ptr, set_front_ptr, and set_rear_ptr.' +\n  ' Efficiently implement is_empty_queue, make_queue, front_queue, insert_queue, and delete_queue.' +\n  '\\n4. **Implementation Insight:**' +\n  ' Overcoming inefficiencies of standard list representation for queues by maintaining pointers to both ends.' +\n  ' Explanation of how the modification enables constant-time insertions and deletions.' +\n  '\\n\\n   **Note:** The text also includes exercises related to queue implementation and representation, involving debugging and alternative representations.';\n\nconst summary3_3_3 =\n  '3.3.3 Representing Tables' +\n  '\\n1. **One-Dimensional Table:**' +\n  ' Table represented as a list of records (key, value pairs) with a special \"backbone\" pair.' +\n  ' Lookup function retrieves values by key, insert function adds or updates key-value pairs.' +\n  '\\n2. **Two-Dimensional Table:**' +\n  ' Extends one-dimensional table concept to handle two keys, creating subtables.' +\n  ' Lookup and insert functions adapted for two keys, providing efficient indexing.' +\n  '\\n3. **Local Tables and Procedural Representation:**' +\n  ' Procedural representation using a table object with internal state.' +\n  ' Functions (lookup, insert) encapsulated within the object for multiple table access.' +\n  '\\n4. **Memoization with Tables:**' +\n  ' Memoization technique enhances function performance by storing previously computed values.' +\n  ' Example: memoized Fibonacci function using a local table to store computed results.' +\n  '\\n\\n   **Note:** The text also includes exercises related to table construction, key testing, generalizing tables, binary tree organization, and memoization.';\n\nconst summary3_3_4 =\n  '3.3.4 A Simulator for Digital Circuits' +\n  '\\n1. **Digital Circuit Simulation:**' +\n  ' Digital systems engineers use computer simulation to design and analyze complex circuits.' +\n  ' Event-driven simulation triggers actions based on events, creating a sequence of interconnected events.' +\n  '\\n2. **Computational Model of Circuits:**' +\n  ' Circuits composed of wires and primitive function boxes (and-gate, or-gate, inverter).' +\n  ' Signals propagate with delays, affecting circuit behavior.' +\n  '\\n3. **Simulation Program Design:**' +\n  ' Program constructs computational objects for wires and function boxes.' +\n  ' Simulation driven by an agenda, scheduling actions at specific times.' +\n  '\\n4. **Circuit Construction with Functions:**' +\n  ' Functions (e.g., `half_adder`, `full_adder`) defined to wire primitive function boxes into complex circuits.' +\n  ' Memoization enhances function performance using local tables.' +\n  '\\n\\n   **Note:** The text delves into detailed examples and exercises for building a digital circuit simulator, including functions for wires, primitive functions, and agenda-based simulation.';\n\nconst summary3_3_5 =\n  '3.3.5 Propagation of Constraints' +\n  '\\n1. **Introduction to Constraint Modeling:**' +\n  ' Traditional programs follow one-directional computations, while systems modeling often involves relations among quantities.' +\n  ' Constraints express relationships between quantities; for example, in a mechanical model, the deflection of a rod relates to force, length, area, and modulus.' +\n  '\\n2. **Constraint-Based Language Design:**' +\n  ' Language primitives include constraints like adder(a, b, c), multiplier(x, y, z), and constant(3.14, x).' +\n  ' Constraint networks combine constraints using connectors to express complex relations, allowing bidirectional computation.' +\n  '\\n3. **Constraint System Implementation:**' +\n  ' Procedural objects represent connectors with local state for value, informant, and constraints.' +\n  ' Functions like set_value, forget_value, and connect enable connectors to interact with constraints.' +\n  '\\n4. **Example: Celsius-Fahrenheit Converter:**' +\n  ' The language is applied to a converter using connectors C and F, demonstrating bidirectional computation.' +\n  ' Probes monitor and report changes in connector values, showcasing the flexibility of constraint-based systems.' +\n  '\\n\\n   **Key Concepts:**' +\n  ' Constraint propagation involves notifying constraints of value changes and handling bidirectional computations.' +\n  ' Constraint networks utilize connectors and primitives to model complex relationships in a constraint-based language.';\n\nconst summary3_4 =\n  '3.4 Concurrency: Time Is of the Essence' +\n  '\\n1. **Introduction to Time and State:**' +\n  ' Computational objects with local state sacrifice referential transparency, introducing time complexities.' +\n  ' Assignment introduces time into models, challenging the substitution model and demanding an environment model.' +\n  '\\n2. **Modeling Time with State:**' +\n  ' Stateful computations lead to time-dependent results, as illustrated by bank account withdrawals yielding different balances.' +\n  \" Assignment execution delineates moments in time, and expressions' values depend on timing.\" +\n  '\\n3. **Concurrent Computation:**' +\n  \" Modeling systems concurrently as collections of threads (sequential processes) reflects real-world objects' simultaneous actions.\" +\n  ' Concurrent programming enhances modularity and can provide speed advantages by leveraging multiple processors.' +\n  '\\n4. **Challenges of Concurrency and Assignment:**' +\n  ' Assignment complexities intensify in concurrent execution, demanding a nuanced understanding of time.' +\n  ' Concurrent computation introduces additional time-related complexities, emphasizing shared memory threads.' +\n  '\\n\\n   **Key Concepts:**' +\n  ' Local state introduces time considerations, altering the deterministic nature of timeless expressions.' +\n  ' Concurrent computation enhances modularity and potential speed advantages but adds complexity to understanding time.';\n\nconst summary3_4_1 =\n  '3.4.1 The Nature of Time in Concurrent Systems' +\n  '\\n1. **Time Ordering in Events:**' +\n  ' Time orders events as preceding, simultaneous, or following, illustrated with bank account balance changes.' +\n  ' Sequential assignments model changing balances, but complex scenarios emerge in distributed systems.' +\n  '\\n2. **Challenges in Concurrent Systems:**' +\n  ' Concurrent threads sharing state variables pose indeterminacy in event order, leading to potential bugs.' +\n  ' Example: Shared variable assignments in withdrawals, when interleaved, may violate system integrity.' +\n  '\\n3. **Concurrency and Shared State:**' +\n  ' Concurrent programs face complexities due to shared state variables, especially in managing simultaneous changes.' +\n  ' Concurrent restrictions may be needed to ensure correct behavior, posing challenges in designing efficient and effective systems.' +\n  '\\n4. **Requirements for Correct Execution:**' +\n  ' Stringent concurrency restrictions may hinder efficiency, prompting exploration of less strict requirements.' +\n  ' Correct execution may demand producing the same result as a sequential run, allowing some flexibility in outcomes.';\n\nconst summary3_4_2 =\n  '3.4.2 Mechanisms for Controlling Concurrency' +\n  '\\n1. **Concurrency Challenges:**' +\n  ' Concurrency challenges arise from interleaving events in different threads.' +\n  ' Managing the order of events becomes complex with increasing threads and events.' +\n  '\\n2. **Serialization for Shared State:**' +\n  ' Serialization ensures that certain functions cannot be executed concurrently.' +\n  ' Mechanisms like serializers create sets of functions, allowing only one execution at a time.' +\n  '\\n3. **Serializer Implementation:**' +\n  ' Serializer creates serialized functions, controlling access to shared variables.' +\n  ' Example: make_serializer function uses a mutex for atomic test_and_set operations.' +\n  '\\n4. **Deadlock and Deadlock Avoidance:**' +\n  ' Deadlock occurs when threads are stuck waiting for each other in a circular dependency.' +\n  ' Deadlock avoidance involves numbering shared resources and acquiring them in order to prevent circular dependencies.';\n\nconst summary3_5 =\n  '3.5 Streams' +\n  '\\n1. **Modeling State with Streams:**' +\n  '- Streams serve as an alternative to assignments for modeling state in computational objects.' +\n  '- Stream processing represents time histories of systems without mutable data, using delayed evaluation.' +\n  '\\n2. **Sequence Representation:**' +\n  '- Streams are viewed as sequences, offering a way to model time-varying behavior without direct assignment.' +\n  '- Time functions are represented as (potentially infinite) sequences, introducing the concept of world lines.' +\n  '\\n3. **Delayed Evaluation Technique:**' +\n  '- Implementation of streams involves delayed evaluation to handle large or infinite sequences effectively.' +\n  '- This technique allows representing extensive sequences without fully realizing them, addressing practical challenges.' +\n  '\\n4. **Challenges and Implications:**' +\n  '- Stream processing avoids assignment-related drawbacks but introduces its own difficulties.' +\n  '- The choice between modeling techniques for modular and maintainable systems remains an open question;';\n\nconst summary3_5_1 =\n  '**3.5.1 Streams Are Delayed Lists**' +\n  '\\n1. **Efficiency Challenges with Lists:**' +\n  '- Representing sequences as lists introduces inefficiencies in time and space for certain computations.' +\n  '- Example: Summing prime numbers in an interval, comparing iterative and sequence operation approaches.' +\n  '\\n2. **Stream Introduction and Structure:**' +\n  '- Streams offer a solution to list inefficiencies by allowing demand-driven programming.' +\n  '- Stream pairs, consisting of head and a promise (delayed evaluation), represent elements and future construction.' +\n  '\\n3. **Stream Operations and Functions:**' +\n  '- Stream analogs of list operations are defined, including stream_ref, stream_map, and stream_for_each.' +\n  '- Delayed evaluation in streams allows elegant formulations, separating apparent structure from actual computation.' +\n  '\\n4. **Memoization for Efficiency:**' +\n  '- Memoization optimizes stream implementation by avoiding repeated evaluation of delayed objects.' +\n  '- Function memo is introduced to memoize stream construction, enhancing efficiency in recursive programs;';\n\nconst summary3_5_2 =\n  '**3.5.2 Infinite Streams**' +\n  '\\n1. **Representation of Infinite Streams:**' +\n  '- Infinite streams efficiently represent sequences, even infinite ones.' +\n  '- Streams allow for delayed evaluation, computing only as much as needed.' +\n  '\\n2. **Examples of Infinite Streams:**' +\n  '- Positive integers, non-divisible by 7, Fibonacci, and prime numbers as infinite streams.' +\n  '- Streams created using generating functions and filtering mechanisms.' +\n  '\\n3. **Implicit Definition of Streams:**' +\n  '- Streams can be implicitly defined, taking advantage of delayed evaluation.' +\n  '- Operations like `add_streams` and `scale_stream` manipulate and generate streams.' +\n  '\\n4. **Signal Processing with Sieve:**' +\n  '- The prime sieve is presented as a signal-processing system.' +\n  '- Sieving process efficiently generates an infinite stream of prime numbers.' +\n  '\\nNote: Omitted specific programming details and exercises;';\n\nconst summary3_5_3 =\n  '**3.5.3 Exploiting the Stream Paradigm**' +\n  '\\n1. **Stream Processing Paradigm:**' +\n  '- Streams with delayed evaluation model signal-processing systems.' +\n  '- Allows modeling systems with different module boundaries, emphasizing time series.' +\n  '\\n2. **Formulating Iterations as Streams:**' +\n  '- Iterative processes represented as streams with infinite sequences.' +\n  '- Examples include sqrt_stream for square roots and pi_stream for approximating π.' +\n  '\\n3. **Advanced Techniques:**' +\n  \"- Acceleration techniques like Euler's transform enhance convergence.\" +\n  '- Super-acceleration achieved by recursively applying the acceleration process.' +\n  '\\n4. **Memoization and Optimization:**' +\n  '- Memoization used for efficient repeated evaluation of streams.' +\n  '- Elegant stream formulation facilitates manipulation with uniform operations.';\n\nconst summary3_5_4 =\n  '**3.5.4 Streams and Delayed Evaluation Summary**' +\n  '\\n1. **Signal Processing with Feedback Loops:**' +\n  '- Streams used to model systems with feedback loops in signal processing.' +\n  \"- Integral function's internal stream is defined recursively, demonstrating feedback loop modeling.\" +\n  '\\n2. **Implicit Definition Challenges:**' +\n  '- Implicit definitions in signal processing systems pose challenges without delayed evaluation.' +\n  '- Streams may require delays beyond typical stream programming patterns for effective modeling.' +\n  '\\n3. **Redefined Integral Function:**' +\n  '- Integral function modified to expect a delayed integrand argument.' +\n  '- Delayed evaluation crucial for generating streams without fully knowing the input.' +\n  '\\n4. **Example: Solving Differential Equations:**' +\n  '- Solve function demonstrated for approximating e using a delayed approach.' +\n  '- Caller must delay the integrand argument for integral, ensuring proper evaluation sequence.';\n\nconst summary3_5_5 =\n  '**3.5.5 Modularity of Functional Programs and Modularity of Objects Summary**' +\n  '\\n1. **Stream-Based Modularity:**' +\n  '- Streams provide modularity without assignment, encapsulating state evolution.' +\n  '- Illustration using Monte Carlo estimation of π, stream-processing version.' +\n  '\\n2. **Stream Withdrawal Processor:**' +\n  '- Comparison of withdrawal processor as a computational object and as a stream function.' +\n  '- Stream representation has no assignment or local state, emphasizing temporal stream behavior.' +\n  '\\n3. **Functional Time Modeling:**' +\n  '- Streams explicitly represent time in modeling changing quantities.' +\n  '- Functional approach allows state representation with well-defined mathematical functions.' +\n  '\\n4. **Challenges in Functional Models:**' +\n  '- Challenges arise in functional models, especially in interactive systems with independent entities.' +\n  '- Merging streams introduces time-related problems, reminiscent of synchronization issues in object-oriented models.';\n\n//...\n\nconst SICPNotes = {\n  '1': summary1,\n  '1.1': summary1_1,\n  '1.1.1': summary1_1_1,\n  '1.1.2': summary1_1_2,\n  '1.1.3': summary1_1_3,\n  '1.1.4': summary1_1_4,\n  '1.1.5': summary1_1_5,\n  '1.1.6': summary1_1_6,\n  '1.1.7': summary1_1_7,\n  '1.1.8': summary1_1_8,\n  '1.2': summary1_2,\n  '1.2.1': summary1_2_1,\n  '1.2.2': summary1_2_2,\n  '1.2.3': summary1_2_3,\n  '1.2.4': summary1_2_4,\n  '1.2.5': summary1_2_5,\n  '1.2.6': summary1_2_6,\n  '1.3': summary1_3,\n  '1.3.1': summary1_3_1,\n  '1.3.2': summary1_3_2,\n  '1.3.3': summary1_3_3,\n  '1.3.4': summary1_3_4,\n  '2': summary2,\n  '2.1': summary2_1,\n  '2.1.1': summary2_1_1,\n  '2.1.2': summary2_1_2,\n  '2.1.3': summary2_1_3,\n  '2.1.4': summary2_1_4,\n  '2.2': summary2_2,\n  '2.2.1': summary2_2_1,\n  '2.2.2': summary2_2_2,\n  '2.2.3': summary2_2_3,\n  '2.2.4': summary2_2_4,\n  '2.3': summary2_3,\n  '2.3.1': summary2_3_1,\n  '2.3.2': summary2_3_2,\n  '2.3.3': summary2_3_3,\n  '2.3.4': summary2_3_4,\n  '2.4': summary2_4,\n  '2.4.1': summary2_4_1,\n  '2.4.2': summary2_4_2,\n  '2.4.3': summary2_4_3,\n  '2.5': summary2_5,\n  '2.5.1': summary2_5_1,\n  '2.5.2': summary2_5_2,\n  '2.5.3': summary2_5_3,\n  '3': summary3,\n  '3.1': summary3_1,\n  '3.1.1': summary3_1_1,\n  '3.1.2': summary3_1_2,\n  '3.1.3': summary3_1_3,\n  '3.2': summary3_2,\n  '3.2.1': summary3_2_1,\n  '3.2.2': summary3_2_2,\n  '3.2.3': summary3_2_3,\n  '3.2.4': summary3_2_4,\n  '3.3': summary3_3,\n  '3.3.1': summary3_3_1,\n  '3.3.2': summary3_3_2,\n  '3.3.3': summary3_3_3,\n  '3.3.4': summary3_3_4,\n  '3.3.5': summary3_3_5,\n  '3.4': summary3_4,\n  '3.4.1': summary3_4_1,\n  '3.4.2': summary3_4_2,\n  '3.5': summary3_5,\n  '3.5.1': summary3_5_1,\n  '3.5.2': summary3_5_2,\n  '3.5.3': summary3_5_3,\n  '3.5.4': summary3_5_4,\n  '3.5.5': summary3_5_5\n  //...\n};\n\nexport default SICPNotes;\n","import { Button } from '@blueprintjs/core';\nimport * as React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport { SourceTheme } from 'src/features/sicp/SourceTheme';\nimport classes from 'src/styles/Chatbot.module.scss';\n\nimport { chat } from '../../../../commons/sagas/RequestsSaga';\nimport SICPNotes from './SicpNotes';\n\ninterface ChatBoxProps {\n  getSection: () => string;\n  getText: () => string;\n}\n\nconst ChatBox: React.FC<ChatBoxProps> = ({ getSection, getText }) => {\n  const chatRef = React.useRef<HTMLDivElement | null>(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [messages, setMessages] = React.useState<{ role: 'user' | 'bot'; content: string[] }[]>([\n    { content: ['Ask me something about this paragraph!'], role: 'bot' }\n  ]);\n  const [userInput, setUserInput] = React.useState<string>('');\n  const [contentHistory, setContentHistory] = React.useState<Array<string>>([]);\n  const [roleHistory, setRoleHistory] = React.useState<Array<string>>([]);\n  const { accessToken, refreshToken } = useSession();\n\n  const handleUserInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserInput(event.target.value);\n  };\n\n  // To get code snippets\n  const codeBlocks = (temp: string) => {\n    return temp.split('```');\n  };\n\n  const text = () => {\n    return '\\n(2) Here is the paragraph:\\n' + getText();\n  };\n\n  const section = () => {\n    const sectionNumber = getSection();\n    return parseInt(sectionNumber.charAt(0), 10) > 3\n      ? '\\n(1) There is no section summary for this section. Please answer the question based on the following paragraph\\n'\n      : '\\n(1) Here is the summary of this section:\\n' + SICPNotes[getSection()];\n  };\n\n  function getPrompt() {\n    const prompt =\n      'You are a competent tutor, assisting a student who is learning computer science following the textbook \"Structure and Interpretation of Computer Programs,' +\n      'JavaScript edition\". The student request is about a paragraph of the book. The request may be a follow-up request to a request that was posed to you' +\n      'previously.\\n' +\n      'What follows are:\\n' +\n      '(1) the summary of section (2) the full paragraph. Please answer the student request,' +\n      'not the requests of the history. If the student request is not related to the book, ask them to ask questions that are related to the book. Donot say that I provide you text\\n\\n' +\n      section() +\n      text();\n    return prompt;\n  }\n\n  const sendMessage = async () => {\n    if (userInput.trim() === '') {\n      return;\n    }\n    // clean the input immediately after the user sends the message so that the user would not feel the lag\n    const _userInput = userInput;\n    const _messages = messages;\n    setUserInput('');\n    const blocks = codeBlocks(_userInput);\n    setMessages([...messages, { role: 'user', content: blocks }]);\n    setIsLoading(true);\n\n    const prompt = getPrompt();\n    const payload: { role: string; content: string }[] = [{ role: 'system', content: prompt }];\n    for (let i = 0; i < contentHistory.length; i++) {\n      payload.push({ role: roleHistory[i], content: contentHistory[i] });\n    }\n    payload.push({ role: 'user', content: _userInput });\n    const tokens = { accessToken: accessToken!, refreshToken: refreshToken! };\n    chat(tokens, payload)\n      .then(text => {\n        const keptContentHistory =\n          contentHistory.length >= 20 ? contentHistory.slice(2) : contentHistory;\n        const keptRoleHistory = roleHistory.length >= 20 ? roleHistory.slice(2) : roleHistory;\n        setContentHistory([...keptContentHistory, _userInput, text]);\n        setRoleHistory([...keptRoleHistory, 'user', 'assistant']);\n        setMessages([\n          ..._messages,\n          { role: 'user', content: blocks },\n          {\n            role: 'bot',\n            content: [text + '\\n\\nThe answer is generated by GPT-4 and may not be correct.']\n          }\n        ]);\n      })\n      .catch(e => {\n        setMessages([\n          ..._messages,\n          { role: 'user', content: blocks },\n          { content: [`Sorry, I am down with a cold, please try again later.`], role: 'bot' }\n        ]);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const cleanMessage = () => {\n    setMessages([{ content: ['Ask me something about this paragraph!'], role: 'bot' }]);\n    setContentHistory([]);\n    setRoleHistory([]);\n  };\n\n  const renderMessageContent = (message: string | string[]) => {\n    if (!Array.isArray(message)) {\n      return message;\n    }\n\n    return message.map((block, index) =>\n      // Assume that only javascript code snippets will appear\n      block.substring(0, 10) === 'javascript' ? (\n        <SyntaxHighlighter language=\"javascript\" style={SourceTheme} key={index}>\n          {block.substring(11, block.length)}\n        </SyntaxHighlighter>\n      ) : (\n        block\n      )\n    );\n  };\n\n  const keyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  React.useEffect(() => {\n    scrollToBottom();\n  }, [messages, isLoading]);\n\n  const scrollToBottom = () => {\n    chatRef.current?.scrollTo({ top: chatRef.current?.scrollHeight });\n  };\n\n  return (\n    <div className={classes['chat-container']}>\n      <div className={classes['chat-message']} ref={chatRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={classes[`${message.role}`]}\n            style={{ whiteSpace: 'pre-line' }}\n          >\n            {renderMessageContent(message.content)}\n          </div>\n        ))}\n        {isLoading && <p>loading...</p>}\n      </div>\n      <input\n        type=\"text\"\n        className={classes['user-input']}\n        placeholder=\"Type your message here...\"\n        value={userInput}\n        onChange={handleUserInput}\n        onKeyDown={keyDown}\n      />\n      <div className={classes['button-container']}>\n        <Button className={classes['button-send']} onClick={sendMessage}>\n          Send\n        </Button>\n        <Button className={classes['button-clean']} onClick={cleanMessage}>\n          Clean\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import { AnchorButton, Icon } from '@blueprintjs/core';\nimport * as React from 'react';\nimport logo from 'src/assets/SA.jpg';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport classes from 'src/styles/Chatbot.module.scss';\n\nimport ChatBox from './ChatBox';\n\ninterface ChatbotProps {\n  getSection: () => string;\n  getText: () => string;\n}\n\nconst Chatbot: React.FC<ChatbotProps> = ({ getSection, getText }) => {\n  const [isPop, setPop] = React.useState(false);\n  const [isDivVisible, setIsDivVisible] = React.useState(false);\n  const [tipsMessage, setTipsMessage] = React.useState('You can click me for a chat');\n  const { isLoggedIn } = useSession();\n  // const tipsBoxRef = React.useRef<HTMLDivElement | null>(null);\n\n  // To Show reminder words\n  const togglePop = () => {\n    setPop(!isPop);\n    if (!isPop) {\n      setTipsMessage('');\n    } else {\n      setTipsMessage('You can click me for a chat');\n    }\n  };\n\n  return (\n    <div>\n      {isLoggedIn && (\n        <div className={classes['bot-container']}>\n          <div className={classes['bot-area']}>\n            {isDivVisible && (\n              // <div className=\"tips-box\">\n              <div className={classes['tips-box']}>\n                <p className={classes['tips-message']}>\n                  I am Louis, your SICP bot\n                  <br />\n                  {tipsMessage}\n                </p>\n              </div>\n            )}\n            <AnchorButton\n              className={classes['bot-button']}\n              onMouseEnter={() => setIsDivVisible(true)}\n              onMouseLeave={() => setIsDivVisible(false)}\n              onClick={togglePop}\n              icon={<Icon icon={<img src={logo} className={classes['iSA']} alt=\"SA Logo\" />} />}\n            ></AnchorButton>\n          </div>\n          {isPop && <ChatBox getSection={getSection} getText={getText} />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n","import { H1, H2, H4 } from '@blueprintjs/core';\nimport React from 'react';\n\nimport SicpToc from './SicpToc';\n\nconst originalAuthors = 'Harold Abelson and Gerald Jay Sussman';\nconst originalWithAuthors = 'with Julie Sussman';\nconst adaptedAuthors = 'Martin Henz and Tobias Wrigstad';\nconst adaptedWithAuthors = 'with Julie Sussman';\nconst developers = 'Samuel Fang';\n\nconst authors = (\n  <div className=\"sicp-authors\">\n    <H4>{originalAuthors}</H4>\n    <p>\n      {originalWithAuthors}\n      <i>— original authors</i>\n    </p>\n    <H4>{adaptedAuthors}</H4>\n    <p>\n      {adaptedWithAuthors}\n      <i>— adapters to JavaScript</i>\n    </p>\n    <H4>{developers}</H4>\n    <p>\n      <i>— designer and developer of this Interactive SICP JS edition</i>\n    </p>\n  </div>\n);\n\nconst bookTitle = (\n  <div>\n    <H1>Structure and Interpretation of Computer Programs</H1>\n    <H2>— JavaScript Edition</H2>\n  </div>\n);\n\nconst licenses = (\n  <div className=\"sicp-licenses\">\n    <div>\n      <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" rel=\"nofollow\">\n        <img src=\"https://licensebuttons.net/l/by-sa/4.0/88x31.png\" alt=\"CC BY-SA 4.0\" />\n      </a>\n    </div>\n    <div>\n      <p>\n        This work is licensed under a{' '}\n        <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" rel=\"nofollow\">\n          Creative Commons Attribution-ShareAlike 4.0 International License\n        </a>\n        .\n      </p>\n    </div>\n    <br />\n    <div>\n      <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" rel=\"nofollow\">\n        <img\n          src=\"https://camo.githubusercontent.com/46d38fe6087a9b9bdf7e45458901b818765b8391/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f372f37392f4c6963656e73655f69636f6e2d67706c2e7376672f353070782d4c6963656e73655f69636f6e2d67706c2e7376672e706e67\"\n          alt=\"GPL 3\"\n          data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/License_icon-gpl.svg/50px-License_icon-gpl.svg.png\"\n        />\n      </a>\n    </div>\n    <div>\n      <p>\n        All JavaScript programs in this work are licensed under the{' '}\n        <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" rel=\"nofollow\">\n          GNU General Public License Version 3\n        </a>\n        .\n      </p>\n    </div>\n    <br />\n    <div>\n      <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow\">\n        <img src=\"https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png\" alt=\"CC BY-NC-SA 4.0\" />\n      </a>\n    </div>\n    <div>\n      <p>\n        <a\n          href=\"https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1\"\n          rel=\"nofollow\"\n        >\n          Print and Kindle versions of this work{' '}\n        </a>\n        are published by The MIT Press under a{' '}\n        <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"nofollow\">\n          Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n        </a>\n        .\n      </p>\n    </div>\n    <br />\n  </div>\n);\n\nconst SicpIndexPage: React.FC = () => {\n  return (\n    <div className=\"sicp-index-page\">\n      <div className=\"sicp-cover\">\n        <img src=\"http://source-academy.github.io/sicp/sicpjs.png\" alt=\"SICP\" />\n        <div className=\"sicp-cover-text\">\n          {bookTitle}\n          {authors}\n        </div>\n      </div>\n      <br />\n      <H2>Content</H2>\n      <SicpToc />\n      <br />\n      <H2>Licenses</H2>\n      {licenses}\n    </div>\n  );\n};\n\nexport default SicpIndexPage;\n","import 'katex/dist/katex.min.css';\n\nimport { Button, Classes, NonIdealState, Spinner } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useNavigate, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Constants from 'src/commons/utils/Constants';\nimport { setLocalStorage } from 'src/commons/utils/LocalStorageHelper';\nimport { resetWorkspace, toggleUsingSubst } from 'src/commons/workspace/WorkspaceActions';\nimport { parseArr, ParseJsonError } from 'src/features/sicp/parser/ParseJson';\nimport { getNext, getPrev } from 'src/features/sicp/TableOfContentsHelper';\nimport {\n  readSicpSectionLocalStorage,\n  setSicpSectionLocalStorage,\n  SICP_CACHE_KEY,\n  SICP_INDEX\n} from 'src/features/sicp/utils/SicpUtils';\n\nimport SicpErrorBoundary from '../../features/sicp/errors/SicpErrorBoundary';\nimport getSicpError, { SicpErrorType } from '../../features/sicp/errors/SicpErrors';\nimport Chatbot from './subcomponents/chatbot/Chatbot';\nimport SicpIndexPage from './subcomponents/SicpIndexPage';\n\nconst baseUrl = Constants.sicpBackendUrl + 'json/';\nconst extension = '.json';\n\n// Context to determine which code snippet is active\nexport const CodeSnippetContext = React.createContext({\n  active: '0',\n  setActive: (x: string) => {}\n});\n\nconst loadingComponent = <NonIdealState title=\"Loading Content\" icon={<Spinner />} />;\n\nconst Sicp: React.FC = () => {\n  const [data, setData] = React.useState(<></>);\n  const [loading, setLoading] = React.useState(false);\n  const [active, setActive] = React.useState('0');\n  const { section } = useParams<{ section: string }>();\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const refs = React.useRef({});\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  function getSection() {\n    return location.pathname.replace('/sicpjs/', ''); // To discard the '/sicpjs/'\n  }\n\n  const getText = () => {\n    const divs = document.querySelectorAll('p.sicp-text');\n    let visibleParagraphs = '';\n\n    divs.forEach(div => {\n      const rect = div.getBoundingClientRect();\n\n      if (\n        rect.top <= window.innerHeight &&\n        rect.bottom >= 0 &&\n        rect.left <= window.innerWidth &&\n        rect.right >= 0\n      ) {\n        const text = div.textContent;\n        visibleParagraphs += text + '\\n';\n      }\n    });\n\n    return visibleParagraphs;\n  };\n\n  const scrollRefIntoView = (ref: HTMLDivElement | null) => {\n    if (!ref || !parentRef?.current) {\n      return;\n    }\n\n    const parent = parentRef.current!;\n    const relativeTop = window.scrollY > parent.offsetTop ? window.scrollY : parent.offsetTop;\n\n    parent.scrollTo({\n      behavior: 'smooth',\n      top: ref.offsetTop - relativeTop\n    });\n  };\n\n  // Handle loading of latest viewed section and fetch json data\n  React.useEffect(() => {\n    if (!section) {\n      /**\n       * Handles rerouting to the latest viewed section when clicking from\n       * the main application navbar. Navigate replace logic is used to allow the\n       * user to still use the browser back button to navigate the app.\n       */\n      navigate(`/sicpjs/${readSicpSectionLocalStorage()}`, { replace: true });\n      return;\n    }\n\n    if (section === SICP_INDEX) {\n      setSicpSectionLocalStorage(SICP_INDEX);\n      return;\n    }\n\n    setLoading(true);\n\n    fetch(baseUrl + section + extension)\n      .then(response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(myJson => {\n        try {\n          const newData = parseArr(myJson, refs); // Might throw error\n          setData(newData);\n          setSicpSectionLocalStorage(section); // Sets local storage if valid page\n        } catch (error) {\n          throw new ParseJsonError(error.message);\n        }\n      })\n      .catch(error => {\n        console.error(error);\n\n        if (error.message === 'Not Found') {\n          // page not found\n          setData(getSicpError(SicpErrorType.PAGE_NOT_FOUND_ERROR));\n        } else if (error instanceof ParseJsonError) {\n          // error occurred while parsing JSON\n          setData(getSicpError(SicpErrorType.PARSING_ERROR));\n        } else {\n          setData(getSicpError(SicpErrorType.UNEXPECTED_ERROR));\n        }\n        setLocalStorage(SICP_CACHE_KEY, SICP_INDEX); // Prevents caching invalid page\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [section, navigate]);\n\n  // Scroll to correct position\n  React.useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    const hash = location.hash;\n    const ref = refs.current[hash];\n\n    scrollRefIntoView(ref);\n  }, [location.hash, loading]);\n\n  // Close all active code snippet when new page is loaded\n  React.useEffect(() => {\n    setActive('0');\n  }, [data]);\n\n  const dispatch = useDispatch();\n  const handleSnippetEditorOpen = (s: string) => {\n    setActive(s);\n    dispatch(resetWorkspace('sicp'));\n    dispatch(toggleUsingSubst(false, 'sicp'));\n  };\n  const handleNavigation = (sect: string) => {\n    navigate('/sicpjs/' + sect);\n  };\n\n  // `section` is defined due to the navigate logic in the useEffect above\n  const navigationButtons = (\n    <div className=\"sicp-navigation-buttons\">\n      {getPrev(section!) && (\n        <Button onClick={() => handleNavigation(getPrev(section!)!)}>Previous</Button>\n      )}\n      {getNext(section!) && (\n        <Button onClick={() => handleNavigation(getNext(section!)!)}>Next</Button>\n      )}\n    </div>\n  );\n\n  return (\n    <div\n      className={classNames('Sicp', Classes.RUNNING_TEXT, Classes.TEXT_LARGE, Classes.DARK)}\n      ref={parentRef}\n    >\n      <SicpErrorBoundary>\n        <CodeSnippetContext.Provider value={{ active: active, setActive: handleSnippetEditorOpen }}>\n          {loading ? (\n            <div className=\"sicp-content\">{loadingComponent}</div>\n          ) : section === 'index' ? (\n            <SicpIndexPage />\n          ) : (\n            <div className=\"sicp-content\">\n              <Link to=\"#begin\" ref={ref => (refs.current['#begin'] = ref)} />\n              {data}\n              {navigationButtons}\n              <Link to=\"#end\" ref={ref => (refs.current['#end'] = ref)} />\n            </div>\n          )}\n        </CodeSnippetContext.Provider>\n      </SicpErrorBoundary>\n      <Chatbot getSection={getSection} getText={getText} />\n    </div>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = Sicp;\nComponent.displayName = 'Sicp';\n\nexport default Sicp;\n"],"names":["noSolutionPlaceholder","_jsxs","children","_jsx","href","props","isOpen","setIsOpen","React","Card","className","interactive","elevation","Elevation","title","body","Button","onClick","large","Collapse","solution","Latex","math","ControlBarCloseButton","handleClose","ControlButton","label","icon","IconNames","SourceTheme","color","background","fontFamily","textAlign","whiteSpace","wordSpacing","wordBreak","wordWrap","lineHeight","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","fontSize","padding","margin","overflow","borderRadius","comment","punctuation","boolean","number","string","operator","function","keyword","resizableProps","enable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","defaultSize","width","height","minHeight","maxHeight","output","id","context","CodeSnippetContext","isMobileBreakpoint","useResponsive","setActive","WorkspaceProps","initialEditorValueHash","prependLength","isSicpEditor","handleCloseEditor","HighlightRulesSelector","ModeSelector","controlBarProps","editorButtons","flowButtons","editingWorkspaceButtons","active","ControlBar","Playground","Resizable","SyntaxHighlighter","language","style","handleOpen","Pre","ParseJsonError","Error","AnchorLink","refs","Link","ref","current","to","Icon","handleRef","obj","handleImage","_refs","src","Constants","alt","scale","handleTD","index","parseArr","child","handleLatex","SicpLatex","processingFunctions","#text","handleText","text","_Fragment","B","BR","_obj","DISPLAYFOOTNOTE","handleFootnote","count","EM","EPIGRAPH","handleEpigraph","author","date","hasAttribution","attribution","push","Blockquote","EXERCISE","handleExercise","SicpExercise","FIGURE","handleFigure","snippet","table","captionName","captionBody","FOOTNOTE_REF","JAVASCRIPTINLINE","Code","LATEX","LI","LINK","META","OL","REF","REFERENCE","handleReference","SNIPPET","latex","eval","CodeSnippetProps","program","CodeSnippet","handleSnippet","SUBHEADING","H2","SUBSUBHEADING","H4","TABLE","map","x","handleTR","TEXT","TITLE","handleTitle","H1","TT","UL","arr","item","parseObj","tag","SICP_INDEX","SICP_CACHE_KEY","setSicpSectionLocalStorage","value","setLocalStorage","SicpErrorType","unexpectedError","pageNotFoundError","parsingError","errorComponent","description","NonIdealState","type","PAGE_NOT_FOUND_ERROR","PARSING_ERROR","SicpErrorBoundary","Component","constructor","args","state","hasError","_","componentDidCatch","error","errorInfo","console","render","this","getSicpError","UNEXPECTED_ERROR","ChatBox","getSection","getText","chatRef","isLoading","setIsLoading","messages","setMessages","content","role","userInput","setUserInput","contentHistory","setContentHistory","roleHistory","setRoleHistory","accessToken","refreshToken","useSession","section","sectionNumber","parseInt","charAt","SICPNotes","sendMessage","async","trim","_userInput","_messages","blocks","split","payload","i","length","tokens","chat","then","keptContentHistory","slice","keptRoleHistory","catch","e","finally","renderMessageContent","message","Array","isArray","block","substring","scrollToBottom","_chatRef$current","_chatRef$current2","scrollTo","scrollHeight","classes","placeholder","onChange","event","target","onKeyDown","key","cleanMessage","Chatbot","isPop","setPop","isDivVisible","setIsDivVisible","tipsMessage","setTipsMessage","isLoggedIn","AnchorButton","onMouseEnter","onMouseLeave","togglePop","logo","authors","bookTitle","licenses","rel","SicpIndexPage","SicpToc","baseUrl","loadingComponent","Spinner","Sicp","data","setData","loading","setLoading","useParams","parentRef","navigate","useNavigate","location","useLocation","fetch","response","ok","statusText","json","myJson","newData","readLocalStorage","replace","hash","parent","relativeTop","window","scrollY","offsetTop","behavior","scrollRefIntoView","dispatch","useDispatch","handleNavigation","sect","navigationButtons","getPrev","getNext","classNames","Classes","Provider","s","resetWorkspace","toggleUsingSubst","pathname","divs","document","querySelectorAll","visibleParagraphs","forEach","div","rect","getBoundingClientRect","innerHeight","innerWidth","textContent","displayName"],"sourceRoot":""}