{"version":3,"file":"static/js/85171.c7e8175d.chunk.js","mappings":"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","sources":["commons/ContentDisplay.tsx","commons/controlBar/ControlBarReturnToAcademyButton.tsx","commons/controlBar/ControlBarNextButton.tsx","commons/controlBar/ControlBarPreviousButton.tsx","commons/controlBar/ControlBarQuestionViewButton.tsx","commons/controlBar/ControlBarResetButton.tsx","commons/controlBar/ControlBarSaveButton.tsx","commons/sideContent/content/SideContentToneMatrix.tsx","commons/utils/DateHelper.ts","commons/XMLParser/XMLParserTypes.ts","commons/XMLParser/XMLParserHelper.ts","commons/editingOverviewCard/EditingOverviewCard.tsx","commons/controlBar/ControlBarToggleEditModeButton.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentHelper.ts","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentTextAreaContent.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentAutograderTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentDeploymentTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentGradingTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentManageQuestionTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentMcqQuestionTemplateTab.tsx","commons/editingWorkspaceSideContent/EditingWorkspaceSideContentProgrammingQuestionTemplateTab.tsx","commons/editingWorkspace/EditingWorkspace.tsx","commons/missionCreator/MissionCreator.tsx","pages/missionControl/MissionControl.tsx","webpack://frontend/./src/styles/Academy.module.scss?bc46"],"sourcesContent":["import { Card, Elevation } from '@blueprintjs/core';\nimport React, { useEffect } from 'react';\n\nexport type ContentDisplayProps = {\n  fullWidth?: boolean;\n  display: JSX.Element;\n  loadContentDispatch?: () => void;\n};\n\nconst ContentDisplay: React.FC<ContentDisplayProps> = props => {\n  useEffect(() => {\n    props.loadContentDispatch?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"ContentDisplay row center-xs\">\n      <div\n        className={`${\n          props.fullWidth ? 'col-md-12' : 'col-md-10 col-xs-11'\n        } contentdisplay-content-parent`}\n      >\n        <Card className=\"contentdisplay-content\" elevation={Elevation.THREE}>\n          {props.display}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentDisplay;\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarReturnToAcademyButtonProps = {\n  onClick?(): any;\n};\n\nexport const ControlBarReturnToAcademyButton: React.FC<ControlBarReturnToAcademyButtonProps> = ({\n  onClick\n}) => {\n  return (\n    <ControlButton\n      label=\"Return to Academy\"\n      icon={IconNames.ARROW_RIGHT}\n      onClick={onClick}\n      options={{ iconOnRight: true }}\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\nimport { ControlBarReturnToAcademyButton } from './ControlBarReturnToAcademyButton';\n\ntype ControlBarNextButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickNext?(): any;\n  onClickReturn?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarNextButton: React.FC<ControlBarNextButtonProps> = props => {\n  return props.questionProgress![0] === props.questionProgress![1] ? (\n    <ControlBarReturnToAcademyButton onClick={props.onClickReturn} key=\"return_to_academy\" />\n  ) : (\n    <ControlButton\n      label=\"Next\"\n      icon={IconNames.ARROW_RIGHT}\n      onClick={props.onClickNext}\n      options={{ iconOnRight: true }}\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarPreviousButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClick?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarPreviousButton: React.FC<ControlBarPreviousButtonProps> = props => {\n  return props.questionProgress![0] <= 1 ? null : (\n    <ControlButton label=\"Previous\" icon={IconNames.ARROW_LEFT} onClick={props.onClick} />\n  );\n};\n","import React from 'react';\n\nimport ControlButton from '../ControlButton';\n\n/**\n * @prop questionProgress a tuple of (current question number, question length) where\n *   the current question number is 1-based.\n */\ntype ControlBarQuestionViewButtonProps = {\n  questionProgress: [number, number] | null;\n};\n\nexport const ControlBarQuestionViewButton: React.FC<ControlBarQuestionViewButtonProps> = ({\n  questionProgress\n}) => {\n  return (\n    <ControlButton\n      label={`Question ${questionProgress![0]} of ${questionProgress![1]}  `}\n      isDisabled\n    />\n  );\n};\n","import { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarResetButtonProps = {\n  onClick?(): any;\n};\n\nexport const ControlBarResetButton: React.FC<ControlBarResetButtonProps> = ({ onClick }) => {\n  return <ControlButton label=\"Reset\" icon={IconNames.REPEAT} onClick={onClick} />;\n};\n","import { Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarSaveButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  onClickSave?(): any;\n};\n\ntype StateProps = {\n  key: string;\n  hasUnsavedChanges?: boolean;\n};\n\nexport const ControlButtonSaveButton: React.FC<ControlBarSaveButtonProps> = props => {\n  const saveButtonOpts = props.hasUnsavedChanges ? { intent: Intent.WARNING, minimal: false } : {};\n\n  return (\n    <ControlButton\n      label=\"Save\"\n      icon={IconNames.FLOPPY_DISK}\n      onClick={props.onClickSave}\n      options={saveButtonOpts}\n    />\n  );\n};\n","import { Button, Classes } from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React, { useEffect, useRef } from 'react';\n\nconst SideContentToneMatrix: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if ((window as any).ToneMatrix) {\n      (window as any).ToneMatrix.initialise_matrix(containerRef.current!);\n    }\n  }, []);\n\n  const handleClear = () => {\n    (window as any).ToneMatrix.clear_matrix();\n  };\n\n  const handleRandomise = () => {\n    (window as any).ToneMatrix.randomise_matrix();\n  };\n\n  return (\n    <div className=\"sa-tone-matrix\">\n      <div className=\"row\">\n        <div className={classNames('controls', 'col-xs-12', Classes.DARK, Classes.BUTTON_GROUP)}>\n          <Button id=\"clear-matrix\" onClick={handleClear}>\n            Clear\n          </Button>\n          <Button id=\"randomise-matrix\" onClick={handleRandomise}>\n            Randomise\n          </Button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-xs-12\" ref={containerRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(SideContentToneMatrix, () => true);\n","import moment from 'moment';\n\n/**\n * Checks if a date is before or at the current time.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {boolean} true if the date specified by the paramter\n *   is before the time of execution of this function.\n */\nexport const beforeNow = (dateString: string): boolean => {\n  const date = moment(dateString);\n  const now = moment();\n  return date.isBefore(now);\n};\n\n/**\n * Return a string representation of a date that is\n * nice to look at. To be used for displaying the date,\n * e.g when showing the assessment overview.\n *\n * @param {string} d an ISO 8601 compliant date string\n *   e.g 2018-07-06T10:20:09.961Z\n * @returns {string} A user-friendly readable date string,\n *   e.g 7th June, 20:09\n */\nexport const getPrettyDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('Do MMMM, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDateTime = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY, HH:mm');\n  return prettyDate;\n};\n\nexport const getStandardDate = (dateString: string): string => {\n  const date = moment(dateString);\n  const prettyDate = date.format('MMMM Do YYYY');\n  return prettyDate;\n};\n","import { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport { Question } from '../assessment/AssessmentTypes';\n\nexport const EDITING_ID = -1;\n\nexport type XmlParseStrTask = {\n  $: XmlParseStrOverview;\n  DEPLOYMENT: XmlParseStrDeployment[];\n  GRADERDEPLOYMENT: XmlParseStrDeployment[];\n  PROBLEMS: Array<{ PROBLEM: XmlParseStrProblem[] }>;\n  READING: string[];\n  TEXT: string[];\n  WEBSUMMARY?: string[];\n};\n\nexport type XmlParseStrDeployment = {\n  $: {\n    interpreter: string;\n  };\n  GLOBAL?: Array<{\n    IDENTIFIER: string[];\n    VALUE: string[];\n  }>;\n  IMPORT?: Array<{\n    $: {\n      name: ExternalLibraryName;\n    };\n    SYMBOL: string[];\n  }>;\n  // deprecated EXTERNAL in DEPLOYMENT and GRADERDEPLOYMENT, use IMPORT instead\n  EXTERNAL?: Array<{\n    $: {\n      name: ExternalLibraryName;\n    };\n    SYMBOL: string[];\n  }>;\n};\n\nexport type XmlParseStrOverview = {\n  coverimage: string;\n  duedate: string;\n  kind: string;\n  number: string;\n  title: string;\n  startdate: string;\n  story: string | null;\n};\n\nexport type XmlParseStrProblem = {\n  $: {\n    type: Question['type'];\n    maxgrade: string;\n    maxxp: string;\n  };\n  DEPLOYMENT?: XmlParseStrDeployment[];\n  GRADERDEPLOYMENT?: XmlParseStrDeployment[];\n  TEXT: string[];\n};\n\ntype PProblem = {\n  SNIPPET: Array<{\n    TEMPLATE: string[];\n    PREPEND: string;\n    SOLUTION: string[];\n    POSTPEND: string;\n    TESTCASES: Array<{\n      PUBLIC?: XmlParseStrTestcase[];\n      PRIVATE?: XmlParseStrTestcase[];\n    }>;\n    GRADER: string[];\n  }>;\n  TEXT: string[];\n};\n\nexport type XmlParseStrPProblem = PProblem & XmlParseStrProblem;\n\ntype CProblem = {\n  CHOICE: XmlParseStrProblemChoice[];\n  SNIPPET: {\n    SOLUTION: string[];\n  };\n};\n\nexport type XmlParseStrCProblem = CProblem & XmlParseStrProblem;\n\nexport type XmlParseStrProblemChoice = {\n  $: {\n    correct: string;\n  };\n  TEXT: string[];\n};\n\nexport type XmlParseStrTestcase = {\n  $: {\n    answer: string;\n    score: string;\n  };\n  _: string;\n};\n","import { Chapter } from 'js-slang/dist/types';\nimport { Builder } from 'xml2js';\n\nimport { ExternalLibraryName } from '../application/types/ExternalTypes';\nimport {\n  Assessment,\n  AssessmentOverview,\n  AssessmentStatuses,\n  AssessmentType,\n  BaseQuestion,\n  emptyLibrary,\n  GradingStatuses,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  MCQChoice,\n  Question,\n  Testcase,\n  TestcaseTypes\n} from '../assessment/AssessmentTypes';\nimport {\n  EDITING_ID,\n  XmlParseStrCProblem,\n  XmlParseStrDeployment,\n  XmlParseStrOverview,\n  XmlParseStrPProblem,\n  XmlParseStrProblem,\n  XmlParseStrProblemChoice,\n  XmlParseStrTask,\n  XmlParseStrTestcase\n} from './XMLParserTypes';\n\nconst capitalizeFirstLetter = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const retrieveLocalAssessment = (): Assessment | null => {\n  const assessment = localStorage.getItem('MissionEditingAssessmentSA');\n  if (assessment) {\n    return JSON.parse(assessment);\n  } else {\n    return null;\n  }\n};\n\nexport const retrieveLocalAssessmentOverview = (): AssessmentOverview | null => {\n  const assessment = localStorage.getItem('MissionEditingOverviewSA');\n  if (assessment) {\n    return JSON.parse(assessment);\n  } else {\n    return null;\n  }\n};\n\nexport const storeLocalAssessment = (assessment: Assessment): void => {\n  localStorage.setItem('MissionEditingAssessmentSA', JSON.stringify(assessment));\n};\n\nexport const storeLocalAssessmentOverview = (overview: AssessmentOverview): void => {\n  localStorage.setItem('MissionEditingOverviewSA', JSON.stringify(overview));\n};\n\nexport const makeEntireAssessment = (result: any): [AssessmentOverview, Assessment] => {\n  const assessmentArr = makeAssessment(result);\n  const overview = makeAssessmentOverview(result, assessmentArr[1]);\n  return [overview, assessmentArr[0]];\n};\n\nconst makeAssessmentOverview = (result: any, maxXpVal: number): AssessmentOverview => {\n  const task: XmlParseStrTask = result.CONTENT.TASK[0];\n  const rawOverview: XmlParseStrOverview = task.$;\n  return {\n    type: capitalizeFirstLetter(rawOverview.kind) as AssessmentType,\n    isManuallyGraded: true, // TODO: This is temporarily hardcoded to true. To be redone when overhauling MissionControl\n    closeAt: rawOverview.duedate,\n    coverImage: rawOverview.coverimage,\n    id: EDITING_ID,\n    maxXp: maxXpVal,\n    number: rawOverview.number || '',\n    openAt: rawOverview.startdate,\n    title: rawOverview.title,\n    reading: task.READING ? task.READING[0] : '',\n    shortSummary: task.WEBSUMMARY ? task.WEBSUMMARY[0] : '',\n    status: AssessmentStatuses.attempting,\n    story: rawOverview.story,\n    xp: 0,\n    gradingStatus: 'none' as GradingStatuses\n  };\n};\n\nconst makeAssessment = (result: any): [Assessment, number] => {\n  const task: XmlParseStrTask = result.CONTENT.TASK[0];\n  const rawOverview: XmlParseStrOverview = task.$;\n  const questionArr = makeQuestions(task);\n  return [\n    {\n      type: capitalizeFirstLetter(rawOverview.kind) as AssessmentType,\n      id: EDITING_ID,\n      globalDeployment: makeLibrary(task.DEPLOYMENT),\n      graderDeployment: makeLibrary(task.GRADERDEPLOYMENT),\n      longSummary: task.TEXT[0],\n      missionPDF: 'google.com',\n      questions: questionArr[0],\n      title: rawOverview.title\n    },\n    questionArr[1]\n  ];\n};\n\nconst altEval = (str: string): any => {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return (' + str + ')')();\n};\n\nconst makeLibrary = (deploymentArr: XmlParseStrDeployment[] | undefined): Library => {\n  if (deploymentArr === undefined) {\n    return emptyLibrary();\n  } else {\n    const deployment = deploymentArr[0];\n    const external = deployment.IMPORT || deployment.EXTERNAL;\n    const nameVal = external ? external[0].$.name : 'NONE';\n    const symbolsVal = external ? external[0].SYMBOL || [] : [];\n    const globalsVal = deployment.GLOBAL\n      ? (deployment.GLOBAL.map(x => [x.IDENTIFIER[0], altEval(x.VALUE[0]), x.VALUE[0]]) as Array<\n          [string, any, string]\n        >)\n      : [];\n    return {\n      chapter: parseInt(deployment.$.interpreter, 10) as Chapter,\n      external: {\n        name: nameVal as ExternalLibraryName,\n        symbols: symbolsVal\n      },\n      globals: globalsVal\n    };\n  }\n};\n\nconst makeQuestions = (task: XmlParseStrTask): [Question[], number] => {\n  let maxXp = 0;\n  const questions: Array<IProgrammingQuestion | IMCQQuestion> = [];\n  task.PROBLEMS[0].PROBLEM.forEach((problem: XmlParseStrProblem, curId: number) => {\n    const localMaxXp = problem.$.maxxp ? parseInt(problem.$.maxxp, 10) : 0;\n    const question: BaseQuestion = {\n      answer: null,\n      content: problem.TEXT[0],\n      id: curId,\n      library: makeLibrary(problem.DEPLOYMENT),\n      graderLibrary: makeLibrary(problem.GRADERDEPLOYMENT),\n      type: problem.$.type,\n      xp: 0,\n      maxXp: localMaxXp\n    };\n    maxXp += localMaxXp;\n    if (question.type === 'programming') {\n      questions.push(makeProgramming(problem as XmlParseStrPProblem, question));\n    }\n    if (question.type === 'mcq') {\n      questions.push(makeMCQ(problem as XmlParseStrCProblem, question));\n    }\n  });\n  return [questions, maxXp];\n};\n\nconst makeMCQ = (problem: XmlParseStrCProblem, question: BaseQuestion): IMCQQuestion => {\n  const choicesVal: MCQChoice[] = [];\n  const solution = problem.SNIPPET ? problem.SNIPPET[0].SOLUTION : undefined;\n  let solutionVal = 0;\n  problem.CHOICE.forEach((choice: XmlParseStrProblemChoice, i: number) => {\n    choicesVal.push({\n      content: choice.TEXT[0],\n      hint: null\n    });\n    solutionVal = choice.$.correct === 'true' ? i : solutionVal;\n  });\n  return {\n    ...question,\n    type: 'mcq',\n    answer: solution ? parseInt(solution[0], 10) : 0,\n    choices: choicesVal,\n    solution: solutionVal\n  };\n};\n\nconst makeProgramming = (\n  problem: XmlParseStrPProblem,\n  question: BaseQuestion\n): IProgrammingQuestion => {\n  const testcases = problem.SNIPPET[0].TESTCASES;\n  const publicTestcases = testcases ? testcases[0].PUBLIC || [] : [];\n  const privateTestcases = testcases ? testcases[0].PRIVATE || [] : [];\n  const prepend = problem.SNIPPET[0].PREPEND;\n  const postpend = problem.SNIPPET[0].POSTPEND;\n  const solution = problem.SNIPPET[0].SOLUTION;\n\n  const result: IProgrammingQuestion = {\n    ...question,\n    autogradingResults: [],\n    prepend: prepend ? (prepend[0] as string).trim() : '',\n    solutionTemplate: problem.SNIPPET[0].TEMPLATE[0].trim() as string,\n    postpend: postpend ? (postpend[0] as string).trim() : '',\n    testcases: publicTestcases.map(testcase => makeTestcase(testcase)),\n    testcasesPrivate: privateTestcases.map(testcase => makeTestcase(testcase)),\n    answer: solution ? (solution[0] as string).trim() : '',\n    type: 'programming'\n  };\n  if (problem.SNIPPET[0].GRADER) {\n    result.graderTemplate = problem.SNIPPET[0].GRADER[0];\n  }\n  return result;\n};\n\nconst makeTestcase = (testcase: XmlParseStrTestcase): Testcase => {\n  return {\n    type: TestcaseTypes.public,\n    answer: testcase.$.answer,\n    score: parseInt(testcase.$.score, 10),\n    program: testcase._\n  };\n};\n\nexport const exportXml = () => {\n  const assessmentStr = localStorage.getItem('MissionEditingAssessmentSA');\n  const overviewStr = localStorage.getItem('MissionEditingOverviewSA');\n  if (assessmentStr && overviewStr) {\n    const assessment: Assessment = JSON.parse(assessmentStr);\n    const overview: AssessmentOverview = JSON.parse(overviewStr);\n    const filename = overview.fileName || overview.title;\n    const builder = new Builder();\n    const xmlTask: XmlParseStrTask = assessmentToXml(assessment, overview);\n    const xml = {\n      CONTENT: {\n        $: {\n          'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n        },\n        TASK: xmlTask\n      }\n    };\n    let xmlStr = builder.buildObject(xml);\n    xmlStr = xmlStr.replace(/(&#xD;)+/g, '');\n    download(filename + '.xml', xmlStr);\n  }\n};\n\nconst download = (filename: string, text: string) => {\n  const element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nconst exportLibrary = (library: Library) => {\n  const deployment = {\n    $: {\n      interpreter: library.chapter.toString()\n    },\n    EXTERNAL: {\n      $: {\n        name: library.external.name\n      }\n    }\n  };\n\n  if (library.external.symbols.length !== 0) {\n    /* tslint:disable:no-string-literal */\n    deployment.EXTERNAL['SYMBOL'] = library.external.symbols;\n  }\n  if (library.globals.length !== 0) {\n    /* tslint:disable:no-string-literal */\n    deployment['GLOBAL'] = library.globals.map(x => {\n      return {\n        IDENTIFIER: x[0],\n        VALUE: x[2]\n      };\n    });\n  }\n  return deployment;\n};\n\nexport const assessmentToXml = (\n  assessment: Assessment,\n  overview: AssessmentOverview\n): XmlParseStrTask => {\n  const task: any = {};\n  const rawOverview: XmlParseStrOverview = {\n    coverimage: overview.coverImage,\n    duedate: overview.closeAt,\n    kind: overview.type.toLowerCase(),\n    number: overview.number || '',\n    startdate: overview.openAt,\n    story: overview.story,\n    title: overview.title\n  };\n  task.$ = rawOverview;\n\n  if (overview.reading && overview.reading !== '') {\n    task.READING = overview.reading;\n  }\n\n  task.WEBSUMMARY = overview.shortSummary;\n  task.TEXT = assessment.longSummary;\n  task.PROBLEMS = { PROBLEM: [] };\n\n  task.DEPLOYMENT = exportLibrary(assessment.globalDeployment!);\n\n  if (assessment.graderDeployment!.chapter !== -1) {\n    task.GRADERDEPLOYMENT = exportLibrary(assessment.graderDeployment!);\n  }\n\n  assessment.questions.forEach((question: Question) => {\n    const problem = {\n      $: {\n        type: question.type\n      },\n      SNIPPET: {\n        SOLUTION: question.answer\n      },\n      TEXT: question.content,\n      CHOICE: [] as any[]\n    };\n\n    if (question.library.chapter !== -1) {\n      /* tslint:disable:no-string-literal */\n      problem.$['DEPLOYMENT'] = exportLibrary(question.library);\n    }\n\n    if (question.graderLibrary!.chapter !== -1) {\n      /* tslint:disable:no-string-literal */\n      problem.$['GRADERDEPLOYMENT'] = exportLibrary(question.graderLibrary!);\n    }\n\n    if (question.maxXp) {\n      /* tslint:disable:no-string-literal */\n      problem.$['maxxp'] = question.maxXp;\n    }\n\n    if (question.type === 'programming') {\n      if (question.graderTemplate) {\n        /* tslint:disable:no-string-literal */\n        problem.SNIPPET['GRADER'] = question.graderTemplate;\n      }\n      const snippet = {\n        ...problem.SNIPPET,\n        TEMPLATE: question.solutionTemplate,\n        PREPEND: question.prepend,\n        POSTPEND: question.postpend,\n        TESTCASES: '' as any\n      };\n\n      if (question.testcases.length || question.testcasesPrivate!.length) {\n        /* tslint:disable:no-string-literal */\n        snippet.TESTCASES = {};\n        if (question.testcases.length) {\n          const publicTests = question.testcases.map(testcase => {\n            return {\n              $: {\n                answer: testcase.answer,\n                score: testcase.score\n              },\n              _: testcase.program\n            };\n          });\n          snippet.TESTCASES['PUBLIC'] = publicTests;\n        }\n\n        if (question.testcasesPrivate && question.testcasesPrivate.length) {\n          const privateTests = question.testcasesPrivate.map(testcase => {\n            return {\n              $: {\n                answer: testcase.answer,\n                score: testcase.score\n              },\n              _: testcase.program\n            };\n          });\n          snippet.TESTCASES['PRIVATE'] = privateTests;\n        }\n      }\n\n      problem.SNIPPET = snippet;\n    }\n\n    if (question.type === 'mcq') {\n      question.choices.forEach((choice: MCQChoice, i: number) => {\n        problem.CHOICE.push({\n          $: {\n            correct: question.solution === i ? 'true' : 'false'\n          },\n          TEXT: choice.content\n        });\n      });\n    }\n\n    task.PROBLEMS.PROBLEM.push(problem);\n  });\n\n  return task;\n};\n","import {\n  Button,\n  Card,\n  Classes,\n  Dialog,\n  Elevation,\n  H3,\n  H4,\n  H6,\n  Icon,\n  Intent,\n  MenuItem,\n  Text\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Textarea from 'react-textarea-autosize';\n\nimport defaultCoverImage from '../../assets/default_cover_image.jpg';\nimport { AssessmentOverview, AssessmentType } from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport Markdown from '../Markdown';\nimport Constants from '../utils/Constants';\nimport { getPrettyDate } from '../utils/DateHelper';\nimport { exportXml, storeLocalAssessmentOverview } from '../XMLParser/XMLParserHelper';\n\ntype EditingOverviewCardProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateEditingOverview: (overview: AssessmentOverview) => void;\n};\n\ntype StateProps = {\n  listingPath: string;\n  overview: AssessmentOverview;\n  assessmentTypes: AssessmentType[];\n};\n\nexport const EditingOverviewCard: React.FC<EditingOverviewCardProps> = props => {\n  const [editingOverviewField, setEditingOverviewField] = useState('');\n  const [fieldValue, setFieldValue] = useState<any>('');\n  const [showOptionsOverlay, setShowOptionsOverlay] = useState(false);\n\n  const saveEditOverview = (field: keyof AssessmentOverview) => (e: any) => {\n    const overview = {\n      ...props.overview,\n      [field]: fieldValue\n    };\n    setEditingOverviewField('');\n    setFieldValue('');\n    storeLocalAssessmentOverview(overview);\n    props.updateEditingOverview(overview);\n  };\n\n  const handleEditOverview = (e: any) => {\n    setFieldValue(e.target.value);\n  };\n\n  const toggleEditField = (field: keyof AssessmentOverview) => (e: any) => {\n    if (editingOverviewField !== field) {\n      setEditingOverviewField(field);\n      setFieldValue(props.overview[field]);\n    }\n  };\n\n  const toggleOptionsOverlay = () => {\n    setShowOptionsOverlay(!showOptionsOverlay);\n  };\n\n  const handleExportXml = (e: any) => {\n    exportXml();\n  };\n\n  const makeEditingOverviewTextarea = (field: keyof AssessmentOverview) => (\n    <Textarea\n      autoFocus={true}\n      className={'editing-textarea'}\n      onChange={handleEditOverview}\n      onBlur={saveEditOverview(field)}\n      value={fieldValue}\n    />\n  );\n\n  const makeEditingOverviewCard = (overview: AssessmentOverview) => (\n    <div>\n      <Card className=\"row listing\" elevation={Elevation.ONE}>\n        <div className=\"col-xs-3 listing-picture\" onClick={toggleEditField('coverImage')}>\n          {editingOverviewField === 'coverImage' ? (\n            makeEditingOverviewTextarea('coverImage')\n          ) : (\n            <img\n              alt=\"Assessment cover\"\n              className={`cover-image-${overview.status}`}\n              src={overview.coverImage ? overview.coverImage : defaultCoverImage}\n            />\n          )}\n        </div>\n\n        <div className=\"col-xs-9 listing-text\">\n          {makeEditingOverviewCardTitle(overview, overview.title)}\n          <div className=\"row listing-xp\">\n            <H6> {`Max XP: ${overview.maxXp}`} </H6>\n          </div>\n          <div className=\"row listing-description\" onClick={toggleEditField('shortSummary')}>\n            {editingOverviewField === 'shortSummary' ? (\n              makeEditingOverviewTextarea('shortSummary')\n            ) : (\n              <Markdown content={createPlaceholder(overview.shortSummary)} />\n            )}\n          </div>\n          <div className=\"listing-controls\">\n            <Text className=\"listing-due-date\">\n              <Icon className=\"listing-due-icon\" iconSize={12} icon={IconNames.TIME} />\n              <div className=\"date-container\">Opens at:&nbsp;</div>\n              <div className=\"date-container\" onClick={toggleEditField('openAt')}>\n                {editingOverviewField === 'openAt'\n                  ? makeEditingOverviewTextarea('openAt')\n                  : `${getPrettyDate(overview.openAt)}`}\n              </div>\n\n              <div className=\"date-container\">&nbsp;&nbsp;Due:&nbsp;</div>\n              <div className=\"date-container\" onClick={toggleEditField('closeAt')}>\n                {editingOverviewField === 'closeAt'\n                  ? makeEditingOverviewTextarea('closeAt')\n                  : `${getPrettyDate(overview.closeAt)}`}\n              </div>\n            </Text>\n            <Button icon={IconNames.WRENCH} minimal={true} onClick={toggleOptionsOverlay}>\n              Other Options\n            </Button>\n            <NavLink\n              to={`${props.listingPath}/${overview.id.toString()}/${Constants.defaultQuestionId}`}\n            >\n              <ControlButton label=\"Edit mission\" icon={IconNames.EDIT} />\n            </NavLink>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n\n  const makeEditingOverviewCardTitle = (overview: AssessmentOverview, title: string) => (\n    <div className=\"row listing-title\">\n      <Text ellipsize={true} className={'col-xs-10'}>\n        <H4 onClick={toggleEditField('title')}>\n          {editingOverviewField === 'title'\n            ? makeEditingOverviewTextarea('title')\n            : createPlaceholder(title)}\n        </H4>\n      </Text>\n      <div className=\"col-xs-2\">{makeExportButton(overview)}</div>\n    </div>\n  );\n\n  const makeExportButton = (overview: AssessmentOverview) => (\n    <Button icon={IconNames.EXPORT} intent={Intent.DANGER} minimal={true} onClick={handleExportXml}>\n      Save as XML\n    </Button>\n  );\n\n  const saveCategory = (i: AssessmentType, e: any) => {\n    const overview = {\n      ...props.overview,\n      category: i\n    };\n    storeLocalAssessmentOverview(overview);\n    props.updateEditingOverview(overview);\n  };\n\n  const optionsOverlay = () => (\n    <Dialog\n      canOutsideClickClose={false}\n      className=\"assessment-reset\"\n      icon={IconNames.WRENCH}\n      isCloseButtonShown={true}\n      isOpen={showOptionsOverlay}\n      onClose={toggleOptionsOverlay}\n      title=\"Other options\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <H3>Assessment Type</H3>\n        {assessmentTypeSelect(props.overview.type, saveCategory)}\n        <H3>Number</H3>\n        <div onClick={toggleEditField('number')}>\n          {editingOverviewField === 'number'\n            ? makeEditingOverviewTextarea('number')\n            : createPlaceholder(props.overview.number || '')}\n        </div>\n        <H3>Story</H3>\n        <div onClick={toggleEditField('story')}>\n          {editingOverviewField === 'story'\n            ? makeEditingOverviewTextarea('story')\n            : createPlaceholder(props.overview.story || '')}\n        </div>\n        <br />\n        <H3>Filename</H3>\n        <div onClick={toggleEditField('fileName')}>\n          {editingOverviewField === 'fileName'\n            ? makeEditingOverviewTextarea('fileName')\n            : createPlaceholder(props.overview.fileName || '')}\n        </div>\n      </div>\n    </Dialog>\n  );\n\n  const assessmentTypeSelect = (\n    assessmentType: AssessmentType,\n    handleSelect = (i: AssessmentType, e?: React.SyntheticEvent<HTMLElement>) => {}\n  ) => (\n    <AssessmentTypeSelectComponent\n      className={Classes.MINIMAL}\n      items={props.assessmentTypes}\n      onItemSelect={handleSelect}\n      itemRenderer={assessmentTypeRenderer}\n      filterable={false}\n    >\n      <Button minimal text={assessmentType} rightIcon={IconNames.DOUBLE_CARET_VERTICAL} />\n    </AssessmentTypeSelectComponent>\n  );\n\n  return (\n    <div>\n      {optionsOverlay()}\n      {makeEditingOverviewCard(props.overview)}\n    </div>\n  );\n};\n\nconst createPlaceholder = (str: string): string => {\n  if (str.match('^(\\n| )*$')) {\n    return 'Enter Value Here (If Applicable)';\n  } else {\n    return str;\n  }\n};\n\nconst AssessmentTypeSelectComponent = Select.ofType<AssessmentType>();\n\nconst assessmentTypeRenderer: ItemRenderer<AssessmentType> = (\n  assessmentType,\n  { handleClick, modifiers, query }\n) => <MenuItem active={false} key={assessmentType} onClick={handleClick} text={assessmentType} />;\n","import { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarToggleEditModeButtonProps = {\n  toggleEditMode?(): void;\n  editingMode?: string;\n};\n\nexport const ControlBarToggleEditModeButton: React.FC<ControlBarToggleEditModeButtonProps> = ({\n  toggleEditMode,\n  editingMode\n}) => {\n  const editMode = editingMode === 'question' ? 'Global' : 'Question Specific';\n  return (\n    <Tooltip2 content={'Switch to ' + editMode + ' Editing Mode'}>\n      <ControlButton\n        label={editMode + ' Editing Mode'}\n        icon={IconNames.REFRESH}\n        onClick={toggleEditMode}\n      />\n    </Tooltip2>\n  );\n};\n","export const getValueFromPath = (path: Array<string | number>, obj: any): any => {\n  for (const next of path) {\n    obj = obj[next];\n  }\n  return obj;\n};\n\nexport const assignToPath = (path: Array<string | number>, value: any, obj: any): void => {\n  let i = 0;\n  for (i = 0; i < path.length - 1; i++) {\n    obj = obj[path[i]];\n  }\n  obj[path[i]] = value;\n};\n\nexport const limitNumberRange =\n  (min: number | null = 0, max: number | null = null) =>\n  (value: number | string): number => {\n    value = typeof value === 'string' ? parseInt(value, 10) : value;\n    let result;\n    if (min !== null && value < min) {\n      result = min;\n    } else if (max !== null && value > max) {\n      result = max;\n    } else {\n      result = value;\n    }\n    return result;\n  };\n","import React, { useState } from 'react';\nimport Textarea from 'react-textarea-autosize';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport Markdown from '../Markdown';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\n\ntype TextAreaContentProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  processResults?: (newVal: string | number) => string | number;\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  isNumber?: boolean;\n  path: Array<string | number>;\n  useRawValue?: boolean;\n};\n\nexport const TextAreaContent: React.FC<TextAreaContentProps> = props => {\n  const isNumberVal = props.isNumber || false;\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [isNumber] = useState(isNumberVal);\n  const [fieldValue, setFieldValue] = useState('');\n  const [useRawValue] = useState(props.useRawValue || isNumberVal);\n\n  const saveEditAssessment = (e: any) => {\n    let parsedFieldValue: number | string;\n    if (isNumber) {\n      parsedFieldValue = parseInt(fieldValue, 10);\n      if (isNaN(parsedFieldValue)) {\n        parsedFieldValue = getValueFromPath(props.path, props.assessment);\n      }\n    } else {\n      parsedFieldValue = fieldValue;\n    }\n    const originalVal = getValueFromPath(props.path, props.assessment);\n    if (props.processResults) {\n      parsedFieldValue = props.processResults(parsedFieldValue);\n    }\n    if (parsedFieldValue !== originalVal) {\n      const assessmentVal = props.assessment;\n      assignToPath(props.path, parsedFieldValue, assessmentVal);\n      props.updateAssessment(assessmentVal);\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleEditAssessment = (e: any) => {\n    setFieldValue(e.target.value);\n  };\n\n  const makeEditingTextarea = () => (\n    <Textarea\n      autoFocus={true}\n      className={'editing-textarea'}\n      onChange={handleEditAssessment}\n      onBlur={saveEditAssessment}\n      value={fieldValue}\n    />\n  );\n\n  const toggleEditField = () => (e: any) => {\n    if (!isEditing) {\n      const fieldVal = getValueFromPath(props.path, props.assessment) || '';\n      setIsEditing(true);\n      setFieldValue(typeof fieldVal === 'string' ? fieldVal : fieldVal.toString());\n    }\n  };\n\n  let display;\n  if (isEditing) {\n    display = makeEditingTextarea();\n  } else {\n    const filler = 'Please enter value (if applicable)';\n    let value = getValueFromPath(props.path, props.assessment);\n    if (!props.isNumber) {\n      value = value || '';\n      value = value.match(/^\\s*$/) ? filler : value;\n    }\n    if (useRawValue) {\n      display = value;\n    } else {\n      display = <Markdown content={value} />;\n    }\n  }\n  return <div onClick={toggleEditField()}>{display}</div>;\n};\n\nexport default TextAreaContent;\n","import { Card, Elevation, H6 } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport {\n  Assessment,\n  IProgrammingQuestion,\n  Testcase,\n  testcaseTemplate\n} from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport { getValueFromPath } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype AutograderProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleTestcaseEval: (testcase: Testcase) => void;\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  questionId: number;\n};\n\nexport const AutograderTab: React.FC<AutograderProps> = props => {\n  const addTestcase = (testcases: Testcase[]) => () => {\n    testcases.push(testcaseTemplate());\n    props.updateAssessment(props.assessment);\n  };\n\n  const removeTestcase = (testcases: Testcase[], id: number) => {\n    testcases.splice(id, 1);\n    props.updateAssessment(props.assessment);\n  };\n\n  const autograderCard = (testcasePath: Array<string | number>, index: number) => {\n    const testcases = getValueFromPath(testcasePath, props.assessment) as Testcase[];\n    const testcase = testcases[index];\n\n    return (\n      <div>\n        <Card className=\"row listing\" elevation={Elevation.ONE}>\n          <div className=\"col-xs-9 listing-text\">\n            {/* {makeOverviewCardTitle(overview, index, setBetchaAssessment, renderGradingStatus)} */}\n            <div className=\"row listing-program\">\n              <H6>\n                Test Program:\n                <TextAreaContent\n                  assessment={props.assessment}\n                  path={testcasePath.concat([index, 'program'])}\n                  useRawValue={true}\n                  updateAssessment={props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"row listing-expected\">\n              <H6>\n                Score:\n                <TextAreaContent\n                  assessment={props.assessment}\n                  isNumber={true}\n                  path={testcasePath.concat([index, 'score'])}\n                  updateAssessment={props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"row listing-expected\">\n              <H6>\n                Expected Answer:\n                <TextAreaContent\n                  assessment={props.assessment}\n                  path={testcasePath.concat([index, 'answer'])}\n                  useRawValue={true}\n                  updateAssessment={props.updateAssessment}\n                />\n              </H6>\n            </div>\n            <div className=\"listing-controls\">\n              <div>\n                <ControlButton\n                  label=\"Test\"\n                  icon={IconNames.PLAY}\n                  onClick={() => props.handleTestcaseEval(testcase)}\n                />\n                <ControlButton\n                  label=\"Delete\"\n                  icon={IconNames.DELETE}\n                  onClick={() => removeTestcase(testcases, index)}\n                />\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  const question = props.assessment.questions[props.questionId] as IProgrammingQuestion;\n  const publicTestPath = ['questions', props.questionId, 'testcases'];\n\n  const publicTestcases = question.testcases.map((testcase, index) => (\n    <div key={index}>{autograderCard(publicTestPath, index)}</div>\n  ));\n\n  const privateTestPath = ['questions', props.questionId, 'testcasesPrivate'];\n  const privateTestcases = question.testcasesPrivate!.map((testcase, index) => (\n    <div key={index}>{autograderCard(privateTestPath, index)}</div>\n  ));\n\n  return (\n    <div>\n      Public Testcases\n      {publicTestcases}\n      <ControlButton\n        label=\"New public testcase\"\n        icon={IconNames.PLUS}\n        onClick={addTestcase(question.testcases)}\n      />\n      <br />\n      <br />\n      Private Testcases\n      {privateTestcases}\n      <ControlButton\n        label=\"New private testcase\"\n        icon={IconNames.PLUS}\n        onClick={addTestcase(question.testcasesPrivate!)}\n      />\n    </div>\n  );\n};\n","import { Button, Classes, Divider, MenuItem, Switch } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport React from 'react';\n\nimport { SALanguage, sourceLanguages, styliseSublanguage } from '../application/ApplicationTypes';\nimport {\n  External,\n  externalLibraries,\n  ExternalLibraryName\n} from '../application/types/ExternalTypes';\nimport { Assessment, emptyLibrary, Library } from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype DeploymentTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n  handleRefreshLibrary: (library: Library) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  label: string;\n  pathToLibrary: Array<string | number>;\n  pathToCopy?: Array<string | number>;\n  isOptionalDeployment: boolean;\n};\n\nconst DeploymentTab: React.FC<DeploymentTabProps> = props => {\n  const deploymentTab = () => {\n    const deploymentPath = props.pathToLibrary;\n    const deployment = getValueFromPath(deploymentPath, props.assessment) as Library;\n    // const deploymentDisp = props.isGlobalDeployment ? 'Global Deployment' : 'Local Deployment';\n    const symbols = deployment.external.symbols.map((symbol, i) => (\n      <tr key={i}>\n        <td>{textareaContent(deploymentPath.concat(['external', 'symbols', i]))}</td>\n        <td style={{ width: '100px' }}>\n          <ControlButton label=\"Delete\" icon={IconNames.MINUS} onClick={handleSymbolDelete(i)} />\n        </td>\n      </tr>\n    ));\n\n    const globals = deployment.globals.map((symbol, i) => (\n      <tr key={i}>\n        <td style={{ width: '170px' }}>\n          {textareaContent(deploymentPath.concat(['globals', i, 0]))}\n        </td>\n        <td>{globalValueTextareaContent(i)}</td>\n        <td style={{ width: '90px' }}>\n          <ControlButton label=\"Delete\" icon={IconNames.MINUS} onClick={handleGlobalDelete(i)} />\n        </td>\n      </tr>\n    ));\n\n    const resetLibrary = (\n      <ControlButton\n        label=\"Use this Library\"\n        icon={IconNames.REFRESH}\n        onClick={() => props.handleRefreshLibrary(deployment)}\n      />\n    );\n\n    const symbolsFragment = (\n      <React.Fragment>\n        External Library:\n        <br />\n        {externalSelect(deployment.external.name, handleExternalSelect)}\n        <Divider />\n        <div>Symbols:</div>\n        <br />\n        <table style={{ width: '100%' }}>\n          <tbody>{symbols}</tbody>\n        </table>\n        <ControlButton label=\"New Symbol\" icon={IconNames.PLUS} onClick={handleNewSymbol} />\n      </React.Fragment>\n    );\n\n    const globalsFragment = (\n      <React.Fragment>\n        <div>Globals:</div>\n        <br />\n        <table style={{ width: '100%', borderSpacing: '5px' }}>\n          <tbody>{globals}</tbody>\n        </table>\n        <ControlButton label=\"New Global\" icon={IconNames.PLUS} onClick={handleNewGlobal} />\n      </React.Fragment>\n    );\n\n    return (\n      <div>\n        {/* {deploymentDisp}\n        <br /> */}\n        <Divider />\n        {resetLibrary}\n        <Divider />\n        Interpreter:\n        <br />\n        {chapterSelect(deployment.chapter, deployment.variant, handleChapterSelect)}\n        <Divider />\n        {symbolsFragment}\n        <Divider />\n        {globalsFragment}\n      </div>\n    );\n  };\n\n  const textareaContent = (path: Array<string | number>) => {\n    return (\n      <TextAreaContent\n        assessment={props.assessment}\n        path={path}\n        processResults={removeSpaces}\n        updateAssessment={props.updateAssessment}\n        useRawValue={true}\n      />\n    );\n  };\n\n  const globalValueTextareaContent = (i: number) => {\n    const pathVal = props.pathToLibrary.concat(['globals', i, 2]);\n    return (\n      <TextAreaContent\n        assessment={props.assessment}\n        path={pathVal}\n        updateAssessment={handleGlobalValueUpdate(i)}\n        useRawValue={true}\n      />\n    );\n  };\n\n  const handleGlobalValueUpdate = (i: number) => (assessment: Assessment) => {\n    const deployment = getValueFromPath(props.pathToLibrary, props.assessment) as Library;\n    const global = deployment.globals[i];\n    try {\n      global[1] = altEval(global[2]!);\n      props.updateAssessment(assessment);\n    } catch (e) {\n      global[2] = '\"Invalid Expression\"';\n    }\n  };\n\n  const handleSymbolDelete = (index: number) => () => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    const symbols = deployment.external.symbols;\n    symbols.splice(index, 1);\n    props.updateAssessment(assessment);\n  };\n\n  const handleNewSymbol = () => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    const symbols = deployment.external.symbols;\n    symbols.push('new_symbol');\n    props.updateAssessment(assessment);\n  };\n\n  const handleGlobalDelete = (index: number) => () => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    deployment.globals.splice(index, 1);\n    props.updateAssessment(assessment);\n  };\n\n  const handleNewGlobal = () => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    deployment.globals.push(['new_global', null, 'null']);\n    props.updateAssessment(assessment);\n  };\n\n  const handleChapterSelect = (i: SALanguage, _e?: React.SyntheticEvent<HTMLElement>) => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    deployment.chapter = i.chapter;\n    props.updateAssessment(assessment);\n  };\n\n  const handleExternalSelect = (i: External, _e?: React.SyntheticEvent<HTMLElement>) => {\n    const assessment = props.assessment;\n    const deployment = getValueFromPath(props.pathToLibrary, assessment) as Library;\n    deployment.external.name = i.name;\n    deployment.external.symbols = JSON.parse(JSON.stringify(externalLibraries.get(i.name)!));\n    props.updateAssessment(assessment);\n  };\n\n  const handleSwitchDeployment = () => {\n    const assessment = props.assessment;\n    if (isEmptyLibrary()) {\n      let library = getValueFromPath(\n        props.pathToCopy || ['globalDeployment'],\n        assessment\n      ) as Library;\n      if (library.chapter === -1) {\n        library = assessment.globalDeployment!;\n      }\n      library = JSON.parse(JSON.stringify(library));\n      assignToPath(props.pathToLibrary, library, assessment);\n    } else {\n      assignToPath(props.pathToLibrary, emptyLibrary(), assessment);\n    }\n    props.updateAssessment(assessment);\n  };\n\n  const isEmptyLibrary = (path: Array<string | number> = props.pathToLibrary) => {\n    return getValueFromPath(path.concat(['chapter']), props.assessment) === -1;\n  };\n\n  if (!props.isOptionalDeployment) {\n    return (\n      <div>\n        {props.label + ' Deployment'}\n        <br />\n        {deploymentTab()}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Switch\n          checked={!isEmptyLibrary()}\n          label={'Enable ' + props.label + ' Deployment'}\n          onChange={handleSwitchDeployment}\n        />\n        {isEmptyLibrary() ? null : deploymentTab()}\n      </div>\n    );\n  }\n};\n\nconst removeSpaces = (str: string | number) => {\n  return typeof str === 'string' ? str.replace(/\\s+/g, '') : str;\n};\n\nconst altEval = (str: string): any => {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return (' + str + ')')();\n};\n\nconst chapterSelect = (\n  currentChap: Chapter,\n  variant: Variant = Variant.DEFAULT,\n  handleSelect = (i: SALanguage, e?: React.SyntheticEvent<HTMLElement>) => {}\n) => (\n  <ChapterSelectComponent\n    className={Classes.MINIMAL}\n    items={sourceLanguages}\n    onItemSelect={handleSelect}\n    itemRenderer={chapterRenderer}\n    filterable={false}\n  >\n    <Button\n      minimal\n      text={styliseSublanguage(currentChap, variant)}\n      rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n    />\n  </ChapterSelectComponent>\n);\n\nconst ChapterSelectComponent = Select.ofType<SALanguage>();\n\nconst chapterRenderer: ItemRenderer<SALanguage> = (chap, { handleClick, modifiers, query }) => (\n  <MenuItem active={false} key={chap.displayName} onClick={handleClick} text={chap.displayName} />\n);\n\nconst iExternals = Array.from(externalLibraries.entries()).map((entry, index) => ({\n  name: entry[0] as ExternalLibraryName,\n  key: index,\n  symbols: entry[1]\n}));\n\nconst externalSelect = (\n  currentExternal: string,\n  handleSelect: (i: External, e?: React.SyntheticEvent<HTMLElement>) => void\n) => (\n  <ExternalSelectComponent\n    className={Classes.MINIMAL}\n    items={iExternals}\n    onItemSelect={handleSelect}\n    itemRenderer={externalRenderer}\n    filterable={false}\n  >\n    <Button minimal text={currentExternal} rightIcon={IconNames.DOUBLE_CARET_VERTICAL} />\n  </ExternalSelectComponent>\n);\n\nconst ExternalSelectComponent = Select.ofType<External>();\n\nconst externalRenderer: ItemRenderer<External> = (external, { handleClick, modifiers, query }) => (\n  <MenuItem active={false} key={external.key} onClick={handleClick} text={external.name} />\n);\n\nexport default DeploymentTab;\n","import React from 'react';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport { limitNumberRange } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype GradingTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  path: Array<string | number>;\n};\n\nconst GradingTab: React.FC<GradingTabProps> = props => {\n  const textareaContent = (path: Array<string | number>) => {\n    return (\n      <TextAreaContent\n        assessment={props.assessment}\n        isNumber={true}\n        path={path}\n        processResults={limitNumberRange(0)}\n        updateAssessment={props.updateAssessment}\n      />\n    );\n  };\n\n  return (\n    <div>\n      Max Xp:\n      {textareaContent(props.path.concat(['maxXp']))}\n    </div>\n  );\n};\n\nexport default GradingTab;\n","import { Button, ButtonGroup, Classes, Dialog, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router';\n\nimport { Assessment, mcqTemplate, programmingTemplate } from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport Markdown from '../Markdown';\n\ntype ManageQuestionTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  hasUnsavedChanges: boolean;\n  questionId: number;\n};\n\nconst ManageQuestionTab: React.FC<ManageQuestionTabProps> = props => {\n  const navigate = useNavigate();\n  const [showSaveOverlay, setShowSaveOverlay] = useState(false);\n  const [modifyAssessment, setModifyAssessment] = useState<VoidFunction>(() => {});\n\n  const manageQuestionTab = (index: number) => {\n    return (\n      <div>\n        <ControlButton\n          label=\"Clone\"\n          icon={IconNames.DOCUMENT}\n          onClick={confirmSave(\n            makeQuestion(() => deepCopy(props.assessment.questions[index]), index)\n          )}\n        />\n        <ControlButton\n          label=\"Delete\"\n          icon={IconNames.REMOVE}\n          onClick={confirmSave(deleteQuestion(index))}\n        />\n        <ControlButton\n          label=\"Shift Up\"\n          icon={IconNames.CARET_UP}\n          onClick={confirmSave(shiftQuestion(-1, index))}\n          isDisabled={index === 0}\n        />\n        <ControlButton\n          label=\"Shift Down\"\n          icon={IconNames.CARET_DOWN}\n          onClick={confirmSave(shiftQuestion(1, index))}\n          isDisabled={index >= props.assessment.questions.length - 1}\n        />\n        <br />\n        <ControlButton\n          label=\"Insert Programming Question\"\n          icon={IconNames.FONT}\n          onClick={confirmSave(makeQuestion(programmingTemplate, index))}\n        />\n        <ControlButton\n          label=\"Insert MCQ Question\"\n          icon={IconNames.CONFIRM}\n          onClick={confirmSave(makeQuestion(mcqTemplate, index))}\n        />\n      </div>\n    );\n  };\n\n  const shiftQuestion = (dir: number, index: number) => () => {\n    const assessment = props.assessment;\n    const newIndex = index + dir;\n    if (newIndex >= 0 && newIndex < assessment.questions.length) {\n      const question = assessment.questions[index];\n      const questions = assessment.questions;\n      questions[index] = questions[newIndex];\n      questions[newIndex] = question;\n      assessment.questions = questions;\n      props.updateAssessment(assessment);\n      navigate('/mission-control/-1/' + newIndex.toString());\n    }\n  };\n\n  const makeQuestion = (template: () => any, index: number) => () => {\n    const assessment = props.assessment;\n    index = index + 1;\n    const questions = assessment.questions;\n    questions.splice(index, 0, template());\n    assessment.questions = questions;\n    props.updateAssessment(assessment);\n    navigate('/mission-control/-1/' + index.toString());\n  };\n\n  const deleteQuestion = (index: number) => () => {\n    const assessment = props.assessment;\n    let questions = assessment.questions;\n    if (questions.length > 1) {\n      questions = questions.slice(0, index).concat(questions.slice(index + 1));\n    }\n    assessment.questions = questions;\n    props.updateAssessment(assessment);\n  };\n\n  const confirmSave = (modifyAssessment: () => void) => () => {\n    if (props.hasUnsavedChanges) {\n      setShowSaveOverlay(true);\n      setModifyAssessment(modifyAssessment);\n    } else {\n      modifyAssessment();\n    }\n  };\n\n  /**\n   * Asks to save work.\n   */\n  const confirmSaveOverlay = (\n    <Dialog\n      className=\"assessment-reset\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={showSaveOverlay}\n      title=\"Confirmation: Save unsaved changes?\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <Markdown content=\"Are you sure you want to save over your unsaved changes?\" />\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <ButtonGroup>\n          <ControlButton\n            label=\"Cancel\"\n            onClick={() => setShowSaveOverlay(false)}\n            options={{ minimal: false }}\n          />\n          <ControlButton\n            label=\"Confirm\"\n            onClick={() => {\n              modifyAssessment();\n              setShowSaveOverlay(false);\n            }}\n            options={{ minimal: false, intent: Intent.DANGER }}\n          />\n        </ButtonGroup>\n      </div>\n    </Dialog>\n  );\n\n  return (\n    <div>\n      {confirmSaveOverlay}\n      {props.assessment.questions.map((q, index) => (\n        <div key={index}>\n          Question {index + 1}\n          <br />\n          <Button className=\"mcq-option col-xs-12\" minimal={true}>\n            <Markdown\n              content={q.content.length > 200 ? q.content.substring(0, 300) + '...' : q.content}\n            />\n          </Button>\n          {manageQuestionTab(index)}\n          <br />\n          <br />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst deepCopy = (arr: any) => {\n  return JSON.parse(JSON.stringify(arr));\n};\n\nexport default ManageQuestionTab;\n","import { Card } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React from 'react';\n\nimport { Assessment, IMCQQuestion } from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport { limitNumberRange } from './EditingWorkspaceSideContentHelper';\nimport TextAreaContent from './EditingWorkspaceSideContentTextAreaContent';\n\ntype MCQQuestionTemplateTabProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  questionId: number;\n};\n\nconst MCQQuestionTemplateTab: React.FC<MCQQuestionTemplateTabProps> = props => {\n  const addOption = () => {\n    const { assessment, questionId } = props;\n    const question = assessment!.questions[questionId] as IMCQQuestion;\n    const choices = question.choices.concat([\n      {\n        content: 'A',\n        hint: null\n      }\n    ]);\n    question.choices = choices;\n    assessment!.questions[questionId] = question;\n    props.updateAssessment(assessment);\n  };\n\n  const delOption = () => {\n    const { assessment, questionId } = props;\n    const question = assessment!.questions[questionId] as IMCQQuestion;\n    const choices = question.choices.slice(0, question.choices.length - 1);\n    question.choices = choices;\n    assessment!.questions[questionId] = question;\n    props.updateAssessment(assessment);\n  };\n\n  const textareaContent = (\n    path: Array<string | number>,\n    isNumber: boolean = false,\n    range: number[] = [0]\n  ) => {\n    if (isNumber) {\n      return (\n        <TextAreaContent\n          assessment={props.assessment}\n          isNumber={true}\n          path={path}\n          processResults={limitNumberRange(range[0], range[1])}\n          updateAssessment={props.updateAssessment}\n        />\n      );\n    } else {\n      return (\n        <TextAreaContent\n          assessment={props.assessment}\n          path={path}\n          updateAssessment={props.updateAssessment}\n        />\n      );\n    }\n  };\n\n  // Render\n  const { questionId } = props;\n  const question = props.assessment!.questions[questionId] as IMCQQuestion;\n  const mcqButton = question.choices.map((choice, i) => (\n    <div key={i} className=\"mcq-option col-xs-12\">\n      Option {i}:{textareaContent(['questions', questionId, 'choices', i, 'content'])}\n      <br />\n      Hint:\n      {textareaContent(['questions', questionId, 'choices', i, 'hint'])}\n    </div>\n  ));\n  const deleteButton = (\n    <ControlButton label=\"Delete Option\" icon={IconNames.REMOVE} onClick={delOption} />\n  );\n\n  return (\n    <div className=\"MCQChooser row\">\n      <Card className=\"mcq-content-parent col-xs-12 middle-xs\">\n        <div className=\"row mcq-options-parent between-xs\">\n          {mcqButton}\n          Solution:\n          {textareaContent(['questions', questionId, 'solution'], true, [\n            0,\n            question.choices.length\n          ])}\n          <br />\n          <ControlButton label=\"Add Option\" icon={IconNames.CONFIRM} onClick={addOption} />\n          {question.choices.length > 0 ? deleteButton : undefined}\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default MCQQuestionTemplateTab;\n","import { Button, Card, Classes, Divider, IconName, MenuItem } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { ItemRenderer, Select } from '@blueprintjs/select';\nimport React, { useState } from 'react';\nimport AceEditor from 'react-ace';\n\nimport { Assessment } from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport { WorkspaceState } from '../workspace/WorkspaceTypes';\nimport { assignToPath, getValueFromPath } from './EditingWorkspaceSideContentHelper';\n\ntype QuestionEditorProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  updateAssessment: (assessment: Assessment) => void;\n  handleEditorValueChange: (newEditorValue: string) => void;\n  handleUpdateWorkspace: (options: Partial<WorkspaceState>) => void;\n};\n\ntype StateProps = {\n  assessment: Assessment;\n  editorValue: string;\n  questionId: number;\n};\n\nconst questionEditorPaths = ['prepend', 'postpend', 'solutionTemplate', 'answer'] as const;\n\nexport type QuestionEditorId = (typeof questionEditorPaths)[number];\n\nconst QuestionEditorSelect = Select.ofType<QuestionEditor>();\n\nexport type QuestionEditor = {\n  label: string;\n  icon: IconName;\n  id: QuestionEditorId;\n};\n\nconst questionEditors: QuestionEditor[] = [\n  {\n    label: 'Prepend',\n    icon: IconNames.CHEVRON_UP,\n    id: 'prepend'\n  },\n  {\n    label: 'Postpend',\n    icon: IconNames.CHEVRON_DOWN,\n    id: 'postpend'\n  },\n  {\n    label: 'Solution Template',\n    icon: IconNames.MANUAL,\n    id: 'solutionTemplate'\n  },\n  {\n    label: 'Suggested Answer',\n    icon: IconNames.TICK,\n    id: 'answer'\n  }\n];\n\n/*\n * activeEditor is the default editor to show initially\n */\nconst ProgrammingQuestionTemplateTab: React.FC<QuestionEditorProps> = props => {\n  const [activeEditor, setActiveEditor] = useState(questionEditors[0]);\n  const [templateValue, setTemplateValue] = useState('');\n  const [templateFocused, setTemplateFocused] = useState(false);\n\n  const programmingTab = () => {\n    const qnPath = ['questions', props.questionId];\n    const path = qnPath.concat(activeEditor.id);\n\n    const copyFromEditorButton = (\n      <ControlButton\n        label=\"Copy from Editor\"\n        icon={IconNames.IMPORT}\n        onClick={handleCopyFromEditor(path)}\n      />\n    );\n\n    const copyToEditorButton = (\n      <ControlButton\n        label=\"Copy to Editor\"\n        icon={IconNames.EXPORT}\n        onClick={handleCopyToEditor(path)}\n      />\n    );\n\n    const editorPanel = (\n      <div>\n        {copyFromEditorButton}\n        {copyToEditorButton}\n        <Divider />\n        {editor(path)}\n      </div>\n    );\n\n    const menuRenderer: ItemRenderer<QuestionEditor> = (editor, { handleClick }) => (\n      <MenuItem\n        active={false}\n        key={editor.id}\n        onClick={handleClick}\n        text={editor.label}\n        icon={editor.icon}\n      />\n    );\n\n    const editorSelect = (\n      currentEditor: QuestionEditor,\n      handleSelect: (i: QuestionEditor) => void\n    ) => (\n      <QuestionEditorSelect\n        className={Classes.MINIMAL}\n        items={questionEditors}\n        itemRenderer={menuRenderer}\n        onItemSelect={handleSelect}\n        filterable={false}\n      >\n        <Button\n          minimal\n          text={currentEditor.label}\n          icon={IconNames.EDIT}\n          rightIcon={IconNames.DOUBLE_CARET_VERTICAL}\n        />\n      </QuestionEditorSelect>\n    );\n\n    return (\n      <div className=\"side-content\">\n        <Card>\n          {editorSelect(activeEditor, setActiveEditor)}\n          <Divider />\n          <div className=\"side-content-text\">{editorPanel}</div>\n        </Card>\n      </div>\n    );\n  };\n\n  const editor = (path: Array<string | number>) => {\n    const value = templateFocused ? templateValue : getValueFromPath(path, props.assessment);\n\n    return (\n      <div onClick={focusEditor(path)} onBlur={unFocusEditor(path)}>\n        <AceEditor\n          className=\"react-ace\"\n          editorProps={{\n            $blockScrolling: Infinity\n          }}\n          fontSize={14}\n          highlightActiveLine={false}\n          mode=\"javascript\"\n          onChange={setTemplateValue}\n          theme=\"source\"\n          value={value}\n          width=\"100%\"\n        />\n      </div>\n    );\n  };\n\n  const focusEditor =\n    (path: Array<string | number>) =>\n    (e: any): void => {\n      if (!templateFocused) {\n        setTemplateValue(getValueFromPath(path, props.assessment));\n        setTemplateFocused(true);\n      }\n    };\n\n  const unFocusEditor =\n    (path: Array<string | number>) =>\n    (e: any): void => {\n      if (templateFocused) {\n        const value = getValueFromPath(path, props.assessment);\n        if (value !== templateValue) {\n          const assessmentVal = props.assessment;\n          assignToPath(path, templateValue, assessmentVal);\n          props.updateAssessment(assessmentVal);\n        }\n\n        if (activeEditor.id === 'prepend') {\n          const programPrependValue = templateValue;\n          props.handleUpdateWorkspace({ programPrependValue });\n        } else if (activeEditor.id === 'postpend') {\n          const programPostpendValue = templateValue;\n          props.handleUpdateWorkspace({ programPostpendValue });\n        }\n\n        setTemplateValue('');\n        setTemplateFocused(false);\n      }\n    };\n\n  const handleCopyFromEditor = (path: Array<string | number>) => (): void => {\n    const assessment = props.assessment;\n    assignToPath(path, props.editorValue, assessment);\n    props.updateAssessment(assessment);\n  };\n\n  const handleCopyToEditor = (path: Array<string | number>) => (): void => {\n    const value = getValueFromPath(path, props.assessment);\n    props.handleEditorValueChange(value);\n  };\n\n  return programmingTab();\n};\n\nexport default ProgrammingQuestionTemplateTab;\n","import {\n  ButtonGroup,\n  Classes,\n  Dialog,\n  Intent,\n  NonIdealState,\n  Spinner,\n  SpinnerSize\n} from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\n\nimport { submitAnswer } from '../application/actions/SessionActions';\nimport {\n  Assessment,\n  AssessmentOverview,\n  IMCQQuestion,\n  IProgrammingQuestion,\n  Library,\n  Question,\n  QuestionTypes,\n  Testcase\n} from '../assessment/AssessmentTypes';\nimport { ControlBarProps } from '../controlBar/ControlBar';\nimport { ControlBarClearButton } from '../controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../controlBar/ControlBarEvalButton';\nimport { ControlBarNextButton } from '../controlBar/ControlBarNextButton';\nimport { ControlBarPreviousButton } from '../controlBar/ControlBarPreviousButton';\nimport { ControlBarQuestionViewButton } from '../controlBar/ControlBarQuestionViewButton';\nimport { ControlBarResetButton } from '../controlBar/ControlBarResetButton';\nimport { ControlBarRunButton } from '../controlBar/ControlBarRunButton';\nimport { ControlButtonSaveButton } from '../controlBar/ControlBarSaveButton';\nimport { ControlBarToggleEditModeButton } from '../controlBar/ControlBarToggleEditModeButton';\nimport ControlButton from '../ControlButton';\nimport { AutograderTab } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentAutograderTab';\nimport DeploymentTab from '../editingWorkspaceSideContent/EditingWorkspaceSideContentDeploymentTab';\nimport GradingTab from '../editingWorkspaceSideContent/EditingWorkspaceSideContentGradingTab';\nimport ManageQuestionTab from '../editingWorkspaceSideContent/EditingWorkspaceSideContentManageQuestionTab';\nimport MCQQuestionTemplateTab from '../editingWorkspaceSideContent/EditingWorkspaceSideContentMcqQuestionTemplateTab';\nimport ProgrammingQuestionTemplateTab from '../editingWorkspaceSideContent/EditingWorkspaceSideContentProgrammingQuestionTemplateTab';\nimport { TextAreaContent } from '../editingWorkspaceSideContent/EditingWorkspaceSideContentTextAreaContent';\nimport { convertEditorTabStateToProps } from '../editor/EditorContainer';\nimport { Position } from '../editor/EditorTypes';\nimport Markdown from '../Markdown';\nimport SideContentToneMatrix from '../sideContent/content/SideContentToneMatrix';\nimport { SideContentProps } from '../sideContent/SideContent';\nimport { changeSideContentHeight } from '../sideContent/SideContentActions';\nimport { SideContentTab, SideContentType } from '../sideContent/SideContentTypes';\nimport { useTypedSelector } from '../utils/Hooks';\nimport Workspace, { WorkspaceProps } from '../workspace/Workspace';\nimport {\n  beginClearContext,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  evalTestcase,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  resetWorkspace,\n  setEditorBreakpoint,\n  updateActiveEditorTabIndex,\n  updateCurrentAssessmentId,\n  updateEditorValue,\n  updateHasUnsavedChanges,\n  updateReplValue,\n  updateWorkspace\n} from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation, WorkspaceState } from '../workspace/WorkspaceTypes';\nimport {\n  retrieveLocalAssessment,\n  storeLocalAssessment,\n  storeLocalAssessmentOverview\n} from '../XMLParser/XMLParserHelper';\n\nexport type EditingWorkspaceProps = {\n  assessmentId: number;\n  questionId: number;\n  assessmentOverview: AssessmentOverview;\n  updateAssessmentOverview: (overview: AssessmentOverview) => void;\n  notAttempted: boolean;\n  closeDate: string;\n};\n\nconst workspaceLocation: WorkspaceLocation = 'assessment';\n\nconst EditingWorkspace: React.FC<EditingWorkspaceProps> = props => {\n  const [assessment, setAssessment] = useState(retrieveLocalAssessment());\n  const [editingMode, setEditingMode] = useState('question');\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [showResetTemplateOverlay, setShowResetTemplateOverlay] = useState(false);\n  const [originalMaxXp, setOriginalMaxXp] = useState(0);\n  const navigate = useNavigate();\n\n  const {\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    editorTabs,\n    isRunning,\n    output,\n    replValue,\n    currentAssessment: storedAssessmentId,\n    currentQuestion: storedQuestionId\n  } = useTypedSelector(store => store.workspaces[workspaceLocation]);\n\n  /**\n   * After mounting (either an older copy of the assessment\n   * or a loading screen), try to fetch a newer assessment,\n   * and show the briefing.\n   */\n  useEffect(() => {\n    if (assessment) {\n      resetWorkspaceValues();\n      setOriginalMaxXp(getMaxXp());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Once there is an update (due to the assessment being fetched), check\n   * if a workspace reset is needed.\n   */\n  useEffect(() => checkWorkspaceReset());\n\n  const dispatch = useDispatch();\n  const {\n    handleBrowseHistoryDown,\n    handleBrowseHistoryUp,\n    handleClearContext,\n    handleDeclarationNavigate,\n    handleEditorEval,\n    handleEditorValueChange,\n    handleEditorUpdateBreakpoints,\n    handleReplEval,\n    handleReplOutputClear,\n    handleReplValueChange,\n    handleResetWorkspace,\n    handleUpdateWorkspace,\n    handleSubmitAnswer,\n    handleSideContentHeightChange,\n    handleUpdateHasUnsavedChanges,\n    handleUpdateCurrentAssessmentId,\n    handlePromptAutocomplete,\n    setActiveEditorTabIndex,\n    removeEditorTabByIndex\n  } = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleClearContext: (library: Library, shouldInitLibrary: boolean) =>\n        dispatch(beginClearContext(workspaceLocation, library, shouldInitLibrary)),\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      handleEditorValueChange: (editorTabIndex: number, newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, editorTabIndex, newEditorValue)),\n      handleEditorUpdateBreakpoints: (editorTabIndex: number, newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, editorTabIndex, newBreakpoints)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleReplOutputClear: () => dispatch(clearReplOutput(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation)),\n      handleResetWorkspace: (options: Partial<WorkspaceState>) =>\n        dispatch(resetWorkspace(workspaceLocation, options)),\n      handleUpdateWorkspace: (options: Partial<WorkspaceState>) =>\n        dispatch(updateWorkspace(workspaceLocation, options)),\n      handleSubmitAnswer: (id: number, answer: string | number) =>\n        dispatch(submitAnswer(id, answer)),\n      handleSideContentHeightChange: (heightChange: number) =>\n        dispatch(changeSideContentHeight(heightChange, workspaceLocation)),\n      handleUpdateHasUnsavedChanges: (hasUnsavedChanges: boolean) =>\n        dispatch(updateHasUnsavedChanges(workspaceLocation, hasUnsavedChanges)),\n      handleUpdateCurrentAssessmentId: (assessmentId: number, questionId: number) =>\n        dispatch(updateCurrentAssessmentId(assessmentId, questionId)),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback)),\n      setActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      removeEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex))\n    };\n  }, [dispatch]);\n\n  // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n  const handleFirstEditorValueChange = useCallback(\n    (newEditorValue: string) => handleEditorValueChange(0, newEditorValue),\n    [handleEditorValueChange]\n  );\n\n  if (assessment === null || assessment!.questions.length === 0) {\n    return (\n      <NonIdealState\n        className={classNames('WorkspaceParent', Classes.DARK)}\n        description=\"Getting mission ready...\"\n        icon={<Spinner size={SpinnerSize.LARGE} />}\n      />\n    );\n  }\n\n  /* If questionId is out of bounds, set it within range. */\n  const formatedQuestionId = () => {\n    let questionId = props.questionId;\n    if (questionId < 0) {\n      questionId = 0;\n    } else if (questionId >= assessment!.questions.length) {\n      questionId = assessment!.questions.length - 1;\n    }\n    return questionId;\n  };\n\n  /**\n   * Resets to last save.\n   */\n  const resetTemplateOverlay = () => (\n    <Dialog\n      className=\"assessment-reset\"\n      icon={IconNames.ERROR}\n      isCloseButtonShown={true}\n      isOpen={showResetTemplateOverlay}\n      title=\"Confirmation: Reset editor?\"\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <Markdown content=\"Are you sure you want to reset to your last save?\" />\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <ButtonGroup>\n          <ControlButton\n            label=\"Cancel\"\n            onClick={() => setShowResetTemplateOverlay(false)}\n            options={{ minimal: false }}\n          />\n          <ControlButton\n            label=\"Confirm\"\n            onClick={() => {\n              const assessment = retrieveLocalAssessment()!;\n              setAssessment(assessment);\n              setHasUnsavedChanges(false);\n              setShowResetTemplateOverlay(false);\n              setOriginalMaxXp(getMaxXp());\n              handleRefreshLibrary();\n              resetWorkspaceValues();\n            }}\n            options={{ minimal: false, intent: Intent.DANGER }}\n          />\n        </ButtonGroup>\n      </div>\n    </Dialog>\n  );\n\n  /**\n   * Checks if there is a need to reset the workspace, then executes\n   * a dispatch (in the props) if needed.\n   */\n  function checkWorkspaceReset() {\n    /* Don't reset workspace if assessment not fetched yet. */\n    if (assessment === undefined) {\n      return;\n    }\n\n    /* Reset assessment if it has changed.*/\n    const assessmentId = -1;\n    const questionId = formatedQuestionId();\n\n    if (storedAssessmentId !== assessmentId || storedQuestionId !== questionId) {\n      resetWorkspaceValues();\n      handleUpdateCurrentAssessmentId(assessmentId, questionId);\n      handleUpdateHasUnsavedChanges(false);\n      if (hasUnsavedChanges) {\n        setAssessment(retrieveLocalAssessment());\n        setHasUnsavedChanges(false);\n      }\n      handleRefreshLibrary();\n    }\n  }\n\n  const handleRefreshLibrary = (library: Library | undefined = undefined) => {\n    const question = assessment!.questions[formatedQuestionId()];\n    if (!library) {\n      library = question.library.chapter === -1 ? assessment!.globalDeployment! : question.library;\n    }\n    if (library && library.globals.length > 0) {\n      const globalsVal = library.globals.map((x: any) => x[0]);\n      const symbolsVal = library.external.symbols.concat(globalsVal);\n      library = {\n        ...library,\n        external: {\n          name: library.external.name,\n          symbols: uniq(symbolsVal)\n        }\n      };\n    }\n    handleClearContext(library, true);\n  };\n\n  const resetWorkspaceValues = () => {\n    const question: Question = assessment!.questions[formatedQuestionId()];\n    let editorValue: string;\n    let programPrependValue = '';\n    let programPostpendValue = '';\n    if (question.type === QuestionTypes.programming) {\n      if (question.editorValue) {\n        editorValue = question.editorValue;\n      } else {\n        editorValue = (question as IProgrammingQuestion).solutionTemplate as string;\n      }\n      programPrependValue = (question as IProgrammingQuestion).prepend;\n      programPostpendValue = (question as IProgrammingQuestion).postpend;\n    } else {\n      editorValue = '//If you see this, this is a bug. Please report bug.';\n    }\n\n    handleResetWorkspace({\n      // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n      editorTabs: [\n        {\n          value: editorValue,\n          highlightedLines: [],\n          breakpoints: []\n        }\n      ],\n      programPrependValue,\n      programPostpendValue\n    });\n    // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n    handleEditorValueChange(0, editorValue);\n  };\n\n  const handleTestcaseEval = (testcase: Testcase) => {\n    const editorTestcases = [testcase];\n    handleUpdateWorkspace({ editorTestcases });\n    dispatch(evalTestcase(workspaceLocation, 0));\n  };\n\n  const handleSave = () => {\n    // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n    assessment!.questions[formatedQuestionId()].editorValue = editorTabs[0].value;\n    setAssessment(assessment);\n    setHasUnsavedChanges(false);\n    storeLocalAssessment(assessment);\n    // this.handleRefreshLibrary();\n    handleSaveXp();\n  };\n\n  const handleSaveXp = () => {\n    const curXp = getMaxXp();\n    const changeXp = curXp - originalMaxXp;\n    if (changeXp !== 0) {\n      const overview = props.assessmentOverview;\n      if (changeXp !== 0) {\n        overview.maxXp = curXp;\n      }\n      setOriginalMaxXp(curXp);\n      props.updateAssessmentOverview(overview);\n      storeLocalAssessmentOverview(overview);\n    }\n  };\n\n  const getMaxXp = () => {\n    let xp = 0;\n    const questions = assessment!.questions;\n    for (const question of questions) {\n      xp += question.maxXp;\n    }\n    return xp as number;\n  };\n  const updateEditAssessmentState = (assessmentVal: Assessment) => {\n    setAssessment(assessmentVal);\n    setHasUnsavedChanges(true);\n  };\n\n  const updateAndSaveAssessment = (assessmentVal: Assessment) => {\n    setAssessment(assessmentVal);\n    handleRefreshLibrary();\n    handleSave();\n    resetWorkspaceValues();\n  };\n\n  const toggleEditingMode = () => {\n    const toggle = editingMode === 'question' ? 'global' : 'question';\n    setEditingMode(toggle);\n  };\n\n  /** Pre-condition: IAssessment has been loaded */\n  const sideContentProps: (p: EditingWorkspaceProps, q: number) => SideContentProps = (\n    props: EditingWorkspaceProps,\n    questionId: number\n  ) => {\n    const currentAssessment = assessment!;\n    let tabs: SideContentTab[];\n    if (editingMode === 'question') {\n      const qnType = currentAssessment!.questions[props.questionId].type;\n      const questionTemplateTab =\n        qnType === 'mcq' ? (\n          <MCQQuestionTemplateTab\n            assessment={currentAssessment}\n            questionId={questionId}\n            updateAssessment={updateEditAssessmentState}\n          />\n        ) : (\n          <ProgrammingQuestionTemplateTab\n            assessment={currentAssessment}\n            questionId={questionId}\n            updateAssessment={updateEditAssessmentState}\n            // TODO: Hardcoded to make use of the first editor tab. Refactoring is needed for this workspace to enable Folder mode.\n            editorValue={editorTabs[0].value}\n            handleEditorValueChange={handleFirstEditorValueChange}\n            handleUpdateWorkspace={handleUpdateWorkspace}\n          />\n        );\n\n      tabs = [\n        {\n          label: `Question ${questionId + 1}`,\n          iconName: IconNames.NINJA,\n          body: (\n            <TextAreaContent\n              assessment={currentAssessment}\n              path={['questions', questionId, 'content']}\n              updateAssessment={updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorQuestionOverview\n        },\n        {\n          label: `Question Template`,\n          iconName: IconNames.DOCUMENT,\n          body: questionTemplateTab,\n          id: SideContentType.editorQuestionTemplate\n        },\n        {\n          label: `Manage Local Deployment`,\n          iconName: IconNames.HOME,\n          body: (\n            <DeploymentTab\n              assessment={currentAssessment}\n              label={'Question Specific'}\n              handleRefreshLibrary={handleRefreshLibrary}\n              pathToLibrary={['questions', questionId, 'library']}\n              updateAssessment={updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorLocalDeployment\n        },\n        {\n          label: `Manage Local Grader Deployment`,\n          iconName: IconNames.CONFIRM,\n          body: (\n            <DeploymentTab\n              assessment={currentAssessment}\n              label={'Question Specific Grader'}\n              handleRefreshLibrary={handleRefreshLibrary}\n              pathToLibrary={['questions', questionId, 'graderLibrary']}\n              pathToCopy={['questions', questionId, 'library']}\n              updateAssessment={updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorLocalGraderDeployment\n        },\n        {\n          label: `Grading`,\n          iconName: IconNames.TICK,\n          body: (\n            <GradingTab\n              assessment={currentAssessment}\n              path={['questions', questionId]}\n              updateAssessment={updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorGrading\n        }\n      ];\n      if (qnType === 'programming') {\n        tabs.push({\n          label: `Autograder`,\n          iconName: IconNames.AIRPLANE,\n          body: (\n            <AutograderTab\n              assessment={currentAssessment}\n              questionId={questionId}\n              handleTestcaseEval={handleTestcaseEval}\n              updateAssessment={updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorAutograder\n        });\n      }\n      const functionsAttached = currentAssessment!.globalDeployment!.external.symbols;\n      if (functionsAttached.includes('get_matrix')) {\n        tabs.push({\n          label: `Tone Matrix`,\n          iconName: IconNames.GRID_VIEW,\n          body: <SideContentToneMatrix />,\n          id: SideContentType.toneMatrix\n        });\n      }\n    } else {\n      tabs = [\n        {\n          label: `${currentAssessment!.type} Briefing`,\n          iconName: IconNames.BRIEFCASE,\n          body: (\n            <TextAreaContent\n              assessment={currentAssessment}\n              path={['longSummary']}\n              updateAssessment={updateEditAssessmentState}\n            />\n          ),\n          id: SideContentType.editorBriefing\n        },\n        {\n          label: `Manage Question`,\n          iconName: IconNames.WRENCH,\n          body: (\n            <ManageQuestionTab\n              assessment={currentAssessment}\n              hasUnsavedChanges={hasUnsavedChanges}\n              questionId={questionId}\n              updateAssessment={updateAndSaveAssessment}\n            />\n          ),\n          id: SideContentType.editorManageQuestion\n        },\n        {\n          label: `Manage Global Deployment`,\n          iconName: IconNames.GLOBE,\n          body: (\n            <DeploymentTab\n              assessment={currentAssessment}\n              label={'Global'}\n              handleRefreshLibrary={handleRefreshLibrary}\n              pathToLibrary={['globalDeployment']}\n              updateAssessment={updateEditAssessmentState}\n              isOptionalDeployment={false}\n            />\n          ),\n          id: SideContentType.editorGlobalDeployment\n        },\n        {\n          label: `Manage Global Grader Deployment`,\n          iconName: IconNames.CONFIRM,\n          body: (\n            <DeploymentTab\n              assessment={currentAssessment}\n              label={'Global Grader'}\n              handleRefreshLibrary={handleRefreshLibrary}\n              pathToLibrary={['graderDeployment']}\n              updateAssessment={updateEditAssessmentState}\n              isOptionalDeployment={true}\n            />\n          ),\n          id: SideContentType.editorGlobalGraderDeployment\n        }\n      ];\n    }\n\n    return {\n      tabs: { beforeDynamicTabs: tabs, afterDynamicTabs: [] },\n      workspaceLocation\n    };\n  };\n\n  /** Pre-condition: IAssessment has been loaded */\n  const controlBarProps: (q: number) => ControlBarProps = (questionId: number) => {\n    const listingPath = '/mission-control';\n    const assessmentWorkspacePath = listingPath + `/${assessment!.id.toString()}`;\n    const questionProgress: [number, number] = [questionId + 1, assessment!.questions.length];\n\n    const onClickPrevious = () =>\n      navigate(assessmentWorkspacePath + `/${(questionId - 1).toString()}`);\n    const onClickNext = () => navigate(assessmentWorkspacePath + `/${(questionId + 1).toString()}`);\n    const onClickReturn = () => navigate(listingPath);\n\n    const onClickResetTemplate = () => {\n      setShowResetTemplateOverlay(() => hasUnsavedChanges);\n    };\n\n    const nextButton = (\n      <ControlBarNextButton\n        onClickNext={onClickNext}\n        onClickReturn={onClickReturn}\n        questionProgress={questionProgress}\n        key=\"next_question\"\n      />\n    );\n\n    const previousButton = (\n      <ControlBarPreviousButton\n        onClick={onClickPrevious}\n        questionProgress={questionProgress}\n        key=\"previous_question\"\n      />\n    );\n\n    const questionView = (\n      <ControlBarQuestionViewButton questionProgress={questionProgress} key=\"question_view\" />\n    );\n\n    const resetButton = (\n      <ControlBarResetButton onClick={onClickResetTemplate} key=\"reset_template\" />\n    );\n\n    const runButton = (\n      <ControlBarRunButton\n        isEntrypointFileDefined={activeEditorTabIndex !== null}\n        handleEditorEval={handleEditorEval}\n        key=\"run\"\n      />\n    );\n\n    const saveButton = (\n      <ControlButtonSaveButton\n        hasUnsavedChanges={hasUnsavedChanges}\n        onClickSave={handleSave}\n        key=\"save\"\n      />\n    );\n\n    const toggleEditModeButton = (\n      <ControlBarToggleEditModeButton\n        editingMode={editingMode}\n        toggleEditMode={toggleEditingMode}\n        key=\"toggle_edit_mode\"\n      />\n    );\n\n    return {\n      editorButtons: [runButton, saveButton, resetButton],\n      flowButtons: [previousButton, questionView, nextButton],\n      editingWorkspaceButtons: [toggleEditModeButton]\n    };\n  };\n\n  function replButtons() {\n    const clearButton = (\n      <ControlBarClearButton handleReplOutputClear={handleReplOutputClear} key=\"clear_repl\" />\n    );\n\n    const evalButton = (\n      <ControlBarEvalButton handleReplEval={handleReplEval} isRunning={isRunning} key=\"eval_repl\" />\n    );\n\n    return [evalButton, clearButton];\n  }\n\n  const questionId = formatedQuestionId();\n  const question: Question = assessment.questions[questionId];\n\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: controlBarProps(questionId),\n    editorContainerProps:\n      question.type === QuestionTypes.programming\n        ? {\n            editorVariant: 'normal',\n            isFolderModeEnabled,\n            activeEditorTabIndex,\n            setActiveEditorTabIndex,\n            removeEditorTabByIndex,\n            editorTabs: editorTabs\n              .map(convertEditorTabStateToProps)\n              .map((editorTabStateProps, index) => {\n                // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n                //       Specifically, need to update questions such that they can span multiple files.\n                if (index !== 0) {\n                  return editorTabStateProps;\n                }\n                return {\n                  ...editorTabStateProps,\n                  editorValue:\n                    editorTabStateProps.editorValue ||\n                    question.editorValue ||\n                    (question as IProgrammingQuestion).solutionTemplate\n                };\n              }),\n            editorSessionId: '',\n            handleDeclarationNavigate: handleDeclarationNavigate,\n            handleEditorEval: handleEditorEval,\n            handleEditorValueChange: handleEditorValueChange,\n            handleEditorUpdateBreakpoints: handleEditorUpdateBreakpoints,\n            handleUpdateHasUnsavedChanges: handleUpdateHasUnsavedChanges,\n            handlePromptAutocomplete: handlePromptAutocomplete,\n            isEditorAutorun: false\n          }\n        : undefined,\n    handleSideContentHeightChange: handleSideContentHeightChange,\n    hasUnsavedChanges: hasUnsavedChanges,\n    mcqProps: {\n      mcq: question as IMCQQuestion,\n      handleMCQSubmit: (option: number) =>\n        handleSubmitAnswer(assessment!.questions[questionId].id, option)\n    },\n    sideBarProps: {\n      tabs: []\n    },\n    sideContentProps: sideContentProps(props, questionId),\n    replProps: {\n      handleBrowseHistoryDown: handleBrowseHistoryDown,\n      handleBrowseHistoryUp: handleBrowseHistoryUp,\n      handleReplEval: handleReplEval,\n      handleReplValueChange: handleReplValueChange,\n      output: output,\n      replValue: replValue,\n      sourceChapter: question?.library?.chapter || Chapter.SOURCE_4,\n      sourceVariant: Variant.DEFAULT,\n      externalLibrary: question?.library?.external?.name || 'NONE',\n      replButtons: replButtons()\n    }\n  };\n  return (\n    <div className={classNames('WorkspaceParent', Classes.DARK)}>\n      {resetTemplateOverlay()}\n      <Workspace {...workspaceProps} />\n    </div>\n  );\n};\n\nfunction uniq(a: string[]) {\n  const seen = {};\n  return a.filter(item => (seen.hasOwnProperty(item) ? false : (seen[item] = true)));\n}\n\nexport default EditingWorkspace;\n","import { FileInput } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { parseString } from 'xml2js';\n\nimport { updateAssessment } from '../application/actions/SessionActions';\nimport {\n  Assessment,\n  AssessmentOverview,\n  assessmentTemplate,\n  overviewTemplate\n} from '../assessment/AssessmentTypes';\nimport ControlButton from '../ControlButton';\nimport {\n  makeEntireAssessment,\n  retrieveLocalAssessment,\n  storeLocalAssessment,\n  storeLocalAssessmentOverview\n} from '../XMLParser/XMLParserHelper';\n\ntype Props = {\n  updateEditingOverview: (overview: AssessmentOverview) => void;\n};\n\nconst MissionCreator: React.FC<Props> = props => {\n  const [fileInputText, setFileInputText] = useState('Import XML');\n  let fileReader: FileReader | undefined = undefined;\n\n  const dispatch = useDispatch();\n  const newAssessment = useCallback(\n    (assessment: Assessment) => dispatch(updateAssessment(assessment)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    const assessment = retrieveLocalAssessment();\n    if (assessment) {\n      newAssessment(assessment);\n    }\n  }, [newAssessment]);\n\n  const handleFileRead = (file: any) => (e: any) => {\n    if (!fileReader) {\n      return;\n    }\n    const content = fileReader.result;\n    if (content) {\n      parseString(content, (err: any, result: any) => {\n        try {\n          const entireAssessment: [AssessmentOverview, Assessment] = makeEntireAssessment(result);\n          entireAssessment[0].fileName = file.name.slice(0, -4);\n          storeLocalAssessmentOverview(entireAssessment[0]);\n          props.updateEditingOverview(entireAssessment[0]);\n\n          storeLocalAssessment(entireAssessment[1]);\n          newAssessment(entireAssessment[1]);\n          setFileInputText('Success!');\n        } catch (err) {\n          setFileInputText('Invalid XML!');\n        }\n      });\n    }\n  };\n\n  const handleChangeFile = (e: any) => {\n    const files = e.target.files;\n    if (e.target.files) {\n      fileReader = new FileReader();\n      fileReader.onloadend = handleFileRead(files[0]);\n      fileReader.readAsText(files[0]);\n    }\n  };\n\n  const makeMission = () => {\n    storeLocalAssessmentOverview(overviewTemplate());\n    props.updateEditingOverview(overviewTemplate());\n    storeLocalAssessment(assessmentTemplate());\n    newAssessment(assessmentTemplate());\n  };\n\n  return (\n    <div>\n      <div>Please ensure that the xml uploaded is trustable.</div>\n      <div>\n        <FileInput\n          text={fileInputText}\n          inputProps={{ accept: '.xml' }}\n          onChange={handleChangeFile}\n        />\n      </div>\n      <div>\n        <ControlButton label=\"Make New Mission\" icon={IconNames.NEW_OBJECT} onClick={makeMission} />\n      </div>\n    </div>\n  );\n};\n\nexport default MissionCreator;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Navigate, useParams } from 'react-router';\nimport { useSession } from 'src/commons/utils/Hooks';\nimport { numberRegExp } from 'src/features/academy/AcademyTypes';\nimport academyClasses from 'src/styles/Academy.module.scss';\n\nimport { AssessmentStatuses } from '../../commons/assessment/AssessmentTypes';\nimport ContentDisplay from '../../commons/ContentDisplay';\nimport { EditingOverviewCard } from '../../commons/editingOverviewCard/EditingOverviewCard';\nimport EditingWorkspace, {\n  EditingWorkspaceProps\n} from '../../commons/editingWorkspace/EditingWorkspace';\nimport MissionCreator from '../../commons/missionCreator/MissionCreator';\nimport Constants from '../../commons/utils/Constants';\nimport { convertParamToInt } from '../../commons/utils/ParamParseHelper';\nimport { retrieveLocalAssessmentOverview } from '../../commons/XMLParser/XMLParserHelper';\n\nconst nullFunction = () => {};\n\nconst MissionControl: React.FC = () => {\n  const { assessmentConfigurations } = useSession();\n  const assessmentTypes = assessmentConfigurations?.map(e => e.type) || [];\n\n  const [editingOverview, setEditingOverview] = useState(retrieveLocalAssessmentOverview());\n\n  const params = useParams<{\n    assessmentId: string;\n    questionId: string;\n  }>();\n\n  // If assessmentId or questionId is defined but not numeric, redirect back to the MissionControl overviews page\n  if (\n    (params.assessmentId && !params.assessmentId?.match(numberRegExp)) ||\n    (params.questionId && !params.questionId?.match(numberRegExp))\n  ) {\n    return <Navigate to={`/mission-control`} />;\n  }\n\n  const assessmentId: number | null = convertParamToInt(params.assessmentId);\n  const questionId: number = convertParamToInt(params.questionId) || Constants.defaultQuestionId;\n\n  // If mission for testing is to render, create workspace\n  if (assessmentId === -1 && editingOverview) {\n    const overview = editingOverview;\n    const assessmentProps: EditingWorkspaceProps = {\n      assessmentId,\n      questionId,\n      assessmentOverview: overview,\n      updateAssessmentOverview: setEditingOverview,\n      notAttempted: overview.status === AssessmentStatuses.not_attempted,\n      closeDate: overview.closeAt\n    };\n    return (\n      <div className={academyClasses['Academy']}>\n        <EditingWorkspace {...assessmentProps} />\n      </div>\n    );\n  }\n\n  const display = (\n    <>\n      <MissionCreator updateEditingOverview={setEditingOverview} />\n      {editingOverview && (\n        <EditingOverviewCard\n          overview={editingOverview}\n          updateEditingOverview={setEditingOverview}\n          listingPath=\"/mission-control\"\n          assessmentTypes={assessmentTypes}\n        />\n      )}\n    </>\n  );\n\n  // Finally, render the ContentDisplay.\n  return (\n    <div className={classNames('Assessment', academyClasses['Academy'])}>\n      <ContentDisplay display={display} loadContentDispatch={nullFunction} />\n    </div>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = MissionControl;\nComponent.displayName = 'MissionControl';\n\nexport default MissionControl;\n","// extracted by mini-css-extract-plugin\nexport default {\"Application__main\":\"Academy_Application__main__WbAGW\",\"WorkspaceParent\":\"Academy_WorkspaceParent__QkrJ0\",\"bp5-tag\":\"Academy_bp5-tag__qdxCt\",\"badge\":\"Academy_badge__T8ws1\",\"bp5-overlay\":\"Academy_bp5-overlay__NG6bM\",\"bp5-popover-content\":\"Academy_bp5-popover-content__D5ZSM\",\"badge-tag\":\"Academy_badge-tag__A0vj4\",\"Academy\":\"Academy_Academy__1mjfJ\",\"Academy-switching-courses\":\"Academy_Academy-switching-courses__aaVIr\"};"],"names":["props","useEffect","_props$loadContentDis","loadContentDispatch","call","_jsx","className","children","fullWidth","Card","elevation","Elevation","display","ControlBarReturnToAcademyButton","onClick","ControlButton","label","icon","IconNames","options","iconOnRight","ControlBarNextButton","questionProgress","onClickReturn","onClickNext","ControlBarPreviousButton","ControlBarQuestionViewButton","isDisabled","ControlBarResetButton","ControlButtonSaveButton","saveButtonOpts","hasUnsavedChanges","intent","Intent","minimal","onClickSave","SideContentToneMatrix","containerRef","useRef","window","ToneMatrix","initialise_matrix","current","_jsxs","classNames","Classes","Button","id","handleClear","clear_matrix","handleRandomise","randomise_matrix","ref","React","beforeNow","dateString","date","moment","now","isBefore","getPrettyDate","format","getStandardDateTime","getStandardDate","capitalizeFirstLetter","str","charAt","toUpperCase","slice","retrieveLocalAssessment","assessment","localStorage","getItem","JSON","parse","storeLocalAssessment","setItem","stringify","storeLocalAssessmentOverview","overview","makeAssessmentOverview","result","maxXpVal","task","CONTENT","TASK","rawOverview","$","type","kind","isManuallyGraded","closeAt","duedate","coverImage","coverimage","maxXp","number","openAt","startdate","title","reading","READING","shortSummary","WEBSUMMARY","status","AssessmentStatuses","story","xp","gradingStatus","makeAssessment","questionArr","makeQuestions","globalDeployment","makeLibrary","DEPLOYMENT","graderDeployment","GRADERDEPLOYMENT","longSummary","TEXT","missionPDF","questions","deploymentArr","undefined","emptyLibrary","deployment","external","IMPORT","EXTERNAL","nameVal","name","symbolsVal","SYMBOL","globalsVal","GLOBAL","map","x","IDENTIFIER","VALUE","Function","chapter","parseInt","interpreter","symbols","globals","PROBLEMS","PROBLEM","forEach","problem","curId","localMaxXp","maxxp","question","answer","content","library","graderLibrary","push","makeProgramming","makeMCQ","choicesVal","solution","SNIPPET","SOLUTION","solutionVal","CHOICE","choice","i","hint","correct","choices","testcases","TESTCASES","publicTestcases","PUBLIC","privateTestcases","PRIVATE","prepend","PREPEND","postpend","POSTPEND","autogradingResults","trim","solutionTemplate","TEMPLATE","testcase","makeTestcase","testcasesPrivate","GRADER","graderTemplate","TestcaseTypes","score","program","_","download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","exportLibrary","toString","length","assessmentToXml","toLowerCase","snippet","publicTests","privateTests","EditingOverviewCard","editingOverviewField","setEditingOverviewField","useState","fieldValue","setFieldValue","showOptionsOverlay","setShowOptionsOverlay","saveEditOverview","field","e","updateEditingOverview","handleEditOverview","target","value","toggleEditField","toggleOptionsOverlay","handleExportXml","exportXml","assessmentStr","overviewStr","fileName","builder","Builder","xml","xmlStr","buildObject","replace","makeEditingOverviewTextarea","Textarea","autoFocus","onChange","onBlur","makeEditingOverviewCardTitle","Text","ellipsize","H4","createPlaceholder","makeExportButton","saveCategory","category","assessmentTypeSelect","assessmentType","handleSelect","AssessmentTypeSelectComponent","items","assessmentTypes","onItemSelect","itemRenderer","assessmentTypeRenderer","filterable","rightIcon","Dialog","canOutsideClickClose","isCloseButtonShown","isOpen","onClose","H3","alt","src","defaultCoverImage","H6","Markdown","Icon","iconSize","NavLink","to","listingPath","Constants","match","Select","handleClick","modifiers","query","MenuItem","active","ControlBarToggleEditModeButton","toggleEditMode","editingMode","editMode","Tooltip2","getValueFromPath","path","obj","next","assignToPath","limitNumberRange","min","max","TextAreaContent","isNumberVal","isNumber","isEditing","setIsEditing","useRawValue","saveEditAssessment","parsedFieldValue","isNaN","originalVal","processResults","assessmentVal","updateAssessment","handleEditAssessment","filler","fieldVal","AutograderTab","addTestcase","testcaseTemplate","autograderCard","testcasePath","index","concat","handleTestcaseEval","removeTestcase","splice","questionId","publicTestPath","privateTestPath","removeSpaces","altEval","chapterSelect","currentChap","variant","Variant","ChapterSelectComponent","sourceLanguages","chapterRenderer","styliseSublanguage","chap","displayName","iExternals","Array","from","externalLibraries","entry","key","externalSelect","currentExternal","ExternalSelectComponent","externalRenderer","deploymentTab","deploymentPath","pathToLibrary","symbol","textareaContent","width","handleSymbolDelete","globalValueTextareaContent","handleGlobalDelete","resetLibrary","handleRefreshLibrary","symbolsFragment","handleExternalSelect","Divider","handleNewSymbol","globalsFragment","borderSpacing","handleNewGlobal","handleChapterSelect","pathVal","handleGlobalValueUpdate","global","_e","handleSwitchDeployment","isEmptyLibrary","pathToCopy","isOptionalDeployment","Switch","checked","deepCopy","arr","navigate","useNavigate","showSaveOverlay","setShowSaveOverlay","modifyAssessment","setModifyAssessment","manageQuestionTab","confirmSave","makeQuestion","deleteQuestion","shiftQuestion","programmingTemplate","mcqTemplate","dir","newIndex","template","confirmSaveOverlay","ButtonGroup","q","substring","range","mcqButton","deleteButton","delOption","addOption","QuestionEditorSelect","questionEditors","activeEditor","setActiveEditor","templateValue","setTemplateValue","templateFocused","setTemplateFocused","editor","focusEditor","unFocusEditor","AceEditor","editorProps","$blockScrolling","Infinity","fontSize","highlightActiveLine","mode","theme","programPrependValue","handleUpdateWorkspace","programPostpendValue","handleCopyFromEditor","editorValue","handleCopyToEditor","handleEditorValueChange","programmingTab","copyFromEditorButton","copyToEditorButton","editorPanel","menuRenderer","currentEditor","editorSelect","workspaceLocation","uniq","a","seen","filter","item","hasOwnProperty","_question$library","_question$library2","_question$library2$ex","setAssessment","setEditingMode","setHasUnsavedChanges","showResetTemplateOverlay","setShowResetTemplateOverlay","originalMaxXp","setOriginalMaxXp","isFolderModeEnabled","activeEditorTabIndex","editorTabs","isRunning","output","replValue","currentAssessment","storedAssessmentId","currentQuestion","storedQuestionId","useTypedSelector","store","workspaces","resetWorkspaceValues","getMaxXp","assessmentId","formatedQuestionId","handleUpdateCurrentAssessmentId","handleUpdateHasUnsavedChanges","checkWorkspaceReset","dispatch","useDispatch","handleBrowseHistoryDown","handleBrowseHistoryUp","handleClearContext","handleDeclarationNavigate","handleEditorEval","handleEditorUpdateBreakpoints","handleReplEval","handleReplOutputClear","handleReplValueChange","handleResetWorkspace","handleSubmitAnswer","handleSideContentHeightChange","handlePromptAutocomplete","setActiveEditorTabIndex","removeEditorTabByIndex","useMemo","browseReplHistoryDown","browseReplHistoryUp","shouldInitLibrary","beginClearContext","cursorPosition","navigateToDeclaration","evalEditor","editorTabIndex","newEditorValue","updateEditorValue","newBreakpoints","setEditorBreakpoint","evalRepl","clearReplOutput","newValue","updateReplValue","resetWorkspace","updateWorkspace","submitAnswer","heightChange","changeSideContentHeight","updateHasUnsavedChanges","updateCurrentAssessmentId","row","col","callback","promptAutocomplete","updateActiveEditorTabIndex","removeEditorTab","handleFirstEditorValueChange","useCallback","NonIdealState","description","Spinner","size","SpinnerSize","QuestionTypes","highlightedLines","breakpoints","editorTestcases","evalTestcase","handleSave","handleSaveXp","curXp","changeXp","assessmentOverview","updateAssessmentOverview","updateEditAssessmentState","updateAndSaveAssessment","toggleEditingMode","workspaceProps","controlBarProps","assessmentWorkspacePath","nextButton","previousButton","onClickPrevious","questionView","resetButton","onClickResetTemplate","editorButtons","ControlBarRunButton","isEntrypointFileDefined","flowButtons","editingWorkspaceButtons","editorContainerProps","editorVariant","convertEditorTabStateToProps","editorTabStateProps","editorSessionId","isEditorAutorun","mcqProps","mcq","handleMCQSubmit","option","sideBarProps","tabs","sideContentProps","qnType","questionTemplateTab","MCQQuestionTemplateTab","ProgrammingQuestionTemplateTab","iconName","SideContentType","DeploymentTab","GradingTab","includes","ManageQuestionTab","beforeDynamicTabs","afterDynamicTabs","replProps","sourceChapter","Chapter","sourceVariant","externalLibrary","replButtons","clearButton","ControlBarClearButton","ControlBarEvalButton","Workspace","fileInputText","setFileInputText","fileReader","newAssessment","handleFileRead","file","parseString","err","entireAssessment","assessmentArr","makeEntireAssessment","FileInput","inputProps","accept","files","FileReader","onloadend","readAsText","makeMission","overviewTemplate","assessmentTemplate","nullFunction","MissionControl","_params$assessmentId","_params$questionId","assessmentConfigurations","useSession","editingOverview","setEditingOverview","retrieveLocalAssessmentOverview","params","useParams","numberRegExp","Navigate","convertParamToInt","assessmentProps","notAttempted","closeDate","academyClasses","EditingWorkspace","_Fragment","MissionCreator","ContentDisplay","Component"],"sourceRoot":""}