{"version":3,"file":"static/js/85036.4b52f7d0.chunk.js","mappings":"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","sources":["commons/utils/QueryHelper.ts","commons/controlBar/ControlBarExecutionTime.tsx","commons/controlBar/ControlBarGoogleDriveButtons.tsx","commons/controlBar/ControlBarSessionButton.tsx","commons/controlBar/ControlBarShareButton.tsx","commons/controlBar/ControlBarStepLimit.tsx","commons/controlBar/ControlBarToggleFolderModeButton.tsx","commons/controlBar/github/ControlBarGitHubButtons.tsx","webpack://frontend/./src/styles/FileSystemView.module.scss?5399","webpack://frontend/./src/styles/ContextMenu.module.scss?7b67","commons/fileSystemView/FileSystemViewContextMenu.tsx","commons/fileSystemView/FileSystemViewIndentationPadding.tsx","commons/delay/Delay.tsx","commons/fileSystemView/FileSystemViewFileName.tsx","commons/fileSystemView/FileSystemViewPlaceholderNode.tsx","commons/fileSystemView/FileSystemViewDirectoryNode.tsx","commons/fileSystemView/FileSystemViewFileNode.tsx","commons/fileSystemView/FileSystemViewList.tsx","commons/fileSystemView/FileSystemView.tsx","commons/utils/IntroductionHelper.ts","pages/playground/Playground.tsx"],"sourcesContent":["import qs from 'query-string';\nimport { isArray } from 'util';\n\nexport interface IParsedQuery {\n  [key: string]: string;\n}\n\n/**\n * Parse a query string into an object.\n *\n * This is a wrapper for query-string that disables array and null parsing (so\n * the object has only strings).\n */\nexport function parseQuery(query: string): IParsedQuery {\n  const parsed = qs.parse(query);\n  for (const [key, val] of Object.entries(parsed)) {\n    if (isArray(val)) {\n      parsed[key] = val.join(',');\n    } else if (val === null) {\n      delete parsed[key];\n    }\n  }\n\n  return parsed as IParsedQuery;\n}\n","import { NumericInput, Position } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\ntype ControlBarExecutionTimeProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleChangeExecTime?: (execTime: number) => void;\n};\n\ntype StateProps = {\n  execTime?: number;\n  key: string;\n};\n\nexport const ControlBarExecutionTime: React.FC<ControlBarExecutionTimeProps> = props => {\n  return (\n    <Tooltip2 content=\"Execution Time\" placement={Position.TOP}>\n      <NumericInput\n        leftIcon={IconNames.TIME}\n        style={{ width: 80 }}\n        min={1000}\n        value={props.execTime}\n        onValueChange={props.handleChangeExecTime}\n      />\n    </Tooltip2>\n  );\n};\n","import { ButtonGroup, Classes, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport { PersistenceFile, PersistenceState } from '../../features/persistence/PersistenceTypes';\nimport ControlButton from '../ControlButton';\nimport { useResponsive } from '../utils/Hooks';\n\nexport type ControlBarGoogleDriveButtonsProps = {\n  isFolderModeEnabled: boolean;\n  loggedInAs?: string;\n  currentFile?: PersistenceFile;\n  isDirty?: boolean;\n  onClickOpen?: () => any;\n  onClickSave?: () => any;\n  onClickSaveAs?: () => any;\n  onClickLogOut?: () => any;\n  onPopoverOpening?: () => any;\n};\n\nconst stateToIntent: { [state in PersistenceState]: Intent } = {\n  INACTIVE: Intent.NONE,\n  SAVED: Intent.PRIMARY,\n  DIRTY: Intent.WARNING\n};\n\nexport const ControlBarGoogleDriveButtons: React.FC<ControlBarGoogleDriveButtonsProps> = props => {\n  const { isMobileBreakpoint } = useResponsive();\n  const state: PersistenceState = props.currentFile\n    ? props.isDirty\n      ? 'DIRTY'\n      : 'SAVED'\n    : 'INACTIVE';\n  const mainButton = (\n    <ControlButton\n      label={(props.currentFile && props.currentFile.name) || 'Google Drive'}\n      icon={IconNames.CLOUD}\n      options={{ intent: stateToIntent[state] }}\n      isDisabled={props.isFolderModeEnabled}\n    />\n  );\n  const openButton = (\n    <ControlButton label=\"Open\" icon={IconNames.DOCUMENT_OPEN} onClick={props.onClickOpen} />\n  );\n  const saveButton = (\n    <ControlButton\n      label=\"Save\"\n      icon={IconNames.FLOPPY_DISK}\n      onClick={props.onClickSave}\n      // disable if logged_in only (i.e. not linked to a file)\n      isDisabled={state === 'INACTIVE'}\n    />\n  );\n  const saveAsButton = (\n    <ControlButton label=\"Save as\" icon={IconNames.SEND_TO} onClick={props.onClickSaveAs} />\n  );\n  const logoutButton = props.loggedInAs && (\n    <Tooltip2 content={`Logged in as ${props.loggedInAs}`}>\n      <ControlButton label=\"Log out\" icon={IconNames.LOG_OUT} onClick={props.onClickLogOut} />\n    </Tooltip2>\n  );\n  const tooltipContent = props.isFolderModeEnabled\n    ? 'Currently unsupported in Folder mode'\n    : undefined;\n\n  return (\n    <Tooltip2 content={tooltipContent} disabled={tooltipContent === undefined}>\n      <Popover2\n        autoFocus={false}\n        content={\n          <div>\n            <ButtonGroup large={!isMobileBreakpoint}>\n              {openButton}\n              {saveButton}\n              {saveAsButton}\n              {logoutButton}\n            </ButtonGroup>\n          </div>\n        }\n        onOpening={props.onPopoverOpening}\n        popoverClassName={Classes.POPOVER_DISMISS}\n        disabled={props.isFolderModeEnabled}\n      >\n        {mainButton}\n      </Popover2>\n    </Tooltip2>\n  );\n};\n","import { Classes, Colors, Menu } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\n\nimport { checkSessionIdExists, createNewSession } from '../collabEditing/CollabEditingHelper';\nimport ControlButton from '../ControlButton';\nimport { showWarningMessage } from '../utils/notifications/NotificationsHelper';\n\ntype ControlBarSessionButtonsProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleSetEditorSessionId?: (editorSessionId: string) => void;\n};\n\ntype StateProps = {\n  isFolderModeEnabled: boolean;\n  editorSessionId?: string;\n  getEditorValue: () => string;\n  sharedbConnected?: boolean;\n  key: string;\n};\n\ntype State = {\n  joinElemValue: string;\n};\n\nfunction handleError(error: any) {\n  showWarningMessage(`Could not connect: ${(error && error.message) || error || 'Unknown error'}`);\n}\n\nexport class ControlBarSessionButtons extends React.PureComponent<\n  ControlBarSessionButtonsProps,\n  State\n> {\n  private inviteInputElem: React.RefObject<HTMLInputElement>;\n\n  constructor(props: ControlBarSessionButtonsProps) {\n    super(props);\n    this.state = { joinElemValue: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.inviteInputElem = React.createRef();\n    this.selectInviteInputText = this.selectInviteInputText.bind(this);\n  }\n\n  public render() {\n    const handleStartInvite = () => {\n      // FIXME this handler should be a Saga action or at least in a controller\n      if (this.props.editorSessionId === '') {\n        createNewSession(this.props.getEditorValue()).then(sessionId => {\n          this.props.handleSetEditorSessionId!(sessionId);\n        }, handleError);\n      }\n    };\n\n    const inviteButtonPopoverContent = (\n      <>\n        <input value={this.props.editorSessionId} readOnly={true} ref={this.inviteInputElem} />\n        <CopyToClipboard text={'' + this.props.editorSessionId}>\n          <ControlButton icon={IconNames.DUPLICATE} onClick={this.selectInviteInputText} />\n        </CopyToClipboard>\n      </>\n    );\n\n    const inviteButton = (\n      <Popover2\n        popoverClassName=\"Popover-share\"\n        inheritDarkTheme={false}\n        content={inviteButtonPopoverContent}\n      >\n        <ControlButton label=\"Invite\" icon={IconNames.GRAPH} onClick={handleStartInvite} />\n      </Popover2>\n    );\n\n    const handleStartJoining = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      // FIXME this handler should be a Saga action or at least in a controller\n      checkSessionIdExists(this.state.joinElemValue).then(\n        exists => {\n          if (exists) {\n            this.props.handleSetEditorSessionId!(this.state!.joinElemValue);\n          } else {\n            this.props.handleSetEditorSessionId!('');\n            showWarningMessage('Could not find a session with that ID.');\n          }\n        },\n        error => {\n          this.props.handleSetEditorSessionId!('');\n          handleError(error);\n        }\n      );\n    };\n\n    const joinButtonPopoverContent = (\n      // TODO: this form should use Blueprint\n      <form onSubmit={handleStartJoining}>\n        <input type=\"text\" value={this.state.joinElemValue} onChange={this.handleChange} />\n        <span className={Classes.POPOVER_DISMISS}>\n          <ControlButton icon={IconNames.KEY_ENTER} options={{ type: 'submit' }} />\n        </span>\n      </form>\n    );\n\n    const joinButton = (\n      <Popover2\n        popoverClassName=\"Popover-share\"\n        inheritDarkTheme={false}\n        content={joinButtonPopoverContent}\n      >\n        <ControlButton label=\"Join\" icon={IconNames.LOG_IN} />\n      </Popover2>\n    );\n\n    const leaveButton = (\n      <ControlButton\n        label=\"Leave\"\n        icon={IconNames.FEED}\n        onClick={() => {\n          // FIXME: this handler should be a Saga action or at least in a controller\n          this.props.handleSetEditorSessionId!('');\n          this.setState({ joinElemValue: '' });\n        }}\n      />\n    );\n\n    const tooltipContent = this.props.isFolderModeEnabled\n      ? 'Currently unsupported in Folder mode'\n      : undefined;\n\n    return (\n      <Tooltip2 content={tooltipContent} disabled={tooltipContent === undefined}>\n        <Popover2\n          content={\n            <Menu large={true}>\n              {inviteButton}\n              {this.props.editorSessionId === '' ? joinButton : leaveButton}\n            </Menu>\n          }\n          disabled={this.props.isFolderModeEnabled}\n        >\n          <ControlButton\n            label=\"Session\"\n            icon={IconNames.SOCIAL_MEDIA}\n            options={{\n              iconColor:\n                this.props.editorSessionId === ''\n                  ? undefined\n                  : this.props.sharedbConnected\n                  ? Colors.GREEN3\n                  : Colors.RED3\n            }}\n            isDisabled={this.props.isFolderModeEnabled}\n          />\n        </Popover2>\n      </Tooltip2>\n    );\n  }\n\n  private selectInviteInputText() {\n    if (this.inviteInputElem.current !== null) {\n      this.inviteInputElem.current.focus();\n      this.inviteInputElem.current.select();\n    }\n  }\n\n  private handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ joinElemValue: event.target.value });\n  }\n}\n","import { NonIdealState, Position, Spinner, SpinnerSize, Text } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\n\nimport ControlButton from '../ControlButton';\nimport Constants from '../utils/Constants';\n\ntype ControlBarShareButtonProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleGenerateLz?: () => void;\n  handleShortenURL: (s: string) => void;\n  handleUpdateShortURL: (s: string) => void;\n};\n\ntype StateProps = {\n  queryString?: string;\n  shortURL?: string;\n  key: string;\n  isSicp?: boolean;\n};\n\ntype State = {\n  keyword: string;\n  isLoading: boolean;\n};\n\nexport class ControlBarShareButton extends React.PureComponent<ControlBarShareButtonProps, State> {\n  private shareInputElem: React.RefObject<HTMLInputElement>;\n\n  constructor(props: ControlBarShareButtonProps) {\n    super(props);\n    this.selectShareInputText = this.selectShareInputText.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleButton = this.toggleButton.bind(this);\n    this.shareInputElem = React.createRef();\n    this.state = { keyword: '', isLoading: false };\n  }\n\n  public render() {\n    const shareButtonPopoverContent =\n      this.props.queryString === undefined ? (\n        <Text>\n          Share your programs! Type something into the editor (left), then click on this button\n          again.\n        </Text>\n      ) : this.props.isSicp ? (\n        <div>\n          <input defaultValue={this.props.queryString!} readOnly={true} ref={this.shareInputElem} />\n          <Tooltip2 content=\"Copy link to clipboard\">\n            <CopyToClipboard text={this.props.queryString!}>\n              <ControlButton icon={IconNames.DUPLICATE} onClick={this.selectShareInputText} />\n            </CopyToClipboard>\n          </Tooltip2>\n        </div>\n      ) : (\n        <>\n          {!this.props.shortURL || this.props.shortURL === 'ERROR' ? (\n            !this.state.isLoading || this.props.shortURL === 'ERROR' ? (\n              <div>\n                {Constants.urlShortenerBase}&nbsp;\n                <input\n                  placeholder={'custom string (optional)'}\n                  onChange={this.handleChange}\n                  style={{ width: 175 }}\n                />\n                <ControlButton\n                  label=\"Get Link\"\n                  icon={IconNames.SHARE}\n                  onClick={() => {\n                    this.props.handleShortenURL(this.state.keyword);\n                    this.setState({ isLoading: true });\n                  }}\n                />\n              </div>\n            ) : (\n              <div>\n                <NonIdealState\n                  description=\"Generating Shareable Link...\"\n                  icon={<Spinner size={SpinnerSize.SMALL} />}\n                />\n              </div>\n            )\n          ) : (\n            <div key={this.props.shortURL}>\n              <input defaultValue={this.props.shortURL} readOnly={true} ref={this.shareInputElem} />\n              <Tooltip2 content=\"Copy link to clipboard\">\n                <CopyToClipboard text={this.props.shortURL}>\n                  <ControlButton icon={IconNames.DUPLICATE} onClick={this.selectShareInputText} />\n                </CopyToClipboard>\n              </Tooltip2>\n            </div>\n          )}\n        </>\n      );\n\n    return (\n      <Popover2\n        popoverClassName=\"Popover-share\"\n        inheritDarkTheme={false}\n        content={shareButtonPopoverContent}\n      >\n        <Tooltip2 content=\"Get shareable link\" placement={Position.TOP}>\n          <ControlButton label=\"Share\" icon={IconNames.SHARE} onClick={() => this.toggleButton()} />\n        </Tooltip2>\n      </Popover2>\n    );\n  }\n\n  public componentDidUpdate(prevProps: ControlBarShareButtonProps) {\n    if (this.props.shortURL !== prevProps.shortURL) {\n      this.setState({ keyword: '', isLoading: false });\n    }\n  }\n\n  private toggleButton() {\n    if (this.props.handleGenerateLz) {\n      this.props.handleGenerateLz();\n    }\n\n    // reset state\n    this.props.handleUpdateShortURL('');\n    this.setState({ keyword: '', isLoading: false });\n  }\n\n  private handleChange(event: React.FormEvent<HTMLInputElement>) {\n    this.setState({ keyword: event.currentTarget.value });\n  }\n\n  private selectShareInputText() {\n    if (this.shareInputElem.current !== null) {\n      this.shareInputElem.current.focus();\n      this.shareInputElem.current.select();\n    }\n  }\n}\n","import { NumericInput, Position } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\ntype ControlBarStepLimitProps = DispatchProps & StateProps;\n\ntype DispatchProps = {\n  handleChangeStepLimit?: (stepLimit: number) => void;\n  handleOnBlurAutoScale?: (stepLimit: number) => void;\n};\n\ntype StateProps = {\n  stepLimit?: number;\n  stepSize: number;\n  key: string;\n};\n\nexport const ControlBarStepLimit: React.FC<ControlBarStepLimitProps> = props => {\n  /**\n   * Scale the odd stepLimit into the next even integer.\n   * Triggered when the input box lost focus.\n   */\n  const onBlurAutoScale = () => {\n    props.handleOnBlurAutoScale?.(Number(props.stepLimit));\n  };\n\n  return (\n    <Tooltip2 content=\"Step Limit\" placement={Position.TOP}>\n      <NumericInput\n        leftIcon={IconNames.VERTICAL_BAR_CHART_ASC}\n        style={{ width: 80 }}\n        min={500}\n        max={5000}\n        value={props.stepLimit}\n        stepSize={props.stepSize}\n        onBlur={onBlurAutoScale}\n        onValueChange={props.handleChangeStepLimit}\n      />\n    </Tooltip2>\n  );\n};\n","import { Colors } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport React from 'react';\n\nimport ControlButton from '../ControlButton';\n\ntype ControlBarToggleFolderModeButtonProps = {\n  isFolderModeEnabled: boolean;\n  isSessionActive: boolean;\n  isPersistenceActive: boolean;\n  toggleFolderMode: () => void;\n};\n\nexport const ControlBarToggleFolderModeButton: React.FC<ControlBarToggleFolderModeButtonProps> = ({\n  isFolderModeEnabled,\n  isSessionActive,\n  isPersistenceActive,\n  toggleFolderMode\n}) => {\n  const tooltipContent = isSessionActive\n    ? 'Currently unsupported while a collaborative session is active'\n    : isPersistenceActive\n    ? 'Currently unsupported while a persistence method is active'\n    : `${isFolderModeEnabled ? 'Disable' : 'Enable'} Folder mode`;\n  return (\n    <Tooltip2 content={tooltipContent}>\n      <ControlButton\n        label=\"Folder\"\n        icon={IconNames.FOLDER_CLOSE}\n        options={{\n          iconColor: isFolderModeEnabled ? Colors.BLUE4 : undefined\n        }}\n        onClick={toggleFolderMode}\n        isDisabled={isSessionActive || isPersistenceActive}\n      />\n    </Tooltip2>\n  );\n};\n","import { ButtonGroup, Classes, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport { Octokit } from '@octokit/rest';\nimport React from 'react';\nimport { useResponsive } from 'src/commons/utils/Hooks';\n\nimport { GitHubSaveInfo } from '../../../features/github/GitHubTypes';\nimport ControlButton from '../../ControlButton';\n\nexport type ControlBarGitHubButtonsProps = {\n  isFolderModeEnabled: boolean;\n  loggedInAs?: Octokit;\n  githubSaveInfo: GitHubSaveInfo;\n  isDirty: boolean;\n  onClickOpen?: () => void;\n  onClickSave?: () => void;\n  onClickSaveAs?: () => void;\n  onClickLogIn?: () => void;\n  onClickLogOut?: () => void;\n};\n\n/**\n * GitHub buttons to be used specifically in the Playground.\n * Creates a dropdown upon click.\n *\n * @param props Component properties\n */\nexport const ControlBarGitHubButtons: React.FC<ControlBarGitHubButtonsProps> = props => {\n  const { isMobileBreakpoint } = useResponsive();\n\n  const filePath = props.githubSaveInfo.filePath || '';\n  const fileName = (filePath.split('\\\\').pop() || '').split('/').pop() || '';\n\n  const isLoggedIn = props.loggedInAs !== undefined;\n  const shouldDisableButtons = !isLoggedIn;\n  const hasFilePath = filePath !== '';\n  const hasOpenFile = isLoggedIn && hasFilePath;\n\n  const mainButtonDisplayText = hasOpenFile ? fileName : 'GitHub';\n  let mainButtonIntent: Intent = Intent.NONE;\n  if (hasOpenFile) {\n    mainButtonIntent = props.isDirty ? Intent.WARNING : Intent.PRIMARY;\n  }\n\n  const mainButton = (\n    <ControlButton\n      label={mainButtonDisplayText}\n      icon={IconNames.GIT_BRANCH}\n      options={{ intent: mainButtonIntent }}\n      isDisabled={props.isFolderModeEnabled}\n    />\n  );\n\n  const openButton = (\n    <ControlButton\n      label=\"Open\"\n      icon={IconNames.DOCUMENT_OPEN}\n      onClick={props.onClickOpen}\n      isDisabled={shouldDisableButtons}\n    />\n  );\n\n  const saveButton = (\n    <ControlButton\n      label=\"Save\"\n      icon={IconNames.FLOPPY_DISK}\n      onClick={props.onClickSave}\n      isDisabled={shouldDisableButtons || !hasOpenFile}\n    />\n  );\n\n  const saveAsButton = (\n    <ControlButton\n      label=\"Save As\"\n      icon={IconNames.SEND_TO}\n      onClick={props.onClickSaveAs}\n      isDisabled={shouldDisableButtons}\n    />\n  );\n\n  const loginButton = isLoggedIn ? (\n    <ControlButton label=\"Log Out\" icon={IconNames.LOG_OUT} onClick={props.onClickLogOut} />\n  ) : (\n    <ControlButton label=\"Log In\" icon={IconNames.LOG_IN} onClick={props.onClickLogIn} />\n  );\n\n  const tooltipContent = props.isFolderModeEnabled\n    ? 'Currently unsupported in Folder mode'\n    : undefined;\n\n  return (\n    <Tooltip2 content={tooltipContent} disabled={tooltipContent === undefined}>\n      <Popover2\n        autoFocus={false}\n        content={\n          <div>\n            <ButtonGroup large={!isMobileBreakpoint}>\n              {openButton}\n              {saveButton}\n              {saveAsButton}\n              {loginButton}\n            </ButtonGroup>\n          </div>\n        }\n        popoverClassName={Classes.POPOVER_DISMISS}\n        disabled={props.isFolderModeEnabled}\n      >\n        {mainButton}\n      </Popover2>\n    </Tooltip2>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Application__main\":\"FileSystemView_Application__main__1dYN0\",\"WorkspaceParent\":\"FileSystemView_WorkspaceParent__CXhhm\",\"bp5-tag\":\"FileSystemView_bp5-tag__jw+tM\",\"badge\":\"FileSystemView_badge__m9PDP\",\"bp5-overlay\":\"FileSystemView_bp5-overlay__HfsJ2\",\"bp5-popover-content\":\"FileSystemView_bp5-popover-content__SMsQY\",\"badge-tag\":\"FileSystemView_badge-tag__5mLB3\",\"file-system-view-container\":\"FileSystemView_file-system-view-container__jISZG\",\"file-system-view-error\":\"FileSystemView_file-system-view-error__SrF6Z\",\"file-system-view-empty-space\":\"FileSystemView_file-system-view-empty-space__KfVv+\",\"file-system-view-list-container\":\"FileSystemView_file-system-view-list-container__9O+ym\",\"file-system-view-spinner\":\"FileSystemView_file-system-view-spinner__YBPGb\",\"file-system-view-directory-node-container\":\"FileSystemView_file-system-view-directory-node-container__ya2Av\",\"file-system-view-node-container\":\"FileSystemView_file-system-view-node-container__GN6ql\",\"file-system-view-input\":\"FileSystemView_file-system-view-input__r+WEl\",\"file-system-view-file-name\":\"FileSystemView_file-system-view-file-name__-PCmg\"};","// extracted by mini-css-extract-plugin\nexport default {\"Application__main\":\"ContextMenu_Application__main__czyJG\",\"WorkspaceParent\":\"ContextMenu_WorkspaceParent__K77FO\",\"bp5-tag\":\"ContextMenu_bp5-tag__jXGY5\",\"badge\":\"ContextMenu_badge__dhxsH\",\"bp5-overlay\":\"ContextMenu_bp5-overlay__+7kWn\",\"bp5-popover-content\":\"ContextMenu_bp5-popover-content__MWIds\",\"badge-tag\":\"ContextMenu_badge-tag__B+mSL\",\"context-menu\":\"ContextMenu_context-menu__FXXlu\",\"context-menu-item\":\"ContextMenu_context-menu-item__c2H+Q\"};","import { Classes } from '@blueprintjs/core';\nimport { ControlledMenu, MenuItem, useMenuState } from '@szhsin/react-menu';\nimport classNames from 'classnames';\nimport React from 'react';\nimport classes from 'src/styles/ContextMenu.module.scss';\n\nexport type FileSystemViewContextMenuProps = {\n  children?: JSX.Element;\n  className?: string;\n  createNewFile?: () => void;\n  createNewDirectory?: () => void;\n  open?: () => void;\n  rename?: () => void;\n  remove?: () => void;\n};\n\nconst FileSystemViewContextMenu: React.FC<FileSystemViewContextMenuProps> = (\n  props: FileSystemViewContextMenuProps\n) => {\n  const { children, className, createNewFile, createNewDirectory, open, rename, remove } = props;\n  const [menuProps, toggleMenu] = useMenuState();\n  const [anchorPoint, setAnchorPoint] = React.useState({ x: 0, y: 0 });\n\n  const onContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setAnchorPoint({ x: e.clientX, y: e.clientY });\n    toggleMenu(true);\n  };\n\n  return (\n    <div className={className} onContextMenu={onContextMenu}>\n      {children}\n      <ControlledMenu\n        menuClassName={classNames(Classes.CARD, Classes.DARK, classes['context-menu'])}\n        {...menuProps}\n        anchorPoint={anchorPoint}\n        onClose={() => toggleMenu(false)}\n      >\n        {createNewFile && (\n          <MenuItem className={classes['context-menu-item']} onClick={createNewFile}>\n            New File\n          </MenuItem>\n        )}\n        {createNewDirectory && (\n          <MenuItem className={classes['context-menu-item']} onClick={createNewDirectory}>\n            New Directory\n          </MenuItem>\n        )}\n        {open && (\n          <MenuItem className={classes['context-menu-item']} onClick={open}>\n            Open\n          </MenuItem>\n        )}\n        {rename && (\n          <MenuItem className={classes['context-menu-item']} onClick={rename}>\n            Rename\n          </MenuItem>\n        )}\n        {remove && (\n          <MenuItem className={classes['context-menu-item']} onClick={remove}>\n            Delete\n          </MenuItem>\n        )}\n      </ControlledMenu>\n    </div>\n  );\n};\n\nexport default FileSystemViewContextMenu;\n","import React from 'react';\n\nexport type FileSystemViewIndentationPaddingProps = {\n  indentationLevel: number;\n};\n\nconst SPACING_PER_LEVEL = 19;\n\nconst FileSystemViewIndentationPadding: React.FC<FileSystemViewIndentationPaddingProps> = (\n  props: FileSystemViewIndentationPaddingProps\n) => {\n  const { indentationLevel } = props;\n\n  const indentationStyle: React.CSSProperties = {\n    paddingLeft: `${SPACING_PER_LEVEL * indentationLevel}px`\n  };\n\n  return <div style={indentationStyle} />;\n};\n\nexport default FileSystemViewIndentationPadding;\n","import React from 'react';\n\nexport type DelayProps = {\n  children: JSX.Element;\n  waitInMsBeforeRender: number;\n};\n\n/**\n * Delays the rendering of child components by a set time.\n */\nconst Delay: React.FC<DelayProps> = (props: DelayProps) => {\n  const { children, waitInMsBeforeRender } = props;\n\n  const [isRendered, setIsRendered] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => setIsRendered(true), waitInMsBeforeRender);\n    return () => clearTimeout(timeoutId);\n  }, [waitInMsBeforeRender]);\n\n  return isRendered ? children : <></>;\n};\n\nexport default Delay;\n","import { FSModule } from 'browserfs/dist/node/core/FS';\nimport path from 'path';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nimport { showSimpleErrorDialog } from '../utils/DialogHelper';\nimport {\n  renameEditorTabForFile,\n  renameEditorTabsForDirectory\n} from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\n\nexport type FileSystemViewFileNameProps = {\n  workspaceLocation: WorkspaceLocation;\n  fileSystem: FSModule;\n  basePath: string;\n  fileName: string;\n  isDirectory: boolean;\n  isEditing: boolean;\n  setIsEditing: (isEditing: boolean) => void;\n  refreshDirectory: () => void;\n};\n\nconst FileSystemViewFileName: React.FC<FileSystemViewFileNameProps> = (\n  props: FileSystemViewFileNameProps\n) => {\n  const {\n    workspaceLocation,\n    fileSystem,\n    basePath,\n    fileName,\n    isDirectory,\n    isEditing,\n    setIsEditing,\n    refreshDirectory\n  } = props;\n\n  const [editedFileName, setEditedFileName] = React.useState<string>(fileName);\n  const dispatch = useDispatch();\n\n  const handleInputOnChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setEditedFileName(e.target.value);\n  const handleInputOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      setIsEditing(false);\n\n      const oldPath = path.join(basePath, fileName);\n      const newPath = path.join(basePath, editedFileName);\n      if (oldPath === newPath) {\n        return;\n      }\n\n      // Check whether the new path already exists to prevent overwriting of existing files & directories.\n      fileSystem.exists(newPath, newPathExists => {\n        if (newPathExists) {\n          showSimpleErrorDialog({\n            title: `Unable to rename ${isDirectory ? 'directory' : 'file'}`,\n            contents: (\n              <p>\n                A file or folder <b>{editedFileName}</b> already exists in this location. Please\n                choose a different name.\n              </p>\n            ),\n            label: 'OK'\n          }).then(() => setEditedFileName(fileName));\n          return;\n        }\n\n        fileSystem.rename(oldPath, newPath, err => {\n          if (err) {\n            console.error(err);\n          }\n\n          if (isDirectory) {\n            dispatch(renameEditorTabsForDirectory(workspaceLocation, oldPath, newPath));\n          } else {\n            dispatch(renameEditorTabForFile(workspaceLocation, oldPath, newPath));\n          }\n          refreshDirectory();\n        });\n      });\n    } else if (e.key === 'Escape') {\n      handleInputOnBlur();\n    }\n  };\n  const handleInputOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    const fileExtensionIndex = e.target.value.lastIndexOf('.');\n    const fileExtensionExists = fileExtensionIndex !== -1;\n    if (fileExtensionExists) {\n      e.target.setSelectionRange(0, fileExtensionIndex);\n      return;\n    }\n    e.target.select();\n  };\n  const handleInputOnBlur = () => {\n    setIsEditing(false);\n    setEditedFileName(fileName);\n  };\n\n  return (\n    <>\n      {isEditing && (\n        <input\n          type=\"text\"\n          autoFocus\n          spellCheck={false}\n          className={classes['file-system-view-input']}\n          value={editedFileName}\n          onChange={handleInputOnChange}\n          onKeyDown={handleInputOnKeyDown}\n          onFocus={handleInputOnFocus}\n          onBlur={handleInputOnBlur}\n        />\n      )}\n      {!isEditing && <div className={classes['file-system-view-file-name']}>{fileName}</div>}\n    </>\n  );\n};\n\nexport default FileSystemViewFileName;\n","import React from 'react';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nexport type FileSystemViewPlaceholderNodeProps = {\n  processFileName: (fileName: string) => void;\n  removePlaceholder: () => void;\n};\n\nconst FileSystemViewPlaceholderNode: React.FC<FileSystemViewPlaceholderNodeProps> = (\n  props: FileSystemViewPlaceholderNodeProps\n) => {\n  const { processFileName, removePlaceholder } = props;\n\n  const [fileName, setFileName] = React.useState<string>('');\n\n  const handleInputOnChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setFileName(e.target.value);\n  const handleInputOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      processFileName(fileName);\n      removePlaceholder();\n    } else if (e.key === 'Escape') {\n      handleInputOnBlur();\n    }\n  };\n  const handleInputOnBlur = () => removePlaceholder();\n\n  return (\n    <input\n      type=\"text\"\n      autoFocus\n      spellCheck={false}\n      className={classes['file-system-view-input']}\n      value={fileName}\n      onChange={handleInputOnChange}\n      onKeyDown={handleInputOnKeyDown}\n      onBlur={handleInputOnBlur}\n    />\n  );\n};\n\nexport default FileSystemViewPlaceholderNode;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { FSModule } from 'browserfs/dist/node/core/FS';\nimport path from 'path';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nimport { rmdirRecursively } from '../fileSystem/utils';\nimport { showSimpleConfirmDialog, showSimpleErrorDialog } from '../utils/DialogHelper';\nimport { removeEditorTabsForDirectory } from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport FileSystemViewContextMenu from './FileSystemViewContextMenu';\nimport FileSystemViewFileName from './FileSystemViewFileName';\nimport FileSystemViewIndentationPadding from './FileSystemViewIndentationPadding';\nimport FileSystemViewList from './FileSystemViewList';\nimport FileSystemViewPlaceholderNode from './FileSystemViewPlaceholderNode';\n\nexport type FileSystemViewDirectoryNodeProps = {\n  workspaceLocation: WorkspaceLocation;\n  fileSystem: FSModule;\n  basePath: string;\n  directoryName: string;\n  indentationLevel: number;\n  refreshParentDirectory: () => void;\n};\n\nconst FileSystemViewDirectoryNode: React.FC<FileSystemViewDirectoryNodeProps> = (\n  props: FileSystemViewDirectoryNodeProps\n) => {\n  const {\n    workspaceLocation,\n    fileSystem,\n    basePath,\n    directoryName,\n    indentationLevel,\n    refreshParentDirectory\n  } = props;\n  const fullPath = path.join(basePath, directoryName);\n\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n  const [isEditing, setIsEditing] = React.useState<boolean>(false);\n  const [isAddingNewFile, setIsAddingNewFile] = React.useState<boolean>(false);\n  const [isAddingNewDirectory, setIsAddingNewDirectory] = React.useState<boolean>(false);\n  const [fileSystemViewListKey, setFileSystemViewListKey] = React.useState<number>(0);\n  const dispatch = useDispatch();\n\n  const toggleIsExpanded = () => {\n    if (isEditing) {\n      return;\n    }\n    setIsExpanded(!isExpanded);\n  };\n  const handleCreateNewFile = () => {\n    setIsExpanded(true);\n    setIsAddingNewFile(true);\n  };\n  const handleCreateNewDirectory = () => {\n    setIsExpanded(true);\n    setIsAddingNewDirectory(true);\n  };\n  const handleRenameDirectory = () => setIsEditing(true);\n  const handleRemoveDirectory = () => {\n    showSimpleConfirmDialog({\n      icon: 'warning-sign',\n      title: `Are you sure you want to delete '${directoryName}' and its contents?`,\n      contents: (\n        <p>\n          This will result in all of its contained files & subdirectories being deleted. Once a\n          directory is deleted, its contents cannot be recovered!\n          <br />\n          <br />\n          <strong>Do you still want to proceed?</strong>\n        </p>\n      ),\n      positiveIntent: 'danger',\n      positiveLabel: 'Proceed',\n      negativeLabel: 'Cancel'\n    }).then((shouldProceed: boolean) => {\n      if (!shouldProceed) {\n        return;\n      }\n\n      dispatch(removeEditorTabsForDirectory(workspaceLocation, fullPath));\n      rmdirRecursively(fileSystem, fullPath).then(refreshParentDirectory);\n    });\n  };\n  // Forcibly re-render any child components in which the value `key` is passed as the prop `key`.\n  // See https://github.com/source-academy/frontend/wiki/File-System#handling-file-system-updates.\n  const forceRefreshFileSystemViewList = () =>\n    setFileSystemViewListKey((fileSystemViewListKey + 1) % 2);\n\n  const createNewFile = (fileName: string) => {\n    const newFilePath = path.join(basePath, directoryName, fileName);\n\n    // Check whether the new file path already exists to prevent overwriting of existing files & directories.\n    fileSystem.exists(newFilePath, newFilePathExists => {\n      if (newFilePathExists) {\n        showSimpleErrorDialog({\n          title: 'Unable to create file',\n          contents: (\n            <p>\n              A file or folder <b>{fileName}</b> already exists in this location. Please choose a\n              different name.\n            </p>\n          ),\n          label: 'OK'\n        }).then(() => {});\n        return;\n      }\n\n      fileSystem.writeFile(newFilePath, '', err => {\n        if (err) {\n          console.error(err);\n        }\n\n        forceRefreshFileSystemViewList();\n      });\n    });\n  };\n  const createNewDirectory = (subdirectoryName: string) => {\n    const newDirectoryPath = path.join(basePath, directoryName, subdirectoryName);\n\n    // Check whether the new directory path already exists to prevent overwriting of existing files & directories.\n    fileSystem.exists(newDirectoryPath, newDirectoryPathExists => {\n      if (newDirectoryPathExists) {\n        showSimpleErrorDialog({\n          title: 'Unable to create directory',\n          contents: (\n            <p>\n              A file or folder <b>{subdirectoryName}</b> already exists in this location. Please\n              choose a different name.\n            </p>\n          ),\n          label: 'OK'\n        }).then(() => {});\n        return;\n      }\n\n      fileSystem.mkdir(newDirectoryPath, 777, err => {\n        if (err) {\n          console.error(err);\n        }\n\n        forceRefreshFileSystemViewList();\n      });\n    });\n  };\n\n  return (\n    <div className={classes['file-system-view-directory-node-container']}>\n      <FileSystemViewContextMenu\n        createNewFile={handleCreateNewFile}\n        createNewDirectory={handleCreateNewDirectory}\n        rename={handleRenameDirectory}\n        remove={handleRemoveDirectory}\n      >\n        <div className={classes['file-system-view-node-container']} onClick={toggleIsExpanded}>\n          <FileSystemViewIndentationPadding indentationLevel={indentationLevel} />\n          {isExpanded && <Icon icon={IconNames.CHEVRON_DOWN} />}\n          {!isExpanded && <Icon icon={IconNames.CHEVRON_RIGHT} />}\n          <FileSystemViewFileName\n            workspaceLocation={workspaceLocation}\n            fileSystem={fileSystem}\n            basePath={basePath}\n            fileName={directoryName}\n            isDirectory\n            isEditing={isEditing}\n            setIsEditing={setIsEditing}\n            refreshDirectory={refreshParentDirectory}\n          />\n        </div>\n      </FileSystemViewContextMenu>\n      {isAddingNewFile && (\n        <div className={classes['file-system-view-node-container']}>\n          <FileSystemViewIndentationPadding indentationLevel={indentationLevel + 1} />\n          <Icon icon={IconNames.DOCUMENT} />\n          <FileSystemViewPlaceholderNode\n            processFileName={createNewFile}\n            removePlaceholder={() => setIsAddingNewFile(false)}\n          />\n        </div>\n      )}\n      {isAddingNewDirectory && (\n        <div className={classes['file-system-view-node-container']}>\n          <FileSystemViewIndentationPadding indentationLevel={indentationLevel + 1} />\n          <Icon icon={IconNames.CHEVRON_RIGHT} />\n          <FileSystemViewPlaceholderNode\n            processFileName={createNewDirectory}\n            removePlaceholder={() => setIsAddingNewDirectory(false)}\n          />\n        </div>\n      )}\n      {isExpanded && (\n        <FileSystemViewList\n          workspaceLocation={workspaceLocation}\n          key={fileSystemViewListKey}\n          fileSystem={fileSystem}\n          basePath={fullPath}\n          indentationLevel={indentationLevel + 1}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default FileSystemViewDirectoryNode;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { FSModule } from 'browserfs/dist/node/core/FS';\nimport path from 'path';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nimport { showSimpleConfirmDialog } from '../utils/DialogHelper';\nimport { addEditorTab, removeEditorTabForFile } from '../workspace/WorkspaceActions';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport FileSystemViewContextMenu from './FileSystemViewContextMenu';\nimport FileSystemViewFileName from './FileSystemViewFileName';\nimport FileSystemViewIndentationPadding from './FileSystemViewIndentationPadding';\n\nexport type FileSystemViewFileNodeProps = {\n  workspaceLocation: WorkspaceLocation;\n  fileSystem: FSModule;\n  basePath: string;\n  fileName: string;\n  indentationLevel: number;\n  refreshDirectory: () => void;\n};\n\nconst FileSystemViewFileNode: React.FC<FileSystemViewFileNodeProps> = (\n  props: FileSystemViewFileNodeProps\n) => {\n  const { workspaceLocation, fileSystem, basePath, fileName, indentationLevel, refreshDirectory } =\n    props;\n\n  const [isEditing, setIsEditing] = React.useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  const fullPath = path.join(basePath, fileName);\n\n  const handleOpenFile = () => {\n    fileSystem.readFile(fullPath, 'utf-8', (err, fileContents) => {\n      if (err) {\n        console.error(err);\n      }\n      if (fileContents === undefined) {\n        throw new Error('File contents are undefined.');\n      }\n\n      dispatch(addEditorTab(workspaceLocation, fullPath, fileContents));\n    });\n  };\n\n  const handleRenameFile = () => setIsEditing(true);\n  const handleRemoveFile = () => {\n    showSimpleConfirmDialog({\n      icon: 'warning-sign',\n      title: `Are you sure you want to delete '${fileName}'?`,\n      contents: (\n        <p>\n          Once a file is deleted, it cannot be recovered!\n          <br />\n          <br />\n          <strong>Do you still want to proceed?</strong>\n        </p>\n      ),\n      positiveIntent: 'danger',\n      positiveLabel: 'Proceed',\n      negativeLabel: 'Cancel'\n    }).then((shouldProceed: boolean) => {\n      if (!shouldProceed) {\n        return;\n      }\n\n      fileSystem.unlink(fullPath, err => {\n        if (err) {\n          console.error(err);\n        }\n\n        dispatch(removeEditorTabForFile(workspaceLocation, fullPath));\n        refreshDirectory();\n      });\n    });\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // Open file on double click.\n    if (e.detail === 2) {\n      handleOpenFile();\n    }\n  };\n\n  return (\n    <FileSystemViewContextMenu\n      open={handleOpenFile}\n      rename={handleRenameFile}\n      remove={handleRemoveFile}\n    >\n      <div className={classes['file-system-view-node-container']} onClick={onClick}>\n        <FileSystemViewIndentationPadding indentationLevel={indentationLevel} />\n        <Icon icon={IconNames.DOCUMENT} />\n        <FileSystemViewFileName\n          workspaceLocation={workspaceLocation}\n          fileSystem={fileSystem}\n          basePath={basePath}\n          fileName={fileName}\n          isDirectory={false}\n          isEditing={isEditing}\n          setIsEditing={setIsEditing}\n          refreshDirectory={refreshDirectory}\n        />\n      </div>\n    </FileSystemViewContextMenu>\n  );\n};\n\nexport default FileSystemViewFileNode;\n","import { Spinner, SpinnerSize } from '@blueprintjs/core';\nimport { FSModule } from 'browserfs/dist/node/core/FS';\nimport path from 'path';\nimport React from 'react';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nimport Delay from '../delay/Delay';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport FileSystemViewDirectoryNode from './FileSystemViewDirectoryNode';\nimport FileSystemViewFileNode from './FileSystemViewFileNode';\n\nexport type FileSystemViewListProps = {\n  workspaceLocation: WorkspaceLocation;\n  fileSystem: FSModule;\n  basePath: string;\n  indentationLevel: number;\n};\n\nconst FileSystemViewList: React.FC<FileSystemViewListProps> = (props: FileSystemViewListProps) => {\n  const { workspaceLocation, fileSystem, basePath, indentationLevel } = props;\n\n  const [dirNames, setDirNames] = React.useState<string[] | undefined>(undefined);\n  const [fileNames, setFileNames] = React.useState<string[] | undefined>(undefined);\n\n  const readDirectory = () => {\n    fileSystem.readdir(basePath, async (err, fileNames) => {\n      if (err) {\n        console.error(err);\n      }\n      if (fileNames === undefined) {\n        return;\n      }\n\n      const files: string[] = [];\n      const directories: string[] = [];\n      const lstatPromise = (fileName: string) => {\n        const fullPath = path.join(basePath, fileName);\n        return new Promise((resolve, reject) => {\n          fileSystem.lstat(fullPath, (err, stats) => {\n            if (err) {\n              return reject(err);\n            }\n            if (stats === undefined) {\n              return;\n            }\n\n            if (stats.isFile()) {\n              files.push(fileName);\n            } else if (stats.isDirectory()) {\n              directories.push(fileName);\n            }\n\n            resolve(stats);\n          });\n        });\n      };\n\n      // Check the file type of each file in parallel.\n      await Promise.all(fileNames.map(lstatPromise));\n      setFileNames(files.sort());\n      setDirNames(directories.sort());\n    });\n  };\n\n  React.useEffect(readDirectory, [fileSystem, basePath]);\n\n  if (!fileNames || !dirNames) {\n    return (\n      <Delay waitInMsBeforeRender={200}>\n        <Spinner className={classes['file-system-view-spinner']} size={SpinnerSize.SMALL} />\n      </Delay>\n    );\n  }\n\n  return (\n    <div className={classes['file-system-view-list-container']}>\n      {dirNames.map(dirName => {\n        return (\n          <FileSystemViewDirectoryNode\n            workspaceLocation={workspaceLocation}\n            key={dirName}\n            fileSystem={fileSystem}\n            basePath={basePath}\n            directoryName={dirName}\n            indentationLevel={indentationLevel}\n            refreshParentDirectory={readDirectory}\n          />\n        );\n      })}\n      {fileNames.map(fileName => {\n        return (\n          <FileSystemViewFileNode\n            workspaceLocation={workspaceLocation}\n            key={fileName}\n            fileSystem={fileSystem}\n            basePath={basePath}\n            fileName={fileName}\n            indentationLevel={indentationLevel}\n            refreshDirectory={readDirectory}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default FileSystemViewList;\n","import { Icon } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport path from 'path';\nimport React from 'react';\nimport classes from 'src/styles/FileSystemView.module.scss';\n\nimport { showSimpleErrorDialog } from '../utils/DialogHelper';\nimport { useTypedSelector } from '../utils/Hooks';\nimport { WorkspaceLocation } from '../workspace/WorkspaceTypes';\nimport FileSystemViewContextMenu from './FileSystemViewContextMenu';\nimport FileSystemViewIndentationPadding from './FileSystemViewIndentationPadding';\nimport FileSystemViewList from './FileSystemViewList';\nimport FileSystemViewPlaceholderNode from './FileSystemViewPlaceholderNode';\n\nexport type FileSystemViewProps = {\n  workspaceLocation: WorkspaceLocation;\n  basePath: string;\n};\n\nconst FileSystemView: React.FC<FileSystemViewProps> = (props: FileSystemViewProps) => {\n  const { workspaceLocation, basePath } = props;\n  const fileSystem = useTypedSelector(state => state.fileSystem.inBrowserFileSystem);\n\n  const [isAddingNewFile, setIsAddingNewFile] = React.useState<boolean>(false);\n  const [isAddingNewDirectory, setIsAddingNewDirectory] = React.useState<boolean>(false);\n  const [fileSystemViewListKey, setFileSystemViewListKey] = React.useState<number>(0);\n\n  const handleCreateNewFile = () => setIsAddingNewFile(true);\n  const handleCreateNewDirectory = () => setIsAddingNewDirectory(true);\n  // Forcibly re-render any child components in which the value `key` is passed as the prop `key`.\n  // See https://github.com/source-academy/frontend/wiki/File-System#handling-file-system-updates.\n  const forceRefreshFileSystemViewList = () =>\n    setFileSystemViewListKey((fileSystemViewListKey + 1) % 2);\n\n  if (fileSystem === null) {\n    return <div className={classes['file-system-view-error']}>Unable to load file system.</div>;\n  }\n\n  const createNewFile = (fileName: string) => {\n    const newFilePath = path.join(basePath, fileName);\n\n    // Check whether the new file path already exists to prevent overwriting of existing files & directories.\n    fileSystem.exists(newFilePath, newFilePathExists => {\n      if (newFilePathExists) {\n        showSimpleErrorDialog({\n          title: 'Unable to create file',\n          contents: (\n            <p>\n              A file or folder <b>{fileName}</b> already exists in this location. Please choose a\n              different name.\n            </p>\n          ),\n          label: 'OK'\n        }).then(() => {});\n        return;\n      }\n\n      fileSystem.writeFile(newFilePath, '', err => {\n        if (err) {\n          console.error(err);\n        }\n\n        forceRefreshFileSystemViewList();\n      });\n    });\n  };\n  const createNewDirectory = (directoryName: string) => {\n    const newDirectoryPath = path.join(basePath, directoryName);\n\n    // Check whether the new directory path already exists to prevent overwriting of existing files & directories.\n    fileSystem.exists(newDirectoryPath, newDirectoryPathExists => {\n      if (newDirectoryPathExists) {\n        showSimpleErrorDialog({\n          title: 'Unable to create directory',\n          contents: (\n            <p>\n              A file or folder <b>{directoryName}</b> already exists in this location. Please choose\n              a different name.\n            </p>\n          ),\n          label: 'OK'\n        }).then(() => {});\n        return;\n      }\n\n      fileSystem.mkdir(newDirectoryPath, 777, err => {\n        if (err) {\n          console.error(err);\n        }\n\n        forceRefreshFileSystemViewList();\n      });\n    });\n  };\n\n  return (\n    <div className={classes['file-system-view-container']}>\n      <FileSystemViewList\n        workspaceLocation={workspaceLocation}\n        key={fileSystemViewListKey}\n        fileSystem={fileSystem}\n        basePath={basePath}\n        indentationLevel={0}\n      />\n      {isAddingNewFile && (\n        <div className={classes['file-system-view-node-container']}>\n          <FileSystemViewIndentationPadding indentationLevel={0} />\n          <Icon icon={IconNames.DOCUMENT} />\n          <FileSystemViewPlaceholderNode\n            processFileName={createNewFile}\n            removePlaceholder={() => setIsAddingNewFile(false)}\n          />\n        </div>\n      )}\n      {isAddingNewDirectory && (\n        <div className={classes['file-system-view-node-container']}>\n          <FileSystemViewIndentationPadding indentationLevel={0} />\n          <Icon icon={IconNames.CHEVRON_RIGHT} />\n          <FileSystemViewPlaceholderNode\n            processFileName={createNewDirectory}\n            removePlaceholder={() => setIsAddingNewDirectory(false)}\n          />\n        </div>\n      )}\n      <FileSystemViewContextMenu\n        className={classes['file-system-view-empty-space']}\n        createNewFile={handleCreateNewFile}\n        createNewDirectory={handleCreateNewDirectory}\n      />\n    </div>\n  );\n};\n\nexport default FileSystemView;\n","import { Chapter, Variant } from 'js-slang/dist/types';\n\nimport { SALanguage, styliseSublanguage } from '../application/ApplicationTypes';\nimport { Links } from './Constants';\n\nconst MAIN_INTRODUCTION = `\nWelcome to the Source Academy playground!\n\nThe book [_Structure and Interpretation of Computer Programs, JavaScript Edition_](${Links.textbook})\nuses JavaScript sublanguages that we call [_Source_](${Links.sourceDocs}). `;\n\nconst HOTKEYS_INTRODUCTION = `\n\nIn the editor on the left, you can use the [_Ace keyboard shortcuts_](${Links.aceHotkeys}) \nand also the [_Source Academy keyboard shortcuts_](${Links.sourceHotkeys}).\n\n`;\n\nconst generateSourceDocsLink = (sourceChapter: Chapter, sourceVariant: Variant) => {\n  if (sourceChapter === Chapter.FULL_JS) {\n    return (\n      `However, you have chosen full JavaScript; your program will be run directly using JavaScript strict mode [_(ECMAScript 2021)_](${Links.ecmaScript_2021}).` +\n      '\\n\\n<b>Warning:</b> If your program freezes during execution, you can try refreshing the tab. ' +\n      'Note that you need to open the browser console (typically by pressing `F12`) before using breakpoints.'\n    );\n  }\n\n  if (sourceChapter === Chapter.HTML) {\n    return (\n      'However, you have chosen HTML, the standard markup language for webpages. Your code will be rendered directly as a HTML document.\\n\\n' +\n      'JavaScript code can be added to a HTML document using the `<script>` tag; any script errors will be displayed in the output below.\\n\\n' +\n      '<b>Note:</b> Error messages may differ between browsers, e.g. when using Safari, errors can only be viewed on the browser console itself. ' +\n      'Please check the browser console (typically by pressing `F12`) for more detailed errors and warnings.'\n    );\n  }\n\n  const sourceDocsLink: string = `${Links.sourceDocs}source_${sourceChapter}${\n    sourceVariant !== Variant.DEFAULT && sourceVariant !== Variant.NATIVE ? `_${sourceVariant}` : ''\n  }/`;\n\n  return `You have chosen the sublanguage [_${styliseSublanguage(\n    sourceChapter,\n    sourceVariant\n  )}_](${sourceDocsLink}).`;\n};\n\nconst generateIntroductionText = (sourceChapter: Chapter, sourceVariant: Variant) => {\n  return (\n    MAIN_INTRODUCTION + generateSourceDocsLink(sourceChapter, sourceVariant) + HOTKEYS_INTRODUCTION\n  );\n};\n\n// TODO: Remove this after migrated to language config\nconst generateSourceIntroduction = (sourceChapter: Chapter, sourceVariant: Variant) => {\n  return generateIntroductionText(sourceChapter, sourceVariant);\n};\n\nexport const generateLanguageIntroduction = (language: SALanguage) => {\n  return generateSourceIntroduction(language.chapter, language.variant);\n};\n","import { Classes } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Ace, Range } from 'ace-builds';\nimport { FSModule } from 'browserfs/dist/node/core/FS';\nimport classNames from 'classnames';\nimport { Chapter, Variant } from 'js-slang/dist/types';\nimport { isEqual } from 'lodash';\nimport { decompressFromEncodedURIComponent } from 'lz-string';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { HotKeys } from 'react-hotkeys';\nimport { useDispatch, useStore } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router';\nimport { AnyAction, Dispatch } from 'redux';\nimport {\n  beginDebuggerPause,\n  beginInterruptExecution,\n  debuggerReset,\n  debuggerResume\n} from 'src/commons/application/actions/InterpreterActions';\nimport {\n  loginGitHub,\n  logoutGitHub,\n  logoutGoogle\n} from 'src/commons/application/actions/SessionActions';\nimport {\n  setEditorSessionId,\n  setSharedbConnected\n} from 'src/commons/collabEditing/CollabEditingActions';\nimport makeCseMachineTabFrom from 'src/commons/sideContent/content/SideContentCseMachine';\nimport makeDataVisualizerTabFrom from 'src/commons/sideContent/content/SideContentDataVisualizer';\nimport makeHtmlDisplayTabFrom from 'src/commons/sideContent/content/SideContentHtmlDisplay';\nimport { changeSideContentHeight } from 'src/commons/sideContent/SideContentActions';\nimport { useSideContent } from 'src/commons/sideContent/SideContentHelper';\nimport { useResponsive, useTypedSelector } from 'src/commons/utils/Hooks';\nimport {\n  showFullJSWarningOnUrlLoad,\n  showFulTSWarningOnUrlLoad,\n  showHTMLDisclaimer\n} from 'src/commons/utils/WarningDialogHelper';\nimport {\n  addEditorTab,\n  addHtmlConsoleError,\n  browseReplHistoryDown,\n  browseReplHistoryUp,\n  changeExecTime,\n  changeStepLimit,\n  chapterSelect,\n  clearReplOutput,\n  evalEditor,\n  evalRepl,\n  navigateToDeclaration,\n  promptAutocomplete,\n  removeEditorTab,\n  removeEditorTabsForDirectory,\n  sendReplInputToOutput,\n  setEditorBreakpoint,\n  setEditorHighlightedLines,\n  setFolderMode,\n  toggleEditorAutorun,\n  toggleFolderMode,\n  toggleUpdateCse,\n  toggleUsingSubst,\n  updateActiveEditorTabIndex,\n  updateEditorValue,\n  updateReplValue\n} from 'src/commons/workspace/WorkspaceActions';\nimport { WorkspaceLocation } from 'src/commons/workspace/WorkspaceTypes';\nimport {\n  githubOpenFile,\n  githubSaveFile,\n  githubSaveFileAs\n} from 'src/features/github/GitHubActions';\nimport {\n  persistenceInitialise,\n  persistenceOpenPicker,\n  persistenceSaveFile,\n  persistenceSaveFileAs\n} from 'src/features/persistence/PersistenceActions';\nimport {\n  generateLzString,\n  playgroundConfigLanguage,\n  shortenURL,\n  updateShortURL\n} from 'src/features/playground/PlaygroundActions';\n\nimport {\n  getDefaultFilePath,\n  getLanguageConfig,\n  isSourceLanguage,\n  OverallState,\n  ResultOutput,\n  SALanguage\n} from '../../commons/application/ApplicationTypes';\nimport { ExternalLibraryName } from '../../commons/application/types/ExternalTypes';\nimport { ControlBarAutorunButtons } from '../../commons/controlBar/ControlBarAutorunButtons';\nimport { ControlBarChapterSelect } from '../../commons/controlBar/ControlBarChapterSelect';\nimport { ControlBarClearButton } from '../../commons/controlBar/ControlBarClearButton';\nimport { ControlBarEvalButton } from '../../commons/controlBar/ControlBarEvalButton';\nimport { ControlBarExecutionTime } from '../../commons/controlBar/ControlBarExecutionTime';\nimport { ControlBarGoogleDriveButtons } from '../../commons/controlBar/ControlBarGoogleDriveButtons';\nimport { ControlBarSessionButtons } from '../../commons/controlBar/ControlBarSessionButton';\nimport { ControlBarShareButton } from '../../commons/controlBar/ControlBarShareButton';\nimport { ControlBarStepLimit } from '../../commons/controlBar/ControlBarStepLimit';\nimport { ControlBarToggleFolderModeButton } from '../../commons/controlBar/ControlBarToggleFolderModeButton';\nimport { ControlBarGitHubButtons } from '../../commons/controlBar/github/ControlBarGitHubButtons';\nimport {\n  convertEditorTabStateToProps,\n  NormalEditorContainerProps\n} from '../../commons/editor/EditorContainer';\nimport { Position } from '../../commons/editor/EditorTypes';\nimport { overwriteFilesInWorkspace } from '../../commons/fileSystem/utils';\nimport FileSystemView from '../../commons/fileSystemView/FileSystemView';\nimport MobileWorkspace, {\n  MobileWorkspaceProps\n} from '../../commons/mobileWorkspace/MobileWorkspace';\nimport { SideBarTab } from '../../commons/sideBar/SideBar';\nimport { SideContentTab, SideContentType } from '../../commons/sideContent/SideContentTypes';\nimport Constants, { Links } from '../../commons/utils/Constants';\nimport { generateLanguageIntroduction } from '../../commons/utils/IntroductionHelper';\nimport { convertParamToBoolean, convertParamToInt } from '../../commons/utils/ParamParseHelper';\nimport { IParsedQuery, parseQuery } from '../../commons/utils/QueryHelper';\nimport Workspace, { WorkspaceProps } from '../../commons/workspace/Workspace';\nimport { initSession, log } from '../../features/eventLogging';\nimport {\n  CodeDelta,\n  Input,\n  SelectionRange\n} from '../../features/sourceRecorder/SourceRecorderTypes';\nimport { WORKSPACE_BASE_PATHS } from '../fileSystem/createInBrowserFileSystem';\nimport {\n  desktopOnlyTabIds,\n  makeIntroductionTabFrom,\n  makeRemoteExecutionTabFrom,\n  makeSubstVisualizerTabFrom,\n  mobileOnlyTabIds\n} from './PlaygroundTabs';\n\nexport type PlaygroundProps = {\n  isSicpEditor?: boolean;\n  initialEditorValueHash?: string;\n  prependLength?: number;\n  handleCloseEditor?: () => void;\n};\n\nconst keyMap = { goGreen: 'h u l k' };\n\nexport async function handleHash(\n  hash: string,\n  handlers: {\n    handleChapterSelect: (chapter: Chapter, variant: Variant) => void;\n    handleChangeExecTime: (execTime: number) => void;\n  },\n  workspaceLocation: WorkspaceLocation,\n  dispatch: Dispatch<AnyAction>,\n  fileSystem: FSModule | null\n) {\n  // Make the parsed query string object a Partial because we might access keys which are not set.\n  const qs: Partial<IParsedQuery> = parseQuery(hash);\n\n  const chapter = convertParamToInt(qs.chap) ?? undefined;\n  if (chapter === Chapter.FULL_JS) {\n    showFullJSWarningOnUrlLoad();\n  } else if (chapter === Chapter.FULL_TS) {\n    showFulTSWarningOnUrlLoad();\n  } else {\n    if (chapter === Chapter.HTML) {\n      const continueToHtml = await showHTMLDisclaimer();\n      if (!continueToHtml) {\n        return;\n      }\n    }\n\n    // For backward compatibility with old share links - 'prgrm' is no longer used.\n    const program = qs.prgrm === undefined ? '' : decompressFromEncodedURIComponent(qs.prgrm);\n\n    // By default, create just the default file.\n    const defaultFilePath = getDefaultFilePath(workspaceLocation);\n    const files: Record<string, string> =\n      qs.files === undefined\n        ? {\n            [defaultFilePath]: program\n          }\n        : parseQuery(decompressFromEncodedURIComponent(qs.files));\n    if (fileSystem !== null) {\n      await overwriteFilesInWorkspace(workspaceLocation, fileSystem, files);\n    }\n\n    // BrowserFS does not provide a way of listening to changes in the file system, which makes\n    // updating the file system view troublesome. To force the file system view to re-render\n    // (and thus display the updated file system), we first disable Folder mode.\n    dispatch(setFolderMode(workspaceLocation, false));\n    const isFolderModeEnabled = convertParamToBoolean(qs.isFolder) ?? false;\n    // If Folder mode should be enabled, enabling it after disabling it earlier will cause the\n    // newly-added files to be shown. Note that this has to take place after the files are\n    // already added to the file system.\n    dispatch(setFolderMode(workspaceLocation, isFolderModeEnabled));\n\n    // By default, open a single editor tab containing the default playground file.\n    const editorTabFilePaths = qs.tabs?.split(',').map(decompressFromEncodedURIComponent) ?? [\n      defaultFilePath\n    ];\n    // Remove all editor tabs before populating with the ones from the query string.\n    dispatch(\n      removeEditorTabsForDirectory(workspaceLocation, WORKSPACE_BASE_PATHS[workspaceLocation])\n    );\n    // Add editor tabs from the query string.\n    editorTabFilePaths.forEach(filePath =>\n      // Fall back on the empty string if the file contents do not exist.\n      dispatch(addEditorTab(workspaceLocation, filePath, files[filePath] ?? ''))\n    );\n\n    // By default, use the first editor tab.\n    const activeEditorTabIndex = convertParamToInt(qs.tabIdx) ?? 0;\n    dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex));\n    if (chapter) {\n      // TODO: To migrate the state logic away from playgroundSourceChapter\n      //       and playgroundSourceVariant into the language config instead\n      const languageConfig = getLanguageConfig(chapter, qs.variant as Variant);\n      handlers.handleChapterSelect(chapter, languageConfig.variant);\n      // Hardcoded for Playground only for now, while we await workspace refactoring\n      // to decouple the SicpWorkspace from the Playground.\n      dispatch(playgroundConfigLanguage(languageConfig));\n    }\n\n    const execTime = Math.max(convertParamToInt(qs.exec || '1000') || 1000, 1000);\n    if (execTime) {\n      handlers.handleChangeExecTime(execTime);\n    }\n  }\n}\n\nconst Playground: React.FC<PlaygroundProps> = props => {\n  const { isSicpEditor } = props;\n  const workspaceLocation: WorkspaceLocation = isSicpEditor ? 'sicp' : 'playground';\n  const { isMobileBreakpoint } = useResponsive();\n\n  const [deviceSecret, setDeviceSecret] = useState<string | undefined>();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const store = useStore<OverallState>();\n  const searchParams = new URLSearchParams(location.search);\n  const shouldAddDevice = searchParams.get('add_device');\n\n  // Selectors and handlers migrated over from deprecated withRouter implementation\n  const {\n    editorTabs,\n    editorSessionId,\n    execTime,\n    stepLimit,\n    isEditorAutorun,\n    isRunning,\n    isDebugging,\n    output,\n    replValue,\n    sharedbConnected,\n    usingSubst,\n    usingCse,\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    context: { chapter: playgroundSourceChapter, variant: playgroundSourceVariant }\n  } = useTypedSelector(state => state.workspaces[workspaceLocation]);\n  const fileSystem = useTypedSelector(state => state.fileSystem.inBrowserFileSystem);\n  const { queryString, shortURL, persistenceFile, githubSaveInfo } = useTypedSelector(\n    state => state.playground\n  );\n  const {\n    sourceChapter: courseSourceChapter,\n    sourceVariant: courseSourceVariant,\n    googleUser: persistenceUser,\n    githubOctokitObject\n  } = useTypedSelector(state => state.session);\n\n  const dispatch = useDispatch();\n  const {\n    handleChangeExecTime,\n    handleChapterSelect,\n    handleEditorValueChange,\n    handleSetEditorBreakpoints,\n    handleReplEval,\n    handleReplOutputClear,\n    handleUsingSubst\n  } = useMemo(() => {\n    return {\n      handleChangeExecTime: (execTime: number) =>\n        dispatch(changeExecTime(execTime, workspaceLocation)),\n      handleChapterSelect: (chapter: Chapter, variant: Variant) =>\n        dispatch(chapterSelect(chapter, variant, workspaceLocation)),\n      handleEditorValueChange: (editorTabIndex: number, newEditorValue: string) =>\n        dispatch(updateEditorValue(workspaceLocation, editorTabIndex, newEditorValue)),\n      handleSetEditorBreakpoints: (editorTabIndex: number, newBreakpoints: string[]) =>\n        dispatch(setEditorBreakpoint(workspaceLocation, editorTabIndex, newBreakpoints)),\n      handleReplEval: () => dispatch(evalRepl(workspaceLocation)),\n      handleReplOutputClear: () => dispatch(clearReplOutput(workspaceLocation)),\n      handleUsingSubst: (usingSubst: boolean) =>\n        dispatch(toggleUsingSubst(usingSubst, workspaceLocation))\n    };\n  }, [dispatch, workspaceLocation]);\n\n  // Hide search query from URL to maintain an illusion of security. The device secret\n  // is still exposed via the 'Referer' header when requesting external content (e.g. Google API fonts)\n  if (shouldAddDevice && !deviceSecret) {\n    setDeviceSecret(shouldAddDevice);\n    navigate(location.pathname, { replace: true });\n  }\n\n  const [lastEdit, setLastEdit] = useState(new Date());\n  const [isGreen, setIsGreen] = useState(false);\n  const { selectedTab, setSelectedTab } = useSideContent(\n    workspaceLocation,\n    shouldAddDevice ? SideContentType.remoteExecution : SideContentType.introduction\n  );\n  const [hasBreakpoints, setHasBreakpoints] = useState(false);\n  const [sessionId, setSessionId] = useState(() =>\n    initSession('playground', {\n      // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n      editorValue: editorTabs[0]?.value ?? '',\n      chapter: playgroundSourceChapter\n    })\n  );\n\n  const remoteExecutionTab: SideContentTab = useMemo(\n    () => makeRemoteExecutionTabFrom(deviceSecret, setDeviceSecret),\n    [deviceSecret]\n  );\n\n  const usingRemoteExecution =\n    useTypedSelector(state => !!state.session.remoteExecutionSession) && !isSicpEditor;\n  // this is still used by remote execution (EV3)\n  // specifically, for the editor Ctrl+B to work\n  const externalLibraryName = useTypedSelector(\n    state => state.workspaces.playground.externalLibrary\n  );\n\n  useEffect(() => {\n    // When the editor session Id changes, then treat it as a new session.\n    setSessionId(\n      initSession('playground', {\n        // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n        editorValue: editorTabs[0]?.value ?? '',\n        chapter: playgroundSourceChapter\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorSessionId]);\n\n  const hash = isSicpEditor ? props.initialEditorValueHash : location.hash;\n\n  useEffect(() => {\n    if (!hash) {\n      // If not a accessing via shared link, use the Source chapter and variant in the current course\n      if (courseSourceChapter && courseSourceVariant) {\n        handleChapterSelect(courseSourceChapter, courseSourceVariant);\n        // TODO: To migrate the state logic away from playgroundSourceChapter\n        //       and playgroundSourceVariant into the language config instead\n        const languageConfig = getLanguageConfig(courseSourceChapter, courseSourceVariant);\n        // Hardcoded for Playground only for now, while we await workspace refactoring\n        // to decouple the SicpWorkspace from the Playground.\n        dispatch(playgroundConfigLanguage(languageConfig));\n        // Disable Folder mode when forcing the Source chapter and variant to follow the current course's.\n        // This is because Folder mode only works in Source 2+.\n        dispatch(setFolderMode(workspaceLocation, false));\n      }\n      return;\n    }\n    handleHash(\n      hash,\n      { handleChangeExecTime, handleChapterSelect },\n      workspaceLocation,\n      dispatch,\n      fileSystem\n    );\n  }, [\n    dispatch,\n    fileSystem,\n    hash,\n    courseSourceChapter,\n    courseSourceVariant,\n    workspaceLocation,\n    handleChapterSelect,\n    handleChangeExecTime\n  ]);\n\n  /**\n   * Handles toggling of relevant SideContentTabs when mobile breakpoint it hit\n   */\n  useEffect(() => {\n    if (!selectedTab) return;\n\n    if (isMobileBreakpoint && desktopOnlyTabIds.includes(selectedTab)) {\n      setSelectedTab(SideContentType.mobileEditor);\n    } else if (!isMobileBreakpoint && mobileOnlyTabIds.includes(selectedTab)) {\n      setSelectedTab(SideContentType.introduction);\n    }\n  }, [isMobileBreakpoint, selectedTab, setSelectedTab]);\n\n  const handlers = useMemo(\n    () => ({\n      goGreen: () => setIsGreen(!isGreen)\n    }),\n    [isGreen]\n  );\n\n  const onEditorValueChange = React.useCallback(\n    (editorTabIndex: number, newEditorValue: string) => {\n      setLastEdit(new Date());\n      handleEditorValueChange(editorTabIndex, newEditorValue);\n    },\n    [handleEditorValueChange]\n  );\n\n  // const onChangeTabs = useCallback(\n  //   (\n  //     newTabId: SideContentType,\n  //     prevTabId: SideContentType,\n  //     event: React.MouseEvent<HTMLElement>\n  //   ) => {\n  //     if (newTabId === prevTabId) {\n  //       return;\n  //     }\n\n  //     // Do nothing when clicking the mobile 'Run' tab while on the stepper tab.\n  //     if (prevTabId === SideContentType.substVisualizer) {\n  //       if (newTabId === SideContentType.mobileEditorRun) return;\n  //       if (!hasBreakpoints) {\n  //         handleReplOutputClear();\n  //         handleUsingSubst(false);\n  //       }\n  //     }\n\n  // if (\n  //   prevTabId === SideContentType.cseMachine &&\n  //   newTabId === SideContentType.mobileEditorRun\n  // ) {\n  //   return;\n  // }\n\n  //     // if (newTabId !== SideContentType.cseMachine) {\n  //     //   handleCseMachineReset();\n  //     // }\n\n  //     // if (\n  //     //   isSourceLanguage(playgroundSourceChapter) &&\n  //     //   (newTabId === SideContentType.substVisualizer || newTabId === SideContentType.cseMachine)\n  //     // ) {\n  //     //   if (playgroundSourceChapter <= Chapter.SOURCE_2) {\n  //     //     handleUsingSubst(true);\n  //     //   } else {\n  //     //     handleUsingCse(true);\n  //     //   }\n  //     // }\n\n  //     // setSelectedTab(newTabId);\n  //   },\n  //   [\n  //     hasBreakpoints,\n  //     handleUsingSubst,\n  //     handleReplOutputClear\n  //   ]\n  // );\n\n  const pushLog = useCallback(\n    (newInput: Input) => {\n      log(sessionId, newInput);\n    },\n    [sessionId]\n  );\n\n  const autorunButtonHandlers = useMemo(() => {\n    return {\n      handleEditorEval: () => dispatch(evalEditor(workspaceLocation)),\n      handleInterruptEval: () => dispatch(beginInterruptExecution(workspaceLocation)),\n      handleToggleEditorAutorun: () => dispatch(toggleEditorAutorun(workspaceLocation)),\n      handleDebuggerPause: () => dispatch(beginDebuggerPause(workspaceLocation)),\n      handleDebuggerReset: () => dispatch(debuggerReset(workspaceLocation)),\n      handleDebuggerResume: () => dispatch(debuggerResume(workspaceLocation))\n    };\n  }, [dispatch, workspaceLocation]);\n\n  const languageConfig: SALanguage = useTypedSelector(state => state.playground.languageConfig);\n\n  const autorunButtons = useMemo(() => {\n    return (\n      <ControlBarAutorunButtons\n        isEntrypointFileDefined={activeEditorTabIndex !== null}\n        isDebugging={isDebugging}\n        isEditorAutorun={isEditorAutorun}\n        isRunning={isRunning}\n        key=\"autorun\"\n        autorunDisabled={usingRemoteExecution}\n        sourceChapter={languageConfig.chapter}\n        // Disable pause for non-Source languages since they cannot be paused\n        pauseDisabled={usingRemoteExecution || !isSourceLanguage(languageConfig.chapter)}\n        {...autorunButtonHandlers}\n      />\n    );\n  }, [\n    activeEditorTabIndex,\n    isDebugging,\n    isEditorAutorun,\n    isRunning,\n    languageConfig.chapter,\n    autorunButtonHandlers,\n    usingRemoteExecution\n  ]);\n\n  const chapterSelectHandler = useCallback(\n    (sublanguage: SALanguage, e: any) => {\n      const { chapter, variant } = sublanguage;\n      if ((chapter <= 2 && hasBreakpoints) || selectedTab === SideContentType.substVisualizer) {\n        handleUsingSubst(true);\n      }\n      if (chapter > 2) {\n        handleReplOutputClear();\n        handleUsingSubst(false);\n      }\n\n      const input: Input = {\n        time: Date.now(),\n        type: 'chapterSelect',\n        data: chapter\n      };\n\n      pushLog(input);\n\n      handleChapterSelect(chapter, variant);\n      // Hardcoded for Playground only for now, while we await workspace refactoring\n      // to decouple the SicpWorkspace from the Playground.\n      dispatch(playgroundConfigLanguage(sublanguage));\n    },\n    [\n      dispatch,\n      hasBreakpoints,\n      selectedTab,\n      pushLog,\n      handleReplOutputClear,\n      handleUsingSubst,\n      handleChapterSelect\n    ]\n  );\n\n  const chapterSelectButton = useMemo(\n    () => (\n      <ControlBarChapterSelect\n        handleChapterSelect={chapterSelectHandler}\n        isFolderModeEnabled={isFolderModeEnabled}\n        sourceChapter={languageConfig.chapter}\n        sourceVariant={languageConfig.variant}\n        key=\"chapter\"\n        disabled={usingRemoteExecution}\n      />\n    ),\n    [\n      chapterSelectHandler,\n      isFolderModeEnabled,\n      languageConfig.chapter,\n      languageConfig.variant,\n      usingRemoteExecution\n    ]\n  );\n\n  const clearButton = useMemo(\n    () =>\n      selectedTab === SideContentType.substVisualizer ? null : (\n        <ControlBarClearButton handleReplOutputClear={handleReplOutputClear} key=\"clear_repl\" />\n      ),\n    [handleReplOutputClear, selectedTab]\n  );\n\n  const evalButton = useMemo(\n    () =>\n      selectedTab === SideContentType.substVisualizer ? null : (\n        <ControlBarEvalButton\n          handleReplEval={handleReplEval}\n          isRunning={isRunning}\n          key=\"eval_repl\"\n        />\n      ),\n    [handleReplEval, isRunning, selectedTab]\n  );\n\n  // Compute this here to avoid re-rendering the button every keystroke\n  const persistenceIsDirty =\n    persistenceFile && (!persistenceFile.lastSaved || persistenceFile.lastSaved < lastEdit);\n  const persistenceButtons = useMemo(() => {\n    return (\n      <ControlBarGoogleDriveButtons\n        isFolderModeEnabled={isFolderModeEnabled}\n        currentFile={persistenceFile}\n        loggedInAs={persistenceUser}\n        isDirty={persistenceIsDirty}\n        key=\"googledrive\"\n        onClickSaveAs={() => dispatch(persistenceSaveFileAs())}\n        onClickOpen={() => dispatch(persistenceOpenPicker())}\n        onClickSave={\n          persistenceFile ? () => dispatch(persistenceSaveFile(persistenceFile)) : undefined\n        }\n        onClickLogOut={() => dispatch(logoutGoogle())}\n        onPopoverOpening={() => dispatch(persistenceInitialise())}\n      />\n    );\n  }, [isFolderModeEnabled, persistenceFile, persistenceUser, persistenceIsDirty, dispatch]);\n\n  const githubPersistenceIsDirty =\n    githubSaveInfo && (!githubSaveInfo.lastSaved || githubSaveInfo.lastSaved < lastEdit);\n  const githubButtons = useMemo(() => {\n    return (\n      <ControlBarGitHubButtons\n        key=\"github\"\n        isFolderModeEnabled={isFolderModeEnabled}\n        loggedInAs={githubOctokitObject.octokit}\n        githubSaveInfo={githubSaveInfo}\n        isDirty={githubPersistenceIsDirty}\n        onClickOpen={() => dispatch(githubOpenFile())}\n        onClickSaveAs={() => dispatch(githubSaveFileAs())}\n        onClickSave={() => dispatch(githubSaveFile())}\n        onClickLogIn={() => dispatch(loginGitHub())}\n        onClickLogOut={() => dispatch(logoutGitHub())}\n      />\n    );\n  }, [\n    dispatch,\n    githubOctokitObject.octokit,\n    githubPersistenceIsDirty,\n    githubSaveInfo,\n    isFolderModeEnabled\n  ]);\n\n  const executionTime = useMemo(\n    () => (\n      <ControlBarExecutionTime\n        execTime={execTime}\n        handleChangeExecTime={handleChangeExecTime}\n        key=\"execution_time\"\n      />\n    ),\n    [execTime, handleChangeExecTime]\n  );\n\n  const stepperStepLimit = useMemo(\n    () => (\n      <ControlBarStepLimit\n        stepLimit={stepLimit}\n        stepSize={usingSubst ? 2 : 1}\n        handleChangeStepLimit={limit => {\n          dispatch(changeStepLimit(limit, workspaceLocation));\n          usingCse && dispatch(toggleUpdateCse(true, workspaceLocation));\n        }}\n        handleOnBlurAutoScale={limit => {\n          limit % 2 === 0 || !usingSubst\n            ? dispatch(changeStepLimit(limit, workspaceLocation))\n            : dispatch(changeStepLimit(limit + 1, workspaceLocation));\n          usingCse && dispatch(toggleUpdateCse(true, workspaceLocation));\n        }}\n        key=\"step_limit\"\n      />\n    ),\n    [dispatch, stepLimit, usingSubst, usingCse, workspaceLocation]\n  );\n\n  const getEditorValue = useCallback(\n    // TODO: Hardcoded to make use of the first editor tab. Rewrite after editor tabs are added.\n    () => store.getState().workspaces[workspaceLocation].editorTabs[0].value,\n    [store, workspaceLocation]\n  );\n\n  const sessionButtons = useMemo(\n    () => (\n      <ControlBarSessionButtons\n        isFolderModeEnabled={isFolderModeEnabled}\n        editorSessionId={editorSessionId}\n        getEditorValue={getEditorValue}\n        handleSetEditorSessionId={id => dispatch(setEditorSessionId(workspaceLocation, id))}\n        sharedbConnected={sharedbConnected}\n        key=\"session\"\n      />\n    ),\n    [\n      dispatch,\n      getEditorValue,\n      isFolderModeEnabled,\n      editorSessionId,\n      sharedbConnected,\n      workspaceLocation\n    ]\n  );\n\n  const shareButton = useMemo(() => {\n    const qs = isSicpEditor ? Links.playground + '#' + props.initialEditorValueHash : queryString;\n    return (\n      <ControlBarShareButton\n        handleGenerateLz={() => dispatch(generateLzString())}\n        handleShortenURL={s => dispatch(shortenURL(s))}\n        handleUpdateShortURL={s => dispatch(updateShortURL(s))}\n        queryString={qs}\n        shortURL={shortURL}\n        isSicp={isSicpEditor}\n        key=\"share\"\n      />\n    );\n  }, [dispatch, isSicpEditor, props.initialEditorValueHash, queryString, shortURL]);\n\n  const toggleFolderModeButton = useMemo(() => {\n    return (\n      <ControlBarToggleFolderModeButton\n        isFolderModeEnabled={isFolderModeEnabled}\n        isSessionActive={editorSessionId !== ''}\n        isPersistenceActive={persistenceFile !== undefined || githubSaveInfo.repoName !== ''}\n        toggleFolderMode={() => dispatch(toggleFolderMode(workspaceLocation))}\n        key=\"folder\"\n      />\n    );\n  }, [\n    dispatch,\n    githubSaveInfo.repoName,\n    isFolderModeEnabled,\n    persistenceFile,\n    editorSessionId,\n    workspaceLocation\n  ]);\n\n  useEffect(() => {\n    // TODO: To migrate the state logic away from playgroundSourceChapter\n    //       and playgroundSourceVariant into the language config instead\n    const languageConfigToSet = getLanguageConfig(playgroundSourceChapter, playgroundSourceVariant);\n    // Hardcoded for Playground only for now, while we await workspace refactoring\n    // to decouple the SicpWorkspace from the Playground.\n    dispatch(playgroundConfigLanguage(languageConfigToSet));\n  }, [dispatch, playgroundSourceChapter, playgroundSourceVariant]);\n\n  const shouldShowDataVisualizer = languageConfig.supports.dataVisualizer;\n  const shouldShowCseMachine = languageConfig.supports.cseMachine;\n  const shouldShowSubstVisualizer = languageConfig.supports.substVisualizer;\n\n  const playgroundIntroductionTab: SideContentTab = useMemo(\n    () => makeIntroductionTabFrom(generateLanguageIntroduction(languageConfig)),\n    [languageConfig]\n  );\n  const tabs = useMemo(() => {\n    const tabs: SideContentTab[] = [playgroundIntroductionTab];\n\n    const currentLang = languageConfig.chapter;\n    if (currentLang === Chapter.HTML) {\n      // For HTML Chapter, HTML Display tab is added only after code is run\n      if (output.length > 0 && output[0].type === 'result') {\n        tabs.push(\n          makeHtmlDisplayTabFrom(\n            output[0] as ResultOutput,\n            errorMsg => dispatch(addHtmlConsoleError(errorMsg, workspaceLocation)),\n            workspaceLocation\n          )\n        );\n      }\n      return tabs;\n    }\n\n    if (!usingRemoteExecution) {\n      // Don't show the following when using remote execution\n      if (shouldShowDataVisualizer) {\n        tabs.push(makeDataVisualizerTabFrom(workspaceLocation));\n      }\n      if (shouldShowCseMachine) {\n        tabs.push(makeCseMachineTabFrom(workspaceLocation));\n      }\n      if (shouldShowSubstVisualizer) {\n        tabs.push(makeSubstVisualizerTabFrom(workspaceLocation, output));\n      }\n    }\n\n    if (!isSicpEditor && !Constants.playgroundOnly) {\n      tabs.push(remoteExecutionTab);\n    }\n\n    return tabs;\n  }, [\n    playgroundIntroductionTab,\n    languageConfig.chapter,\n    output,\n    usingRemoteExecution,\n    isSicpEditor,\n    dispatch,\n    workspaceLocation,\n    shouldShowDataVisualizer,\n    shouldShowCseMachine,\n    shouldShowSubstVisualizer,\n    remoteExecutionTab\n  ]);\n\n  // Remove Intro and Remote Execution tabs for mobile\n  const mobileTabs = [...tabs].filter(({ id }) => !(id && desktopOnlyTabIds.includes(id)));\n\n  const onLoadMethod = useCallback(\n    (editor: Ace.Editor) => {\n      const addFold = () => {\n        editor.getSession().addFold('    ', new Range(1, 0, props.prependLength!, 0));\n        editor.renderer.off('afterRender', addFold);\n      };\n\n      editor.renderer.on('afterRender', addFold);\n    },\n    [props.prependLength]\n  );\n\n  const onChangeMethod = useCallback(\n    (newCode: string, delta: CodeDelta) => {\n      const input: Input = {\n        time: Date.now(),\n        type: 'codeDelta',\n        data: delta\n      };\n\n      pushLog(input);\n      dispatch(toggleUpdateCse(true, workspaceLocation));\n      dispatch(setEditorHighlightedLines(workspaceLocation, 0, []));\n    },\n    [pushLog, dispatch, workspaceLocation]\n  );\n\n  const onCursorChangeMethod = useCallback(\n    (selection: any) => {\n      const input: Input = {\n        time: Date.now(),\n        type: 'cursorPositionChange',\n        data: selection.getCursor()\n      };\n\n      pushLog(input);\n    },\n    [pushLog]\n  );\n\n  const onSelectionChangeMethod = useCallback(\n    (selection: any) => {\n      const range: SelectionRange = selection.getRange();\n      const isBackwards: boolean = selection.isBackwards();\n      if (!isEqual(range.start, range.end)) {\n        const input: Input = {\n          time: Date.now(),\n          type: 'selectionRangeData',\n          data: { range, isBackwards }\n        };\n\n        pushLog(input);\n      }\n    },\n    [pushLog]\n  );\n\n  const handleEditorUpdateBreakpoints = useCallback(\n    (editorTabIndex: number, breakpoints: string[]) => {\n      // get rid of holes in array\n      const numberOfBreakpoints = breakpoints.filter(arrayItem => !!arrayItem).length;\n      if (numberOfBreakpoints > 0) {\n        setHasBreakpoints(true);\n        if (playgroundSourceChapter <= 2) {\n          /**\n           * There are breakpoints set on Source Chapter 2, so we set the\n           * Redux state for the editor to evaluate to the substituter\n           */\n\n          handleUsingSubst(true);\n        }\n      }\n      if (numberOfBreakpoints === 0) {\n        setHasBreakpoints(false);\n\n        if (selectedTab !== SideContentType.substVisualizer) {\n          handleReplOutputClear();\n          handleUsingSubst(false);\n        }\n      }\n      handleSetEditorBreakpoints(editorTabIndex, breakpoints);\n      dispatch(toggleUpdateCse(true, workspaceLocation));\n    },\n    [\n      selectedTab,\n      dispatch,\n      workspaceLocation,\n      handleSetEditorBreakpoints,\n      handleReplOutputClear,\n      handleUsingSubst,\n      playgroundSourceChapter\n    ]\n  );\n\n  const replDisabled = !languageConfig.supports.repl || usingRemoteExecution;\n\n  const editorContainerHandlers = useMemo(() => {\n    return {\n      handleDeclarationNavigate: (cursorPosition: Position) =>\n        dispatch(navigateToDeclaration(workspaceLocation, cursorPosition)),\n      handlePromptAutocomplete: (row: number, col: number, callback: any) =>\n        dispatch(promptAutocomplete(workspaceLocation, row, col, callback)),\n      handleSendReplInputToOutput: (code: string) =>\n        dispatch(sendReplInputToOutput(code, workspaceLocation)),\n      handleSetSharedbConnected: (connected: boolean) =>\n        dispatch(setSharedbConnected(workspaceLocation, connected)),\n      setActiveEditorTabIndex: (activeEditorTabIndex: number | null) =>\n        dispatch(updateActiveEditorTabIndex(workspaceLocation, activeEditorTabIndex)),\n      removeEditorTabByIndex: (editorTabIndex: number) =>\n        dispatch(removeEditorTab(workspaceLocation, editorTabIndex))\n    };\n  }, [dispatch, workspaceLocation]);\n  const editorContainerProps: NormalEditorContainerProps = {\n    editorSessionId,\n    isEditorAutorun,\n    editorVariant: 'normal',\n    baseFilePath: WORKSPACE_BASE_PATHS[workspaceLocation],\n    isFolderModeEnabled,\n    activeEditorTabIndex,\n    setActiveEditorTabIndex: editorContainerHandlers.setActiveEditorTabIndex,\n    removeEditorTabByIndex: editorContainerHandlers.removeEditorTabByIndex,\n    editorTabs: editorTabs.map(convertEditorTabStateToProps),\n    handleDeclarationNavigate: editorContainerHandlers.handleDeclarationNavigate,\n    handleEditorEval: autorunButtonHandlers.handleEditorEval,\n    handlePromptAutocomplete: editorContainerHandlers.handlePromptAutocomplete,\n    handleSendReplInputToOutput: editorContainerHandlers.handleSendReplInputToOutput,\n    handleSetSharedbConnected: editorContainerHandlers.handleSetSharedbConnected,\n    onChange: onChangeMethod,\n    onCursorChange: onCursorChangeMethod,\n    onSelectionChange: onSelectionChangeMethod,\n    onLoad: isSicpEditor && props.prependLength ? onLoadMethod : undefined,\n    sourceChapter: languageConfig.chapter,\n    externalLibraryName,\n    sourceVariant: languageConfig.variant,\n    handleEditorValueChange: onEditorValueChange,\n    handleEditorUpdateBreakpoints: handleEditorUpdateBreakpoints\n  };\n\n  const replHandlers = useMemo(() => {\n    return {\n      handleBrowseHistoryDown: () => dispatch(browseReplHistoryDown(workspaceLocation)),\n      handleBrowseHistoryUp: () => dispatch(browseReplHistoryUp(workspaceLocation)),\n      handleReplValueChange: (newValue: string) =>\n        dispatch(updateReplValue(newValue, workspaceLocation))\n    };\n  }, [dispatch, workspaceLocation]);\n  const replProps = {\n    output,\n    replValue,\n    handleReplEval,\n    usingSubst,\n    handleBrowseHistoryDown: replHandlers.handleBrowseHistoryDown,\n    handleBrowseHistoryUp: replHandlers.handleBrowseHistoryUp,\n    handleReplValueChange: replHandlers.handleReplValueChange,\n    sourceChapter: languageConfig.chapter,\n    sourceVariant: languageConfig.variant,\n    externalLibrary: ExternalLibraryName.NONE, // temporary placeholder as we phase out libraries\n    hidden:\n      selectedTab === SideContentType.substVisualizer || selectedTab === SideContentType.cseMachine,\n    inputHidden: replDisabled,\n    replButtons: [replDisabled ? null : evalButton, clearButton],\n    disableScrolling: isSicpEditor\n  };\n\n  const sideBarProps: { tabs: SideBarTab[] } = useMemo(() => {\n    // The sidebar is rendered if and only if there is at least one tab present.\n    // Because whether the sidebar is rendered or not affects the sidebar resizing\n    // logic, we cannot defer the decision on which sidebar tabs should be rendered\n    // to the sidebar as it would be too late - the sidebar resizing logic in the\n    // workspace would not be able to act on that information. Instead, we need to\n    // determine which sidebar tabs should be rendered here.\n    return {\n      tabs: [\n        ...(isFolderModeEnabled\n          ? [\n              {\n                label: 'Folder',\n                body: (\n                  <FileSystemView\n                    workspaceLocation=\"playground\"\n                    basePath={WORKSPACE_BASE_PATHS[workspaceLocation]}\n                  />\n                ),\n                iconName: IconNames.FOLDER_CLOSE,\n                id: SideContentType.folder\n              }\n            ]\n          : [])\n      ]\n    };\n  }, [isFolderModeEnabled, workspaceLocation]);\n\n  const workspaceProps: WorkspaceProps = {\n    controlBarProps: {\n      editorButtons: [\n        autorunButtons,\n        languageConfig.chapter === Chapter.FULL_JS ? null : shareButton,\n        chapterSelectButton,\n        isSicpEditor ? null : sessionButtons,\n        languageConfig.supports.multiFile ? toggleFolderModeButton : null,\n        persistenceButtons,\n        githubButtons,\n        usingRemoteExecution || !isSourceLanguage(languageConfig.chapter)\n          ? null\n          : usingSubst || usingCse\n          ? stepperStepLimit\n          : executionTime\n      ]\n    },\n    editorContainerProps: editorContainerProps,\n    handleSideContentHeightChange: useCallback(\n      change => dispatch(changeSideContentHeight(change, workspaceLocation)),\n      [dispatch, workspaceLocation]\n    ),\n    replProps: replProps,\n    sideBarProps: sideBarProps,\n    sideContentProps: {\n      selectedTabId: selectedTab,\n      tabs: {\n        beforeDynamicTabs: tabs,\n        afterDynamicTabs: []\n      },\n      workspaceLocation\n    },\n    sideContentIsResizeable:\n      selectedTab !== SideContentType.substVisualizer && selectedTab !== SideContentType.cseMachine\n  };\n\n  const mobileWorkspaceProps: MobileWorkspaceProps = {\n    editorContainerProps: editorContainerProps,\n    replProps: replProps,\n    sideBarProps: sideBarProps,\n    mobileSideContentProps: {\n      mobileControlBarProps: {\n        editorButtons: [\n          autorunButtons,\n          chapterSelectButton,\n          languageConfig.chapter === Chapter.FULL_JS ? null : shareButton,\n          isSicpEditor ? null : sessionButtons,\n          languageConfig.supports.multiFile ? toggleFolderModeButton : null,\n          persistenceButtons,\n          githubButtons\n        ]\n      },\n      selectedTabId: selectedTab,\n      onChange: setSelectedTab,\n      tabs: {\n        beforeDynamicTabs: mobileTabs,\n        afterDynamicTabs: []\n      },\n      workspaceLocation: workspaceLocation\n    }\n  };\n\n  return isMobileBreakpoint ? (\n    <div className={classNames('Playground', Classes.DARK, isGreen ? 'GreenScreen' : undefined)}>\n      <MobileWorkspace {...mobileWorkspaceProps} />\n    </div>\n  ) : (\n    <HotKeys\n      className={classNames('Playground', Classes.DARK, isGreen ? 'GreenScreen' : undefined)}\n      keyMap={keyMap}\n      handlers={handlers}\n    >\n      <Workspace {...workspaceProps} />\n    </HotKeys>\n  );\n};\n\n// react-router lazy loading\n// https://reactrouter.com/en/main/route/lazy\nexport const Component = Playground;\nComponent.displayName = 'Playground';\n\nexport default Playground;\n"],"names":["parseQuery","query","parsed","qs","key","val","Object","entries","isArray","join","ControlBarExecutionTime","props","_jsx","Tooltip2","content","placement","Position","children","NumericInput","leftIcon","IconNames","style","width","min","value","execTime","onValueChange","handleChangeExecTime","stateToIntent","INACTIVE","Intent","SAVED","DIRTY","ControlBarGoogleDriveButtons","isMobileBreakpoint","useResponsive","state","currentFile","isDirty","mainButton","ControlButton","label","name","icon","options","intent","isDisabled","isFolderModeEnabled","openButton","onClick","onClickOpen","saveButton","onClickSave","saveAsButton","onClickSaveAs","logoutButton","loggedInAs","onClickLogOut","tooltipContent","undefined","disabled","Popover2","autoFocus","_jsxs","ButtonGroup","large","onOpening","onPopoverOpening","popoverClassName","Classes","handleError","error","showWarningMessage","message","ControlBarSessionButtons","React","constructor","super","this","joinElemValue","handleChange","bind","inviteInputElem","selectInviteInputText","render","inviteButtonPopoverContent","_Fragment","editorSessionId","readOnly","ref","CopyToClipboard","text","inviteButton","inheritDarkTheme","handleStartInvite","createNewSession","getEditorValue","then","sessionId","handleSetEditorSessionId","joinButtonPopoverContent","onSubmit","event","preventDefault","checkSessionIdExists","exists","type","onChange","className","joinButton","leaveButton","setState","Menu","iconColor","sharedbConnected","Colors","current","focus","select","target","ControlBarShareButton","selectShareInputText","toggleButton","shareInputElem","keyword","isLoading","shareButtonPopoverContent","queryString","Text","isSicp","defaultValue","shortURL","NonIdealState","description","Spinner","size","SpinnerSize","Constants","placeholder","handleShortenURL","componentDidUpdate","prevProps","handleGenerateLz","handleUpdateShortURL","currentTarget","ControlBarStepLimit","max","stepLimit","stepSize","onBlur","onBlurAutoScale","_props$handleOnBlurAu","handleOnBlurAutoScale","call","Number","handleChangeStepLimit","ControlBarToggleFolderModeButton","isSessionActive","isPersistenceActive","toggleFolderMode","ControlBarGitHubButtons","filePath","githubSaveInfo","fileName","split","pop","isLoggedIn","shouldDisableButtons","hasOpenFile","mainButtonDisplayText","mainButtonIntent","loginButton","onClickLogIn","createNewFile","createNewDirectory","open","rename","remove","menuProps","toggleMenu","useMenuState","anchorPoint","setAnchorPoint","x","y","onContextMenu","e","clientX","clientY","ControlledMenu","menuClassName","classNames","classes","onClose","MenuItem","indentationLevel","indentationStyle","paddingLeft","waitInMsBeforeRender","isRendered","setIsRendered","timeoutId","setTimeout","clearTimeout","workspaceLocation","fileSystem","basePath","isDirectory","isEditing","setIsEditing","refreshDirectory","editedFileName","setEditedFileName","dispatch","useDispatch","handleInputOnBlur","spellCheck","onKeyDown","oldPath","path","newPath","newPathExists","showSimpleErrorDialog","title","contents","err","console","renameEditorTabsForDirectory","renameEditorTabForFile","onFocus","fileExtensionIndex","lastIndexOf","setSelectionRange","processFileName","removePlaceholder","setFileName","directoryName","refreshParentDirectory","fullPath","isExpanded","setIsExpanded","isAddingNewFile","setIsAddingNewFile","isAddingNewDirectory","setIsAddingNewDirectory","fileSystemViewListKey","setFileSystemViewListKey","forceRefreshFileSystemViewList","FileSystemViewContextMenu","handleCreateNewFile","handleCreateNewDirectory","handleRenameDirectory","handleRemoveDirectory","showSimpleConfirmDialog","positiveIntent","positiveLabel","negativeLabel","shouldProceed","removeEditorTabsForDirectory","rmdirRecursively","toggleIsExpanded","FileSystemViewIndentationPadding","Icon","FileSystemViewFileName","FileSystemViewPlaceholderNode","newFilePath","newFilePathExists","writeFile","subdirectoryName","newDirectoryPath","newDirectoryPathExists","mkdir","FileSystemViewList","handleOpenFile","readFile","fileContents","Error","addEditorTab","handleRenameFile","handleRemoveFile","unlink","removeEditorTabForFile","detail","dirNames","setDirNames","fileNames","setFileNames","readDirectory","readdir","async","files","directories","Promise","all","map","resolve","reject","lstat","stats","isFile","push","sort","dirName","FileSystemViewDirectoryNode","FileSystemViewFileNode","Delay","useTypedSelector","inBrowserFileSystem","MAIN_INTRODUCTION","Links","HOTKEYS_INTRODUCTION","generateIntroductionText","sourceChapter","sourceVariant","generateSourceDocsLink","Chapter","sourceDocsLink","Variant","styliseSublanguage","generateLanguageIntroduction","language","chapter","variant","generateSourceIntroduction","keyMap","goGreen","handleHash","hash","handlers","_convertParamToInt","convertParamToInt","chap","showFullJSWarningOnUrlLoad","showFulTSWarningOnUrlLoad","_convertParamToBoolea","_qs$tabs$split$map","_qs$tabs","_convertParamToInt2","showHTMLDisclaimer","program","prgrm","decompressFromEncodedURIComponent","defaultFilePath","getDefaultFilePath","overwriteFilesInWorkspace","setFolderMode","convertParamToBoolean","isFolder","editorTabFilePaths","tabs","WORKSPACE_BASE_PATHS","forEach","_files$filePath","activeEditorTabIndex","tabIdx","updateActiveEditorTabIndex","languageConfig","getLanguageConfig","handleChapterSelect","playgroundConfigLanguage","Math","exec","Playground","isSicpEditor","deviceSecret","setDeviceSecret","useState","location","useLocation","navigate","useNavigate","store","useStore","shouldAddDevice","URLSearchParams","search","get","editorTabs","isEditorAutorun","isRunning","isDebugging","output","replValue","usingSubst","usingCse","context","playgroundSourceChapter","playgroundSourceVariant","workspaces","persistenceFile","playground","courseSourceChapter","courseSourceVariant","googleUser","persistenceUser","githubOctokitObject","session","handleEditorValueChange","handleSetEditorBreakpoints","handleReplEval","handleReplOutputClear","handleUsingSubst","useMemo","changeExecTime","chapterSelect","editorTabIndex","newEditorValue","updateEditorValue","newBreakpoints","setEditorBreakpoint","evalRepl","clearReplOutput","toggleUsingSubst","pathname","replace","lastEdit","setLastEdit","Date","isGreen","setIsGreen","selectedTab","setSelectedTab","useSideContent","SideContentType","hasBreakpoints","setHasBreakpoints","setSessionId","_editorTabs$0$value","_editorTabs$","initSession","editorValue","remoteExecutionTab","makeRemoteExecutionTabFrom","usingRemoteExecution","remoteExecutionSession","externalLibraryName","externalLibrary","useEffect","_editorTabs$0$value2","_editorTabs$2","initialEditorValueHash","desktopOnlyTabIds","mobileOnlyTabIds","onEditorValueChange","pushLog","useCallback","newInput","log","autorunButtonHandlers","handleEditorEval","evalEditor","handleInterruptEval","beginInterruptExecution","handleToggleEditorAutorun","toggleEditorAutorun","handleDebuggerPause","beginDebuggerPause","handleDebuggerReset","debuggerReset","handleDebuggerResume","debuggerResume","autorunButtons","ControlBarAutorunButtons","isEntrypointFileDefined","autorunDisabled","pauseDisabled","isSourceLanguage","chapterSelectHandler","sublanguage","input","time","now","data","chapterSelectButton","ControlBarChapterSelect","clearButton","ControlBarClearButton","evalButton","ControlBarEvalButton","persistenceIsDirty","lastSaved","persistenceButtons","persistenceSaveFileAs","persistenceOpenPicker","persistenceSaveFile","logoutGoogle","persistenceInitialise","githubPersistenceIsDirty","githubButtons","octokit","githubOpenFile","githubSaveFileAs","githubSaveFile","loginGitHub","logoutGitHub","executionTime","stepperStepLimit","limit","changeStepLimit","toggleUpdateCse","getState","sessionButtons","id","setEditorSessionId","shareButton","generateLzString","s","shortenURL","updateShortURL","toggleFolderModeButton","repoName","languageConfigToSet","shouldShowDataVisualizer","supports","dataVisualizer","shouldShowCseMachine","cseMachine","shouldShowSubstVisualizer","substVisualizer","playgroundIntroductionTab","makeIntroductionTabFrom","length","makeHtmlDisplayTabFrom","errorMsg","addHtmlConsoleError","makeDataVisualizerTabFrom","makeCseMachineTabFrom","makeSubstVisualizerTabFrom","mobileTabs","filter","onLoadMethod","editor","addFold","getSession","Range","prependLength","renderer","off","on","onChangeMethod","newCode","delta","setEditorHighlightedLines","onCursorChangeMethod","selection","getCursor","onSelectionChangeMethod","range","getRange","isBackwards","isEqual","start","end","handleEditorUpdateBreakpoints","breakpoints","numberOfBreakpoints","arrayItem","replDisabled","repl","editorContainerHandlers","handleDeclarationNavigate","cursorPosition","navigateToDeclaration","handlePromptAutocomplete","row","col","callback","promptAutocomplete","handleSendReplInputToOutput","code","sendReplInputToOutput","handleSetSharedbConnected","connected","setSharedbConnected","setActiveEditorTabIndex","removeEditorTabByIndex","removeEditorTab","editorContainerProps","editorVariant","baseFilePath","convertEditorTabStateToProps","onCursorChange","onSelectionChange","onLoad","replHandlers","handleBrowseHistoryDown","browseReplHistoryDown","handleBrowseHistoryUp","browseReplHistoryUp","handleReplValueChange","newValue","updateReplValue","replProps","ExternalLibraryName","hidden","inputHidden","replButtons","disableScrolling","sideBarProps","body","FileSystemView","iconName","workspaceProps","controlBarProps","editorButtons","multiFile","handleSideContentHeightChange","change","changeSideContentHeight","sideContentProps","selectedTabId","beforeDynamicTabs","afterDynamicTabs","sideContentIsResizeable","mobileWorkspaceProps","mobileSideContentProps","mobileControlBarProps","MobileWorkspace","HotKeys","Workspace","Component","displayName"],"sourceRoot":""}